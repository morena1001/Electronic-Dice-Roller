
Dice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008844  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  080089d8  080089d8  000099d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e9c  08008e9c  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008e9c  08008e9c  00009e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ea4  08008ea4  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ea4  08008ea4  00009ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008ea8  08008ea8  00009ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008eac  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  200001d4  08009080  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000474  08009080  0000a474  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e013  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bcf  00000000  00000000  00018217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  00019de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009ce  00000000  00000000  0001aa70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c9b6  00000000  00000000  0001b43e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f26a  00000000  00000000  00037df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a791d  00000000  00000000  0004705e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ee97b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049cc  00000000  00000000  000ee9c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000f338c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080089bc 	.word	0x080089bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	080089bc 	.word	0x080089bc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf8:	f000 fc36 	bl	8001568 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cfc:	f000 f81c 	bl	8000d38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d00:	f000 f90a 	bl	8000f18 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d04:	f000 f8d8 	bl	8000eb8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000d08:	f000 f852 	bl	8000db0 <MX_TIM2_Init>
  MX_TIM6_Init();
 8000d0c:	f000 f89e 	bl	8000e4c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000d10:	4807      	ldr	r0, [pc, #28]	@ (8000d30 <main+0x3c>)
 8000d12:	f002 fa1d 	bl	8003150 <HAL_TIM_Base_Start>
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2100      	movs	r1, #0
 8000d1a:	2036      	movs	r0, #54	@ 0x36
 8000d1c:	f000 fd65 	bl	80017ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d20:	2036      	movs	r0, #54	@ 0x36
 8000d22:	f000 fd7e 	bl	8001822 <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT(&htim6);
 8000d26:	4803      	ldr	r0, [pc, #12]	@ (8000d34 <main+0x40>)
 8000d28:	f002 fa5e 	bl	80031e8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <main+0x38>
 8000d30:	200001f0 	.word	0x200001f0
 8000d34:	2000023c 	.word	0x2000023c

08000d38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b090      	sub	sp, #64	@ 0x40
 8000d3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d3e:	f107 0318 	add.w	r3, r7, #24
 8000d42:	2228      	movs	r2, #40	@ 0x28
 8000d44:	2100      	movs	r1, #0
 8000d46:	4618      	mov	r0, r3
 8000d48:	f004 fa5f 	bl	800520a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
 8000d56:	60da      	str	r2, [r3, #12]
 8000d58:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d62:	2310      	movs	r3, #16
 8000d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d66:	2300      	movs	r3, #0
 8000d68:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d6a:	f107 0318 	add.w	r3, r7, #24
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 ff38 	bl	8001be4 <HAL_RCC_OscConfig>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000d7a:	f000 f915 	bl	8000fa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d7e:	230f      	movs	r3, #15
 8000d80:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d82:	2300      	movs	r3, #0
 8000d84:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	2100      	movs	r1, #0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f001 ff62 	bl	8002c60 <HAL_RCC_ClockConfig>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000da2:	f000 f901 	bl	8000fa8 <Error_Handler>
  }
}
 8000da6:	bf00      	nop
 8000da8:	3740      	adds	r7, #64	@ 0x40
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b088      	sub	sp, #32
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000db6:	f107 0310 	add.w	r3, r7, #16
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
 8000dc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dce:	4b1e      	ldr	r3, [pc, #120]	@ (8000e48 <MX_TIM2_Init+0x98>)
 8000dd0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000dd4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000dd6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e48 <MX_TIM2_Init+0x98>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8000e48 <MX_TIM2_Init+0x98>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000de2:	4b19      	ldr	r3, [pc, #100]	@ (8000e48 <MX_TIM2_Init+0x98>)
 8000de4:	f04f 32ff 	mov.w	r2, #4294967295
 8000de8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dea:	4b17      	ldr	r3, [pc, #92]	@ (8000e48 <MX_TIM2_Init+0x98>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df0:	4b15      	ldr	r3, [pc, #84]	@ (8000e48 <MX_TIM2_Init+0x98>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000df6:	4814      	ldr	r0, [pc, #80]	@ (8000e48 <MX_TIM2_Init+0x98>)
 8000df8:	f002 f952 	bl	80030a0 <HAL_TIM_Base_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000e02:	f000 f8d1 	bl	8000fa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e0a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e0c:	f107 0310 	add.w	r3, r7, #16
 8000e10:	4619      	mov	r1, r3
 8000e12:	480d      	ldr	r0, [pc, #52]	@ (8000e48 <MX_TIM2_Init+0x98>)
 8000e14:	f002 fb3e 	bl	8003494 <HAL_TIM_ConfigClockSource>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000e1e:	f000 f8c3 	bl	8000fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e22:	2300      	movs	r3, #0
 8000e24:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4806      	ldr	r0, [pc, #24]	@ (8000e48 <MX_TIM2_Init+0x98>)
 8000e30:	f002 fd40 	bl	80038b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e3a:	f000 f8b5 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e3e:	bf00      	nop
 8000e40:	3720      	adds	r7, #32
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	200001f0 	.word	0x200001f0

08000e4c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000e5c:	4b14      	ldr	r3, [pc, #80]	@ (8000eb0 <MX_TIM6_Init+0x64>)
 8000e5e:	4a15      	ldr	r2, [pc, #84]	@ (8000eb4 <MX_TIM6_Init+0x68>)
 8000e60:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 39;
 8000e62:	4b13      	ldr	r3, [pc, #76]	@ (8000eb0 <MX_TIM6_Init+0x64>)
 8000e64:	2227      	movs	r2, #39	@ 0x27
 8000e66:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e68:	4b11      	ldr	r3, [pc, #68]	@ (8000eb0 <MX_TIM6_Init+0x64>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 799;
 8000e6e:	4b10      	ldr	r3, [pc, #64]	@ (8000eb0 <MX_TIM6_Init+0x64>)
 8000e70:	f240 321f 	movw	r2, #799	@ 0x31f
 8000e74:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e76:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb0 <MX_TIM6_Init+0x64>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000e7c:	480c      	ldr	r0, [pc, #48]	@ (8000eb0 <MX_TIM6_Init+0x64>)
 8000e7e:	f002 f90f 	bl	80030a0 <HAL_TIM_Base_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000e88:	f000 f88e 	bl	8000fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	4619      	mov	r1, r3
 8000e98:	4805      	ldr	r0, [pc, #20]	@ (8000eb0 <MX_TIM6_Init+0x64>)
 8000e9a:	f002 fd0b 	bl	80038b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000ea4:	f000 f880 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000ea8:	bf00      	nop
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	2000023c 	.word	0x2000023c
 8000eb4:	40001000 	.word	0x40001000

08000eb8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ebc:	4b14      	ldr	r3, [pc, #80]	@ (8000f10 <MX_USART2_UART_Init+0x58>)
 8000ebe:	4a15      	ldr	r2, [pc, #84]	@ (8000f14 <MX_USART2_UART_Init+0x5c>)
 8000ec0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000ec2:	4b13      	ldr	r3, [pc, #76]	@ (8000f10 <MX_USART2_UART_Init+0x58>)
 8000ec4:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000ec8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eca:	4b11      	ldr	r3, [pc, #68]	@ (8000f10 <MX_USART2_UART_Init+0x58>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8000f10 <MX_USART2_UART_Init+0x58>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f10 <MX_USART2_UART_Init+0x58>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000edc:	4b0c      	ldr	r3, [pc, #48]	@ (8000f10 <MX_USART2_UART_Init+0x58>)
 8000ede:	220c      	movs	r2, #12
 8000ee0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8000f10 <MX_USART2_UART_Init+0x58>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee8:	4b09      	ldr	r3, [pc, #36]	@ (8000f10 <MX_USART2_UART_Init+0x58>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eee:	4b08      	ldr	r3, [pc, #32]	@ (8000f10 <MX_USART2_UART_Init+0x58>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <MX_USART2_UART_Init+0x58>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000efa:	4805      	ldr	r0, [pc, #20]	@ (8000f10 <MX_USART2_UART_Init+0x58>)
 8000efc:	f002 fd5e 	bl	80039bc <HAL_UART_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f06:	f000 f84f 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000288 	.word	0x20000288
 8000f14:	40004400 	.word	0x40004400

08000f18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa4 <MX_GPIO_Init+0x8c>)
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	4a1c      	ldr	r2, [pc, #112]	@ (8000fa4 <MX_GPIO_Init+0x8c>)
 8000f32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f36:	6153      	str	r3, [r2, #20]
 8000f38:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa4 <MX_GPIO_Init+0x8c>)
 8000f3a:	695b      	ldr	r3, [r3, #20]
 8000f3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f40:	603b      	str	r3, [r7, #0]
 8000f42:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TL_Pin|ML_Pin|BL_Pin|MC_Pin
 8000f44:	2200      	movs	r2, #0
 8000f46:	f240 31f2 	movw	r1, #1010	@ 0x3f2
 8000f4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f4e:	f000 fe0d 	bl	8001b6c <HAL_GPIO_WritePin>
                          |BR_Pin|MR_Pin|TR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : TL_Pin ML_Pin BL_Pin MC_Pin
                           BR_Pin MR_Pin TR_Pin */
  GPIO_InitStruct.Pin = TL_Pin|ML_Pin|BL_Pin|MC_Pin
 8000f52:	f240 33f2 	movw	r3, #1010	@ 0x3f2
 8000f56:	607b      	str	r3, [r7, #4]
                          |BR_Pin|MR_Pin|TR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f60:	2300      	movs	r3, #0
 8000f62:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f64:	1d3b      	adds	r3, r7, #4
 8000f66:	4619      	mov	r1, r3
 8000f68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f6c:	f000 fc74 	bl	8001858 <HAL_GPIO_Init>

  /*Configure GPIO pin : Roll_Pin */
  GPIO_InitStruct.Pin = Roll_Pin;
 8000f70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f74:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f76:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(Roll_GPIO_Port, &GPIO_InitStruct);
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	4619      	mov	r1, r3
 8000f84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f88:	f000 fc66 	bl	8001858 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2100      	movs	r1, #0
 8000f90:	2028      	movs	r0, #40	@ 0x28
 8000f92:	f000 fc2a 	bl	80017ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f96:	2028      	movs	r0, #40	@ 0x28
 8000f98:	f000 fc43 	bl	8001822 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f9c:	bf00      	nop
 8000f9e:	3718      	adds	r7, #24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40021000 	.word	0x40021000

08000fa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fac:	b672      	cpsid	i
}
 8000fae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <Error_Handler+0x8>

08000fb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fba:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <HAL_MspInit+0x44>)
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	4a0e      	ldr	r2, [pc, #56]	@ (8000ff8 <HAL_MspInit+0x44>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	6193      	str	r3, [r2, #24]
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff8 <HAL_MspInit+0x44>)
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd2:	4b09      	ldr	r3, [pc, #36]	@ (8000ff8 <HAL_MspInit+0x44>)
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	4a08      	ldr	r2, [pc, #32]	@ (8000ff8 <HAL_MspInit+0x44>)
 8000fd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fdc:	61d3      	str	r3, [r2, #28]
 8000fde:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <HAL_MspInit+0x44>)
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fe6:	603b      	str	r3, [r7, #0]
 8000fe8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	40021000 	.word	0x40021000

08000ffc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800100c:	d10c      	bne.n	8001028 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800100e:	4b15      	ldr	r3, [pc, #84]	@ (8001064 <HAL_TIM_Base_MspInit+0x68>)
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	4a14      	ldr	r2, [pc, #80]	@ (8001064 <HAL_TIM_Base_MspInit+0x68>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	61d3      	str	r3, [r2, #28]
 800101a:	4b12      	ldr	r3, [pc, #72]	@ (8001064 <HAL_TIM_Base_MspInit+0x68>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001026:	e018      	b.n	800105a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM6)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0e      	ldr	r2, [pc, #56]	@ (8001068 <HAL_TIM_Base_MspInit+0x6c>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d113      	bne.n	800105a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001032:	4b0c      	ldr	r3, [pc, #48]	@ (8001064 <HAL_TIM_Base_MspInit+0x68>)
 8001034:	69db      	ldr	r3, [r3, #28]
 8001036:	4a0b      	ldr	r2, [pc, #44]	@ (8001064 <HAL_TIM_Base_MspInit+0x68>)
 8001038:	f043 0310 	orr.w	r3, r3, #16
 800103c:	61d3      	str	r3, [r2, #28]
 800103e:	4b09      	ldr	r3, [pc, #36]	@ (8001064 <HAL_TIM_Base_MspInit+0x68>)
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	f003 0310 	and.w	r3, r3, #16
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	2100      	movs	r1, #0
 800104e:	2036      	movs	r0, #54	@ 0x36
 8001050:	f000 fbcb 	bl	80017ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001054:	2036      	movs	r0, #54	@ 0x36
 8001056:	f000 fbe4 	bl	8001822 <HAL_NVIC_EnableIRQ>
}
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40021000 	.word	0x40021000
 8001068:	40001000 	.word	0x40001000

0800106c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08a      	sub	sp, #40	@ 0x28
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a17      	ldr	r2, [pc, #92]	@ (80010e8 <HAL_UART_MspInit+0x7c>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d128      	bne.n	80010e0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800108e:	4b17      	ldr	r3, [pc, #92]	@ (80010ec <HAL_UART_MspInit+0x80>)
 8001090:	69db      	ldr	r3, [r3, #28]
 8001092:	4a16      	ldr	r2, [pc, #88]	@ (80010ec <HAL_UART_MspInit+0x80>)
 8001094:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001098:	61d3      	str	r3, [r2, #28]
 800109a:	4b14      	ldr	r3, [pc, #80]	@ (80010ec <HAL_UART_MspInit+0x80>)
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a6:	4b11      	ldr	r3, [pc, #68]	@ (80010ec <HAL_UART_MspInit+0x80>)
 80010a8:	695b      	ldr	r3, [r3, #20]
 80010aa:	4a10      	ldr	r2, [pc, #64]	@ (80010ec <HAL_UART_MspInit+0x80>)
 80010ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010b0:	6153      	str	r3, [r2, #20]
 80010b2:	4b0e      	ldr	r3, [pc, #56]	@ (80010ec <HAL_UART_MspInit+0x80>)
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010be:	230c      	movs	r3, #12
 80010c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ca:	2303      	movs	r3, #3
 80010cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010ce:	2307      	movs	r3, #7
 80010d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	4619      	mov	r1, r3
 80010d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010dc:	f000 fbbc 	bl	8001858 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010e0:	bf00      	nop
 80010e2:	3728      	adds	r7, #40	@ 0x28
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40004400 	.word	0x40004400
 80010ec:	40021000 	.word	0x40021000

080010f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <NMI_Handler+0x4>

080010f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <HardFault_Handler+0x4>

08001100 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <MemManage_Handler+0x4>

08001108 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <BusFault_Handler+0x4>

08001110 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <UsageFault_Handler+0x4>

08001118 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001146:	f000 fa55 	bl	80015f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}

0800114e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Roll_Pin);
 8001152:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001156:	f000 fd21 	bl	8001b9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	if (!HAL_GPIO_ReadPin(Roll_GPIO_Port, Roll_Pin)) {
 8001164:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001168:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800116c:	f000 fce6 	bl	8001b3c <HAL_GPIO_ReadPin>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d172      	bne.n	800125c <TIM6_DAC_IRQHandler+0xfc>
		if (!toggle) {
 8001176:	4b3d      	ldr	r3, [pc, #244]	@ (800126c <TIM6_DAC_IRQHandler+0x10c>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	f083 0301 	eor.w	r3, r3, #1
 800117e:	b2db      	uxtb	r3, r3
 8001180:	2b00      	cmp	r3, #0
 8001182:	d06e      	beq.n	8001262 <TIM6_DAC_IRQHandler+0x102>
			toggle = true;
 8001184:	4b39      	ldr	r3, [pc, #228]	@ (800126c <TIM6_DAC_IRQHandler+0x10c>)
 8001186:	2201      	movs	r2, #1
 8001188:	701a      	strb	r2, [r3, #0]

			srand(__HAL_TIM_GET_COUNTER(&htim2));
 800118a:	4b39      	ldr	r3, [pc, #228]	@ (8001270 <TIM6_DAC_IRQHandler+0x110>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001190:	4618      	mov	r0, r3
 8001192:	f003 f83d 	bl	8004210 <srand>
			generated_number = (rand() % 6) + 1;
 8001196:	f003 f869 	bl	800426c <rand>
 800119a:	4602      	mov	r2, r0
 800119c:	4b35      	ldr	r3, [pc, #212]	@ (8001274 <TIM6_DAC_IRQHandler+0x114>)
 800119e:	fb83 3102 	smull	r3, r1, r3, r2
 80011a2:	17d3      	asrs	r3, r2, #31
 80011a4:	1ac9      	subs	r1, r1, r3
 80011a6:	460b      	mov	r3, r1
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	440b      	add	r3, r1
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	1ad1      	subs	r1, r2, r3
 80011b0:	b2cb      	uxtb	r3, r1
 80011b2:	3301      	adds	r3, #1
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	4b30      	ldr	r3, [pc, #192]	@ (8001278 <TIM6_DAC_IRQHandler+0x118>)
 80011b8:	701a      	strb	r2, [r3, #0]

			while (generated_number == previous_generated_number) {
 80011ba:	e011      	b.n	80011e0 <TIM6_DAC_IRQHandler+0x80>
				generated_number = (rand() % 6) + 1;
 80011bc:	f003 f856 	bl	800426c <rand>
 80011c0:	4602      	mov	r2, r0
 80011c2:	4b2c      	ldr	r3, [pc, #176]	@ (8001274 <TIM6_DAC_IRQHandler+0x114>)
 80011c4:	fb83 3102 	smull	r3, r1, r3, r2
 80011c8:	17d3      	asrs	r3, r2, #31
 80011ca:	1ac9      	subs	r1, r1, r3
 80011cc:	460b      	mov	r3, r1
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	440b      	add	r3, r1
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	1ad1      	subs	r1, r2, r3
 80011d6:	b2cb      	uxtb	r3, r1
 80011d8:	3301      	adds	r3, #1
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	4b26      	ldr	r3, [pc, #152]	@ (8001278 <TIM6_DAC_IRQHandler+0x118>)
 80011de:	701a      	strb	r2, [r3, #0]
			while (generated_number == previous_generated_number) {
 80011e0:	4b25      	ldr	r3, [pc, #148]	@ (8001278 <TIM6_DAC_IRQHandler+0x118>)
 80011e2:	781a      	ldrb	r2, [r3, #0]
 80011e4:	4b25      	ldr	r3, [pc, #148]	@ (800127c <TIM6_DAC_IRQHandler+0x11c>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d0e7      	beq.n	80011bc <TIM6_DAC_IRQHandler+0x5c>
			}

			sprintf(msg, "%d\r\n", generated_number);
 80011ec:	4b22      	ldr	r3, [pc, #136]	@ (8001278 <TIM6_DAC_IRQHandler+0x118>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	461a      	mov	r2, r3
 80011f2:	4923      	ldr	r1, [pc, #140]	@ (8001280 <TIM6_DAC_IRQHandler+0x120>)
 80011f4:	4823      	ldr	r0, [pc, #140]	@ (8001284 <TIM6_DAC_IRQHandler+0x124>)
 80011f6:	f003 ffa5 	bl	8005144 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, 3, 100);
 80011fa:	2364      	movs	r3, #100	@ 0x64
 80011fc:	2203      	movs	r2, #3
 80011fe:	4921      	ldr	r1, [pc, #132]	@ (8001284 <TIM6_DAC_IRQHandler+0x124>)
 8001200:	4821      	ldr	r0, [pc, #132]	@ (8001288 <TIM6_DAC_IRQHandler+0x128>)
 8001202:	f002 fc29 	bl	8003a58 <HAL_UART_Transmit>
			previous_generated_number = generated_number;
 8001206:	4b1c      	ldr	r3, [pc, #112]	@ (8001278 <TIM6_DAC_IRQHandler+0x118>)
 8001208:	781a      	ldrb	r2, [r3, #0]
 800120a:	4b1c      	ldr	r3, [pc, #112]	@ (800127c <TIM6_DAC_IRQHandler+0x11c>)
 800120c:	701a      	strb	r2, [r3, #0]

			switch(generated_number) {
 800120e:	4b1a      	ldr	r3, [pc, #104]	@ (8001278 <TIM6_DAC_IRQHandler+0x118>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	3b01      	subs	r3, #1
 8001214:	2b05      	cmp	r3, #5
 8001216:	d824      	bhi.n	8001262 <TIM6_DAC_IRQHandler+0x102>
 8001218:	a201      	add	r2, pc, #4	@ (adr r2, 8001220 <TIM6_DAC_IRQHandler+0xc0>)
 800121a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800121e:	bf00      	nop
 8001220:	08001239 	.word	0x08001239
 8001224:	0800123f 	.word	0x0800123f
 8001228:	08001245 	.word	0x08001245
 800122c:	0800124b 	.word	0x0800124b
 8001230:	08001251 	.word	0x08001251
 8001234:	08001257 	.word	0x08001257
			case 1:
				NumberOne();
 8001238:	f000 f82a 	bl	8001290 <NumberOne>
				break;
 800123c:	e011      	b.n	8001262 <TIM6_DAC_IRQHandler+0x102>
			case 2:
				NumberTwo();
 800123e:	f000 f838 	bl	80012b2 <NumberTwo>
				break;
 8001242:	e00e      	b.n	8001262 <TIM6_DAC_IRQHandler+0x102>
			case 3:
				NumberThree();
 8001244:	f000 f847 	bl	80012d6 <NumberThree>
				break;
 8001248:	e00b      	b.n	8001262 <TIM6_DAC_IRQHandler+0x102>
			case 4:
				NumberFour();
 800124a:	f000 f856 	bl	80012fa <NumberFour>
				break;
 800124e:	e008      	b.n	8001262 <TIM6_DAC_IRQHandler+0x102>
			case 5:
				NumberFive();
 8001250:	f000 f865 	bl	800131e <NumberFive>
				break;
 8001254:	e005      	b.n	8001262 <TIM6_DAC_IRQHandler+0x102>
			case 6:
				NumberSix();
 8001256:	f000 f874 	bl	8001342 <NumberSix>
				break;
 800125a:	e002      	b.n	8001262 <TIM6_DAC_IRQHandler+0x102>
			}
		}
	} else {
		toggle = false;
 800125c:	4b03      	ldr	r3, [pc, #12]	@ (800126c <TIM6_DAC_IRQHandler+0x10c>)
 800125e:	2200      	movs	r2, #0
 8001260:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001262:	480a      	ldr	r0, [pc, #40]	@ (800128c <TIM6_DAC_IRQHandler+0x12c>)
 8001264:	f002 f814 	bl	8003290 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	2000031a 	.word	0x2000031a
 8001270:	200001f0 	.word	0x200001f0
 8001274:	2aaaaaab 	.word	0x2aaaaaab
 8001278:	2000031b 	.word	0x2000031b
 800127c:	2000031c 	.word	0x2000031c
 8001280:	080089d8 	.word	0x080089d8
 8001284:	20000310 	.word	0x20000310
 8001288:	20000288 	.word	0x20000288
 800128c:	2000023c 	.word	0x2000023c

08001290 <NumberOne>:

/* USER CODE BEGIN 1 */
static void NumberOne(void) {
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, TL_Pin | ML_Pin | BL_Pin | TR_Pin | MR_Pin | BR_Pin, GPIO_PIN_RESET);
 8001294:	2200      	movs	r2, #0
 8001296:	f240 31b2 	movw	r1, #946	@ 0x3b2
 800129a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800129e:	f000 fc65 	bl	8001b6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, MC_Pin, GPIO_PIN_SET);
 80012a2:	2201      	movs	r2, #1
 80012a4:	2140      	movs	r1, #64	@ 0x40
 80012a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012aa:	f000 fc5f 	bl	8001b6c <HAL_GPIO_WritePin>
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <NumberTwo>:

static void NumberTwo(void) {
 80012b2:	b580      	push	{r7, lr}
 80012b4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, TL_Pin | ML_Pin | MC_Pin | MR_Pin | BR_Pin, GPIO_PIN_RESET);
 80012b6:	2200      	movs	r2, #0
 80012b8:	f44f 71e9 	mov.w	r1, #466	@ 0x1d2
 80012bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012c0:	f000 fc54 	bl	8001b6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BL_Pin | TR_Pin, GPIO_PIN_SET);
 80012c4:	2201      	movs	r2, #1
 80012c6:	f44f 7108 	mov.w	r1, #544	@ 0x220
 80012ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012ce:	f000 fc4d 	bl	8001b6c <HAL_GPIO_WritePin>
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <NumberThree>:

static void NumberThree(void) {
 80012d6:	b580      	push	{r7, lr}
 80012d8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, TL_Pin | ML_Pin | MR_Pin | BR_Pin, GPIO_PIN_RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	f44f 71c9 	mov.w	r1, #402	@ 0x192
 80012e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012e4:	f000 fc42 	bl	8001b6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BL_Pin | MC_Pin | TR_Pin, GPIO_PIN_SET);
 80012e8:	2201      	movs	r2, #1
 80012ea:	f44f 7118 	mov.w	r1, #608	@ 0x260
 80012ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012f2:	f000 fc3b 	bl	8001b6c <HAL_GPIO_WritePin>
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}

080012fa <NumberFour>:

static void NumberFour(void) {
 80012fa:	b580      	push	{r7, lr}
 80012fc:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, ML_Pin | MC_Pin | MR_Pin, GPIO_PIN_RESET);
 80012fe:	2200      	movs	r2, #0
 8001300:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8001304:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001308:	f000 fc30 	bl	8001b6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, TL_Pin | BL_Pin | TR_Pin | BR_Pin, GPIO_PIN_SET);
 800130c:	2201      	movs	r2, #1
 800130e:	f240 21a2 	movw	r1, #674	@ 0x2a2
 8001312:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001316:	f000 fc29 	bl	8001b6c <HAL_GPIO_WritePin>
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}

0800131e <NumberFive>:

static void NumberFive(void) {
 800131e:	b580      	push	{r7, lr}
 8001320:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, ML_Pin | MR_Pin, GPIO_PIN_RESET);
 8001322:	2200      	movs	r2, #0
 8001324:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8001328:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800132c:	f000 fc1e 	bl	8001b6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, TL_Pin | BL_Pin | MC_Pin | TR_Pin | BR_Pin, GPIO_PIN_SET);
 8001330:	2201      	movs	r2, #1
 8001332:	f240 21e2 	movw	r1, #738	@ 0x2e2
 8001336:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800133a:	f000 fc17 	bl	8001b6c <HAL_GPIO_WritePin>
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}

08001342 <NumberSix>:

static void NumberSix(void) {
 8001342:	b580      	push	{r7, lr}
 8001344:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, MC_Pin, GPIO_PIN_RESET);
 8001346:	2200      	movs	r2, #0
 8001348:	2140      	movs	r1, #64	@ 0x40
 800134a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800134e:	f000 fc0d 	bl	8001b6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, TL_Pin | ML_Pin | BL_Pin | TR_Pin | MR_Pin | BR_Pin, GPIO_PIN_SET);
 8001352:	2201      	movs	r2, #1
 8001354:	f240 31b2 	movw	r1, #946	@ 0x3b2
 8001358:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800135c:	f000 fc06 	bl	8001b6c <HAL_GPIO_WritePin>
}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}

08001364 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return 1;
 8001368:	2301      	movs	r3, #1
}
 800136a:	4618      	mov	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <_kill>:

int _kill(int pid, int sig)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800137e:	f003 ff97 	bl	80052b0 <__errno>
 8001382:	4603      	mov	r3, r0
 8001384:	2216      	movs	r2, #22
 8001386:	601a      	str	r2, [r3, #0]
  return -1;
 8001388:	f04f 33ff 	mov.w	r3, #4294967295
}
 800138c:	4618      	mov	r0, r3
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <_exit>:

void _exit (int status)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800139c:	f04f 31ff 	mov.w	r1, #4294967295
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff ffe7 	bl	8001374 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013a6:	bf00      	nop
 80013a8:	e7fd      	b.n	80013a6 <_exit+0x12>

080013aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b086      	sub	sp, #24
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	60f8      	str	r0, [r7, #12]
 80013b2:	60b9      	str	r1, [r7, #8]
 80013b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
 80013ba:	e00a      	b.n	80013d2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013bc:	f3af 8000 	nop.w
 80013c0:	4601      	mov	r1, r0
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	1c5a      	adds	r2, r3, #1
 80013c6:	60ba      	str	r2, [r7, #8]
 80013c8:	b2ca      	uxtb	r2, r1
 80013ca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	3301      	adds	r3, #1
 80013d0:	617b      	str	r3, [r7, #20]
 80013d2:	697a      	ldr	r2, [r7, #20]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	dbf0      	blt.n	80013bc <_read+0x12>
  }

  return len;
 80013da:	687b      	ldr	r3, [r7, #4]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3718      	adds	r7, #24
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
 80013f4:	e009      	b.n	800140a <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	1c5a      	adds	r2, r3, #1
 80013fa:	60ba      	str	r2, [r7, #8]
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	3301      	adds	r3, #1
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	429a      	cmp	r2, r3
 8001410:	dbf1      	blt.n	80013f6 <_write+0x12>
  }
  return len;
 8001412:	687b      	ldr	r3, [r7, #4]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3718      	adds	r7, #24
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <_close>:

int _close(int file)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001424:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001428:	4618      	mov	r0, r3
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001444:	605a      	str	r2, [r3, #4]
  return 0;
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <_isatty>:

int _isatty(int file)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800145c:	2301      	movs	r3, #1
}
 800145e:	4618      	mov	r0, r3
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800146a:	b480      	push	{r7}
 800146c:	b085      	sub	sp, #20
 800146e:	af00      	add	r7, sp, #0
 8001470:	60f8      	str	r0, [r7, #12]
 8001472:	60b9      	str	r1, [r7, #8]
 8001474:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800148c:	4a14      	ldr	r2, [pc, #80]	@ (80014e0 <_sbrk+0x5c>)
 800148e:	4b15      	ldr	r3, [pc, #84]	@ (80014e4 <_sbrk+0x60>)
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001498:	4b13      	ldr	r3, [pc, #76]	@ (80014e8 <_sbrk+0x64>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d102      	bne.n	80014a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014a0:	4b11      	ldr	r3, [pc, #68]	@ (80014e8 <_sbrk+0x64>)
 80014a2:	4a12      	ldr	r2, [pc, #72]	@ (80014ec <_sbrk+0x68>)
 80014a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014a6:	4b10      	ldr	r3, [pc, #64]	@ (80014e8 <_sbrk+0x64>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4413      	add	r3, r2
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d207      	bcs.n	80014c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014b4:	f003 fefc 	bl	80052b0 <__errno>
 80014b8:	4603      	mov	r3, r0
 80014ba:	220c      	movs	r2, #12
 80014bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014be:	f04f 33ff 	mov.w	r3, #4294967295
 80014c2:	e009      	b.n	80014d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014c4:	4b08      	ldr	r3, [pc, #32]	@ (80014e8 <_sbrk+0x64>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ca:	4b07      	ldr	r3, [pc, #28]	@ (80014e8 <_sbrk+0x64>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	4a05      	ldr	r2, [pc, #20]	@ (80014e8 <_sbrk+0x64>)
 80014d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014d6:	68fb      	ldr	r3, [r7, #12]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20004000 	.word	0x20004000
 80014e4:	00000400 	.word	0x00000400
 80014e8:	20000320 	.word	0x20000320
 80014ec:	20000478 	.word	0x20000478

080014f0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014f4:	4b06      	ldr	r3, [pc, #24]	@ (8001510 <SystemInit+0x20>)
 80014f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014fa:	4a05      	ldr	r2, [pc, #20]	@ (8001510 <SystemInit+0x20>)
 80014fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001500:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001514:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800154c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001518:	f7ff ffea 	bl	80014f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800151c:	480c      	ldr	r0, [pc, #48]	@ (8001550 <LoopForever+0x6>)
  ldr r1, =_edata
 800151e:	490d      	ldr	r1, [pc, #52]	@ (8001554 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001520:	4a0d      	ldr	r2, [pc, #52]	@ (8001558 <LoopForever+0xe>)
  movs r3, #0
 8001522:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001524:	e002      	b.n	800152c <LoopCopyDataInit>

08001526 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001526:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001528:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800152a:	3304      	adds	r3, #4

0800152c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800152c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800152e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001530:	d3f9      	bcc.n	8001526 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001532:	4a0a      	ldr	r2, [pc, #40]	@ (800155c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001534:	4c0a      	ldr	r4, [pc, #40]	@ (8001560 <LoopForever+0x16>)
  movs r3, #0
 8001536:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001538:	e001      	b.n	800153e <LoopFillZerobss>

0800153a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800153a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800153c:	3204      	adds	r2, #4

0800153e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800153e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001540:	d3fb      	bcc.n	800153a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001542:	f003 febb 	bl	80052bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001546:	f7ff fbd5 	bl	8000cf4 <main>

0800154a <LoopForever>:

LoopForever:
    b LoopForever
 800154a:	e7fe      	b.n	800154a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800154c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001554:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001558:	08008eac 	.word	0x08008eac
  ldr r2, =_sbss
 800155c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001560:	20000474 	.word	0x20000474

08001564 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001564:	e7fe      	b.n	8001564 <ADC1_IRQHandler>
	...

08001568 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800156c:	4b08      	ldr	r3, [pc, #32]	@ (8001590 <HAL_Init+0x28>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a07      	ldr	r2, [pc, #28]	@ (8001590 <HAL_Init+0x28>)
 8001572:	f043 0310 	orr.w	r3, r3, #16
 8001576:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001578:	2003      	movs	r0, #3
 800157a:	f000 f92b 	bl	80017d4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800157e:	200f      	movs	r0, #15
 8001580:	f000 f808 	bl	8001594 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001584:	f7ff fd16 	bl	8000fb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40022000 	.word	0x40022000

08001594 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800159c:	4b12      	ldr	r3, [pc, #72]	@ (80015e8 <HAL_InitTick+0x54>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	4b12      	ldr	r3, [pc, #72]	@ (80015ec <HAL_InitTick+0x58>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	4619      	mov	r1, r3
 80015a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 f943 	bl	800183e <HAL_SYSTICK_Config>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e00e      	b.n	80015e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2b0f      	cmp	r3, #15
 80015c6:	d80a      	bhi.n	80015de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c8:	2200      	movs	r2, #0
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	f04f 30ff 	mov.w	r0, #4294967295
 80015d0:	f000 f90b 	bl	80017ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d4:	4a06      	ldr	r2, [pc, #24]	@ (80015f0 <HAL_InitTick+0x5c>)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80015da:	2300      	movs	r3, #0
 80015dc:	e000      	b.n	80015e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000000 	.word	0x20000000
 80015ec:	20000008 	.word	0x20000008
 80015f0:	20000004 	.word	0x20000004

080015f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f8:	4b06      	ldr	r3, [pc, #24]	@ (8001614 <HAL_IncTick+0x20>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	461a      	mov	r2, r3
 80015fe:	4b06      	ldr	r3, [pc, #24]	@ (8001618 <HAL_IncTick+0x24>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4413      	add	r3, r2
 8001604:	4a04      	ldr	r2, [pc, #16]	@ (8001618 <HAL_IncTick+0x24>)
 8001606:	6013      	str	r3, [r2, #0]
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	20000008 	.word	0x20000008
 8001618:	20000324 	.word	0x20000324

0800161c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001620:	4b03      	ldr	r3, [pc, #12]	@ (8001630 <HAL_GetTick+0x14>)
 8001622:	681b      	ldr	r3, [r3, #0]
}
 8001624:	4618      	mov	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	20000324 	.word	0x20000324

08001634 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001644:	4b0c      	ldr	r3, [pc, #48]	@ (8001678 <__NVIC_SetPriorityGrouping+0x44>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800164a:	68ba      	ldr	r2, [r7, #8]
 800164c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001650:	4013      	ands	r3, r2
 8001652:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800165c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001660:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001666:	4a04      	ldr	r2, [pc, #16]	@ (8001678 <__NVIC_SetPriorityGrouping+0x44>)
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	60d3      	str	r3, [r2, #12]
}
 800166c:	bf00      	nop
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001680:	4b04      	ldr	r3, [pc, #16]	@ (8001694 <__NVIC_GetPriorityGrouping+0x18>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	0a1b      	lsrs	r3, r3, #8
 8001686:	f003 0307 	and.w	r3, r3, #7
}
 800168a:	4618      	mov	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	db0b      	blt.n	80016c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	f003 021f 	and.w	r2, r3, #31
 80016b0:	4907      	ldr	r1, [pc, #28]	@ (80016d0 <__NVIC_EnableIRQ+0x38>)
 80016b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b6:	095b      	lsrs	r3, r3, #5
 80016b8:	2001      	movs	r0, #1
 80016ba:	fa00 f202 	lsl.w	r2, r0, r2
 80016be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	e000e100 	.word	0xe000e100

080016d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	6039      	str	r1, [r7, #0]
 80016de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	db0a      	blt.n	80016fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	490c      	ldr	r1, [pc, #48]	@ (8001720 <__NVIC_SetPriority+0x4c>)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	0112      	lsls	r2, r2, #4
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	440b      	add	r3, r1
 80016f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016fc:	e00a      	b.n	8001714 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	b2da      	uxtb	r2, r3
 8001702:	4908      	ldr	r1, [pc, #32]	@ (8001724 <__NVIC_SetPriority+0x50>)
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	3b04      	subs	r3, #4
 800170c:	0112      	lsls	r2, r2, #4
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	440b      	add	r3, r1
 8001712:	761a      	strb	r2, [r3, #24]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000e100 	.word	0xe000e100
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001728:	b480      	push	{r7}
 800172a:	b089      	sub	sp, #36	@ 0x24
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	f1c3 0307 	rsb	r3, r3, #7
 8001742:	2b04      	cmp	r3, #4
 8001744:	bf28      	it	cs
 8001746:	2304      	movcs	r3, #4
 8001748:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	3304      	adds	r3, #4
 800174e:	2b06      	cmp	r3, #6
 8001750:	d902      	bls.n	8001758 <NVIC_EncodePriority+0x30>
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	3b03      	subs	r3, #3
 8001756:	e000      	b.n	800175a <NVIC_EncodePriority+0x32>
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800175c:	f04f 32ff 	mov.w	r2, #4294967295
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43da      	mvns	r2, r3
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	401a      	ands	r2, r3
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001770:	f04f 31ff 	mov.w	r1, #4294967295
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	fa01 f303 	lsl.w	r3, r1, r3
 800177a:	43d9      	mvns	r1, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001780:	4313      	orrs	r3, r2
         );
}
 8001782:	4618      	mov	r0, r3
 8001784:	3724      	adds	r7, #36	@ 0x24
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
	...

08001790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3b01      	subs	r3, #1
 800179c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017a0:	d301      	bcc.n	80017a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017a2:	2301      	movs	r3, #1
 80017a4:	e00f      	b.n	80017c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a6:	4a0a      	ldr	r2, [pc, #40]	@ (80017d0 <SysTick_Config+0x40>)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ae:	210f      	movs	r1, #15
 80017b0:	f04f 30ff 	mov.w	r0, #4294967295
 80017b4:	f7ff ff8e 	bl	80016d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b8:	4b05      	ldr	r3, [pc, #20]	@ (80017d0 <SysTick_Config+0x40>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017be:	4b04      	ldr	r3, [pc, #16]	@ (80017d0 <SysTick_Config+0x40>)
 80017c0:	2207      	movs	r2, #7
 80017c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	e000e010 	.word	0xe000e010

080017d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff ff29 	bl	8001634 <__NVIC_SetPriorityGrouping>
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b086      	sub	sp, #24
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	4603      	mov	r3, r0
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
 80017f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017fc:	f7ff ff3e 	bl	800167c <__NVIC_GetPriorityGrouping>
 8001800:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	68b9      	ldr	r1, [r7, #8]
 8001806:	6978      	ldr	r0, [r7, #20]
 8001808:	f7ff ff8e 	bl	8001728 <NVIC_EncodePriority>
 800180c:	4602      	mov	r2, r0
 800180e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001812:	4611      	mov	r1, r2
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ff5d 	bl	80016d4 <__NVIC_SetPriority>
}
 800181a:	bf00      	nop
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	4603      	mov	r3, r0
 800182a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800182c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ff31 	bl	8001698 <__NVIC_EnableIRQ>
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff ffa2 	bl	8001790 <SysTick_Config>
 800184c:	4603      	mov	r3, r0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001858:	b480      	push	{r7}
 800185a:	b087      	sub	sp, #28
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001866:	e14e      	b.n	8001b06 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	2101      	movs	r1, #1
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	fa01 f303 	lsl.w	r3, r1, r3
 8001874:	4013      	ands	r3, r2
 8001876:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2b00      	cmp	r3, #0
 800187c:	f000 8140 	beq.w	8001b00 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 0303 	and.w	r3, r3, #3
 8001888:	2b01      	cmp	r3, #1
 800188a:	d005      	beq.n	8001898 <HAL_GPIO_Init+0x40>
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 0303 	and.w	r3, r3, #3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d130      	bne.n	80018fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	2203      	movs	r2, #3
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43db      	mvns	r3, r3
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	4013      	ands	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	68da      	ldr	r2, [r3, #12]
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	4313      	orrs	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018ce:	2201      	movs	r2, #1
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43db      	mvns	r3, r3
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4013      	ands	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	091b      	lsrs	r3, r3, #4
 80018e4:	f003 0201 	and.w	r2, r3, #1
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f003 0303 	and.w	r3, r3, #3
 8001902:	2b03      	cmp	r3, #3
 8001904:	d017      	beq.n	8001936 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	2203      	movs	r2, #3
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4013      	ands	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	689a      	ldr	r2, [r3, #8]
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	4313      	orrs	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d123      	bne.n	800198a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	08da      	lsrs	r2, r3, #3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	3208      	adds	r2, #8
 800194a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800194e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	220f      	movs	r2, #15
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43db      	mvns	r3, r3
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	4013      	ands	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	691a      	ldr	r2, [r3, #16]
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4313      	orrs	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	08da      	lsrs	r2, r3, #3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3208      	adds	r2, #8
 8001984:	6939      	ldr	r1, [r7, #16]
 8001986:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	2203      	movs	r2, #3
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43db      	mvns	r3, r3
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	4013      	ands	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f003 0203 	and.w	r2, r3, #3
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f000 809a 	beq.w	8001b00 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019cc:	4b55      	ldr	r3, [pc, #340]	@ (8001b24 <HAL_GPIO_Init+0x2cc>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	4a54      	ldr	r2, [pc, #336]	@ (8001b24 <HAL_GPIO_Init+0x2cc>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	6193      	str	r3, [r2, #24]
 80019d8:	4b52      	ldr	r3, [pc, #328]	@ (8001b24 <HAL_GPIO_Init+0x2cc>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019e4:	4a50      	ldr	r2, [pc, #320]	@ (8001b28 <HAL_GPIO_Init+0x2d0>)
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	089b      	lsrs	r3, r3, #2
 80019ea:	3302      	adds	r3, #2
 80019ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	f003 0303 	and.w	r3, r3, #3
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	220f      	movs	r2, #15
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	4013      	ands	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001a0e:	d013      	beq.n	8001a38 <HAL_GPIO_Init+0x1e0>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a46      	ldr	r2, [pc, #280]	@ (8001b2c <HAL_GPIO_Init+0x2d4>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d00d      	beq.n	8001a34 <HAL_GPIO_Init+0x1dc>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a45      	ldr	r2, [pc, #276]	@ (8001b30 <HAL_GPIO_Init+0x2d8>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d007      	beq.n	8001a30 <HAL_GPIO_Init+0x1d8>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a44      	ldr	r2, [pc, #272]	@ (8001b34 <HAL_GPIO_Init+0x2dc>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d101      	bne.n	8001a2c <HAL_GPIO_Init+0x1d4>
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e006      	b.n	8001a3a <HAL_GPIO_Init+0x1e2>
 8001a2c:	2305      	movs	r3, #5
 8001a2e:	e004      	b.n	8001a3a <HAL_GPIO_Init+0x1e2>
 8001a30:	2302      	movs	r3, #2
 8001a32:	e002      	b.n	8001a3a <HAL_GPIO_Init+0x1e2>
 8001a34:	2301      	movs	r3, #1
 8001a36:	e000      	b.n	8001a3a <HAL_GPIO_Init+0x1e2>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	f002 0203 	and.w	r2, r2, #3
 8001a40:	0092      	lsls	r2, r2, #2
 8001a42:	4093      	lsls	r3, r2
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a4a:	4937      	ldr	r1, [pc, #220]	@ (8001b28 <HAL_GPIO_Init+0x2d0>)
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	089b      	lsrs	r3, r3, #2
 8001a50:	3302      	adds	r3, #2
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a58:	4b37      	ldr	r3, [pc, #220]	@ (8001b38 <HAL_GPIO_Init+0x2e0>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	4013      	ands	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d003      	beq.n	8001a7c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a7c:	4a2e      	ldr	r2, [pc, #184]	@ (8001b38 <HAL_GPIO_Init+0x2e0>)
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a82:	4b2d      	ldr	r3, [pc, #180]	@ (8001b38 <HAL_GPIO_Init+0x2e0>)
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001aa6:	4a24      	ldr	r2, [pc, #144]	@ (8001b38 <HAL_GPIO_Init+0x2e0>)
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001aac:	4b22      	ldr	r3, [pc, #136]	@ (8001b38 <HAL_GPIO_Init+0x2e0>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d003      	beq.n	8001ad0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ad0:	4a19      	ldr	r2, [pc, #100]	@ (8001b38 <HAL_GPIO_Init+0x2e0>)
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ad6:	4b18      	ldr	r3, [pc, #96]	@ (8001b38 <HAL_GPIO_Init+0x2e0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001afa:	4a0f      	ldr	r2, [pc, #60]	@ (8001b38 <HAL_GPIO_Init+0x2e0>)
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	3301      	adds	r3, #1
 8001b04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f47f aea9 	bne.w	8001868 <HAL_GPIO_Init+0x10>
  }
}
 8001b16:	bf00      	nop
 8001b18:	bf00      	nop
 8001b1a:	371c      	adds	r7, #28
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	40021000 	.word	0x40021000
 8001b28:	40010000 	.word	0x40010000
 8001b2c:	48000400 	.word	0x48000400
 8001b30:	48000800 	.word	0x48000800
 8001b34:	48000c00 	.word	0x48000c00
 8001b38:	40010400 	.word	0x40010400

08001b3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	691a      	ldr	r2, [r3, #16]
 8001b4c:	887b      	ldrh	r3, [r7, #2]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d002      	beq.n	8001b5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b54:	2301      	movs	r3, #1
 8001b56:	73fb      	strb	r3, [r7, #15]
 8001b58:	e001      	b.n	8001b5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	807b      	strh	r3, [r7, #2]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b7c:	787b      	ldrb	r3, [r7, #1]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d003      	beq.n	8001b8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b82:	887a      	ldrh	r2, [r7, #2]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b88:	e002      	b.n	8001b90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b8a:	887a      	ldrh	r2, [r7, #2]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ba6:	4b08      	ldr	r3, [pc, #32]	@ (8001bc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ba8:	695a      	ldr	r2, [r3, #20]
 8001baa:	88fb      	ldrh	r3, [r7, #6]
 8001bac:	4013      	ands	r3, r2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d006      	beq.n	8001bc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bb2:	4a05      	ldr	r2, [pc, #20]	@ (8001bc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bb4:	88fb      	ldrh	r3, [r7, #6]
 8001bb6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bb8:	88fb      	ldrh	r3, [r7, #6]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f000 f806 	bl	8001bcc <HAL_GPIO_EXTI_Callback>
  }
}
 8001bc0:	bf00      	nop
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40010400 	.word	0x40010400

08001bcc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
	...

08001be4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bf0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bf4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bfa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d102      	bne.n	8001c0a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	f001 b823 	b.w	8002c50 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f000 817d 	beq.w	8001f1a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c20:	4bbc      	ldr	r3, [pc, #752]	@ (8001f14 <HAL_RCC_OscConfig+0x330>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f003 030c 	and.w	r3, r3, #12
 8001c28:	2b04      	cmp	r3, #4
 8001c2a:	d00c      	beq.n	8001c46 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c2c:	4bb9      	ldr	r3, [pc, #740]	@ (8001f14 <HAL_RCC_OscConfig+0x330>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f003 030c 	and.w	r3, r3, #12
 8001c34:	2b08      	cmp	r3, #8
 8001c36:	d15c      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x10e>
 8001c38:	4bb6      	ldr	r3, [pc, #728]	@ (8001f14 <HAL_RCC_OscConfig+0x330>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c44:	d155      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x10e>
 8001c46:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c4a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001c52:	fa93 f3a3 	rbit	r3, r3
 8001c56:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c5a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c5e:	fab3 f383 	clz	r3, r3
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	095b      	lsrs	r3, r3, #5
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d102      	bne.n	8001c78 <HAL_RCC_OscConfig+0x94>
 8001c72:	4ba8      	ldr	r3, [pc, #672]	@ (8001f14 <HAL_RCC_OscConfig+0x330>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	e015      	b.n	8001ca4 <HAL_RCC_OscConfig+0xc0>
 8001c78:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c7c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c80:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001c84:	fa93 f3a3 	rbit	r3, r3
 8001c88:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001c8c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c90:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001c94:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001c98:	fa93 f3a3 	rbit	r3, r3
 8001c9c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001ca0:	4b9c      	ldr	r3, [pc, #624]	@ (8001f14 <HAL_RCC_OscConfig+0x330>)
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ca8:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001cac:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001cb0:	fa92 f2a2 	rbit	r2, r2
 8001cb4:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001cb8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001cbc:	fab2 f282 	clz	r2, r2
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	f042 0220 	orr.w	r2, r2, #32
 8001cc6:	b2d2      	uxtb	r2, r2
 8001cc8:	f002 021f 	and.w	r2, r2, #31
 8001ccc:	2101      	movs	r1, #1
 8001cce:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 811f 	beq.w	8001f18 <HAL_RCC_OscConfig+0x334>
 8001cda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cde:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f040 8116 	bne.w	8001f18 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	f000 bfaf 	b.w	8002c50 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cf6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d02:	d106      	bne.n	8001d12 <HAL_RCC_OscConfig+0x12e>
 8001d04:	4b83      	ldr	r3, [pc, #524]	@ (8001f14 <HAL_RCC_OscConfig+0x330>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a82      	ldr	r2, [pc, #520]	@ (8001f14 <HAL_RCC_OscConfig+0x330>)
 8001d0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d0e:	6013      	str	r3, [r2, #0]
 8001d10:	e036      	b.n	8001d80 <HAL_RCC_OscConfig+0x19c>
 8001d12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d16:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d10c      	bne.n	8001d3c <HAL_RCC_OscConfig+0x158>
 8001d22:	4b7c      	ldr	r3, [pc, #496]	@ (8001f14 <HAL_RCC_OscConfig+0x330>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a7b      	ldr	r2, [pc, #492]	@ (8001f14 <HAL_RCC_OscConfig+0x330>)
 8001d28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	4b79      	ldr	r3, [pc, #484]	@ (8001f14 <HAL_RCC_OscConfig+0x330>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a78      	ldr	r2, [pc, #480]	@ (8001f14 <HAL_RCC_OscConfig+0x330>)
 8001d34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d38:	6013      	str	r3, [r2, #0]
 8001d3a:	e021      	b.n	8001d80 <HAL_RCC_OscConfig+0x19c>
 8001d3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d40:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d4c:	d10c      	bne.n	8001d68 <HAL_RCC_OscConfig+0x184>
 8001d4e:	4b71      	ldr	r3, [pc, #452]	@ (8001f14 <HAL_RCC_OscConfig+0x330>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a70      	ldr	r2, [pc, #448]	@ (8001f14 <HAL_RCC_OscConfig+0x330>)
 8001d54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d58:	6013      	str	r3, [r2, #0]
 8001d5a:	4b6e      	ldr	r3, [pc, #440]	@ (8001f14 <HAL_RCC_OscConfig+0x330>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a6d      	ldr	r2, [pc, #436]	@ (8001f14 <HAL_RCC_OscConfig+0x330>)
 8001d60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d64:	6013      	str	r3, [r2, #0]
 8001d66:	e00b      	b.n	8001d80 <HAL_RCC_OscConfig+0x19c>
 8001d68:	4b6a      	ldr	r3, [pc, #424]	@ (8001f14 <HAL_RCC_OscConfig+0x330>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a69      	ldr	r2, [pc, #420]	@ (8001f14 <HAL_RCC_OscConfig+0x330>)
 8001d6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d72:	6013      	str	r3, [r2, #0]
 8001d74:	4b67      	ldr	r3, [pc, #412]	@ (8001f14 <HAL_RCC_OscConfig+0x330>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a66      	ldr	r2, [pc, #408]	@ (8001f14 <HAL_RCC_OscConfig+0x330>)
 8001d7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d7e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d80:	4b64      	ldr	r3, [pc, #400]	@ (8001f14 <HAL_RCC_OscConfig+0x330>)
 8001d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d84:	f023 020f 	bic.w	r2, r3, #15
 8001d88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d8c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	495f      	ldr	r1, [pc, #380]	@ (8001f14 <HAL_RCC_OscConfig+0x330>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d9e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d059      	beq.n	8001e5e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001daa:	f7ff fc37 	bl	800161c <HAL_GetTick>
 8001dae:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db2:	e00a      	b.n	8001dca <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001db4:	f7ff fc32 	bl	800161c <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b64      	cmp	r3, #100	@ 0x64
 8001dc2:	d902      	bls.n	8001dca <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	f000 bf43 	b.w	8002c50 <HAL_RCC_OscConfig+0x106c>
 8001dca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001dce:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001dd6:	fa93 f3a3 	rbit	r3, r3
 8001dda:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001dde:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de2:	fab3 f383 	clz	r3, r3
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	095b      	lsrs	r3, r3, #5
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d102      	bne.n	8001dfc <HAL_RCC_OscConfig+0x218>
 8001df6:	4b47      	ldr	r3, [pc, #284]	@ (8001f14 <HAL_RCC_OscConfig+0x330>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	e015      	b.n	8001e28 <HAL_RCC_OscConfig+0x244>
 8001dfc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e00:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e04:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001e08:	fa93 f3a3 	rbit	r3, r3
 8001e0c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001e10:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e14:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001e18:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001e1c:	fa93 f3a3 	rbit	r3, r3
 8001e20:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001e24:	4b3b      	ldr	r3, [pc, #236]	@ (8001f14 <HAL_RCC_OscConfig+0x330>)
 8001e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e28:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e2c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001e30:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001e34:	fa92 f2a2 	rbit	r2, r2
 8001e38:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001e3c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001e40:	fab2 f282 	clz	r2, r2
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	f042 0220 	orr.w	r2, r2, #32
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	f002 021f 	and.w	r2, r2, #31
 8001e50:	2101      	movs	r1, #1
 8001e52:	fa01 f202 	lsl.w	r2, r1, r2
 8001e56:	4013      	ands	r3, r2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0ab      	beq.n	8001db4 <HAL_RCC_OscConfig+0x1d0>
 8001e5c:	e05d      	b.n	8001f1a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5e:	f7ff fbdd 	bl	800161c <HAL_GetTick>
 8001e62:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e66:	e00a      	b.n	8001e7e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e68:	f7ff fbd8 	bl	800161c <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b64      	cmp	r3, #100	@ 0x64
 8001e76:	d902      	bls.n	8001e7e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	f000 bee9 	b.w	8002c50 <HAL_RCC_OscConfig+0x106c>
 8001e7e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e82:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e86:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001e8a:	fa93 f3a3 	rbit	r3, r3
 8001e8e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001e92:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e96:	fab3 f383 	clz	r3, r3
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	095b      	lsrs	r3, r3, #5
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d102      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x2cc>
 8001eaa:	4b1a      	ldr	r3, [pc, #104]	@ (8001f14 <HAL_RCC_OscConfig+0x330>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	e015      	b.n	8001edc <HAL_RCC_OscConfig+0x2f8>
 8001eb0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001eb4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001ebc:	fa93 f3a3 	rbit	r3, r3
 8001ec0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001ec4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ec8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001ecc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001ed0:	fa93 f3a3 	rbit	r3, r3
 8001ed4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8001f14 <HAL_RCC_OscConfig+0x330>)
 8001eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001edc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ee0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001ee4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001ee8:	fa92 f2a2 	rbit	r2, r2
 8001eec:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001ef0:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001ef4:	fab2 f282 	clz	r2, r2
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	f042 0220 	orr.w	r2, r2, #32
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	f002 021f 	and.w	r2, r2, #31
 8001f04:	2101      	movs	r1, #1
 8001f06:	fa01 f202 	lsl.w	r2, r1, r2
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1ab      	bne.n	8001e68 <HAL_RCC_OscConfig+0x284>
 8001f10:	e003      	b.n	8001f1a <HAL_RCC_OscConfig+0x336>
 8001f12:	bf00      	nop
 8001f14:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 817d 	beq.w	800222a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f30:	4ba6      	ldr	r3, [pc, #664]	@ (80021cc <HAL_RCC_OscConfig+0x5e8>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 030c 	and.w	r3, r3, #12
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d00b      	beq.n	8001f54 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f3c:	4ba3      	ldr	r3, [pc, #652]	@ (80021cc <HAL_RCC_OscConfig+0x5e8>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f003 030c 	and.w	r3, r3, #12
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	d172      	bne.n	800202e <HAL_RCC_OscConfig+0x44a>
 8001f48:	4ba0      	ldr	r3, [pc, #640]	@ (80021cc <HAL_RCC_OscConfig+0x5e8>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d16c      	bne.n	800202e <HAL_RCC_OscConfig+0x44a>
 8001f54:	2302      	movs	r3, #2
 8001f56:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001f5e:	fa93 f3a3 	rbit	r3, r3
 8001f62:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001f66:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f6a:	fab3 f383 	clz	r3, r3
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	095b      	lsrs	r3, r3, #5
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d102      	bne.n	8001f84 <HAL_RCC_OscConfig+0x3a0>
 8001f7e:	4b93      	ldr	r3, [pc, #588]	@ (80021cc <HAL_RCC_OscConfig+0x5e8>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	e013      	b.n	8001fac <HAL_RCC_OscConfig+0x3c8>
 8001f84:	2302      	movs	r3, #2
 8001f86:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001f8e:	fa93 f3a3 	rbit	r3, r3
 8001f92:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001f96:	2302      	movs	r3, #2
 8001f98:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001f9c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001fa0:	fa93 f3a3 	rbit	r3, r3
 8001fa4:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001fa8:	4b88      	ldr	r3, [pc, #544]	@ (80021cc <HAL_RCC_OscConfig+0x5e8>)
 8001faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fac:	2202      	movs	r2, #2
 8001fae:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001fb2:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001fb6:	fa92 f2a2 	rbit	r2, r2
 8001fba:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001fbe:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001fc2:	fab2 f282 	clz	r2, r2
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	f042 0220 	orr.w	r2, r2, #32
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	f002 021f 	and.w	r2, r2, #31
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fd8:	4013      	ands	r3, r2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00a      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x410>
 8001fde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fe2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d002      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	f000 be2e 	b.w	8002c50 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff4:	4b75      	ldr	r3, [pc, #468]	@ (80021cc <HAL_RCC_OscConfig+0x5e8>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ffc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002000:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	695b      	ldr	r3, [r3, #20]
 8002008:	21f8      	movs	r1, #248	@ 0xf8
 800200a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002012:	fa91 f1a1 	rbit	r1, r1
 8002016:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800201a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800201e:	fab1 f181 	clz	r1, r1
 8002022:	b2c9      	uxtb	r1, r1
 8002024:	408b      	lsls	r3, r1
 8002026:	4969      	ldr	r1, [pc, #420]	@ (80021cc <HAL_RCC_OscConfig+0x5e8>)
 8002028:	4313      	orrs	r3, r2
 800202a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800202c:	e0fd      	b.n	800222a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800202e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002032:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 8088 	beq.w	8002150 <HAL_RCC_OscConfig+0x56c>
 8002040:	2301      	movs	r3, #1
 8002042:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002046:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800204a:	fa93 f3a3 	rbit	r3, r3
 800204e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002052:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002056:	fab3 f383 	clz	r3, r3
 800205a:	b2db      	uxtb	r3, r3
 800205c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002060:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	461a      	mov	r2, r3
 8002068:	2301      	movs	r3, #1
 800206a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206c:	f7ff fad6 	bl	800161c <HAL_GetTick>
 8002070:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002074:	e00a      	b.n	800208c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002076:	f7ff fad1 	bl	800161c <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d902      	bls.n	800208c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	f000 bde2 	b.w	8002c50 <HAL_RCC_OscConfig+0x106c>
 800208c:	2302      	movs	r3, #2
 800208e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002092:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002096:	fa93 f3a3 	rbit	r3, r3
 800209a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800209e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a2:	fab3 f383 	clz	r3, r3
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	095b      	lsrs	r3, r3, #5
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d102      	bne.n	80020bc <HAL_RCC_OscConfig+0x4d8>
 80020b6:	4b45      	ldr	r3, [pc, #276]	@ (80021cc <HAL_RCC_OscConfig+0x5e8>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	e013      	b.n	80020e4 <HAL_RCC_OscConfig+0x500>
 80020bc:	2302      	movs	r3, #2
 80020be:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80020c6:	fa93 f3a3 	rbit	r3, r3
 80020ca:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80020ce:	2302      	movs	r3, #2
 80020d0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80020d4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80020d8:	fa93 f3a3 	rbit	r3, r3
 80020dc:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80020e0:	4b3a      	ldr	r3, [pc, #232]	@ (80021cc <HAL_RCC_OscConfig+0x5e8>)
 80020e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e4:	2202      	movs	r2, #2
 80020e6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80020ea:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80020ee:	fa92 f2a2 	rbit	r2, r2
 80020f2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80020f6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80020fa:	fab2 f282 	clz	r2, r2
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	f042 0220 	orr.w	r2, r2, #32
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	f002 021f 	and.w	r2, r2, #31
 800210a:	2101      	movs	r1, #1
 800210c:	fa01 f202 	lsl.w	r2, r1, r2
 8002110:	4013      	ands	r3, r2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d0af      	beq.n	8002076 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002116:	4b2d      	ldr	r3, [pc, #180]	@ (80021cc <HAL_RCC_OscConfig+0x5e8>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800211e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002122:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	21f8      	movs	r1, #248	@ 0xf8
 800212c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002130:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002134:	fa91 f1a1 	rbit	r1, r1
 8002138:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 800213c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002140:	fab1 f181 	clz	r1, r1
 8002144:	b2c9      	uxtb	r1, r1
 8002146:	408b      	lsls	r3, r1
 8002148:	4920      	ldr	r1, [pc, #128]	@ (80021cc <HAL_RCC_OscConfig+0x5e8>)
 800214a:	4313      	orrs	r3, r2
 800214c:	600b      	str	r3, [r1, #0]
 800214e:	e06c      	b.n	800222a <HAL_RCC_OscConfig+0x646>
 8002150:	2301      	movs	r3, #1
 8002152:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002156:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800215a:	fa93 f3a3 	rbit	r3, r3
 800215e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002162:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002166:	fab3 f383 	clz	r3, r3
 800216a:	b2db      	uxtb	r3, r3
 800216c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002170:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	461a      	mov	r2, r3
 8002178:	2300      	movs	r3, #0
 800217a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217c:	f7ff fa4e 	bl	800161c <HAL_GetTick>
 8002180:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002184:	e00a      	b.n	800219c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002186:	f7ff fa49 	bl	800161c <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d902      	bls.n	800219c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	f000 bd5a 	b.w	8002c50 <HAL_RCC_OscConfig+0x106c>
 800219c:	2302      	movs	r3, #2
 800219e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80021a6:	fa93 f3a3 	rbit	r3, r3
 80021aa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80021ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021b2:	fab3 f383 	clz	r3, r3
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	095b      	lsrs	r3, r3, #5
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d104      	bne.n	80021d0 <HAL_RCC_OscConfig+0x5ec>
 80021c6:	4b01      	ldr	r3, [pc, #4]	@ (80021cc <HAL_RCC_OscConfig+0x5e8>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	e015      	b.n	80021f8 <HAL_RCC_OscConfig+0x614>
 80021cc:	40021000 	.word	0x40021000
 80021d0:	2302      	movs	r3, #2
 80021d2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80021da:	fa93 f3a3 	rbit	r3, r3
 80021de:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80021e2:	2302      	movs	r3, #2
 80021e4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80021e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80021ec:	fa93 f3a3 	rbit	r3, r3
 80021f0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80021f4:	4bc8      	ldr	r3, [pc, #800]	@ (8002518 <HAL_RCC_OscConfig+0x934>)
 80021f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f8:	2202      	movs	r2, #2
 80021fa:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80021fe:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002202:	fa92 f2a2 	rbit	r2, r2
 8002206:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800220a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800220e:	fab2 f282 	clz	r2, r2
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	f042 0220 	orr.w	r2, r2, #32
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	f002 021f 	and.w	r2, r2, #31
 800221e:	2101      	movs	r1, #1
 8002220:	fa01 f202 	lsl.w	r2, r1, r2
 8002224:	4013      	ands	r3, r2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1ad      	bne.n	8002186 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800222a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800222e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 8110 	beq.w	8002460 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002240:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002244:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d079      	beq.n	8002344 <HAL_RCC_OscConfig+0x760>
 8002250:	2301      	movs	r3, #1
 8002252:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002256:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800225a:	fa93 f3a3 	rbit	r3, r3
 800225e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002262:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002266:	fab3 f383 	clz	r3, r3
 800226a:	b2db      	uxtb	r3, r3
 800226c:	461a      	mov	r2, r3
 800226e:	4bab      	ldr	r3, [pc, #684]	@ (800251c <HAL_RCC_OscConfig+0x938>)
 8002270:	4413      	add	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	461a      	mov	r2, r3
 8002276:	2301      	movs	r3, #1
 8002278:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800227a:	f7ff f9cf 	bl	800161c <HAL_GetTick>
 800227e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002282:	e00a      	b.n	800229a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002284:	f7ff f9ca 	bl	800161c <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d902      	bls.n	800229a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	f000 bcdb 	b.w	8002c50 <HAL_RCC_OscConfig+0x106c>
 800229a:	2302      	movs	r3, #2
 800229c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80022a4:	fa93 f3a3 	rbit	r3, r3
 80022a8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80022ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022b0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80022b4:	2202      	movs	r2, #2
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022bc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	fa93 f2a3 	rbit	r2, r3
 80022c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80022d8:	2202      	movs	r2, #2
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	fa93 f2a3 	rbit	r2, r3
 80022ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80022f2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022f4:	4b88      	ldr	r3, [pc, #544]	@ (8002518 <HAL_RCC_OscConfig+0x934>)
 80022f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022fc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002300:	2102      	movs	r1, #2
 8002302:	6019      	str	r1, [r3, #0]
 8002304:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002308:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	fa93 f1a3 	rbit	r1, r3
 8002312:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002316:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800231a:	6019      	str	r1, [r3, #0]
  return result;
 800231c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002320:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	fab3 f383 	clz	r3, r3
 800232a:	b2db      	uxtb	r3, r3
 800232c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002330:	b2db      	uxtb	r3, r3
 8002332:	f003 031f 	and.w	r3, r3, #31
 8002336:	2101      	movs	r1, #1
 8002338:	fa01 f303 	lsl.w	r3, r1, r3
 800233c:	4013      	ands	r3, r2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d0a0      	beq.n	8002284 <HAL_RCC_OscConfig+0x6a0>
 8002342:	e08d      	b.n	8002460 <HAL_RCC_OscConfig+0x87c>
 8002344:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002348:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800234c:	2201      	movs	r2, #1
 800234e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002350:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002354:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	fa93 f2a3 	rbit	r2, r3
 800235e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002362:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002366:	601a      	str	r2, [r3, #0]
  return result;
 8002368:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800236c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002370:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002372:	fab3 f383 	clz	r3, r3
 8002376:	b2db      	uxtb	r3, r3
 8002378:	461a      	mov	r2, r3
 800237a:	4b68      	ldr	r3, [pc, #416]	@ (800251c <HAL_RCC_OscConfig+0x938>)
 800237c:	4413      	add	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	461a      	mov	r2, r3
 8002382:	2300      	movs	r3, #0
 8002384:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002386:	f7ff f949 	bl	800161c <HAL_GetTick>
 800238a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800238e:	e00a      	b.n	80023a6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002390:	f7ff f944 	bl	800161c <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d902      	bls.n	80023a6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	f000 bc55 	b.w	8002c50 <HAL_RCC_OscConfig+0x106c>
 80023a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023aa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80023ae:	2202      	movs	r2, #2
 80023b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	fa93 f2a3 	rbit	r2, r3
 80023c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023c4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ce:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80023d2:	2202      	movs	r2, #2
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023da:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	fa93 f2a3 	rbit	r2, r3
 80023e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023f2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80023f6:	2202      	movs	r2, #2
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023fe:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	fa93 f2a3 	rbit	r2, r3
 8002408:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800240c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002410:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002412:	4b41      	ldr	r3, [pc, #260]	@ (8002518 <HAL_RCC_OscConfig+0x934>)
 8002414:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002416:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800241a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800241e:	2102      	movs	r1, #2
 8002420:	6019      	str	r1, [r3, #0]
 8002422:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002426:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	fa93 f1a3 	rbit	r1, r3
 8002430:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002434:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002438:	6019      	str	r1, [r3, #0]
  return result;
 800243a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800243e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	fab3 f383 	clz	r3, r3
 8002448:	b2db      	uxtb	r3, r3
 800244a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800244e:	b2db      	uxtb	r3, r3
 8002450:	f003 031f 	and.w	r3, r3, #31
 8002454:	2101      	movs	r1, #1
 8002456:	fa01 f303 	lsl.w	r3, r1, r3
 800245a:	4013      	ands	r3, r2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d197      	bne.n	8002390 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002460:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002464:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 81a1 	beq.w	80027b8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002476:	2300      	movs	r3, #0
 8002478:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800247c:	4b26      	ldr	r3, [pc, #152]	@ (8002518 <HAL_RCC_OscConfig+0x934>)
 800247e:	69db      	ldr	r3, [r3, #28]
 8002480:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d116      	bne.n	80024b6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002488:	4b23      	ldr	r3, [pc, #140]	@ (8002518 <HAL_RCC_OscConfig+0x934>)
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	4a22      	ldr	r2, [pc, #136]	@ (8002518 <HAL_RCC_OscConfig+0x934>)
 800248e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002492:	61d3      	str	r3, [r2, #28]
 8002494:	4b20      	ldr	r3, [pc, #128]	@ (8002518 <HAL_RCC_OscConfig+0x934>)
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800249c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a0:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024aa:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80024ae:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80024b0:	2301      	movs	r3, #1
 80024b2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002520 <HAL_RCC_OscConfig+0x93c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d11a      	bne.n	80024f8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024c2:	4b17      	ldr	r3, [pc, #92]	@ (8002520 <HAL_RCC_OscConfig+0x93c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a16      	ldr	r2, [pc, #88]	@ (8002520 <HAL_RCC_OscConfig+0x93c>)
 80024c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ce:	f7ff f8a5 	bl	800161c <HAL_GetTick>
 80024d2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d6:	e009      	b.n	80024ec <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d8:	f7ff f8a0 	bl	800161c <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b64      	cmp	r3, #100	@ 0x64
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e3b1      	b.n	8002c50 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002520 <HAL_RCC_OscConfig+0x93c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0ef      	beq.n	80024d8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d10d      	bne.n	8002524 <HAL_RCC_OscConfig+0x940>
 8002508:	4b03      	ldr	r3, [pc, #12]	@ (8002518 <HAL_RCC_OscConfig+0x934>)
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	4a02      	ldr	r2, [pc, #8]	@ (8002518 <HAL_RCC_OscConfig+0x934>)
 800250e:	f043 0301 	orr.w	r3, r3, #1
 8002512:	6213      	str	r3, [r2, #32]
 8002514:	e03c      	b.n	8002590 <HAL_RCC_OscConfig+0x9ac>
 8002516:	bf00      	nop
 8002518:	40021000 	.word	0x40021000
 800251c:	10908120 	.word	0x10908120
 8002520:	40007000 	.word	0x40007000
 8002524:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002528:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10c      	bne.n	800254e <HAL_RCC_OscConfig+0x96a>
 8002534:	4bc1      	ldr	r3, [pc, #772]	@ (800283c <HAL_RCC_OscConfig+0xc58>)
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	4ac0      	ldr	r2, [pc, #768]	@ (800283c <HAL_RCC_OscConfig+0xc58>)
 800253a:	f023 0301 	bic.w	r3, r3, #1
 800253e:	6213      	str	r3, [r2, #32]
 8002540:	4bbe      	ldr	r3, [pc, #760]	@ (800283c <HAL_RCC_OscConfig+0xc58>)
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	4abd      	ldr	r2, [pc, #756]	@ (800283c <HAL_RCC_OscConfig+0xc58>)
 8002546:	f023 0304 	bic.w	r3, r3, #4
 800254a:	6213      	str	r3, [r2, #32]
 800254c:	e020      	b.n	8002590 <HAL_RCC_OscConfig+0x9ac>
 800254e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002552:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	2b05      	cmp	r3, #5
 800255c:	d10c      	bne.n	8002578 <HAL_RCC_OscConfig+0x994>
 800255e:	4bb7      	ldr	r3, [pc, #732]	@ (800283c <HAL_RCC_OscConfig+0xc58>)
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	4ab6      	ldr	r2, [pc, #728]	@ (800283c <HAL_RCC_OscConfig+0xc58>)
 8002564:	f043 0304 	orr.w	r3, r3, #4
 8002568:	6213      	str	r3, [r2, #32]
 800256a:	4bb4      	ldr	r3, [pc, #720]	@ (800283c <HAL_RCC_OscConfig+0xc58>)
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	4ab3      	ldr	r2, [pc, #716]	@ (800283c <HAL_RCC_OscConfig+0xc58>)
 8002570:	f043 0301 	orr.w	r3, r3, #1
 8002574:	6213      	str	r3, [r2, #32]
 8002576:	e00b      	b.n	8002590 <HAL_RCC_OscConfig+0x9ac>
 8002578:	4bb0      	ldr	r3, [pc, #704]	@ (800283c <HAL_RCC_OscConfig+0xc58>)
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	4aaf      	ldr	r2, [pc, #700]	@ (800283c <HAL_RCC_OscConfig+0xc58>)
 800257e:	f023 0301 	bic.w	r3, r3, #1
 8002582:	6213      	str	r3, [r2, #32]
 8002584:	4bad      	ldr	r3, [pc, #692]	@ (800283c <HAL_RCC_OscConfig+0xc58>)
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	4aac      	ldr	r2, [pc, #688]	@ (800283c <HAL_RCC_OscConfig+0xc58>)
 800258a:	f023 0304 	bic.w	r3, r3, #4
 800258e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002590:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002594:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 8081 	beq.w	80026a4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a2:	f7ff f83b 	bl	800161c <HAL_GetTick>
 80025a6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025aa:	e00b      	b.n	80025c4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ac:	f7ff f836 	bl	800161c <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025bc:	4293      	cmp	r3, r2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e345      	b.n	8002c50 <HAL_RCC_OscConfig+0x106c>
 80025c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025c8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80025cc:	2202      	movs	r2, #2
 80025ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	fa93 f2a3 	rbit	r2, r3
 80025de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025e2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ec:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80025f0:	2202      	movs	r2, #2
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025f8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	fa93 f2a3 	rbit	r2, r3
 8002602:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002606:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800260a:	601a      	str	r2, [r3, #0]
  return result;
 800260c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002610:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002614:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002616:	fab3 f383 	clz	r3, r3
 800261a:	b2db      	uxtb	r3, r3
 800261c:	095b      	lsrs	r3, r3, #5
 800261e:	b2db      	uxtb	r3, r3
 8002620:	f043 0302 	orr.w	r3, r3, #2
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d102      	bne.n	8002630 <HAL_RCC_OscConfig+0xa4c>
 800262a:	4b84      	ldr	r3, [pc, #528]	@ (800283c <HAL_RCC_OscConfig+0xc58>)
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	e013      	b.n	8002658 <HAL_RCC_OscConfig+0xa74>
 8002630:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002634:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002638:	2202      	movs	r2, #2
 800263a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002640:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	fa93 f2a3 	rbit	r2, r3
 800264a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800264e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	4b79      	ldr	r3, [pc, #484]	@ (800283c <HAL_RCC_OscConfig+0xc58>)
 8002656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002658:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800265c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002660:	2102      	movs	r1, #2
 8002662:	6011      	str	r1, [r2, #0]
 8002664:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002668:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800266c:	6812      	ldr	r2, [r2, #0]
 800266e:	fa92 f1a2 	rbit	r1, r2
 8002672:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002676:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800267a:	6011      	str	r1, [r2, #0]
  return result;
 800267c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002680:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002684:	6812      	ldr	r2, [r2, #0]
 8002686:	fab2 f282 	clz	r2, r2
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	f002 021f 	and.w	r2, r2, #31
 8002696:	2101      	movs	r1, #1
 8002698:	fa01 f202 	lsl.w	r2, r1, r2
 800269c:	4013      	ands	r3, r2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d084      	beq.n	80025ac <HAL_RCC_OscConfig+0x9c8>
 80026a2:	e07f      	b.n	80027a4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a4:	f7fe ffba 	bl	800161c <HAL_GetTick>
 80026a8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ac:	e00b      	b.n	80026c6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026ae:	f7fe ffb5 	bl	800161c <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026be:	4293      	cmp	r3, r2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e2c4      	b.n	8002c50 <HAL_RCC_OscConfig+0x106c>
 80026c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ca:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80026ce:	2202      	movs	r2, #2
 80026d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	fa93 f2a3 	rbit	r2, r3
 80026e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026e4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ee:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80026f2:	2202      	movs	r2, #2
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026fa:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	fa93 f2a3 	rbit	r2, r3
 8002704:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002708:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800270c:	601a      	str	r2, [r3, #0]
  return result;
 800270e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002712:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002716:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002718:	fab3 f383 	clz	r3, r3
 800271c:	b2db      	uxtb	r3, r3
 800271e:	095b      	lsrs	r3, r3, #5
 8002720:	b2db      	uxtb	r3, r3
 8002722:	f043 0302 	orr.w	r3, r3, #2
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d102      	bne.n	8002732 <HAL_RCC_OscConfig+0xb4e>
 800272c:	4b43      	ldr	r3, [pc, #268]	@ (800283c <HAL_RCC_OscConfig+0xc58>)
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	e013      	b.n	800275a <HAL_RCC_OscConfig+0xb76>
 8002732:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002736:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800273a:	2202      	movs	r2, #2
 800273c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002742:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	fa93 f2a3 	rbit	r2, r3
 800274c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002750:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	4b39      	ldr	r3, [pc, #228]	@ (800283c <HAL_RCC_OscConfig+0xc58>)
 8002758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800275e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002762:	2102      	movs	r1, #2
 8002764:	6011      	str	r1, [r2, #0]
 8002766:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800276a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800276e:	6812      	ldr	r2, [r2, #0]
 8002770:	fa92 f1a2 	rbit	r1, r2
 8002774:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002778:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800277c:	6011      	str	r1, [r2, #0]
  return result;
 800277e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002782:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002786:	6812      	ldr	r2, [r2, #0]
 8002788:	fab2 f282 	clz	r2, r2
 800278c:	b2d2      	uxtb	r2, r2
 800278e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	f002 021f 	and.w	r2, r2, #31
 8002798:	2101      	movs	r1, #1
 800279a:	fa01 f202 	lsl.w	r2, r1, r2
 800279e:	4013      	ands	r3, r2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d184      	bne.n	80026ae <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027a4:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d105      	bne.n	80027b8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ac:	4b23      	ldr	r3, [pc, #140]	@ (800283c <HAL_RCC_OscConfig+0xc58>)
 80027ae:	69db      	ldr	r3, [r3, #28]
 80027b0:	4a22      	ldr	r2, [pc, #136]	@ (800283c <HAL_RCC_OscConfig+0xc58>)
 80027b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027b6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 8242 	beq.w	8002c4e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027ca:	4b1c      	ldr	r3, [pc, #112]	@ (800283c <HAL_RCC_OscConfig+0xc58>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f003 030c 	and.w	r3, r3, #12
 80027d2:	2b08      	cmp	r3, #8
 80027d4:	f000 8213 	beq.w	8002bfe <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	69db      	ldr	r3, [r3, #28]
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	f040 8162 	bne.w	8002aae <HAL_RCC_OscConfig+0xeca>
 80027ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ee:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80027f2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80027f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027fc:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	fa93 f2a3 	rbit	r2, r3
 8002806:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800280a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800280e:	601a      	str	r2, [r3, #0]
  return result;
 8002810:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002814:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002818:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800281a:	fab3 f383 	clz	r3, r3
 800281e:	b2db      	uxtb	r3, r3
 8002820:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002824:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	461a      	mov	r2, r3
 800282c:	2300      	movs	r3, #0
 800282e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002830:	f7fe fef4 	bl	800161c <HAL_GetTick>
 8002834:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002838:	e00c      	b.n	8002854 <HAL_RCC_OscConfig+0xc70>
 800283a:	bf00      	nop
 800283c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002840:	f7fe feec 	bl	800161c <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e1fd      	b.n	8002c50 <HAL_RCC_OscConfig+0x106c>
 8002854:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002858:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800285c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002860:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002862:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002866:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	fa93 f2a3 	rbit	r2, r3
 8002870:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002874:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002878:	601a      	str	r2, [r3, #0]
  return result;
 800287a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800287e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002882:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002884:	fab3 f383 	clz	r3, r3
 8002888:	b2db      	uxtb	r3, r3
 800288a:	095b      	lsrs	r3, r3, #5
 800288c:	b2db      	uxtb	r3, r3
 800288e:	f043 0301 	orr.w	r3, r3, #1
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b01      	cmp	r3, #1
 8002896:	d102      	bne.n	800289e <HAL_RCC_OscConfig+0xcba>
 8002898:	4bb0      	ldr	r3, [pc, #704]	@ (8002b5c <HAL_RCC_OscConfig+0xf78>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	e027      	b.n	80028ee <HAL_RCC_OscConfig+0xd0a>
 800289e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028a2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80028a6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	fa93 f2a3 	rbit	r2, r3
 80028ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028be:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80028cc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	fa93 f2a3 	rbit	r2, r3
 80028e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	4b9c      	ldr	r3, [pc, #624]	@ (8002b5c <HAL_RCC_OscConfig+0xf78>)
 80028ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028f2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80028f6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80028fa:	6011      	str	r1, [r2, #0]
 80028fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002900:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002904:	6812      	ldr	r2, [r2, #0]
 8002906:	fa92 f1a2 	rbit	r1, r2
 800290a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800290e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002912:	6011      	str	r1, [r2, #0]
  return result;
 8002914:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002918:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800291c:	6812      	ldr	r2, [r2, #0]
 800291e:	fab2 f282 	clz	r2, r2
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	f042 0220 	orr.w	r2, r2, #32
 8002928:	b2d2      	uxtb	r2, r2
 800292a:	f002 021f 	and.w	r2, r2, #31
 800292e:	2101      	movs	r1, #1
 8002930:	fa01 f202 	lsl.w	r2, r1, r2
 8002934:	4013      	ands	r3, r2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d182      	bne.n	8002840 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800293a:	4b88      	ldr	r3, [pc, #544]	@ (8002b5c <HAL_RCC_OscConfig+0xf78>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002942:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002946:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800294e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002952:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	430b      	orrs	r3, r1
 800295c:	497f      	ldr	r1, [pc, #508]	@ (8002b5c <HAL_RCC_OscConfig+0xf78>)
 800295e:	4313      	orrs	r3, r2
 8002960:	604b      	str	r3, [r1, #4]
 8002962:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002966:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800296a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800296e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002970:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002974:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	fa93 f2a3 	rbit	r2, r3
 800297e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002982:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002986:	601a      	str	r2, [r3, #0]
  return result;
 8002988:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800298c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002990:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002992:	fab3 f383 	clz	r3, r3
 8002996:	b2db      	uxtb	r3, r3
 8002998:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800299c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	461a      	mov	r2, r3
 80029a4:	2301      	movs	r3, #1
 80029a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a8:	f7fe fe38 	bl	800161c <HAL_GetTick>
 80029ac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029b0:	e009      	b.n	80029c6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b2:	f7fe fe33 	bl	800161c <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e144      	b.n	8002c50 <HAL_RCC_OscConfig+0x106c>
 80029c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ca:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80029ce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	fa93 f2a3 	rbit	r2, r3
 80029e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029e6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80029ea:	601a      	str	r2, [r3, #0]
  return result;
 80029ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029f0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80029f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029f6:	fab3 f383 	clz	r3, r3
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	095b      	lsrs	r3, r3, #5
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	f043 0301 	orr.w	r3, r3, #1
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d102      	bne.n	8002a10 <HAL_RCC_OscConfig+0xe2c>
 8002a0a:	4b54      	ldr	r3, [pc, #336]	@ (8002b5c <HAL_RCC_OscConfig+0xf78>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	e027      	b.n	8002a60 <HAL_RCC_OscConfig+0xe7c>
 8002a10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a14:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002a18:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a22:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	fa93 f2a3 	rbit	r2, r3
 8002a2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a30:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a3a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002a3e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a48:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	fa93 f2a3 	rbit	r2, r3
 8002a52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a56:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	4b3f      	ldr	r3, [pc, #252]	@ (8002b5c <HAL_RCC_OscConfig+0xf78>)
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a60:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a64:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002a68:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002a6c:	6011      	str	r1, [r2, #0]
 8002a6e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a72:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002a76:	6812      	ldr	r2, [r2, #0]
 8002a78:	fa92 f1a2 	rbit	r1, r2
 8002a7c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a80:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002a84:	6011      	str	r1, [r2, #0]
  return result;
 8002a86:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a8a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002a8e:	6812      	ldr	r2, [r2, #0]
 8002a90:	fab2 f282 	clz	r2, r2
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	f042 0220 	orr.w	r2, r2, #32
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	f002 021f 	and.w	r2, r2, #31
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	fa01 f202 	lsl.w	r2, r1, r2
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d082      	beq.n	80029b2 <HAL_RCC_OscConfig+0xdce>
 8002aac:	e0cf      	b.n	8002c4e <HAL_RCC_OscConfig+0x106a>
 8002aae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ab2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002ab6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002aba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	fa93 f2a3 	rbit	r2, r3
 8002aca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ace:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002ad2:	601a      	str	r2, [r3, #0]
  return result;
 8002ad4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002adc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ade:	fab3 f383 	clz	r3, r3
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002ae8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	461a      	mov	r2, r3
 8002af0:	2300      	movs	r3, #0
 8002af2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af4:	f7fe fd92 	bl	800161c <HAL_GetTick>
 8002af8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002afc:	e009      	b.n	8002b12 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002afe:	f7fe fd8d 	bl	800161c <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e09e      	b.n	8002c50 <HAL_RCC_OscConfig+0x106c>
 8002b12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b16:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002b1a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b24:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	fa93 f2a3 	rbit	r2, r3
 8002b2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b32:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002b36:	601a      	str	r2, [r3, #0]
  return result;
 8002b38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b3c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002b40:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b42:	fab3 f383 	clz	r3, r3
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	095b      	lsrs	r3, r3, #5
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	f043 0301 	orr.w	r3, r3, #1
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d104      	bne.n	8002b60 <HAL_RCC_OscConfig+0xf7c>
 8002b56:	4b01      	ldr	r3, [pc, #4]	@ (8002b5c <HAL_RCC_OscConfig+0xf78>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	e029      	b.n	8002bb0 <HAL_RCC_OscConfig+0xfcc>
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b64:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002b68:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b72:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	fa93 f2a3 	rbit	r2, r3
 8002b7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b80:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b8a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002b8e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b98:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	fa93 f2a3 	rbit	r2, r3
 8002ba2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ba6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	4b2b      	ldr	r3, [pc, #172]	@ (8002c5c <HAL_RCC_OscConfig+0x1078>)
 8002bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002bb4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002bb8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002bbc:	6011      	str	r1, [r2, #0]
 8002bbe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002bc2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002bc6:	6812      	ldr	r2, [r2, #0]
 8002bc8:	fa92 f1a2 	rbit	r1, r2
 8002bcc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002bd0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002bd4:	6011      	str	r1, [r2, #0]
  return result;
 8002bd6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002bda:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002bde:	6812      	ldr	r2, [r2, #0]
 8002be0:	fab2 f282 	clz	r2, r2
 8002be4:	b2d2      	uxtb	r2, r2
 8002be6:	f042 0220 	orr.w	r2, r2, #32
 8002bea:	b2d2      	uxtb	r2, r2
 8002bec:	f002 021f 	and.w	r2, r2, #31
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d180      	bne.n	8002afe <HAL_RCC_OscConfig+0xf1a>
 8002bfc:	e027      	b.n	8002c4e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c02:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d101      	bne.n	8002c12 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e01e      	b.n	8002c50 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c12:	4b12      	ldr	r3, [pc, #72]	@ (8002c5c <HAL_RCC_OscConfig+0x1078>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c1a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002c1e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002c22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d10b      	bne.n	8002c4a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002c32:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002c36:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002c3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d001      	beq.n	8002c4e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e000      	b.n	8002c50 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40021000 	.word	0x40021000

08002c60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b09e      	sub	sp, #120	@ 0x78
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e162      	b.n	8002f3e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c78:	4b90      	ldr	r3, [pc, #576]	@ (8002ebc <HAL_RCC_ClockConfig+0x25c>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d910      	bls.n	8002ca8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c86:	4b8d      	ldr	r3, [pc, #564]	@ (8002ebc <HAL_RCC_ClockConfig+0x25c>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f023 0207 	bic.w	r2, r3, #7
 8002c8e:	498b      	ldr	r1, [pc, #556]	@ (8002ebc <HAL_RCC_ClockConfig+0x25c>)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c96:	4b89      	ldr	r3, [pc, #548]	@ (8002ebc <HAL_RCC_ClockConfig+0x25c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d001      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e14a      	b.n	8002f3e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d008      	beq.n	8002cc6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cb4:	4b82      	ldr	r3, [pc, #520]	@ (8002ec0 <HAL_RCC_ClockConfig+0x260>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	497f      	ldr	r1, [pc, #508]	@ (8002ec0 <HAL_RCC_ClockConfig+0x260>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f000 80dc 	beq.w	8002e8c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d13c      	bne.n	8002d56 <HAL_RCC_ClockConfig+0xf6>
 8002cdc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ce0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ce4:	fa93 f3a3 	rbit	r3, r3
 8002ce8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002cea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cec:	fab3 f383 	clz	r3, r3
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	095b      	lsrs	r3, r3, #5
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	f043 0301 	orr.w	r3, r3, #1
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d102      	bne.n	8002d06 <HAL_RCC_ClockConfig+0xa6>
 8002d00:	4b6f      	ldr	r3, [pc, #444]	@ (8002ec0 <HAL_RCC_ClockConfig+0x260>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	e00f      	b.n	8002d26 <HAL_RCC_ClockConfig+0xc6>
 8002d06:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d0a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d0e:	fa93 f3a3 	rbit	r3, r3
 8002d12:	667b      	str	r3, [r7, #100]	@ 0x64
 8002d14:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d18:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d1c:	fa93 f3a3 	rbit	r3, r3
 8002d20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002d22:	4b67      	ldr	r3, [pc, #412]	@ (8002ec0 <HAL_RCC_ClockConfig+0x260>)
 8002d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d26:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002d2a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002d2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d2e:	fa92 f2a2 	rbit	r2, r2
 8002d32:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002d34:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002d36:	fab2 f282 	clz	r2, r2
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	f042 0220 	orr.w	r2, r2, #32
 8002d40:	b2d2      	uxtb	r2, r2
 8002d42:	f002 021f 	and.w	r2, r2, #31
 8002d46:	2101      	movs	r1, #1
 8002d48:	fa01 f202 	lsl.w	r2, r1, r2
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d17b      	bne.n	8002e4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e0f3      	b.n	8002f3e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d13c      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0x178>
 8002d5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d62:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d66:	fa93 f3a3 	rbit	r3, r3
 8002d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002d6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d6e:	fab3 f383 	clz	r3, r3
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	095b      	lsrs	r3, r3, #5
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	f043 0301 	orr.w	r3, r3, #1
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d102      	bne.n	8002d88 <HAL_RCC_ClockConfig+0x128>
 8002d82:	4b4f      	ldr	r3, [pc, #316]	@ (8002ec0 <HAL_RCC_ClockConfig+0x260>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	e00f      	b.n	8002da8 <HAL_RCC_ClockConfig+0x148>
 8002d88:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d8c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d90:	fa93 f3a3 	rbit	r3, r3
 8002d94:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d9e:	fa93 f3a3 	rbit	r3, r3
 8002da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002da4:	4b46      	ldr	r3, [pc, #280]	@ (8002ec0 <HAL_RCC_ClockConfig+0x260>)
 8002da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002dac:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002dae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002db0:	fa92 f2a2 	rbit	r2, r2
 8002db4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002db6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002db8:	fab2 f282 	clz	r2, r2
 8002dbc:	b2d2      	uxtb	r2, r2
 8002dbe:	f042 0220 	orr.w	r2, r2, #32
 8002dc2:	b2d2      	uxtb	r2, r2
 8002dc4:	f002 021f 	and.w	r2, r2, #31
 8002dc8:	2101      	movs	r1, #1
 8002dca:	fa01 f202 	lsl.w	r2, r1, r2
 8002dce:	4013      	ands	r3, r2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d13a      	bne.n	8002e4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e0b2      	b.n	8002f3e <HAL_RCC_ClockConfig+0x2de>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dde:	fa93 f3a3 	rbit	r3, r3
 8002de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de6:	fab3 f383 	clz	r3, r3
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	095b      	lsrs	r3, r3, #5
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	f043 0301 	orr.w	r3, r3, #1
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d102      	bne.n	8002e00 <HAL_RCC_ClockConfig+0x1a0>
 8002dfa:	4b31      	ldr	r3, [pc, #196]	@ (8002ec0 <HAL_RCC_ClockConfig+0x260>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	e00d      	b.n	8002e1c <HAL_RCC_ClockConfig+0x1bc>
 8002e00:	2302      	movs	r3, #2
 8002e02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e06:	fa93 f3a3 	rbit	r3, r3
 8002e0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	623b      	str	r3, [r7, #32]
 8002e10:	6a3b      	ldr	r3, [r7, #32]
 8002e12:	fa93 f3a3 	rbit	r3, r3
 8002e16:	61fb      	str	r3, [r7, #28]
 8002e18:	4b29      	ldr	r3, [pc, #164]	@ (8002ec0 <HAL_RCC_ClockConfig+0x260>)
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	61ba      	str	r2, [r7, #24]
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	fa92 f2a2 	rbit	r2, r2
 8002e26:	617a      	str	r2, [r7, #20]
  return result;
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	fab2 f282 	clz	r2, r2
 8002e2e:	b2d2      	uxtb	r2, r2
 8002e30:	f042 0220 	orr.w	r2, r2, #32
 8002e34:	b2d2      	uxtb	r2, r2
 8002e36:	f002 021f 	and.w	r2, r2, #31
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e40:	4013      	ands	r3, r2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e079      	b.n	8002f3e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e4a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ec0 <HAL_RCC_ClockConfig+0x260>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f023 0203 	bic.w	r2, r3, #3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	491a      	ldr	r1, [pc, #104]	@ (8002ec0 <HAL_RCC_ClockConfig+0x260>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e5c:	f7fe fbde 	bl	800161c <HAL_GetTick>
 8002e60:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e62:	e00a      	b.n	8002e7a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e64:	f7fe fbda 	bl	800161c <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e061      	b.n	8002f3e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7a:	4b11      	ldr	r3, [pc, #68]	@ (8002ec0 <HAL_RCC_ClockConfig+0x260>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f003 020c 	and.w	r2, r3, #12
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d1eb      	bne.n	8002e64 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002ebc <HAL_RCC_ClockConfig+0x25c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0307 	and.w	r3, r3, #7
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d214      	bcs.n	8002ec4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e9a:	4b08      	ldr	r3, [pc, #32]	@ (8002ebc <HAL_RCC_ClockConfig+0x25c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f023 0207 	bic.w	r2, r3, #7
 8002ea2:	4906      	ldr	r1, [pc, #24]	@ (8002ebc <HAL_RCC_ClockConfig+0x25c>)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eaa:	4b04      	ldr	r3, [pc, #16]	@ (8002ebc <HAL_RCC_ClockConfig+0x25c>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d005      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e040      	b.n	8002f3e <HAL_RCC_ClockConfig+0x2de>
 8002ebc:	40022000 	.word	0x40022000
 8002ec0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d008      	beq.n	8002ee2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8002f48 <HAL_RCC_ClockConfig+0x2e8>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	491a      	ldr	r1, [pc, #104]	@ (8002f48 <HAL_RCC_ClockConfig+0x2e8>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0308 	and.w	r3, r3, #8
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d009      	beq.n	8002f02 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eee:	4b16      	ldr	r3, [pc, #88]	@ (8002f48 <HAL_RCC_ClockConfig+0x2e8>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	4912      	ldr	r1, [pc, #72]	@ (8002f48 <HAL_RCC_ClockConfig+0x2e8>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f02:	f000 f829 	bl	8002f58 <HAL_RCC_GetSysClockFreq>
 8002f06:	4601      	mov	r1, r0
 8002f08:	4b0f      	ldr	r3, [pc, #60]	@ (8002f48 <HAL_RCC_ClockConfig+0x2e8>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f10:	22f0      	movs	r2, #240	@ 0xf0
 8002f12:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	fa92 f2a2 	rbit	r2, r2
 8002f1a:	60fa      	str	r2, [r7, #12]
  return result;
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	fab2 f282 	clz	r2, r2
 8002f22:	b2d2      	uxtb	r2, r2
 8002f24:	40d3      	lsrs	r3, r2
 8002f26:	4a09      	ldr	r2, [pc, #36]	@ (8002f4c <HAL_RCC_ClockConfig+0x2ec>)
 8002f28:	5cd3      	ldrb	r3, [r2, r3]
 8002f2a:	fa21 f303 	lsr.w	r3, r1, r3
 8002f2e:	4a08      	ldr	r2, [pc, #32]	@ (8002f50 <HAL_RCC_ClockConfig+0x2f0>)
 8002f30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002f32:	4b08      	ldr	r3, [pc, #32]	@ (8002f54 <HAL_RCC_ClockConfig+0x2f4>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7fe fb2c 	bl	8001594 <HAL_InitTick>
  
  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3778      	adds	r7, #120	@ 0x78
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	080089e0 	.word	0x080089e0
 8002f50:	20000000 	.word	0x20000000
 8002f54:	20000004 	.word	0x20000004

08002f58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b087      	sub	sp, #28
 8002f5c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	2300      	movs	r3, #0
 8002f64:	60bb      	str	r3, [r7, #8]
 8002f66:	2300      	movs	r3, #0
 8002f68:	617b      	str	r3, [r7, #20]
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002f72:	4b1e      	ldr	r3, [pc, #120]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x94>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f003 030c 	and.w	r3, r3, #12
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d002      	beq.n	8002f88 <HAL_RCC_GetSysClockFreq+0x30>
 8002f82:	2b08      	cmp	r3, #8
 8002f84:	d003      	beq.n	8002f8e <HAL_RCC_GetSysClockFreq+0x36>
 8002f86:	e026      	b.n	8002fd6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f88:	4b19      	ldr	r3, [pc, #100]	@ (8002ff0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f8a:	613b      	str	r3, [r7, #16]
      break;
 8002f8c:	e026      	b.n	8002fdc <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	0c9b      	lsrs	r3, r3, #18
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	4a17      	ldr	r2, [pc, #92]	@ (8002ff4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f98:	5cd3      	ldrb	r3, [r2, r3]
 8002f9a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002f9c:	4b13      	ldr	r3, [pc, #76]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x94>)
 8002f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa0:	f003 030f 	and.w	r3, r3, #15
 8002fa4:	4a14      	ldr	r2, [pc, #80]	@ (8002ff8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002fa6:	5cd3      	ldrb	r3, [r2, r3]
 8002fa8:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d008      	beq.n	8002fc6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002fb4:	4a0e      	ldr	r2, [pc, #56]	@ (8002ff0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	fb02 f303 	mul.w	r3, r2, r3
 8002fc2:	617b      	str	r3, [r7, #20]
 8002fc4:	e004      	b.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a0c      	ldr	r2, [pc, #48]	@ (8002ffc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002fca:	fb02 f303 	mul.w	r3, r2, r3
 8002fce:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	613b      	str	r3, [r7, #16]
      break;
 8002fd4:	e002      	b.n	8002fdc <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fd6:	4b06      	ldr	r3, [pc, #24]	@ (8002ff0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002fd8:	613b      	str	r3, [r7, #16]
      break;
 8002fda:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fdc:	693b      	ldr	r3, [r7, #16]
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	371c      	adds	r7, #28
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	007a1200 	.word	0x007a1200
 8002ff4:	080089f8 	.word	0x080089f8
 8002ff8:	08008a08 	.word	0x08008a08
 8002ffc:	003d0900 	.word	0x003d0900

08003000 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003004:	4b03      	ldr	r3, [pc, #12]	@ (8003014 <HAL_RCC_GetHCLKFreq+0x14>)
 8003006:	681b      	ldr	r3, [r3, #0]
}
 8003008:	4618      	mov	r0, r3
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	20000000 	.word	0x20000000

08003018 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800301e:	f7ff ffef 	bl	8003000 <HAL_RCC_GetHCLKFreq>
 8003022:	4601      	mov	r1, r0
 8003024:	4b0b      	ldr	r3, [pc, #44]	@ (8003054 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800302c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003030:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	fa92 f2a2 	rbit	r2, r2
 8003038:	603a      	str	r2, [r7, #0]
  return result;
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	fab2 f282 	clz	r2, r2
 8003040:	b2d2      	uxtb	r2, r2
 8003042:	40d3      	lsrs	r3, r2
 8003044:	4a04      	ldr	r2, [pc, #16]	@ (8003058 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003046:	5cd3      	ldrb	r3, [r2, r3]
 8003048:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800304c:	4618      	mov	r0, r3
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40021000 	.word	0x40021000
 8003058:	080089f0 	.word	0x080089f0

0800305c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003062:	f7ff ffcd 	bl	8003000 <HAL_RCC_GetHCLKFreq>
 8003066:	4601      	mov	r1, r0
 8003068:	4b0b      	ldr	r3, [pc, #44]	@ (8003098 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003070:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003074:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	fa92 f2a2 	rbit	r2, r2
 800307c:	603a      	str	r2, [r7, #0]
  return result;
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	fab2 f282 	clz	r2, r2
 8003084:	b2d2      	uxtb	r2, r2
 8003086:	40d3      	lsrs	r3, r2
 8003088:	4a04      	ldr	r2, [pc, #16]	@ (800309c <HAL_RCC_GetPCLK2Freq+0x40>)
 800308a:	5cd3      	ldrb	r3, [r2, r3]
 800308c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003090:	4618      	mov	r0, r3
 8003092:	3708      	adds	r7, #8
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40021000 	.word	0x40021000
 800309c:	080089f0 	.word	0x080089f0

080030a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e049      	b.n	8003146 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d106      	bne.n	80030cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7fd ff98 	bl	8000ffc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2202      	movs	r2, #2
 80030d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3304      	adds	r3, #4
 80030dc:	4619      	mov	r1, r3
 80030de:	4610      	mov	r0, r2
 80030e0:	f000 fad4 	bl	800368c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
	...

08003150 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b01      	cmp	r3, #1
 8003162:	d001      	beq.n	8003168 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e033      	b.n	80031d0 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a19      	ldr	r2, [pc, #100]	@ (80031dc <HAL_TIM_Base_Start+0x8c>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d009      	beq.n	800318e <HAL_TIM_Base_Start+0x3e>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003182:	d004      	beq.n	800318e <HAL_TIM_Base_Start+0x3e>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a15      	ldr	r2, [pc, #84]	@ (80031e0 <HAL_TIM_Base_Start+0x90>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d115      	bne.n	80031ba <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	4b13      	ldr	r3, [pc, #76]	@ (80031e4 <HAL_TIM_Base_Start+0x94>)
 8003196:	4013      	ands	r3, r2
 8003198:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2b06      	cmp	r3, #6
 800319e:	d015      	beq.n	80031cc <HAL_TIM_Base_Start+0x7c>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031a6:	d011      	beq.n	80031cc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f042 0201 	orr.w	r2, r2, #1
 80031b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031b8:	e008      	b.n	80031cc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f042 0201 	orr.w	r2, r2, #1
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	e000      	b.n	80031ce <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3714      	adds	r7, #20
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	40012c00 	.word	0x40012c00
 80031e0:	40014000 	.word	0x40014000
 80031e4:	00010007 	.word	0x00010007

080031e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d001      	beq.n	8003200 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e03b      	b.n	8003278 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2202      	movs	r2, #2
 8003204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68da      	ldr	r2, [r3, #12]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f042 0201 	orr.w	r2, r2, #1
 8003216:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a19      	ldr	r2, [pc, #100]	@ (8003284 <HAL_TIM_Base_Start_IT+0x9c>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d009      	beq.n	8003236 <HAL_TIM_Base_Start_IT+0x4e>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800322a:	d004      	beq.n	8003236 <HAL_TIM_Base_Start_IT+0x4e>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a15      	ldr	r2, [pc, #84]	@ (8003288 <HAL_TIM_Base_Start_IT+0xa0>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d115      	bne.n	8003262 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	4b13      	ldr	r3, [pc, #76]	@ (800328c <HAL_TIM_Base_Start_IT+0xa4>)
 800323e:	4013      	ands	r3, r2
 8003240:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2b06      	cmp	r3, #6
 8003246:	d015      	beq.n	8003274 <HAL_TIM_Base_Start_IT+0x8c>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800324e:	d011      	beq.n	8003274 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f042 0201 	orr.w	r2, r2, #1
 800325e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003260:	e008      	b.n	8003274 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f042 0201 	orr.w	r2, r2, #1
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	e000      	b.n	8003276 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003274:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3714      	adds	r7, #20
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	40012c00 	.word	0x40012c00
 8003288:	40014000 	.word	0x40014000
 800328c:	00010007 	.word	0x00010007

08003290 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d020      	beq.n	80032f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d01b      	beq.n	80032f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f06f 0202 	mvn.w	r2, #2
 80032c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	f003 0303 	and.w	r3, r3, #3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f9b7 	bl	800364e <HAL_TIM_IC_CaptureCallback>
 80032e0:	e005      	b.n	80032ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f9a9 	bl	800363a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 f9ba 	bl	8003662 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	f003 0304 	and.w	r3, r3, #4
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d020      	beq.n	8003340 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	d01b      	beq.n	8003340 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f06f 0204 	mvn.w	r2, #4
 8003310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2202      	movs	r2, #2
 8003316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f991 	bl	800364e <HAL_TIM_IC_CaptureCallback>
 800332c:	e005      	b.n	800333a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f983 	bl	800363a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 f994 	bl	8003662 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	f003 0308 	and.w	r3, r3, #8
 8003346:	2b00      	cmp	r3, #0
 8003348:	d020      	beq.n	800338c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f003 0308 	and.w	r3, r3, #8
 8003350:	2b00      	cmp	r3, #0
 8003352:	d01b      	beq.n	800338c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f06f 0208 	mvn.w	r2, #8
 800335c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2204      	movs	r2, #4
 8003362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f96b 	bl	800364e <HAL_TIM_IC_CaptureCallback>
 8003378:	e005      	b.n	8003386 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f95d 	bl	800363a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f96e 	bl	8003662 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	f003 0310 	and.w	r3, r3, #16
 8003392:	2b00      	cmp	r3, #0
 8003394:	d020      	beq.n	80033d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f003 0310 	and.w	r3, r3, #16
 800339c:	2b00      	cmp	r3, #0
 800339e:	d01b      	beq.n	80033d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f06f 0210 	mvn.w	r2, #16
 80033a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2208      	movs	r2, #8
 80033ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f945 	bl	800364e <HAL_TIM_IC_CaptureCallback>
 80033c4:	e005      	b.n	80033d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f937 	bl	800363a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 f948 	bl	8003662 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00c      	beq.n	80033fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d007      	beq.n	80033fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f06f 0201 	mvn.w	r2, #1
 80033f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f915 	bl	8003626 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00c      	beq.n	8003420 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800340c:	2b00      	cmp	r3, #0
 800340e:	d007      	beq.n	8003420 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 faba 	bl	8003994 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00c      	beq.n	8003444 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003430:	2b00      	cmp	r3, #0
 8003432:	d007      	beq.n	8003444 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800343c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 fab2 	bl	80039a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00c      	beq.n	8003468 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003454:	2b00      	cmp	r3, #0
 8003456:	d007      	beq.n	8003468 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 f907 	bl	8003676 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f003 0320 	and.w	r3, r3, #32
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00c      	beq.n	800348c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f003 0320 	and.w	r3, r3, #32
 8003478:	2b00      	cmp	r3, #0
 800347a:	d007      	beq.n	800348c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f06f 0220 	mvn.w	r2, #32
 8003484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 fa7a 	bl	8003980 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800348c:	bf00      	nop
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800349e:	2300      	movs	r3, #0
 80034a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d101      	bne.n	80034b0 <HAL_TIM_ConfigClockSource+0x1c>
 80034ac:	2302      	movs	r3, #2
 80034ae:	e0b6      	b.n	800361e <HAL_TIM_ConfigClockSource+0x18a>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80034d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80034da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68ba      	ldr	r2, [r7, #8]
 80034e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034ec:	d03e      	beq.n	800356c <HAL_TIM_ConfigClockSource+0xd8>
 80034ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034f2:	f200 8087 	bhi.w	8003604 <HAL_TIM_ConfigClockSource+0x170>
 80034f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034fa:	f000 8086 	beq.w	800360a <HAL_TIM_ConfigClockSource+0x176>
 80034fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003502:	d87f      	bhi.n	8003604 <HAL_TIM_ConfigClockSource+0x170>
 8003504:	2b70      	cmp	r3, #112	@ 0x70
 8003506:	d01a      	beq.n	800353e <HAL_TIM_ConfigClockSource+0xaa>
 8003508:	2b70      	cmp	r3, #112	@ 0x70
 800350a:	d87b      	bhi.n	8003604 <HAL_TIM_ConfigClockSource+0x170>
 800350c:	2b60      	cmp	r3, #96	@ 0x60
 800350e:	d050      	beq.n	80035b2 <HAL_TIM_ConfigClockSource+0x11e>
 8003510:	2b60      	cmp	r3, #96	@ 0x60
 8003512:	d877      	bhi.n	8003604 <HAL_TIM_ConfigClockSource+0x170>
 8003514:	2b50      	cmp	r3, #80	@ 0x50
 8003516:	d03c      	beq.n	8003592 <HAL_TIM_ConfigClockSource+0xfe>
 8003518:	2b50      	cmp	r3, #80	@ 0x50
 800351a:	d873      	bhi.n	8003604 <HAL_TIM_ConfigClockSource+0x170>
 800351c:	2b40      	cmp	r3, #64	@ 0x40
 800351e:	d058      	beq.n	80035d2 <HAL_TIM_ConfigClockSource+0x13e>
 8003520:	2b40      	cmp	r3, #64	@ 0x40
 8003522:	d86f      	bhi.n	8003604 <HAL_TIM_ConfigClockSource+0x170>
 8003524:	2b30      	cmp	r3, #48	@ 0x30
 8003526:	d064      	beq.n	80035f2 <HAL_TIM_ConfigClockSource+0x15e>
 8003528:	2b30      	cmp	r3, #48	@ 0x30
 800352a:	d86b      	bhi.n	8003604 <HAL_TIM_ConfigClockSource+0x170>
 800352c:	2b20      	cmp	r3, #32
 800352e:	d060      	beq.n	80035f2 <HAL_TIM_ConfigClockSource+0x15e>
 8003530:	2b20      	cmp	r3, #32
 8003532:	d867      	bhi.n	8003604 <HAL_TIM_ConfigClockSource+0x170>
 8003534:	2b00      	cmp	r3, #0
 8003536:	d05c      	beq.n	80035f2 <HAL_TIM_ConfigClockSource+0x15e>
 8003538:	2b10      	cmp	r3, #16
 800353a:	d05a      	beq.n	80035f2 <HAL_TIM_ConfigClockSource+0x15e>
 800353c:	e062      	b.n	8003604 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800354e:	f000 f991 	bl	8003874 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003560:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	609a      	str	r2, [r3, #8]
      break;
 800356a:	e04f      	b.n	800360c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800357c:	f000 f97a 	bl	8003874 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689a      	ldr	r2, [r3, #8]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800358e:	609a      	str	r2, [r3, #8]
      break;
 8003590:	e03c      	b.n	800360c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800359e:	461a      	mov	r2, r3
 80035a0:	f000 f8ee 	bl	8003780 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2150      	movs	r1, #80	@ 0x50
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 f947 	bl	800383e <TIM_ITRx_SetConfig>
      break;
 80035b0:	e02c      	b.n	800360c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035be:	461a      	mov	r2, r3
 80035c0:	f000 f90d 	bl	80037de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2160      	movs	r1, #96	@ 0x60
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 f937 	bl	800383e <TIM_ITRx_SetConfig>
      break;
 80035d0:	e01c      	b.n	800360c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035de:	461a      	mov	r2, r3
 80035e0:	f000 f8ce 	bl	8003780 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2140      	movs	r1, #64	@ 0x40
 80035ea:	4618      	mov	r0, r3
 80035ec:	f000 f927 	bl	800383e <TIM_ITRx_SetConfig>
      break;
 80035f0:	e00c      	b.n	800360c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4619      	mov	r1, r3
 80035fc:	4610      	mov	r0, r2
 80035fe:	f000 f91e 	bl	800383e <TIM_ITRx_SetConfig>
      break;
 8003602:	e003      	b.n	800360c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	73fb      	strb	r3, [r7, #15]
      break;
 8003608:	e000      	b.n	800360c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800360a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800361c:	7bfb      	ldrb	r3, [r7, #15]
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003626:	b480      	push	{r7}
 8003628:	b083      	sub	sp, #12
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800362e:	bf00      	nop
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr

0800363a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800363a:	b480      	push	{r7}
 800363c:	b083      	sub	sp, #12
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003676:	b480      	push	{r7}
 8003678:	b083      	sub	sp, #12
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800367e:	bf00      	nop
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
	...

0800368c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a34      	ldr	r2, [pc, #208]	@ (8003770 <TIM_Base_SetConfig+0xe4>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d003      	beq.n	80036ac <TIM_Base_SetConfig+0x20>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036aa:	d108      	bne.n	80036be <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a2b      	ldr	r2, [pc, #172]	@ (8003770 <TIM_Base_SetConfig+0xe4>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d00f      	beq.n	80036e6 <TIM_Base_SetConfig+0x5a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036cc:	d00b      	beq.n	80036e6 <TIM_Base_SetConfig+0x5a>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a28      	ldr	r2, [pc, #160]	@ (8003774 <TIM_Base_SetConfig+0xe8>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d007      	beq.n	80036e6 <TIM_Base_SetConfig+0x5a>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a27      	ldr	r2, [pc, #156]	@ (8003778 <TIM_Base_SetConfig+0xec>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d003      	beq.n	80036e6 <TIM_Base_SetConfig+0x5a>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a26      	ldr	r2, [pc, #152]	@ (800377c <TIM_Base_SetConfig+0xf0>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d108      	bne.n	80036f8 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	4313      	orrs	r3, r2
 8003704:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a14      	ldr	r2, [pc, #80]	@ (8003770 <TIM_Base_SetConfig+0xe4>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d00b      	beq.n	800373c <TIM_Base_SetConfig+0xb0>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a13      	ldr	r2, [pc, #76]	@ (8003774 <TIM_Base_SetConfig+0xe8>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d007      	beq.n	800373c <TIM_Base_SetConfig+0xb0>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a12      	ldr	r2, [pc, #72]	@ (8003778 <TIM_Base_SetConfig+0xec>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d003      	beq.n	800373c <TIM_Base_SetConfig+0xb0>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a11      	ldr	r2, [pc, #68]	@ (800377c <TIM_Base_SetConfig+0xf0>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d103      	bne.n	8003744 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	691a      	ldr	r2, [r3, #16]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b01      	cmp	r3, #1
 8003754:	d105      	bne.n	8003762 <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	f023 0201 	bic.w	r2, r3, #1
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	611a      	str	r2, [r3, #16]
  }
}
 8003762:	bf00      	nop
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	40012c00 	.word	0x40012c00
 8003774:	40014000 	.word	0x40014000
 8003778:	40014400 	.word	0x40014400
 800377c:	40014800 	.word	0x40014800

08003780 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003780:	b480      	push	{r7}
 8003782:	b087      	sub	sp, #28
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	f023 0201 	bic.w	r2, r3, #1
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f023 030a 	bic.w	r3, r3, #10
 80037bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	621a      	str	r2, [r3, #32]
}
 80037d2:	bf00      	nop
 80037d4:	371c      	adds	r7, #28
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037de:	b480      	push	{r7}
 80037e0:	b087      	sub	sp, #28
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	60f8      	str	r0, [r7, #12]
 80037e6:	60b9      	str	r1, [r7, #8]
 80037e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	f023 0210 	bic.w	r2, r3, #16
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003808:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	031b      	lsls	r3, r3, #12
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	4313      	orrs	r3, r2
 8003812:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800381a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	011b      	lsls	r3, r3, #4
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	4313      	orrs	r3, r2
 8003824:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	621a      	str	r2, [r3, #32]
}
 8003832:	bf00      	nop
 8003834:	371c      	adds	r7, #28
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800383e:	b480      	push	{r7}
 8003840:	b085      	sub	sp, #20
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
 8003846:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003854:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	4313      	orrs	r3, r2
 800385c:	f043 0307 	orr.w	r3, r3, #7
 8003860:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	609a      	str	r2, [r3, #8]
}
 8003868:	bf00      	nop
 800386a:	3714      	adds	r7, #20
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003874:	b480      	push	{r7}
 8003876:	b087      	sub	sp, #28
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
 8003880:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800388e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	021a      	lsls	r2, r3, #8
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	431a      	orrs	r2, r3
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	4313      	orrs	r3, r2
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	4313      	orrs	r3, r2
 80038a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	609a      	str	r2, [r3, #8]
}
 80038a8:	bf00      	nop
 80038aa:	371c      	adds	r7, #28
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d101      	bne.n	80038cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038c8:	2302      	movs	r3, #2
 80038ca:	e04f      	b.n	800396c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2202      	movs	r2, #2
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a21      	ldr	r2, [pc, #132]	@ (8003978 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d108      	bne.n	8003908 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80038fc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	4313      	orrs	r3, r2
 8003906:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800390e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	4313      	orrs	r3, r2
 8003918:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a14      	ldr	r2, [pc, #80]	@ (8003978 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d009      	beq.n	8003940 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003934:	d004      	beq.n	8003940 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a10      	ldr	r2, [pc, #64]	@ (800397c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d10c      	bne.n	800395a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003946:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	4313      	orrs	r3, r2
 8003950:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	3714      	adds	r7, #20
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	40012c00 	.word	0x40012c00
 800397c:	40014000 	.word	0x40014000

08003980 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e040      	b.n	8003a50 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d106      	bne.n	80039e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7fd fb44 	bl	800106c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2224      	movs	r2, #36	@ 0x24
 80039e8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 0201 	bic.w	r2, r2, #1
 80039f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d002      	beq.n	8003a08 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f9e8 	bl	8003dd8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 f8af 	bl	8003b6c <UART_SetConfig>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d101      	bne.n	8003a18 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e01b      	b.n	8003a50 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685a      	ldr	r2, [r3, #4]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689a      	ldr	r2, [r3, #8]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 0201 	orr.w	r2, r2, #1
 8003a46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 fa67 	bl	8003f1c <UART_CheckIdleState>
 8003a4e:	4603      	mov	r3, r0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3708      	adds	r7, #8
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b08a      	sub	sp, #40	@ 0x28
 8003a5c:	af02      	add	r7, sp, #8
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	603b      	str	r3, [r7, #0]
 8003a64:	4613      	mov	r3, r2
 8003a66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a6c:	2b20      	cmp	r3, #32
 8003a6e:	d177      	bne.n	8003b60 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <HAL_UART_Transmit+0x24>
 8003a76:	88fb      	ldrh	r3, [r7, #6]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e070      	b.n	8003b62 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2221      	movs	r2, #33	@ 0x21
 8003a8c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a8e:	f7fd fdc5 	bl	800161c <HAL_GetTick>
 8003a92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	88fa      	ldrh	r2, [r7, #6]
 8003a98:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	88fa      	ldrh	r2, [r7, #6]
 8003aa0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aac:	d108      	bne.n	8003ac0 <HAL_UART_Transmit+0x68>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d104      	bne.n	8003ac0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	61bb      	str	r3, [r7, #24]
 8003abe:	e003      	b.n	8003ac8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ac8:	e02f      	b.n	8003b2a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	2180      	movs	r1, #128	@ 0x80
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 fac9 	bl	800406c <UART_WaitOnFlagUntilTimeout>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d004      	beq.n	8003aea <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e03b      	b.n	8003b62 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10b      	bne.n	8003b08 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	881a      	ldrh	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003afc:	b292      	uxth	r2, r2
 8003afe:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	3302      	adds	r3, #2
 8003b04:	61bb      	str	r3, [r7, #24]
 8003b06:	e007      	b.n	8003b18 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	781a      	ldrb	r2, [r3, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	3301      	adds	r3, #1
 8003b16:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	3b01      	subs	r3, #1
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1c9      	bne.n	8003aca <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	2140      	movs	r1, #64	@ 0x40
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f000 fa93 	bl	800406c <UART_WaitOnFlagUntilTimeout>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d004      	beq.n	8003b56 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e005      	b.n	8003b62 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2220      	movs	r2, #32
 8003b5a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	e000      	b.n	8003b62 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003b60:	2302      	movs	r3, #2
  }
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3720      	adds	r7, #32
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
	...

08003b6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b088      	sub	sp, #32
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b74:	2300      	movs	r3, #0
 8003b76:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689a      	ldr	r2, [r3, #8]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	431a      	orrs	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	431a      	orrs	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	69db      	ldr	r3, [r3, #28]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	4b8a      	ldr	r3, [pc, #552]	@ (8003dc0 <UART_SetConfig+0x254>)
 8003b98:	4013      	ands	r3, r2
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6812      	ldr	r2, [r2, #0]
 8003b9e:	6979      	ldr	r1, [r7, #20]
 8003ba0:	430b      	orrs	r3, r1
 8003ba2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68da      	ldr	r2, [r3, #12]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a78      	ldr	r2, [pc, #480]	@ (8003dc4 <UART_SetConfig+0x258>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d120      	bne.n	8003c2a <UART_SetConfig+0xbe>
 8003be8:	4b77      	ldr	r3, [pc, #476]	@ (8003dc8 <UART_SetConfig+0x25c>)
 8003bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bec:	f003 0303 	and.w	r3, r3, #3
 8003bf0:	2b03      	cmp	r3, #3
 8003bf2:	d817      	bhi.n	8003c24 <UART_SetConfig+0xb8>
 8003bf4:	a201      	add	r2, pc, #4	@ (adr r2, 8003bfc <UART_SetConfig+0x90>)
 8003bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bfa:	bf00      	nop
 8003bfc:	08003c0d 	.word	0x08003c0d
 8003c00:	08003c19 	.word	0x08003c19
 8003c04:	08003c1f 	.word	0x08003c1f
 8003c08:	08003c13 	.word	0x08003c13
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	77fb      	strb	r3, [r7, #31]
 8003c10:	e01d      	b.n	8003c4e <UART_SetConfig+0xe2>
 8003c12:	2302      	movs	r3, #2
 8003c14:	77fb      	strb	r3, [r7, #31]
 8003c16:	e01a      	b.n	8003c4e <UART_SetConfig+0xe2>
 8003c18:	2304      	movs	r3, #4
 8003c1a:	77fb      	strb	r3, [r7, #31]
 8003c1c:	e017      	b.n	8003c4e <UART_SetConfig+0xe2>
 8003c1e:	2308      	movs	r3, #8
 8003c20:	77fb      	strb	r3, [r7, #31]
 8003c22:	e014      	b.n	8003c4e <UART_SetConfig+0xe2>
 8003c24:	2310      	movs	r3, #16
 8003c26:	77fb      	strb	r3, [r7, #31]
 8003c28:	e011      	b.n	8003c4e <UART_SetConfig+0xe2>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a67      	ldr	r2, [pc, #412]	@ (8003dcc <UART_SetConfig+0x260>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d102      	bne.n	8003c3a <UART_SetConfig+0xce>
 8003c34:	2300      	movs	r3, #0
 8003c36:	77fb      	strb	r3, [r7, #31]
 8003c38:	e009      	b.n	8003c4e <UART_SetConfig+0xe2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a64      	ldr	r2, [pc, #400]	@ (8003dd0 <UART_SetConfig+0x264>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d102      	bne.n	8003c4a <UART_SetConfig+0xde>
 8003c44:	2300      	movs	r3, #0
 8003c46:	77fb      	strb	r3, [r7, #31]
 8003c48:	e001      	b.n	8003c4e <UART_SetConfig+0xe2>
 8003c4a:	2310      	movs	r3, #16
 8003c4c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c56:	d15a      	bne.n	8003d0e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003c58:	7ffb      	ldrb	r3, [r7, #31]
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d827      	bhi.n	8003cae <UART_SetConfig+0x142>
 8003c5e:	a201      	add	r2, pc, #4	@ (adr r2, 8003c64 <UART_SetConfig+0xf8>)
 8003c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c64:	08003c89 	.word	0x08003c89
 8003c68:	08003c91 	.word	0x08003c91
 8003c6c:	08003c99 	.word	0x08003c99
 8003c70:	08003caf 	.word	0x08003caf
 8003c74:	08003c9f 	.word	0x08003c9f
 8003c78:	08003caf 	.word	0x08003caf
 8003c7c:	08003caf 	.word	0x08003caf
 8003c80:	08003caf 	.word	0x08003caf
 8003c84:	08003ca7 	.word	0x08003ca7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c88:	f7ff f9c6 	bl	8003018 <HAL_RCC_GetPCLK1Freq>
 8003c8c:	61b8      	str	r0, [r7, #24]
        break;
 8003c8e:	e013      	b.n	8003cb8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c90:	f7ff f9e4 	bl	800305c <HAL_RCC_GetPCLK2Freq>
 8003c94:	61b8      	str	r0, [r7, #24]
        break;
 8003c96:	e00f      	b.n	8003cb8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c98:	4b4e      	ldr	r3, [pc, #312]	@ (8003dd4 <UART_SetConfig+0x268>)
 8003c9a:	61bb      	str	r3, [r7, #24]
        break;
 8003c9c:	e00c      	b.n	8003cb8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c9e:	f7ff f95b 	bl	8002f58 <HAL_RCC_GetSysClockFreq>
 8003ca2:	61b8      	str	r0, [r7, #24]
        break;
 8003ca4:	e008      	b.n	8003cb8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ca6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003caa:	61bb      	str	r3, [r7, #24]
        break;
 8003cac:	e004      	b.n	8003cb8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	77bb      	strb	r3, [r7, #30]
        break;
 8003cb6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d074      	beq.n	8003da8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	005a      	lsls	r2, r3, #1
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	085b      	lsrs	r3, r3, #1
 8003cc8:	441a      	add	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	2b0f      	cmp	r3, #15
 8003cd8:	d916      	bls.n	8003d08 <UART_SetConfig+0x19c>
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ce0:	d212      	bcs.n	8003d08 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	f023 030f 	bic.w	r3, r3, #15
 8003cea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	085b      	lsrs	r3, r3, #1
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	f003 0307 	and.w	r3, r3, #7
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	89fb      	ldrh	r3, [r7, #14]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	89fa      	ldrh	r2, [r7, #14]
 8003d04:	60da      	str	r2, [r3, #12]
 8003d06:	e04f      	b.n	8003da8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	77bb      	strb	r3, [r7, #30]
 8003d0c:	e04c      	b.n	8003da8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d0e:	7ffb      	ldrb	r3, [r7, #31]
 8003d10:	2b08      	cmp	r3, #8
 8003d12:	d828      	bhi.n	8003d66 <UART_SetConfig+0x1fa>
 8003d14:	a201      	add	r2, pc, #4	@ (adr r2, 8003d1c <UART_SetConfig+0x1b0>)
 8003d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d1a:	bf00      	nop
 8003d1c:	08003d41 	.word	0x08003d41
 8003d20:	08003d49 	.word	0x08003d49
 8003d24:	08003d51 	.word	0x08003d51
 8003d28:	08003d67 	.word	0x08003d67
 8003d2c:	08003d57 	.word	0x08003d57
 8003d30:	08003d67 	.word	0x08003d67
 8003d34:	08003d67 	.word	0x08003d67
 8003d38:	08003d67 	.word	0x08003d67
 8003d3c:	08003d5f 	.word	0x08003d5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d40:	f7ff f96a 	bl	8003018 <HAL_RCC_GetPCLK1Freq>
 8003d44:	61b8      	str	r0, [r7, #24]
        break;
 8003d46:	e013      	b.n	8003d70 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d48:	f7ff f988 	bl	800305c <HAL_RCC_GetPCLK2Freq>
 8003d4c:	61b8      	str	r0, [r7, #24]
        break;
 8003d4e:	e00f      	b.n	8003d70 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d50:	4b20      	ldr	r3, [pc, #128]	@ (8003dd4 <UART_SetConfig+0x268>)
 8003d52:	61bb      	str	r3, [r7, #24]
        break;
 8003d54:	e00c      	b.n	8003d70 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d56:	f7ff f8ff 	bl	8002f58 <HAL_RCC_GetSysClockFreq>
 8003d5a:	61b8      	str	r0, [r7, #24]
        break;
 8003d5c:	e008      	b.n	8003d70 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d62:	61bb      	str	r3, [r7, #24]
        break;
 8003d64:	e004      	b.n	8003d70 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	77bb      	strb	r3, [r7, #30]
        break;
 8003d6e:	bf00      	nop
    }

    if (pclk != 0U)
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d018      	beq.n	8003da8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	085a      	lsrs	r2, r3, #1
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	441a      	add	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d88:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	2b0f      	cmp	r3, #15
 8003d8e:	d909      	bls.n	8003da4 <UART_SetConfig+0x238>
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d96:	d205      	bcs.n	8003da4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	60da      	str	r2, [r3, #12]
 8003da2:	e001      	b.n	8003da8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003db4:	7fbb      	ldrb	r3, [r7, #30]
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3720      	adds	r7, #32
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	efff69f3 	.word	0xefff69f3
 8003dc4:	40013800 	.word	0x40013800
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	40004400 	.word	0x40004400
 8003dd0:	40004800 	.word	0x40004800
 8003dd4:	007a1200 	.word	0x007a1200

08003dd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de4:	f003 0308 	and.w	r3, r3, #8
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00a      	beq.n	8003e02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00a      	beq.n	8003e24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00a      	beq.n	8003e46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	430a      	orrs	r2, r1
 8003e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4a:	f003 0304 	and.w	r3, r3, #4
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00a      	beq.n	8003e68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6c:	f003 0310 	and.w	r3, r3, #16
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00a      	beq.n	8003e8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8e:	f003 0320 	and.w	r3, r3, #32
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00a      	beq.n	8003eac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d01a      	beq.n	8003eee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ed6:	d10a      	bne.n	8003eee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00a      	beq.n	8003f10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	605a      	str	r2, [r3, #4]
  }
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b098      	sub	sp, #96	@ 0x60
 8003f20:	af02      	add	r7, sp, #8
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f2c:	f7fd fb76 	bl	800161c <HAL_GetTick>
 8003f30:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0308 	and.w	r3, r3, #8
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	d12e      	bne.n	8003f9e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f40:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f88c 	bl	800406c <UART_WaitOnFlagUntilTimeout>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d021      	beq.n	8003f9e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f62:	e853 3f00 	ldrex	r3, [r3]
 8003f66:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	461a      	mov	r2, r3
 8003f76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f78:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f7a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f80:	e841 2300 	strex	r3, r2, [r1]
 8003f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1e6      	bne.n	8003f5a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e062      	b.n	8004064 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b04      	cmp	r3, #4
 8003faa:	d149      	bne.n	8004040 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003fb0:	9300      	str	r3, [sp, #0]
 8003fb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f856 	bl	800406c <UART_WaitOnFlagUntilTimeout>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d03c      	beq.n	8004040 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fce:	e853 3f00 	ldrex	r3, [r3]
 8003fd2:	623b      	str	r3, [r7, #32]
   return(result);
 8003fd4:	6a3b      	ldr	r3, [r7, #32]
 8003fd6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fe4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fe6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003fea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fec:	e841 2300 	strex	r3, r2, [r1]
 8003ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1e6      	bne.n	8003fc6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	3308      	adds	r3, #8
 8003ffe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	e853 3f00 	ldrex	r3, [r3]
 8004006:	60fb      	str	r3, [r7, #12]
   return(result);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f023 0301 	bic.w	r3, r3, #1
 800400e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	3308      	adds	r3, #8
 8004016:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004018:	61fa      	str	r2, [r7, #28]
 800401a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401c:	69b9      	ldr	r1, [r7, #24]
 800401e:	69fa      	ldr	r2, [r7, #28]
 8004020:	e841 2300 	strex	r3, r2, [r1]
 8004024:	617b      	str	r3, [r7, #20]
   return(result);
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1e5      	bne.n	8003ff8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2220      	movs	r2, #32
 8004030:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e011      	b.n	8004064 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2220      	movs	r2, #32
 8004044:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2220      	movs	r2, #32
 800404a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3758      	adds	r7, #88	@ 0x58
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	603b      	str	r3, [r7, #0]
 8004078:	4613      	mov	r3, r2
 800407a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800407c:	e04f      	b.n	800411e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004084:	d04b      	beq.n	800411e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004086:	f7fd fac9 	bl	800161c <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	429a      	cmp	r2, r3
 8004094:	d302      	bcc.n	800409c <UART_WaitOnFlagUntilTimeout+0x30>
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d101      	bne.n	80040a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e04e      	b.n	800413e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0304 	and.w	r3, r3, #4
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d037      	beq.n	800411e <UART_WaitOnFlagUntilTimeout+0xb2>
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	2b80      	cmp	r3, #128	@ 0x80
 80040b2:	d034      	beq.n	800411e <UART_WaitOnFlagUntilTimeout+0xb2>
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	2b40      	cmp	r3, #64	@ 0x40
 80040b8:	d031      	beq.n	800411e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	69db      	ldr	r3, [r3, #28]
 80040c0:	f003 0308 	and.w	r3, r3, #8
 80040c4:	2b08      	cmp	r3, #8
 80040c6:	d110      	bne.n	80040ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2208      	movs	r2, #8
 80040ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f000 f838 	bl	8004146 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2208      	movs	r2, #8
 80040da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e029      	b.n	800413e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	69db      	ldr	r3, [r3, #28]
 80040f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040f8:	d111      	bne.n	800411e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004102:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f000 f81e 	bl	8004146 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2220      	movs	r2, #32
 800410e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e00f      	b.n	800413e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	69da      	ldr	r2, [r3, #28]
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	4013      	ands	r3, r2
 8004128:	68ba      	ldr	r2, [r7, #8]
 800412a:	429a      	cmp	r2, r3
 800412c:	bf0c      	ite	eq
 800412e:	2301      	moveq	r3, #1
 8004130:	2300      	movne	r3, #0
 8004132:	b2db      	uxtb	r3, r3
 8004134:	461a      	mov	r2, r3
 8004136:	79fb      	ldrb	r3, [r7, #7]
 8004138:	429a      	cmp	r2, r3
 800413a:	d0a0      	beq.n	800407e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004146:	b480      	push	{r7}
 8004148:	b095      	sub	sp, #84	@ 0x54
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004156:	e853 3f00 	ldrex	r3, [r3]
 800415a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800415c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800415e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004162:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	461a      	mov	r2, r3
 800416a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800416c:	643b      	str	r3, [r7, #64]	@ 0x40
 800416e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004170:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004172:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004174:	e841 2300 	strex	r3, r2, [r1]
 8004178:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800417a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1e6      	bne.n	800414e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	3308      	adds	r3, #8
 8004186:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004188:	6a3b      	ldr	r3, [r7, #32]
 800418a:	e853 3f00 	ldrex	r3, [r3]
 800418e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	f023 0301 	bic.w	r3, r3, #1
 8004196:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	3308      	adds	r3, #8
 800419e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041a8:	e841 2300 	strex	r3, r2, [r1]
 80041ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80041ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1e5      	bne.n	8004180 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d118      	bne.n	80041ee <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	e853 3f00 	ldrex	r3, [r3]
 80041c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	f023 0310 	bic.w	r3, r3, #16
 80041d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	461a      	mov	r2, r3
 80041d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041da:	61bb      	str	r3, [r7, #24]
 80041dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041de:	6979      	ldr	r1, [r7, #20]
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	e841 2300 	strex	r3, r2, [r1]
 80041e6:	613b      	str	r3, [r7, #16]
   return(result);
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1e6      	bne.n	80041bc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2220      	movs	r2, #32
 80041f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004202:	bf00      	nop
 8004204:	3754      	adds	r7, #84	@ 0x54
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
	...

08004210 <srand>:
 8004210:	b538      	push	{r3, r4, r5, lr}
 8004212:	4b10      	ldr	r3, [pc, #64]	@ (8004254 <srand+0x44>)
 8004214:	681d      	ldr	r5, [r3, #0]
 8004216:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004218:	4604      	mov	r4, r0
 800421a:	b9b3      	cbnz	r3, 800424a <srand+0x3a>
 800421c:	2018      	movs	r0, #24
 800421e:	f001 ff31 	bl	8006084 <malloc>
 8004222:	4602      	mov	r2, r0
 8004224:	6328      	str	r0, [r5, #48]	@ 0x30
 8004226:	b920      	cbnz	r0, 8004232 <srand+0x22>
 8004228:	4b0b      	ldr	r3, [pc, #44]	@ (8004258 <srand+0x48>)
 800422a:	480c      	ldr	r0, [pc, #48]	@ (800425c <srand+0x4c>)
 800422c:	2146      	movs	r1, #70	@ 0x46
 800422e:	f001 f873 	bl	8005318 <__assert_func>
 8004232:	490b      	ldr	r1, [pc, #44]	@ (8004260 <srand+0x50>)
 8004234:	4b0b      	ldr	r3, [pc, #44]	@ (8004264 <srand+0x54>)
 8004236:	e9c0 1300 	strd	r1, r3, [r0]
 800423a:	4b0b      	ldr	r3, [pc, #44]	@ (8004268 <srand+0x58>)
 800423c:	6083      	str	r3, [r0, #8]
 800423e:	230b      	movs	r3, #11
 8004240:	8183      	strh	r3, [r0, #12]
 8004242:	2100      	movs	r1, #0
 8004244:	2001      	movs	r0, #1
 8004246:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800424a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800424c:	2200      	movs	r2, #0
 800424e:	611c      	str	r4, [r3, #16]
 8004250:	615a      	str	r2, [r3, #20]
 8004252:	bd38      	pop	{r3, r4, r5, pc}
 8004254:	20000018 	.word	0x20000018
 8004258:	08008a18 	.word	0x08008a18
 800425c:	08008a2f 	.word	0x08008a2f
 8004260:	abcd330e 	.word	0xabcd330e
 8004264:	e66d1234 	.word	0xe66d1234
 8004268:	0005deec 	.word	0x0005deec

0800426c <rand>:
 800426c:	4b16      	ldr	r3, [pc, #88]	@ (80042c8 <rand+0x5c>)
 800426e:	b510      	push	{r4, lr}
 8004270:	681c      	ldr	r4, [r3, #0]
 8004272:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004274:	b9b3      	cbnz	r3, 80042a4 <rand+0x38>
 8004276:	2018      	movs	r0, #24
 8004278:	f001 ff04 	bl	8006084 <malloc>
 800427c:	4602      	mov	r2, r0
 800427e:	6320      	str	r0, [r4, #48]	@ 0x30
 8004280:	b920      	cbnz	r0, 800428c <rand+0x20>
 8004282:	4b12      	ldr	r3, [pc, #72]	@ (80042cc <rand+0x60>)
 8004284:	4812      	ldr	r0, [pc, #72]	@ (80042d0 <rand+0x64>)
 8004286:	2152      	movs	r1, #82	@ 0x52
 8004288:	f001 f846 	bl	8005318 <__assert_func>
 800428c:	4911      	ldr	r1, [pc, #68]	@ (80042d4 <rand+0x68>)
 800428e:	4b12      	ldr	r3, [pc, #72]	@ (80042d8 <rand+0x6c>)
 8004290:	e9c0 1300 	strd	r1, r3, [r0]
 8004294:	4b11      	ldr	r3, [pc, #68]	@ (80042dc <rand+0x70>)
 8004296:	6083      	str	r3, [r0, #8]
 8004298:	230b      	movs	r3, #11
 800429a:	8183      	strh	r3, [r0, #12]
 800429c:	2100      	movs	r1, #0
 800429e:	2001      	movs	r0, #1
 80042a0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80042a4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80042a6:	480e      	ldr	r0, [pc, #56]	@ (80042e0 <rand+0x74>)
 80042a8:	690b      	ldr	r3, [r1, #16]
 80042aa:	694c      	ldr	r4, [r1, #20]
 80042ac:	4a0d      	ldr	r2, [pc, #52]	@ (80042e4 <rand+0x78>)
 80042ae:	4358      	muls	r0, r3
 80042b0:	fb02 0004 	mla	r0, r2, r4, r0
 80042b4:	fba3 3202 	umull	r3, r2, r3, r2
 80042b8:	3301      	adds	r3, #1
 80042ba:	eb40 0002 	adc.w	r0, r0, r2
 80042be:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80042c2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80042c6:	bd10      	pop	{r4, pc}
 80042c8:	20000018 	.word	0x20000018
 80042cc:	08008a18 	.word	0x08008a18
 80042d0:	08008a2f 	.word	0x08008a2f
 80042d4:	abcd330e 	.word	0xabcd330e
 80042d8:	e66d1234 	.word	0xe66d1234
 80042dc:	0005deec 	.word	0x0005deec
 80042e0:	5851f42d 	.word	0x5851f42d
 80042e4:	4c957f2d 	.word	0x4c957f2d

080042e8 <__cvt>:
 80042e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042ec:	ec57 6b10 	vmov	r6, r7, d0
 80042f0:	2f00      	cmp	r7, #0
 80042f2:	460c      	mov	r4, r1
 80042f4:	4619      	mov	r1, r3
 80042f6:	463b      	mov	r3, r7
 80042f8:	bfbb      	ittet	lt
 80042fa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80042fe:	461f      	movlt	r7, r3
 8004300:	2300      	movge	r3, #0
 8004302:	232d      	movlt	r3, #45	@ 0x2d
 8004304:	700b      	strb	r3, [r1, #0]
 8004306:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004308:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800430c:	4691      	mov	r9, r2
 800430e:	f023 0820 	bic.w	r8, r3, #32
 8004312:	bfbc      	itt	lt
 8004314:	4632      	movlt	r2, r6
 8004316:	4616      	movlt	r6, r2
 8004318:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800431c:	d005      	beq.n	800432a <__cvt+0x42>
 800431e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004322:	d100      	bne.n	8004326 <__cvt+0x3e>
 8004324:	3401      	adds	r4, #1
 8004326:	2102      	movs	r1, #2
 8004328:	e000      	b.n	800432c <__cvt+0x44>
 800432a:	2103      	movs	r1, #3
 800432c:	ab03      	add	r3, sp, #12
 800432e:	9301      	str	r3, [sp, #4]
 8004330:	ab02      	add	r3, sp, #8
 8004332:	9300      	str	r3, [sp, #0]
 8004334:	ec47 6b10 	vmov	d0, r6, r7
 8004338:	4653      	mov	r3, sl
 800433a:	4622      	mov	r2, r4
 800433c:	f001 f894 	bl	8005468 <_dtoa_r>
 8004340:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004344:	4605      	mov	r5, r0
 8004346:	d119      	bne.n	800437c <__cvt+0x94>
 8004348:	f019 0f01 	tst.w	r9, #1
 800434c:	d00e      	beq.n	800436c <__cvt+0x84>
 800434e:	eb00 0904 	add.w	r9, r0, r4
 8004352:	2200      	movs	r2, #0
 8004354:	2300      	movs	r3, #0
 8004356:	4630      	mov	r0, r6
 8004358:	4639      	mov	r1, r7
 800435a:	f7fc fbb5 	bl	8000ac8 <__aeabi_dcmpeq>
 800435e:	b108      	cbz	r0, 8004364 <__cvt+0x7c>
 8004360:	f8cd 900c 	str.w	r9, [sp, #12]
 8004364:	2230      	movs	r2, #48	@ 0x30
 8004366:	9b03      	ldr	r3, [sp, #12]
 8004368:	454b      	cmp	r3, r9
 800436a:	d31e      	bcc.n	80043aa <__cvt+0xc2>
 800436c:	9b03      	ldr	r3, [sp, #12]
 800436e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004370:	1b5b      	subs	r3, r3, r5
 8004372:	4628      	mov	r0, r5
 8004374:	6013      	str	r3, [r2, #0]
 8004376:	b004      	add	sp, #16
 8004378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800437c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004380:	eb00 0904 	add.w	r9, r0, r4
 8004384:	d1e5      	bne.n	8004352 <__cvt+0x6a>
 8004386:	7803      	ldrb	r3, [r0, #0]
 8004388:	2b30      	cmp	r3, #48	@ 0x30
 800438a:	d10a      	bne.n	80043a2 <__cvt+0xba>
 800438c:	2200      	movs	r2, #0
 800438e:	2300      	movs	r3, #0
 8004390:	4630      	mov	r0, r6
 8004392:	4639      	mov	r1, r7
 8004394:	f7fc fb98 	bl	8000ac8 <__aeabi_dcmpeq>
 8004398:	b918      	cbnz	r0, 80043a2 <__cvt+0xba>
 800439a:	f1c4 0401 	rsb	r4, r4, #1
 800439e:	f8ca 4000 	str.w	r4, [sl]
 80043a2:	f8da 3000 	ldr.w	r3, [sl]
 80043a6:	4499      	add	r9, r3
 80043a8:	e7d3      	b.n	8004352 <__cvt+0x6a>
 80043aa:	1c59      	adds	r1, r3, #1
 80043ac:	9103      	str	r1, [sp, #12]
 80043ae:	701a      	strb	r2, [r3, #0]
 80043b0:	e7d9      	b.n	8004366 <__cvt+0x7e>

080043b2 <__exponent>:
 80043b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043b4:	2900      	cmp	r1, #0
 80043b6:	bfba      	itte	lt
 80043b8:	4249      	neglt	r1, r1
 80043ba:	232d      	movlt	r3, #45	@ 0x2d
 80043bc:	232b      	movge	r3, #43	@ 0x2b
 80043be:	2909      	cmp	r1, #9
 80043c0:	7002      	strb	r2, [r0, #0]
 80043c2:	7043      	strb	r3, [r0, #1]
 80043c4:	dd29      	ble.n	800441a <__exponent+0x68>
 80043c6:	f10d 0307 	add.w	r3, sp, #7
 80043ca:	461d      	mov	r5, r3
 80043cc:	270a      	movs	r7, #10
 80043ce:	461a      	mov	r2, r3
 80043d0:	fbb1 f6f7 	udiv	r6, r1, r7
 80043d4:	fb07 1416 	mls	r4, r7, r6, r1
 80043d8:	3430      	adds	r4, #48	@ 0x30
 80043da:	f802 4c01 	strb.w	r4, [r2, #-1]
 80043de:	460c      	mov	r4, r1
 80043e0:	2c63      	cmp	r4, #99	@ 0x63
 80043e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80043e6:	4631      	mov	r1, r6
 80043e8:	dcf1      	bgt.n	80043ce <__exponent+0x1c>
 80043ea:	3130      	adds	r1, #48	@ 0x30
 80043ec:	1e94      	subs	r4, r2, #2
 80043ee:	f803 1c01 	strb.w	r1, [r3, #-1]
 80043f2:	1c41      	adds	r1, r0, #1
 80043f4:	4623      	mov	r3, r4
 80043f6:	42ab      	cmp	r3, r5
 80043f8:	d30a      	bcc.n	8004410 <__exponent+0x5e>
 80043fa:	f10d 0309 	add.w	r3, sp, #9
 80043fe:	1a9b      	subs	r3, r3, r2
 8004400:	42ac      	cmp	r4, r5
 8004402:	bf88      	it	hi
 8004404:	2300      	movhi	r3, #0
 8004406:	3302      	adds	r3, #2
 8004408:	4403      	add	r3, r0
 800440a:	1a18      	subs	r0, r3, r0
 800440c:	b003      	add	sp, #12
 800440e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004410:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004414:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004418:	e7ed      	b.n	80043f6 <__exponent+0x44>
 800441a:	2330      	movs	r3, #48	@ 0x30
 800441c:	3130      	adds	r1, #48	@ 0x30
 800441e:	7083      	strb	r3, [r0, #2]
 8004420:	70c1      	strb	r1, [r0, #3]
 8004422:	1d03      	adds	r3, r0, #4
 8004424:	e7f1      	b.n	800440a <__exponent+0x58>
	...

08004428 <_printf_float>:
 8004428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800442c:	b08d      	sub	sp, #52	@ 0x34
 800442e:	460c      	mov	r4, r1
 8004430:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004434:	4616      	mov	r6, r2
 8004436:	461f      	mov	r7, r3
 8004438:	4605      	mov	r5, r0
 800443a:	f000 feef 	bl	800521c <_localeconv_r>
 800443e:	6803      	ldr	r3, [r0, #0]
 8004440:	9304      	str	r3, [sp, #16]
 8004442:	4618      	mov	r0, r3
 8004444:	f7fb ff14 	bl	8000270 <strlen>
 8004448:	2300      	movs	r3, #0
 800444a:	930a      	str	r3, [sp, #40]	@ 0x28
 800444c:	f8d8 3000 	ldr.w	r3, [r8]
 8004450:	9005      	str	r0, [sp, #20]
 8004452:	3307      	adds	r3, #7
 8004454:	f023 0307 	bic.w	r3, r3, #7
 8004458:	f103 0208 	add.w	r2, r3, #8
 800445c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004460:	f8d4 b000 	ldr.w	fp, [r4]
 8004464:	f8c8 2000 	str.w	r2, [r8]
 8004468:	e9d3 8900 	ldrd	r8, r9, [r3]
 800446c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004470:	9307      	str	r3, [sp, #28]
 8004472:	f8cd 8018 	str.w	r8, [sp, #24]
 8004476:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800447a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800447e:	4b9c      	ldr	r3, [pc, #624]	@ (80046f0 <_printf_float+0x2c8>)
 8004480:	f04f 32ff 	mov.w	r2, #4294967295
 8004484:	f7fc fb52 	bl	8000b2c <__aeabi_dcmpun>
 8004488:	bb70      	cbnz	r0, 80044e8 <_printf_float+0xc0>
 800448a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800448e:	4b98      	ldr	r3, [pc, #608]	@ (80046f0 <_printf_float+0x2c8>)
 8004490:	f04f 32ff 	mov.w	r2, #4294967295
 8004494:	f7fc fb2c 	bl	8000af0 <__aeabi_dcmple>
 8004498:	bb30      	cbnz	r0, 80044e8 <_printf_float+0xc0>
 800449a:	2200      	movs	r2, #0
 800449c:	2300      	movs	r3, #0
 800449e:	4640      	mov	r0, r8
 80044a0:	4649      	mov	r1, r9
 80044a2:	f7fc fb1b 	bl	8000adc <__aeabi_dcmplt>
 80044a6:	b110      	cbz	r0, 80044ae <_printf_float+0x86>
 80044a8:	232d      	movs	r3, #45	@ 0x2d
 80044aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044ae:	4a91      	ldr	r2, [pc, #580]	@ (80046f4 <_printf_float+0x2cc>)
 80044b0:	4b91      	ldr	r3, [pc, #580]	@ (80046f8 <_printf_float+0x2d0>)
 80044b2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80044b6:	bf94      	ite	ls
 80044b8:	4690      	movls	r8, r2
 80044ba:	4698      	movhi	r8, r3
 80044bc:	2303      	movs	r3, #3
 80044be:	6123      	str	r3, [r4, #16]
 80044c0:	f02b 0304 	bic.w	r3, fp, #4
 80044c4:	6023      	str	r3, [r4, #0]
 80044c6:	f04f 0900 	mov.w	r9, #0
 80044ca:	9700      	str	r7, [sp, #0]
 80044cc:	4633      	mov	r3, r6
 80044ce:	aa0b      	add	r2, sp, #44	@ 0x2c
 80044d0:	4621      	mov	r1, r4
 80044d2:	4628      	mov	r0, r5
 80044d4:	f000 f9d2 	bl	800487c <_printf_common>
 80044d8:	3001      	adds	r0, #1
 80044da:	f040 808d 	bne.w	80045f8 <_printf_float+0x1d0>
 80044de:	f04f 30ff 	mov.w	r0, #4294967295
 80044e2:	b00d      	add	sp, #52	@ 0x34
 80044e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044e8:	4642      	mov	r2, r8
 80044ea:	464b      	mov	r3, r9
 80044ec:	4640      	mov	r0, r8
 80044ee:	4649      	mov	r1, r9
 80044f0:	f7fc fb1c 	bl	8000b2c <__aeabi_dcmpun>
 80044f4:	b140      	cbz	r0, 8004508 <_printf_float+0xe0>
 80044f6:	464b      	mov	r3, r9
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	bfbc      	itt	lt
 80044fc:	232d      	movlt	r3, #45	@ 0x2d
 80044fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004502:	4a7e      	ldr	r2, [pc, #504]	@ (80046fc <_printf_float+0x2d4>)
 8004504:	4b7e      	ldr	r3, [pc, #504]	@ (8004700 <_printf_float+0x2d8>)
 8004506:	e7d4      	b.n	80044b2 <_printf_float+0x8a>
 8004508:	6863      	ldr	r3, [r4, #4]
 800450a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800450e:	9206      	str	r2, [sp, #24]
 8004510:	1c5a      	adds	r2, r3, #1
 8004512:	d13b      	bne.n	800458c <_printf_float+0x164>
 8004514:	2306      	movs	r3, #6
 8004516:	6063      	str	r3, [r4, #4]
 8004518:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800451c:	2300      	movs	r3, #0
 800451e:	6022      	str	r2, [r4, #0]
 8004520:	9303      	str	r3, [sp, #12]
 8004522:	ab0a      	add	r3, sp, #40	@ 0x28
 8004524:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004528:	ab09      	add	r3, sp, #36	@ 0x24
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	6861      	ldr	r1, [r4, #4]
 800452e:	ec49 8b10 	vmov	d0, r8, r9
 8004532:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004536:	4628      	mov	r0, r5
 8004538:	f7ff fed6 	bl	80042e8 <__cvt>
 800453c:	9b06      	ldr	r3, [sp, #24]
 800453e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004540:	2b47      	cmp	r3, #71	@ 0x47
 8004542:	4680      	mov	r8, r0
 8004544:	d129      	bne.n	800459a <_printf_float+0x172>
 8004546:	1cc8      	adds	r0, r1, #3
 8004548:	db02      	blt.n	8004550 <_printf_float+0x128>
 800454a:	6863      	ldr	r3, [r4, #4]
 800454c:	4299      	cmp	r1, r3
 800454e:	dd41      	ble.n	80045d4 <_printf_float+0x1ac>
 8004550:	f1aa 0a02 	sub.w	sl, sl, #2
 8004554:	fa5f fa8a 	uxtb.w	sl, sl
 8004558:	3901      	subs	r1, #1
 800455a:	4652      	mov	r2, sl
 800455c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004560:	9109      	str	r1, [sp, #36]	@ 0x24
 8004562:	f7ff ff26 	bl	80043b2 <__exponent>
 8004566:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004568:	1813      	adds	r3, r2, r0
 800456a:	2a01      	cmp	r2, #1
 800456c:	4681      	mov	r9, r0
 800456e:	6123      	str	r3, [r4, #16]
 8004570:	dc02      	bgt.n	8004578 <_printf_float+0x150>
 8004572:	6822      	ldr	r2, [r4, #0]
 8004574:	07d2      	lsls	r2, r2, #31
 8004576:	d501      	bpl.n	800457c <_printf_float+0x154>
 8004578:	3301      	adds	r3, #1
 800457a:	6123      	str	r3, [r4, #16]
 800457c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0a2      	beq.n	80044ca <_printf_float+0xa2>
 8004584:	232d      	movs	r3, #45	@ 0x2d
 8004586:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800458a:	e79e      	b.n	80044ca <_printf_float+0xa2>
 800458c:	9a06      	ldr	r2, [sp, #24]
 800458e:	2a47      	cmp	r2, #71	@ 0x47
 8004590:	d1c2      	bne.n	8004518 <_printf_float+0xf0>
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1c0      	bne.n	8004518 <_printf_float+0xf0>
 8004596:	2301      	movs	r3, #1
 8004598:	e7bd      	b.n	8004516 <_printf_float+0xee>
 800459a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800459e:	d9db      	bls.n	8004558 <_printf_float+0x130>
 80045a0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80045a4:	d118      	bne.n	80045d8 <_printf_float+0x1b0>
 80045a6:	2900      	cmp	r1, #0
 80045a8:	6863      	ldr	r3, [r4, #4]
 80045aa:	dd0b      	ble.n	80045c4 <_printf_float+0x19c>
 80045ac:	6121      	str	r1, [r4, #16]
 80045ae:	b913      	cbnz	r3, 80045b6 <_printf_float+0x18e>
 80045b0:	6822      	ldr	r2, [r4, #0]
 80045b2:	07d0      	lsls	r0, r2, #31
 80045b4:	d502      	bpl.n	80045bc <_printf_float+0x194>
 80045b6:	3301      	adds	r3, #1
 80045b8:	440b      	add	r3, r1
 80045ba:	6123      	str	r3, [r4, #16]
 80045bc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80045be:	f04f 0900 	mov.w	r9, #0
 80045c2:	e7db      	b.n	800457c <_printf_float+0x154>
 80045c4:	b913      	cbnz	r3, 80045cc <_printf_float+0x1a4>
 80045c6:	6822      	ldr	r2, [r4, #0]
 80045c8:	07d2      	lsls	r2, r2, #31
 80045ca:	d501      	bpl.n	80045d0 <_printf_float+0x1a8>
 80045cc:	3302      	adds	r3, #2
 80045ce:	e7f4      	b.n	80045ba <_printf_float+0x192>
 80045d0:	2301      	movs	r3, #1
 80045d2:	e7f2      	b.n	80045ba <_printf_float+0x192>
 80045d4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80045d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80045da:	4299      	cmp	r1, r3
 80045dc:	db05      	blt.n	80045ea <_printf_float+0x1c2>
 80045de:	6823      	ldr	r3, [r4, #0]
 80045e0:	6121      	str	r1, [r4, #16]
 80045e2:	07d8      	lsls	r0, r3, #31
 80045e4:	d5ea      	bpl.n	80045bc <_printf_float+0x194>
 80045e6:	1c4b      	adds	r3, r1, #1
 80045e8:	e7e7      	b.n	80045ba <_printf_float+0x192>
 80045ea:	2900      	cmp	r1, #0
 80045ec:	bfd4      	ite	le
 80045ee:	f1c1 0202 	rsble	r2, r1, #2
 80045f2:	2201      	movgt	r2, #1
 80045f4:	4413      	add	r3, r2
 80045f6:	e7e0      	b.n	80045ba <_printf_float+0x192>
 80045f8:	6823      	ldr	r3, [r4, #0]
 80045fa:	055a      	lsls	r2, r3, #21
 80045fc:	d407      	bmi.n	800460e <_printf_float+0x1e6>
 80045fe:	6923      	ldr	r3, [r4, #16]
 8004600:	4642      	mov	r2, r8
 8004602:	4631      	mov	r1, r6
 8004604:	4628      	mov	r0, r5
 8004606:	47b8      	blx	r7
 8004608:	3001      	adds	r0, #1
 800460a:	d12b      	bne.n	8004664 <_printf_float+0x23c>
 800460c:	e767      	b.n	80044de <_printf_float+0xb6>
 800460e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004612:	f240 80dd 	bls.w	80047d0 <_printf_float+0x3a8>
 8004616:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800461a:	2200      	movs	r2, #0
 800461c:	2300      	movs	r3, #0
 800461e:	f7fc fa53 	bl	8000ac8 <__aeabi_dcmpeq>
 8004622:	2800      	cmp	r0, #0
 8004624:	d033      	beq.n	800468e <_printf_float+0x266>
 8004626:	4a37      	ldr	r2, [pc, #220]	@ (8004704 <_printf_float+0x2dc>)
 8004628:	2301      	movs	r3, #1
 800462a:	4631      	mov	r1, r6
 800462c:	4628      	mov	r0, r5
 800462e:	47b8      	blx	r7
 8004630:	3001      	adds	r0, #1
 8004632:	f43f af54 	beq.w	80044de <_printf_float+0xb6>
 8004636:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800463a:	4543      	cmp	r3, r8
 800463c:	db02      	blt.n	8004644 <_printf_float+0x21c>
 800463e:	6823      	ldr	r3, [r4, #0]
 8004640:	07d8      	lsls	r0, r3, #31
 8004642:	d50f      	bpl.n	8004664 <_printf_float+0x23c>
 8004644:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004648:	4631      	mov	r1, r6
 800464a:	4628      	mov	r0, r5
 800464c:	47b8      	blx	r7
 800464e:	3001      	adds	r0, #1
 8004650:	f43f af45 	beq.w	80044de <_printf_float+0xb6>
 8004654:	f04f 0900 	mov.w	r9, #0
 8004658:	f108 38ff 	add.w	r8, r8, #4294967295
 800465c:	f104 0a1a 	add.w	sl, r4, #26
 8004660:	45c8      	cmp	r8, r9
 8004662:	dc09      	bgt.n	8004678 <_printf_float+0x250>
 8004664:	6823      	ldr	r3, [r4, #0]
 8004666:	079b      	lsls	r3, r3, #30
 8004668:	f100 8103 	bmi.w	8004872 <_printf_float+0x44a>
 800466c:	68e0      	ldr	r0, [r4, #12]
 800466e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004670:	4298      	cmp	r0, r3
 8004672:	bfb8      	it	lt
 8004674:	4618      	movlt	r0, r3
 8004676:	e734      	b.n	80044e2 <_printf_float+0xba>
 8004678:	2301      	movs	r3, #1
 800467a:	4652      	mov	r2, sl
 800467c:	4631      	mov	r1, r6
 800467e:	4628      	mov	r0, r5
 8004680:	47b8      	blx	r7
 8004682:	3001      	adds	r0, #1
 8004684:	f43f af2b 	beq.w	80044de <_printf_float+0xb6>
 8004688:	f109 0901 	add.w	r9, r9, #1
 800468c:	e7e8      	b.n	8004660 <_printf_float+0x238>
 800468e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004690:	2b00      	cmp	r3, #0
 8004692:	dc39      	bgt.n	8004708 <_printf_float+0x2e0>
 8004694:	4a1b      	ldr	r2, [pc, #108]	@ (8004704 <_printf_float+0x2dc>)
 8004696:	2301      	movs	r3, #1
 8004698:	4631      	mov	r1, r6
 800469a:	4628      	mov	r0, r5
 800469c:	47b8      	blx	r7
 800469e:	3001      	adds	r0, #1
 80046a0:	f43f af1d 	beq.w	80044de <_printf_float+0xb6>
 80046a4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80046a8:	ea59 0303 	orrs.w	r3, r9, r3
 80046ac:	d102      	bne.n	80046b4 <_printf_float+0x28c>
 80046ae:	6823      	ldr	r3, [r4, #0]
 80046b0:	07d9      	lsls	r1, r3, #31
 80046b2:	d5d7      	bpl.n	8004664 <_printf_float+0x23c>
 80046b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046b8:	4631      	mov	r1, r6
 80046ba:	4628      	mov	r0, r5
 80046bc:	47b8      	blx	r7
 80046be:	3001      	adds	r0, #1
 80046c0:	f43f af0d 	beq.w	80044de <_printf_float+0xb6>
 80046c4:	f04f 0a00 	mov.w	sl, #0
 80046c8:	f104 0b1a 	add.w	fp, r4, #26
 80046cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046ce:	425b      	negs	r3, r3
 80046d0:	4553      	cmp	r3, sl
 80046d2:	dc01      	bgt.n	80046d8 <_printf_float+0x2b0>
 80046d4:	464b      	mov	r3, r9
 80046d6:	e793      	b.n	8004600 <_printf_float+0x1d8>
 80046d8:	2301      	movs	r3, #1
 80046da:	465a      	mov	r2, fp
 80046dc:	4631      	mov	r1, r6
 80046de:	4628      	mov	r0, r5
 80046e0:	47b8      	blx	r7
 80046e2:	3001      	adds	r0, #1
 80046e4:	f43f aefb 	beq.w	80044de <_printf_float+0xb6>
 80046e8:	f10a 0a01 	add.w	sl, sl, #1
 80046ec:	e7ee      	b.n	80046cc <_printf_float+0x2a4>
 80046ee:	bf00      	nop
 80046f0:	7fefffff 	.word	0x7fefffff
 80046f4:	08008a87 	.word	0x08008a87
 80046f8:	08008a8b 	.word	0x08008a8b
 80046fc:	08008a8f 	.word	0x08008a8f
 8004700:	08008a93 	.word	0x08008a93
 8004704:	08008a97 	.word	0x08008a97
 8004708:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800470a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800470e:	4553      	cmp	r3, sl
 8004710:	bfa8      	it	ge
 8004712:	4653      	movge	r3, sl
 8004714:	2b00      	cmp	r3, #0
 8004716:	4699      	mov	r9, r3
 8004718:	dc36      	bgt.n	8004788 <_printf_float+0x360>
 800471a:	f04f 0b00 	mov.w	fp, #0
 800471e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004722:	f104 021a 	add.w	r2, r4, #26
 8004726:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004728:	9306      	str	r3, [sp, #24]
 800472a:	eba3 0309 	sub.w	r3, r3, r9
 800472e:	455b      	cmp	r3, fp
 8004730:	dc31      	bgt.n	8004796 <_printf_float+0x36e>
 8004732:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004734:	459a      	cmp	sl, r3
 8004736:	dc3a      	bgt.n	80047ae <_printf_float+0x386>
 8004738:	6823      	ldr	r3, [r4, #0]
 800473a:	07da      	lsls	r2, r3, #31
 800473c:	d437      	bmi.n	80047ae <_printf_float+0x386>
 800473e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004740:	ebaa 0903 	sub.w	r9, sl, r3
 8004744:	9b06      	ldr	r3, [sp, #24]
 8004746:	ebaa 0303 	sub.w	r3, sl, r3
 800474a:	4599      	cmp	r9, r3
 800474c:	bfa8      	it	ge
 800474e:	4699      	movge	r9, r3
 8004750:	f1b9 0f00 	cmp.w	r9, #0
 8004754:	dc33      	bgt.n	80047be <_printf_float+0x396>
 8004756:	f04f 0800 	mov.w	r8, #0
 800475a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800475e:	f104 0b1a 	add.w	fp, r4, #26
 8004762:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004764:	ebaa 0303 	sub.w	r3, sl, r3
 8004768:	eba3 0309 	sub.w	r3, r3, r9
 800476c:	4543      	cmp	r3, r8
 800476e:	f77f af79 	ble.w	8004664 <_printf_float+0x23c>
 8004772:	2301      	movs	r3, #1
 8004774:	465a      	mov	r2, fp
 8004776:	4631      	mov	r1, r6
 8004778:	4628      	mov	r0, r5
 800477a:	47b8      	blx	r7
 800477c:	3001      	adds	r0, #1
 800477e:	f43f aeae 	beq.w	80044de <_printf_float+0xb6>
 8004782:	f108 0801 	add.w	r8, r8, #1
 8004786:	e7ec      	b.n	8004762 <_printf_float+0x33a>
 8004788:	4642      	mov	r2, r8
 800478a:	4631      	mov	r1, r6
 800478c:	4628      	mov	r0, r5
 800478e:	47b8      	blx	r7
 8004790:	3001      	adds	r0, #1
 8004792:	d1c2      	bne.n	800471a <_printf_float+0x2f2>
 8004794:	e6a3      	b.n	80044de <_printf_float+0xb6>
 8004796:	2301      	movs	r3, #1
 8004798:	4631      	mov	r1, r6
 800479a:	4628      	mov	r0, r5
 800479c:	9206      	str	r2, [sp, #24]
 800479e:	47b8      	blx	r7
 80047a0:	3001      	adds	r0, #1
 80047a2:	f43f ae9c 	beq.w	80044de <_printf_float+0xb6>
 80047a6:	9a06      	ldr	r2, [sp, #24]
 80047a8:	f10b 0b01 	add.w	fp, fp, #1
 80047ac:	e7bb      	b.n	8004726 <_printf_float+0x2fe>
 80047ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047b2:	4631      	mov	r1, r6
 80047b4:	4628      	mov	r0, r5
 80047b6:	47b8      	blx	r7
 80047b8:	3001      	adds	r0, #1
 80047ba:	d1c0      	bne.n	800473e <_printf_float+0x316>
 80047bc:	e68f      	b.n	80044de <_printf_float+0xb6>
 80047be:	9a06      	ldr	r2, [sp, #24]
 80047c0:	464b      	mov	r3, r9
 80047c2:	4442      	add	r2, r8
 80047c4:	4631      	mov	r1, r6
 80047c6:	4628      	mov	r0, r5
 80047c8:	47b8      	blx	r7
 80047ca:	3001      	adds	r0, #1
 80047cc:	d1c3      	bne.n	8004756 <_printf_float+0x32e>
 80047ce:	e686      	b.n	80044de <_printf_float+0xb6>
 80047d0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80047d4:	f1ba 0f01 	cmp.w	sl, #1
 80047d8:	dc01      	bgt.n	80047de <_printf_float+0x3b6>
 80047da:	07db      	lsls	r3, r3, #31
 80047dc:	d536      	bpl.n	800484c <_printf_float+0x424>
 80047de:	2301      	movs	r3, #1
 80047e0:	4642      	mov	r2, r8
 80047e2:	4631      	mov	r1, r6
 80047e4:	4628      	mov	r0, r5
 80047e6:	47b8      	blx	r7
 80047e8:	3001      	adds	r0, #1
 80047ea:	f43f ae78 	beq.w	80044de <_printf_float+0xb6>
 80047ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047f2:	4631      	mov	r1, r6
 80047f4:	4628      	mov	r0, r5
 80047f6:	47b8      	blx	r7
 80047f8:	3001      	adds	r0, #1
 80047fa:	f43f ae70 	beq.w	80044de <_printf_float+0xb6>
 80047fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004802:	2200      	movs	r2, #0
 8004804:	2300      	movs	r3, #0
 8004806:	f10a 3aff 	add.w	sl, sl, #4294967295
 800480a:	f7fc f95d 	bl	8000ac8 <__aeabi_dcmpeq>
 800480e:	b9c0      	cbnz	r0, 8004842 <_printf_float+0x41a>
 8004810:	4653      	mov	r3, sl
 8004812:	f108 0201 	add.w	r2, r8, #1
 8004816:	4631      	mov	r1, r6
 8004818:	4628      	mov	r0, r5
 800481a:	47b8      	blx	r7
 800481c:	3001      	adds	r0, #1
 800481e:	d10c      	bne.n	800483a <_printf_float+0x412>
 8004820:	e65d      	b.n	80044de <_printf_float+0xb6>
 8004822:	2301      	movs	r3, #1
 8004824:	465a      	mov	r2, fp
 8004826:	4631      	mov	r1, r6
 8004828:	4628      	mov	r0, r5
 800482a:	47b8      	blx	r7
 800482c:	3001      	adds	r0, #1
 800482e:	f43f ae56 	beq.w	80044de <_printf_float+0xb6>
 8004832:	f108 0801 	add.w	r8, r8, #1
 8004836:	45d0      	cmp	r8, sl
 8004838:	dbf3      	blt.n	8004822 <_printf_float+0x3fa>
 800483a:	464b      	mov	r3, r9
 800483c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004840:	e6df      	b.n	8004602 <_printf_float+0x1da>
 8004842:	f04f 0800 	mov.w	r8, #0
 8004846:	f104 0b1a 	add.w	fp, r4, #26
 800484a:	e7f4      	b.n	8004836 <_printf_float+0x40e>
 800484c:	2301      	movs	r3, #1
 800484e:	4642      	mov	r2, r8
 8004850:	e7e1      	b.n	8004816 <_printf_float+0x3ee>
 8004852:	2301      	movs	r3, #1
 8004854:	464a      	mov	r2, r9
 8004856:	4631      	mov	r1, r6
 8004858:	4628      	mov	r0, r5
 800485a:	47b8      	blx	r7
 800485c:	3001      	adds	r0, #1
 800485e:	f43f ae3e 	beq.w	80044de <_printf_float+0xb6>
 8004862:	f108 0801 	add.w	r8, r8, #1
 8004866:	68e3      	ldr	r3, [r4, #12]
 8004868:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800486a:	1a5b      	subs	r3, r3, r1
 800486c:	4543      	cmp	r3, r8
 800486e:	dcf0      	bgt.n	8004852 <_printf_float+0x42a>
 8004870:	e6fc      	b.n	800466c <_printf_float+0x244>
 8004872:	f04f 0800 	mov.w	r8, #0
 8004876:	f104 0919 	add.w	r9, r4, #25
 800487a:	e7f4      	b.n	8004866 <_printf_float+0x43e>

0800487c <_printf_common>:
 800487c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004880:	4616      	mov	r6, r2
 8004882:	4698      	mov	r8, r3
 8004884:	688a      	ldr	r2, [r1, #8]
 8004886:	690b      	ldr	r3, [r1, #16]
 8004888:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800488c:	4293      	cmp	r3, r2
 800488e:	bfb8      	it	lt
 8004890:	4613      	movlt	r3, r2
 8004892:	6033      	str	r3, [r6, #0]
 8004894:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004898:	4607      	mov	r7, r0
 800489a:	460c      	mov	r4, r1
 800489c:	b10a      	cbz	r2, 80048a2 <_printf_common+0x26>
 800489e:	3301      	adds	r3, #1
 80048a0:	6033      	str	r3, [r6, #0]
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	0699      	lsls	r1, r3, #26
 80048a6:	bf42      	ittt	mi
 80048a8:	6833      	ldrmi	r3, [r6, #0]
 80048aa:	3302      	addmi	r3, #2
 80048ac:	6033      	strmi	r3, [r6, #0]
 80048ae:	6825      	ldr	r5, [r4, #0]
 80048b0:	f015 0506 	ands.w	r5, r5, #6
 80048b4:	d106      	bne.n	80048c4 <_printf_common+0x48>
 80048b6:	f104 0a19 	add.w	sl, r4, #25
 80048ba:	68e3      	ldr	r3, [r4, #12]
 80048bc:	6832      	ldr	r2, [r6, #0]
 80048be:	1a9b      	subs	r3, r3, r2
 80048c0:	42ab      	cmp	r3, r5
 80048c2:	dc26      	bgt.n	8004912 <_printf_common+0x96>
 80048c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80048c8:	6822      	ldr	r2, [r4, #0]
 80048ca:	3b00      	subs	r3, #0
 80048cc:	bf18      	it	ne
 80048ce:	2301      	movne	r3, #1
 80048d0:	0692      	lsls	r2, r2, #26
 80048d2:	d42b      	bmi.n	800492c <_printf_common+0xb0>
 80048d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80048d8:	4641      	mov	r1, r8
 80048da:	4638      	mov	r0, r7
 80048dc:	47c8      	blx	r9
 80048de:	3001      	adds	r0, #1
 80048e0:	d01e      	beq.n	8004920 <_printf_common+0xa4>
 80048e2:	6823      	ldr	r3, [r4, #0]
 80048e4:	6922      	ldr	r2, [r4, #16]
 80048e6:	f003 0306 	and.w	r3, r3, #6
 80048ea:	2b04      	cmp	r3, #4
 80048ec:	bf02      	ittt	eq
 80048ee:	68e5      	ldreq	r5, [r4, #12]
 80048f0:	6833      	ldreq	r3, [r6, #0]
 80048f2:	1aed      	subeq	r5, r5, r3
 80048f4:	68a3      	ldr	r3, [r4, #8]
 80048f6:	bf0c      	ite	eq
 80048f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048fc:	2500      	movne	r5, #0
 80048fe:	4293      	cmp	r3, r2
 8004900:	bfc4      	itt	gt
 8004902:	1a9b      	subgt	r3, r3, r2
 8004904:	18ed      	addgt	r5, r5, r3
 8004906:	2600      	movs	r6, #0
 8004908:	341a      	adds	r4, #26
 800490a:	42b5      	cmp	r5, r6
 800490c:	d11a      	bne.n	8004944 <_printf_common+0xc8>
 800490e:	2000      	movs	r0, #0
 8004910:	e008      	b.n	8004924 <_printf_common+0xa8>
 8004912:	2301      	movs	r3, #1
 8004914:	4652      	mov	r2, sl
 8004916:	4641      	mov	r1, r8
 8004918:	4638      	mov	r0, r7
 800491a:	47c8      	blx	r9
 800491c:	3001      	adds	r0, #1
 800491e:	d103      	bne.n	8004928 <_printf_common+0xac>
 8004920:	f04f 30ff 	mov.w	r0, #4294967295
 8004924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004928:	3501      	adds	r5, #1
 800492a:	e7c6      	b.n	80048ba <_printf_common+0x3e>
 800492c:	18e1      	adds	r1, r4, r3
 800492e:	1c5a      	adds	r2, r3, #1
 8004930:	2030      	movs	r0, #48	@ 0x30
 8004932:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004936:	4422      	add	r2, r4
 8004938:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800493c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004940:	3302      	adds	r3, #2
 8004942:	e7c7      	b.n	80048d4 <_printf_common+0x58>
 8004944:	2301      	movs	r3, #1
 8004946:	4622      	mov	r2, r4
 8004948:	4641      	mov	r1, r8
 800494a:	4638      	mov	r0, r7
 800494c:	47c8      	blx	r9
 800494e:	3001      	adds	r0, #1
 8004950:	d0e6      	beq.n	8004920 <_printf_common+0xa4>
 8004952:	3601      	adds	r6, #1
 8004954:	e7d9      	b.n	800490a <_printf_common+0x8e>
	...

08004958 <_printf_i>:
 8004958:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800495c:	7e0f      	ldrb	r7, [r1, #24]
 800495e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004960:	2f78      	cmp	r7, #120	@ 0x78
 8004962:	4691      	mov	r9, r2
 8004964:	4680      	mov	r8, r0
 8004966:	460c      	mov	r4, r1
 8004968:	469a      	mov	sl, r3
 800496a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800496e:	d807      	bhi.n	8004980 <_printf_i+0x28>
 8004970:	2f62      	cmp	r7, #98	@ 0x62
 8004972:	d80a      	bhi.n	800498a <_printf_i+0x32>
 8004974:	2f00      	cmp	r7, #0
 8004976:	f000 80d2 	beq.w	8004b1e <_printf_i+0x1c6>
 800497a:	2f58      	cmp	r7, #88	@ 0x58
 800497c:	f000 80b9 	beq.w	8004af2 <_printf_i+0x19a>
 8004980:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004984:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004988:	e03a      	b.n	8004a00 <_printf_i+0xa8>
 800498a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800498e:	2b15      	cmp	r3, #21
 8004990:	d8f6      	bhi.n	8004980 <_printf_i+0x28>
 8004992:	a101      	add	r1, pc, #4	@ (adr r1, 8004998 <_printf_i+0x40>)
 8004994:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004998:	080049f1 	.word	0x080049f1
 800499c:	08004a05 	.word	0x08004a05
 80049a0:	08004981 	.word	0x08004981
 80049a4:	08004981 	.word	0x08004981
 80049a8:	08004981 	.word	0x08004981
 80049ac:	08004981 	.word	0x08004981
 80049b0:	08004a05 	.word	0x08004a05
 80049b4:	08004981 	.word	0x08004981
 80049b8:	08004981 	.word	0x08004981
 80049bc:	08004981 	.word	0x08004981
 80049c0:	08004981 	.word	0x08004981
 80049c4:	08004b05 	.word	0x08004b05
 80049c8:	08004a2f 	.word	0x08004a2f
 80049cc:	08004abf 	.word	0x08004abf
 80049d0:	08004981 	.word	0x08004981
 80049d4:	08004981 	.word	0x08004981
 80049d8:	08004b27 	.word	0x08004b27
 80049dc:	08004981 	.word	0x08004981
 80049e0:	08004a2f 	.word	0x08004a2f
 80049e4:	08004981 	.word	0x08004981
 80049e8:	08004981 	.word	0x08004981
 80049ec:	08004ac7 	.word	0x08004ac7
 80049f0:	6833      	ldr	r3, [r6, #0]
 80049f2:	1d1a      	adds	r2, r3, #4
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	6032      	str	r2, [r6, #0]
 80049f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80049fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004a00:	2301      	movs	r3, #1
 8004a02:	e09d      	b.n	8004b40 <_printf_i+0x1e8>
 8004a04:	6833      	ldr	r3, [r6, #0]
 8004a06:	6820      	ldr	r0, [r4, #0]
 8004a08:	1d19      	adds	r1, r3, #4
 8004a0a:	6031      	str	r1, [r6, #0]
 8004a0c:	0606      	lsls	r6, r0, #24
 8004a0e:	d501      	bpl.n	8004a14 <_printf_i+0xbc>
 8004a10:	681d      	ldr	r5, [r3, #0]
 8004a12:	e003      	b.n	8004a1c <_printf_i+0xc4>
 8004a14:	0645      	lsls	r5, r0, #25
 8004a16:	d5fb      	bpl.n	8004a10 <_printf_i+0xb8>
 8004a18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004a1c:	2d00      	cmp	r5, #0
 8004a1e:	da03      	bge.n	8004a28 <_printf_i+0xd0>
 8004a20:	232d      	movs	r3, #45	@ 0x2d
 8004a22:	426d      	negs	r5, r5
 8004a24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a28:	4859      	ldr	r0, [pc, #356]	@ (8004b90 <_printf_i+0x238>)
 8004a2a:	230a      	movs	r3, #10
 8004a2c:	e011      	b.n	8004a52 <_printf_i+0xfa>
 8004a2e:	6821      	ldr	r1, [r4, #0]
 8004a30:	6833      	ldr	r3, [r6, #0]
 8004a32:	0608      	lsls	r0, r1, #24
 8004a34:	f853 5b04 	ldr.w	r5, [r3], #4
 8004a38:	d402      	bmi.n	8004a40 <_printf_i+0xe8>
 8004a3a:	0649      	lsls	r1, r1, #25
 8004a3c:	bf48      	it	mi
 8004a3e:	b2ad      	uxthmi	r5, r5
 8004a40:	2f6f      	cmp	r7, #111	@ 0x6f
 8004a42:	4853      	ldr	r0, [pc, #332]	@ (8004b90 <_printf_i+0x238>)
 8004a44:	6033      	str	r3, [r6, #0]
 8004a46:	bf14      	ite	ne
 8004a48:	230a      	movne	r3, #10
 8004a4a:	2308      	moveq	r3, #8
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004a52:	6866      	ldr	r6, [r4, #4]
 8004a54:	60a6      	str	r6, [r4, #8]
 8004a56:	2e00      	cmp	r6, #0
 8004a58:	bfa2      	ittt	ge
 8004a5a:	6821      	ldrge	r1, [r4, #0]
 8004a5c:	f021 0104 	bicge.w	r1, r1, #4
 8004a60:	6021      	strge	r1, [r4, #0]
 8004a62:	b90d      	cbnz	r5, 8004a68 <_printf_i+0x110>
 8004a64:	2e00      	cmp	r6, #0
 8004a66:	d04b      	beq.n	8004b00 <_printf_i+0x1a8>
 8004a68:	4616      	mov	r6, r2
 8004a6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a6e:	fb03 5711 	mls	r7, r3, r1, r5
 8004a72:	5dc7      	ldrb	r7, [r0, r7]
 8004a74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a78:	462f      	mov	r7, r5
 8004a7a:	42bb      	cmp	r3, r7
 8004a7c:	460d      	mov	r5, r1
 8004a7e:	d9f4      	bls.n	8004a6a <_printf_i+0x112>
 8004a80:	2b08      	cmp	r3, #8
 8004a82:	d10b      	bne.n	8004a9c <_printf_i+0x144>
 8004a84:	6823      	ldr	r3, [r4, #0]
 8004a86:	07df      	lsls	r7, r3, #31
 8004a88:	d508      	bpl.n	8004a9c <_printf_i+0x144>
 8004a8a:	6923      	ldr	r3, [r4, #16]
 8004a8c:	6861      	ldr	r1, [r4, #4]
 8004a8e:	4299      	cmp	r1, r3
 8004a90:	bfde      	ittt	le
 8004a92:	2330      	movle	r3, #48	@ 0x30
 8004a94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a98:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a9c:	1b92      	subs	r2, r2, r6
 8004a9e:	6122      	str	r2, [r4, #16]
 8004aa0:	f8cd a000 	str.w	sl, [sp]
 8004aa4:	464b      	mov	r3, r9
 8004aa6:	aa03      	add	r2, sp, #12
 8004aa8:	4621      	mov	r1, r4
 8004aaa:	4640      	mov	r0, r8
 8004aac:	f7ff fee6 	bl	800487c <_printf_common>
 8004ab0:	3001      	adds	r0, #1
 8004ab2:	d14a      	bne.n	8004b4a <_printf_i+0x1f2>
 8004ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ab8:	b004      	add	sp, #16
 8004aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004abe:	6823      	ldr	r3, [r4, #0]
 8004ac0:	f043 0320 	orr.w	r3, r3, #32
 8004ac4:	6023      	str	r3, [r4, #0]
 8004ac6:	4833      	ldr	r0, [pc, #204]	@ (8004b94 <_printf_i+0x23c>)
 8004ac8:	2778      	movs	r7, #120	@ 0x78
 8004aca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004ace:	6823      	ldr	r3, [r4, #0]
 8004ad0:	6831      	ldr	r1, [r6, #0]
 8004ad2:	061f      	lsls	r7, r3, #24
 8004ad4:	f851 5b04 	ldr.w	r5, [r1], #4
 8004ad8:	d402      	bmi.n	8004ae0 <_printf_i+0x188>
 8004ada:	065f      	lsls	r7, r3, #25
 8004adc:	bf48      	it	mi
 8004ade:	b2ad      	uxthmi	r5, r5
 8004ae0:	6031      	str	r1, [r6, #0]
 8004ae2:	07d9      	lsls	r1, r3, #31
 8004ae4:	bf44      	itt	mi
 8004ae6:	f043 0320 	orrmi.w	r3, r3, #32
 8004aea:	6023      	strmi	r3, [r4, #0]
 8004aec:	b11d      	cbz	r5, 8004af6 <_printf_i+0x19e>
 8004aee:	2310      	movs	r3, #16
 8004af0:	e7ac      	b.n	8004a4c <_printf_i+0xf4>
 8004af2:	4827      	ldr	r0, [pc, #156]	@ (8004b90 <_printf_i+0x238>)
 8004af4:	e7e9      	b.n	8004aca <_printf_i+0x172>
 8004af6:	6823      	ldr	r3, [r4, #0]
 8004af8:	f023 0320 	bic.w	r3, r3, #32
 8004afc:	6023      	str	r3, [r4, #0]
 8004afe:	e7f6      	b.n	8004aee <_printf_i+0x196>
 8004b00:	4616      	mov	r6, r2
 8004b02:	e7bd      	b.n	8004a80 <_printf_i+0x128>
 8004b04:	6833      	ldr	r3, [r6, #0]
 8004b06:	6825      	ldr	r5, [r4, #0]
 8004b08:	6961      	ldr	r1, [r4, #20]
 8004b0a:	1d18      	adds	r0, r3, #4
 8004b0c:	6030      	str	r0, [r6, #0]
 8004b0e:	062e      	lsls	r6, r5, #24
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	d501      	bpl.n	8004b18 <_printf_i+0x1c0>
 8004b14:	6019      	str	r1, [r3, #0]
 8004b16:	e002      	b.n	8004b1e <_printf_i+0x1c6>
 8004b18:	0668      	lsls	r0, r5, #25
 8004b1a:	d5fb      	bpl.n	8004b14 <_printf_i+0x1bc>
 8004b1c:	8019      	strh	r1, [r3, #0]
 8004b1e:	2300      	movs	r3, #0
 8004b20:	6123      	str	r3, [r4, #16]
 8004b22:	4616      	mov	r6, r2
 8004b24:	e7bc      	b.n	8004aa0 <_printf_i+0x148>
 8004b26:	6833      	ldr	r3, [r6, #0]
 8004b28:	1d1a      	adds	r2, r3, #4
 8004b2a:	6032      	str	r2, [r6, #0]
 8004b2c:	681e      	ldr	r6, [r3, #0]
 8004b2e:	6862      	ldr	r2, [r4, #4]
 8004b30:	2100      	movs	r1, #0
 8004b32:	4630      	mov	r0, r6
 8004b34:	f7fb fb4c 	bl	80001d0 <memchr>
 8004b38:	b108      	cbz	r0, 8004b3e <_printf_i+0x1e6>
 8004b3a:	1b80      	subs	r0, r0, r6
 8004b3c:	6060      	str	r0, [r4, #4]
 8004b3e:	6863      	ldr	r3, [r4, #4]
 8004b40:	6123      	str	r3, [r4, #16]
 8004b42:	2300      	movs	r3, #0
 8004b44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b48:	e7aa      	b.n	8004aa0 <_printf_i+0x148>
 8004b4a:	6923      	ldr	r3, [r4, #16]
 8004b4c:	4632      	mov	r2, r6
 8004b4e:	4649      	mov	r1, r9
 8004b50:	4640      	mov	r0, r8
 8004b52:	47d0      	blx	sl
 8004b54:	3001      	adds	r0, #1
 8004b56:	d0ad      	beq.n	8004ab4 <_printf_i+0x15c>
 8004b58:	6823      	ldr	r3, [r4, #0]
 8004b5a:	079b      	lsls	r3, r3, #30
 8004b5c:	d413      	bmi.n	8004b86 <_printf_i+0x22e>
 8004b5e:	68e0      	ldr	r0, [r4, #12]
 8004b60:	9b03      	ldr	r3, [sp, #12]
 8004b62:	4298      	cmp	r0, r3
 8004b64:	bfb8      	it	lt
 8004b66:	4618      	movlt	r0, r3
 8004b68:	e7a6      	b.n	8004ab8 <_printf_i+0x160>
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	4632      	mov	r2, r6
 8004b6e:	4649      	mov	r1, r9
 8004b70:	4640      	mov	r0, r8
 8004b72:	47d0      	blx	sl
 8004b74:	3001      	adds	r0, #1
 8004b76:	d09d      	beq.n	8004ab4 <_printf_i+0x15c>
 8004b78:	3501      	adds	r5, #1
 8004b7a:	68e3      	ldr	r3, [r4, #12]
 8004b7c:	9903      	ldr	r1, [sp, #12]
 8004b7e:	1a5b      	subs	r3, r3, r1
 8004b80:	42ab      	cmp	r3, r5
 8004b82:	dcf2      	bgt.n	8004b6a <_printf_i+0x212>
 8004b84:	e7eb      	b.n	8004b5e <_printf_i+0x206>
 8004b86:	2500      	movs	r5, #0
 8004b88:	f104 0619 	add.w	r6, r4, #25
 8004b8c:	e7f5      	b.n	8004b7a <_printf_i+0x222>
 8004b8e:	bf00      	nop
 8004b90:	08008a99 	.word	0x08008a99
 8004b94:	08008aaa 	.word	0x08008aaa

08004b98 <_scanf_float>:
 8004b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b9c:	b087      	sub	sp, #28
 8004b9e:	4617      	mov	r7, r2
 8004ba0:	9303      	str	r3, [sp, #12]
 8004ba2:	688b      	ldr	r3, [r1, #8]
 8004ba4:	1e5a      	subs	r2, r3, #1
 8004ba6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004baa:	bf81      	itttt	hi
 8004bac:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004bb0:	eb03 0b05 	addhi.w	fp, r3, r5
 8004bb4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004bb8:	608b      	strhi	r3, [r1, #8]
 8004bba:	680b      	ldr	r3, [r1, #0]
 8004bbc:	460a      	mov	r2, r1
 8004bbe:	f04f 0500 	mov.w	r5, #0
 8004bc2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8004bc6:	f842 3b1c 	str.w	r3, [r2], #28
 8004bca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004bce:	4680      	mov	r8, r0
 8004bd0:	460c      	mov	r4, r1
 8004bd2:	bf98      	it	ls
 8004bd4:	f04f 0b00 	movls.w	fp, #0
 8004bd8:	9201      	str	r2, [sp, #4]
 8004bda:	4616      	mov	r6, r2
 8004bdc:	46aa      	mov	sl, r5
 8004bde:	46a9      	mov	r9, r5
 8004be0:	9502      	str	r5, [sp, #8]
 8004be2:	68a2      	ldr	r2, [r4, #8]
 8004be4:	b152      	cbz	r2, 8004bfc <_scanf_float+0x64>
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	2b4e      	cmp	r3, #78	@ 0x4e
 8004bec:	d864      	bhi.n	8004cb8 <_scanf_float+0x120>
 8004bee:	2b40      	cmp	r3, #64	@ 0x40
 8004bf0:	d83c      	bhi.n	8004c6c <_scanf_float+0xd4>
 8004bf2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004bf6:	b2c8      	uxtb	r0, r1
 8004bf8:	280e      	cmp	r0, #14
 8004bfa:	d93a      	bls.n	8004c72 <_scanf_float+0xda>
 8004bfc:	f1b9 0f00 	cmp.w	r9, #0
 8004c00:	d003      	beq.n	8004c0a <_scanf_float+0x72>
 8004c02:	6823      	ldr	r3, [r4, #0]
 8004c04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c08:	6023      	str	r3, [r4, #0]
 8004c0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c0e:	f1ba 0f01 	cmp.w	sl, #1
 8004c12:	f200 8117 	bhi.w	8004e44 <_scanf_float+0x2ac>
 8004c16:	9b01      	ldr	r3, [sp, #4]
 8004c18:	429e      	cmp	r6, r3
 8004c1a:	f200 8108 	bhi.w	8004e2e <_scanf_float+0x296>
 8004c1e:	2001      	movs	r0, #1
 8004c20:	b007      	add	sp, #28
 8004c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c26:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004c2a:	2a0d      	cmp	r2, #13
 8004c2c:	d8e6      	bhi.n	8004bfc <_scanf_float+0x64>
 8004c2e:	a101      	add	r1, pc, #4	@ (adr r1, 8004c34 <_scanf_float+0x9c>)
 8004c30:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004c34:	08004d7b 	.word	0x08004d7b
 8004c38:	08004bfd 	.word	0x08004bfd
 8004c3c:	08004bfd 	.word	0x08004bfd
 8004c40:	08004bfd 	.word	0x08004bfd
 8004c44:	08004ddb 	.word	0x08004ddb
 8004c48:	08004db3 	.word	0x08004db3
 8004c4c:	08004bfd 	.word	0x08004bfd
 8004c50:	08004bfd 	.word	0x08004bfd
 8004c54:	08004d89 	.word	0x08004d89
 8004c58:	08004bfd 	.word	0x08004bfd
 8004c5c:	08004bfd 	.word	0x08004bfd
 8004c60:	08004bfd 	.word	0x08004bfd
 8004c64:	08004bfd 	.word	0x08004bfd
 8004c68:	08004d41 	.word	0x08004d41
 8004c6c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004c70:	e7db      	b.n	8004c2a <_scanf_float+0x92>
 8004c72:	290e      	cmp	r1, #14
 8004c74:	d8c2      	bhi.n	8004bfc <_scanf_float+0x64>
 8004c76:	a001      	add	r0, pc, #4	@ (adr r0, 8004c7c <_scanf_float+0xe4>)
 8004c78:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004c7c:	08004d31 	.word	0x08004d31
 8004c80:	08004bfd 	.word	0x08004bfd
 8004c84:	08004d31 	.word	0x08004d31
 8004c88:	08004dc7 	.word	0x08004dc7
 8004c8c:	08004bfd 	.word	0x08004bfd
 8004c90:	08004cd9 	.word	0x08004cd9
 8004c94:	08004d17 	.word	0x08004d17
 8004c98:	08004d17 	.word	0x08004d17
 8004c9c:	08004d17 	.word	0x08004d17
 8004ca0:	08004d17 	.word	0x08004d17
 8004ca4:	08004d17 	.word	0x08004d17
 8004ca8:	08004d17 	.word	0x08004d17
 8004cac:	08004d17 	.word	0x08004d17
 8004cb0:	08004d17 	.word	0x08004d17
 8004cb4:	08004d17 	.word	0x08004d17
 8004cb8:	2b6e      	cmp	r3, #110	@ 0x6e
 8004cba:	d809      	bhi.n	8004cd0 <_scanf_float+0x138>
 8004cbc:	2b60      	cmp	r3, #96	@ 0x60
 8004cbe:	d8b2      	bhi.n	8004c26 <_scanf_float+0x8e>
 8004cc0:	2b54      	cmp	r3, #84	@ 0x54
 8004cc2:	d07b      	beq.n	8004dbc <_scanf_float+0x224>
 8004cc4:	2b59      	cmp	r3, #89	@ 0x59
 8004cc6:	d199      	bne.n	8004bfc <_scanf_float+0x64>
 8004cc8:	2d07      	cmp	r5, #7
 8004cca:	d197      	bne.n	8004bfc <_scanf_float+0x64>
 8004ccc:	2508      	movs	r5, #8
 8004cce:	e02c      	b.n	8004d2a <_scanf_float+0x192>
 8004cd0:	2b74      	cmp	r3, #116	@ 0x74
 8004cd2:	d073      	beq.n	8004dbc <_scanf_float+0x224>
 8004cd4:	2b79      	cmp	r3, #121	@ 0x79
 8004cd6:	e7f6      	b.n	8004cc6 <_scanf_float+0x12e>
 8004cd8:	6821      	ldr	r1, [r4, #0]
 8004cda:	05c8      	lsls	r0, r1, #23
 8004cdc:	d51b      	bpl.n	8004d16 <_scanf_float+0x17e>
 8004cde:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004ce2:	6021      	str	r1, [r4, #0]
 8004ce4:	f109 0901 	add.w	r9, r9, #1
 8004ce8:	f1bb 0f00 	cmp.w	fp, #0
 8004cec:	d003      	beq.n	8004cf6 <_scanf_float+0x15e>
 8004cee:	3201      	adds	r2, #1
 8004cf0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004cf4:	60a2      	str	r2, [r4, #8]
 8004cf6:	68a3      	ldr	r3, [r4, #8]
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	60a3      	str	r3, [r4, #8]
 8004cfc:	6923      	ldr	r3, [r4, #16]
 8004cfe:	3301      	adds	r3, #1
 8004d00:	6123      	str	r3, [r4, #16]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	3b01      	subs	r3, #1
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	607b      	str	r3, [r7, #4]
 8004d0a:	f340 8087 	ble.w	8004e1c <_scanf_float+0x284>
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	3301      	adds	r3, #1
 8004d12:	603b      	str	r3, [r7, #0]
 8004d14:	e765      	b.n	8004be2 <_scanf_float+0x4a>
 8004d16:	eb1a 0105 	adds.w	r1, sl, r5
 8004d1a:	f47f af6f 	bne.w	8004bfc <_scanf_float+0x64>
 8004d1e:	6822      	ldr	r2, [r4, #0]
 8004d20:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004d24:	6022      	str	r2, [r4, #0]
 8004d26:	460d      	mov	r5, r1
 8004d28:	468a      	mov	sl, r1
 8004d2a:	f806 3b01 	strb.w	r3, [r6], #1
 8004d2e:	e7e2      	b.n	8004cf6 <_scanf_float+0x15e>
 8004d30:	6822      	ldr	r2, [r4, #0]
 8004d32:	0610      	lsls	r0, r2, #24
 8004d34:	f57f af62 	bpl.w	8004bfc <_scanf_float+0x64>
 8004d38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004d3c:	6022      	str	r2, [r4, #0]
 8004d3e:	e7f4      	b.n	8004d2a <_scanf_float+0x192>
 8004d40:	f1ba 0f00 	cmp.w	sl, #0
 8004d44:	d10e      	bne.n	8004d64 <_scanf_float+0x1cc>
 8004d46:	f1b9 0f00 	cmp.w	r9, #0
 8004d4a:	d10e      	bne.n	8004d6a <_scanf_float+0x1d2>
 8004d4c:	6822      	ldr	r2, [r4, #0]
 8004d4e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004d52:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004d56:	d108      	bne.n	8004d6a <_scanf_float+0x1d2>
 8004d58:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004d5c:	6022      	str	r2, [r4, #0]
 8004d5e:	f04f 0a01 	mov.w	sl, #1
 8004d62:	e7e2      	b.n	8004d2a <_scanf_float+0x192>
 8004d64:	f1ba 0f02 	cmp.w	sl, #2
 8004d68:	d055      	beq.n	8004e16 <_scanf_float+0x27e>
 8004d6a:	2d01      	cmp	r5, #1
 8004d6c:	d002      	beq.n	8004d74 <_scanf_float+0x1dc>
 8004d6e:	2d04      	cmp	r5, #4
 8004d70:	f47f af44 	bne.w	8004bfc <_scanf_float+0x64>
 8004d74:	3501      	adds	r5, #1
 8004d76:	b2ed      	uxtb	r5, r5
 8004d78:	e7d7      	b.n	8004d2a <_scanf_float+0x192>
 8004d7a:	f1ba 0f01 	cmp.w	sl, #1
 8004d7e:	f47f af3d 	bne.w	8004bfc <_scanf_float+0x64>
 8004d82:	f04f 0a02 	mov.w	sl, #2
 8004d86:	e7d0      	b.n	8004d2a <_scanf_float+0x192>
 8004d88:	b97d      	cbnz	r5, 8004daa <_scanf_float+0x212>
 8004d8a:	f1b9 0f00 	cmp.w	r9, #0
 8004d8e:	f47f af38 	bne.w	8004c02 <_scanf_float+0x6a>
 8004d92:	6822      	ldr	r2, [r4, #0]
 8004d94:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004d98:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004d9c:	f040 8108 	bne.w	8004fb0 <_scanf_float+0x418>
 8004da0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004da4:	6022      	str	r2, [r4, #0]
 8004da6:	2501      	movs	r5, #1
 8004da8:	e7bf      	b.n	8004d2a <_scanf_float+0x192>
 8004daa:	2d03      	cmp	r5, #3
 8004dac:	d0e2      	beq.n	8004d74 <_scanf_float+0x1dc>
 8004dae:	2d05      	cmp	r5, #5
 8004db0:	e7de      	b.n	8004d70 <_scanf_float+0x1d8>
 8004db2:	2d02      	cmp	r5, #2
 8004db4:	f47f af22 	bne.w	8004bfc <_scanf_float+0x64>
 8004db8:	2503      	movs	r5, #3
 8004dba:	e7b6      	b.n	8004d2a <_scanf_float+0x192>
 8004dbc:	2d06      	cmp	r5, #6
 8004dbe:	f47f af1d 	bne.w	8004bfc <_scanf_float+0x64>
 8004dc2:	2507      	movs	r5, #7
 8004dc4:	e7b1      	b.n	8004d2a <_scanf_float+0x192>
 8004dc6:	6822      	ldr	r2, [r4, #0]
 8004dc8:	0591      	lsls	r1, r2, #22
 8004dca:	f57f af17 	bpl.w	8004bfc <_scanf_float+0x64>
 8004dce:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8004dd2:	6022      	str	r2, [r4, #0]
 8004dd4:	f8cd 9008 	str.w	r9, [sp, #8]
 8004dd8:	e7a7      	b.n	8004d2a <_scanf_float+0x192>
 8004dda:	6822      	ldr	r2, [r4, #0]
 8004ddc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8004de0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004de4:	d006      	beq.n	8004df4 <_scanf_float+0x25c>
 8004de6:	0550      	lsls	r0, r2, #21
 8004de8:	f57f af08 	bpl.w	8004bfc <_scanf_float+0x64>
 8004dec:	f1b9 0f00 	cmp.w	r9, #0
 8004df0:	f000 80de 	beq.w	8004fb0 <_scanf_float+0x418>
 8004df4:	0591      	lsls	r1, r2, #22
 8004df6:	bf58      	it	pl
 8004df8:	9902      	ldrpl	r1, [sp, #8]
 8004dfa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004dfe:	bf58      	it	pl
 8004e00:	eba9 0101 	subpl.w	r1, r9, r1
 8004e04:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8004e08:	bf58      	it	pl
 8004e0a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004e0e:	6022      	str	r2, [r4, #0]
 8004e10:	f04f 0900 	mov.w	r9, #0
 8004e14:	e789      	b.n	8004d2a <_scanf_float+0x192>
 8004e16:	f04f 0a03 	mov.w	sl, #3
 8004e1a:	e786      	b.n	8004d2a <_scanf_float+0x192>
 8004e1c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004e20:	4639      	mov	r1, r7
 8004e22:	4640      	mov	r0, r8
 8004e24:	4798      	blx	r3
 8004e26:	2800      	cmp	r0, #0
 8004e28:	f43f aedb 	beq.w	8004be2 <_scanf_float+0x4a>
 8004e2c:	e6e6      	b.n	8004bfc <_scanf_float+0x64>
 8004e2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004e32:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004e36:	463a      	mov	r2, r7
 8004e38:	4640      	mov	r0, r8
 8004e3a:	4798      	blx	r3
 8004e3c:	6923      	ldr	r3, [r4, #16]
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	6123      	str	r3, [r4, #16]
 8004e42:	e6e8      	b.n	8004c16 <_scanf_float+0x7e>
 8004e44:	1e6b      	subs	r3, r5, #1
 8004e46:	2b06      	cmp	r3, #6
 8004e48:	d824      	bhi.n	8004e94 <_scanf_float+0x2fc>
 8004e4a:	2d02      	cmp	r5, #2
 8004e4c:	d836      	bhi.n	8004ebc <_scanf_float+0x324>
 8004e4e:	9b01      	ldr	r3, [sp, #4]
 8004e50:	429e      	cmp	r6, r3
 8004e52:	f67f aee4 	bls.w	8004c1e <_scanf_float+0x86>
 8004e56:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004e5a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004e5e:	463a      	mov	r2, r7
 8004e60:	4640      	mov	r0, r8
 8004e62:	4798      	blx	r3
 8004e64:	6923      	ldr	r3, [r4, #16]
 8004e66:	3b01      	subs	r3, #1
 8004e68:	6123      	str	r3, [r4, #16]
 8004e6a:	e7f0      	b.n	8004e4e <_scanf_float+0x2b6>
 8004e6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004e70:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8004e74:	463a      	mov	r2, r7
 8004e76:	4640      	mov	r0, r8
 8004e78:	4798      	blx	r3
 8004e7a:	6923      	ldr	r3, [r4, #16]
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	6123      	str	r3, [r4, #16]
 8004e80:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e84:	fa5f fa8a 	uxtb.w	sl, sl
 8004e88:	f1ba 0f02 	cmp.w	sl, #2
 8004e8c:	d1ee      	bne.n	8004e6c <_scanf_float+0x2d4>
 8004e8e:	3d03      	subs	r5, #3
 8004e90:	b2ed      	uxtb	r5, r5
 8004e92:	1b76      	subs	r6, r6, r5
 8004e94:	6823      	ldr	r3, [r4, #0]
 8004e96:	05da      	lsls	r2, r3, #23
 8004e98:	d530      	bpl.n	8004efc <_scanf_float+0x364>
 8004e9a:	055b      	lsls	r3, r3, #21
 8004e9c:	d511      	bpl.n	8004ec2 <_scanf_float+0x32a>
 8004e9e:	9b01      	ldr	r3, [sp, #4]
 8004ea0:	429e      	cmp	r6, r3
 8004ea2:	f67f aebc 	bls.w	8004c1e <_scanf_float+0x86>
 8004ea6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004eaa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004eae:	463a      	mov	r2, r7
 8004eb0:	4640      	mov	r0, r8
 8004eb2:	4798      	blx	r3
 8004eb4:	6923      	ldr	r3, [r4, #16]
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	6123      	str	r3, [r4, #16]
 8004eba:	e7f0      	b.n	8004e9e <_scanf_float+0x306>
 8004ebc:	46aa      	mov	sl, r5
 8004ebe:	46b3      	mov	fp, r6
 8004ec0:	e7de      	b.n	8004e80 <_scanf_float+0x2e8>
 8004ec2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004ec6:	6923      	ldr	r3, [r4, #16]
 8004ec8:	2965      	cmp	r1, #101	@ 0x65
 8004eca:	f103 33ff 	add.w	r3, r3, #4294967295
 8004ece:	f106 35ff 	add.w	r5, r6, #4294967295
 8004ed2:	6123      	str	r3, [r4, #16]
 8004ed4:	d00c      	beq.n	8004ef0 <_scanf_float+0x358>
 8004ed6:	2945      	cmp	r1, #69	@ 0x45
 8004ed8:	d00a      	beq.n	8004ef0 <_scanf_float+0x358>
 8004eda:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004ede:	463a      	mov	r2, r7
 8004ee0:	4640      	mov	r0, r8
 8004ee2:	4798      	blx	r3
 8004ee4:	6923      	ldr	r3, [r4, #16]
 8004ee6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004eea:	3b01      	subs	r3, #1
 8004eec:	1eb5      	subs	r5, r6, #2
 8004eee:	6123      	str	r3, [r4, #16]
 8004ef0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004ef4:	463a      	mov	r2, r7
 8004ef6:	4640      	mov	r0, r8
 8004ef8:	4798      	blx	r3
 8004efa:	462e      	mov	r6, r5
 8004efc:	6822      	ldr	r2, [r4, #0]
 8004efe:	f012 0210 	ands.w	r2, r2, #16
 8004f02:	d001      	beq.n	8004f08 <_scanf_float+0x370>
 8004f04:	2000      	movs	r0, #0
 8004f06:	e68b      	b.n	8004c20 <_scanf_float+0x88>
 8004f08:	7032      	strb	r2, [r6, #0]
 8004f0a:	6823      	ldr	r3, [r4, #0]
 8004f0c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004f10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f14:	d11c      	bne.n	8004f50 <_scanf_float+0x3b8>
 8004f16:	9b02      	ldr	r3, [sp, #8]
 8004f18:	454b      	cmp	r3, r9
 8004f1a:	eba3 0209 	sub.w	r2, r3, r9
 8004f1e:	d123      	bne.n	8004f68 <_scanf_float+0x3d0>
 8004f20:	9901      	ldr	r1, [sp, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	4640      	mov	r0, r8
 8004f26:	f002 fc17 	bl	8007758 <_strtod_r>
 8004f2a:	9b03      	ldr	r3, [sp, #12]
 8004f2c:	6821      	ldr	r1, [r4, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f011 0f02 	tst.w	r1, #2
 8004f34:	ec57 6b10 	vmov	r6, r7, d0
 8004f38:	f103 0204 	add.w	r2, r3, #4
 8004f3c:	d01f      	beq.n	8004f7e <_scanf_float+0x3e6>
 8004f3e:	9903      	ldr	r1, [sp, #12]
 8004f40:	600a      	str	r2, [r1, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	e9c3 6700 	strd	r6, r7, [r3]
 8004f48:	68e3      	ldr	r3, [r4, #12]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	60e3      	str	r3, [r4, #12]
 8004f4e:	e7d9      	b.n	8004f04 <_scanf_float+0x36c>
 8004f50:	9b04      	ldr	r3, [sp, #16]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d0e4      	beq.n	8004f20 <_scanf_float+0x388>
 8004f56:	9905      	ldr	r1, [sp, #20]
 8004f58:	230a      	movs	r3, #10
 8004f5a:	3101      	adds	r1, #1
 8004f5c:	4640      	mov	r0, r8
 8004f5e:	f002 fc7b 	bl	8007858 <_strtol_r>
 8004f62:	9b04      	ldr	r3, [sp, #16]
 8004f64:	9e05      	ldr	r6, [sp, #20]
 8004f66:	1ac2      	subs	r2, r0, r3
 8004f68:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8004f6c:	429e      	cmp	r6, r3
 8004f6e:	bf28      	it	cs
 8004f70:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004f74:	4910      	ldr	r1, [pc, #64]	@ (8004fb8 <_scanf_float+0x420>)
 8004f76:	4630      	mov	r0, r6
 8004f78:	f000 f8e4 	bl	8005144 <siprintf>
 8004f7c:	e7d0      	b.n	8004f20 <_scanf_float+0x388>
 8004f7e:	f011 0f04 	tst.w	r1, #4
 8004f82:	9903      	ldr	r1, [sp, #12]
 8004f84:	600a      	str	r2, [r1, #0]
 8004f86:	d1dc      	bne.n	8004f42 <_scanf_float+0x3aa>
 8004f88:	681d      	ldr	r5, [r3, #0]
 8004f8a:	4632      	mov	r2, r6
 8004f8c:	463b      	mov	r3, r7
 8004f8e:	4630      	mov	r0, r6
 8004f90:	4639      	mov	r1, r7
 8004f92:	f7fb fdcb 	bl	8000b2c <__aeabi_dcmpun>
 8004f96:	b128      	cbz	r0, 8004fa4 <_scanf_float+0x40c>
 8004f98:	4808      	ldr	r0, [pc, #32]	@ (8004fbc <_scanf_float+0x424>)
 8004f9a:	f000 f9b7 	bl	800530c <nanf>
 8004f9e:	ed85 0a00 	vstr	s0, [r5]
 8004fa2:	e7d1      	b.n	8004f48 <_scanf_float+0x3b0>
 8004fa4:	4630      	mov	r0, r6
 8004fa6:	4639      	mov	r1, r7
 8004fa8:	f7fb fe1e 	bl	8000be8 <__aeabi_d2f>
 8004fac:	6028      	str	r0, [r5, #0]
 8004fae:	e7cb      	b.n	8004f48 <_scanf_float+0x3b0>
 8004fb0:	f04f 0900 	mov.w	r9, #0
 8004fb4:	e629      	b.n	8004c0a <_scanf_float+0x72>
 8004fb6:	bf00      	nop
 8004fb8:	08008abb 	.word	0x08008abb
 8004fbc:	08008afb 	.word	0x08008afb

08004fc0 <std>:
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	b510      	push	{r4, lr}
 8004fc4:	4604      	mov	r4, r0
 8004fc6:	e9c0 3300 	strd	r3, r3, [r0]
 8004fca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004fce:	6083      	str	r3, [r0, #8]
 8004fd0:	8181      	strh	r1, [r0, #12]
 8004fd2:	6643      	str	r3, [r0, #100]	@ 0x64
 8004fd4:	81c2      	strh	r2, [r0, #14]
 8004fd6:	6183      	str	r3, [r0, #24]
 8004fd8:	4619      	mov	r1, r3
 8004fda:	2208      	movs	r2, #8
 8004fdc:	305c      	adds	r0, #92	@ 0x5c
 8004fde:	f000 f914 	bl	800520a <memset>
 8004fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8005018 <std+0x58>)
 8004fe4:	6263      	str	r3, [r4, #36]	@ 0x24
 8004fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800501c <std+0x5c>)
 8004fe8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004fea:	4b0d      	ldr	r3, [pc, #52]	@ (8005020 <std+0x60>)
 8004fec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004fee:	4b0d      	ldr	r3, [pc, #52]	@ (8005024 <std+0x64>)
 8004ff0:	6323      	str	r3, [r4, #48]	@ 0x30
 8004ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8005028 <std+0x68>)
 8004ff4:	6224      	str	r4, [r4, #32]
 8004ff6:	429c      	cmp	r4, r3
 8004ff8:	d006      	beq.n	8005008 <std+0x48>
 8004ffa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004ffe:	4294      	cmp	r4, r2
 8005000:	d002      	beq.n	8005008 <std+0x48>
 8005002:	33d0      	adds	r3, #208	@ 0xd0
 8005004:	429c      	cmp	r4, r3
 8005006:	d105      	bne.n	8005014 <std+0x54>
 8005008:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800500c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005010:	f000 b978 	b.w	8005304 <__retarget_lock_init_recursive>
 8005014:	bd10      	pop	{r4, pc}
 8005016:	bf00      	nop
 8005018:	08005185 	.word	0x08005185
 800501c:	080051a7 	.word	0x080051a7
 8005020:	080051df 	.word	0x080051df
 8005024:	08005203 	.word	0x08005203
 8005028:	20000328 	.word	0x20000328

0800502c <stdio_exit_handler>:
 800502c:	4a02      	ldr	r2, [pc, #8]	@ (8005038 <stdio_exit_handler+0xc>)
 800502e:	4903      	ldr	r1, [pc, #12]	@ (800503c <stdio_exit_handler+0x10>)
 8005030:	4803      	ldr	r0, [pc, #12]	@ (8005040 <stdio_exit_handler+0x14>)
 8005032:	f000 b869 	b.w	8005108 <_fwalk_sglue>
 8005036:	bf00      	nop
 8005038:	2000000c 	.word	0x2000000c
 800503c:	08007c15 	.word	0x08007c15
 8005040:	2000001c 	.word	0x2000001c

08005044 <cleanup_stdio>:
 8005044:	6841      	ldr	r1, [r0, #4]
 8005046:	4b0c      	ldr	r3, [pc, #48]	@ (8005078 <cleanup_stdio+0x34>)
 8005048:	4299      	cmp	r1, r3
 800504a:	b510      	push	{r4, lr}
 800504c:	4604      	mov	r4, r0
 800504e:	d001      	beq.n	8005054 <cleanup_stdio+0x10>
 8005050:	f002 fde0 	bl	8007c14 <_fflush_r>
 8005054:	68a1      	ldr	r1, [r4, #8]
 8005056:	4b09      	ldr	r3, [pc, #36]	@ (800507c <cleanup_stdio+0x38>)
 8005058:	4299      	cmp	r1, r3
 800505a:	d002      	beq.n	8005062 <cleanup_stdio+0x1e>
 800505c:	4620      	mov	r0, r4
 800505e:	f002 fdd9 	bl	8007c14 <_fflush_r>
 8005062:	68e1      	ldr	r1, [r4, #12]
 8005064:	4b06      	ldr	r3, [pc, #24]	@ (8005080 <cleanup_stdio+0x3c>)
 8005066:	4299      	cmp	r1, r3
 8005068:	d004      	beq.n	8005074 <cleanup_stdio+0x30>
 800506a:	4620      	mov	r0, r4
 800506c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005070:	f002 bdd0 	b.w	8007c14 <_fflush_r>
 8005074:	bd10      	pop	{r4, pc}
 8005076:	bf00      	nop
 8005078:	20000328 	.word	0x20000328
 800507c:	20000390 	.word	0x20000390
 8005080:	200003f8 	.word	0x200003f8

08005084 <global_stdio_init.part.0>:
 8005084:	b510      	push	{r4, lr}
 8005086:	4b0b      	ldr	r3, [pc, #44]	@ (80050b4 <global_stdio_init.part.0+0x30>)
 8005088:	4c0b      	ldr	r4, [pc, #44]	@ (80050b8 <global_stdio_init.part.0+0x34>)
 800508a:	4a0c      	ldr	r2, [pc, #48]	@ (80050bc <global_stdio_init.part.0+0x38>)
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	4620      	mov	r0, r4
 8005090:	2200      	movs	r2, #0
 8005092:	2104      	movs	r1, #4
 8005094:	f7ff ff94 	bl	8004fc0 <std>
 8005098:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800509c:	2201      	movs	r2, #1
 800509e:	2109      	movs	r1, #9
 80050a0:	f7ff ff8e 	bl	8004fc0 <std>
 80050a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80050a8:	2202      	movs	r2, #2
 80050aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050ae:	2112      	movs	r1, #18
 80050b0:	f7ff bf86 	b.w	8004fc0 <std>
 80050b4:	20000460 	.word	0x20000460
 80050b8:	20000328 	.word	0x20000328
 80050bc:	0800502d 	.word	0x0800502d

080050c0 <__sfp_lock_acquire>:
 80050c0:	4801      	ldr	r0, [pc, #4]	@ (80050c8 <__sfp_lock_acquire+0x8>)
 80050c2:	f000 b920 	b.w	8005306 <__retarget_lock_acquire_recursive>
 80050c6:	bf00      	nop
 80050c8:	20000469 	.word	0x20000469

080050cc <__sfp_lock_release>:
 80050cc:	4801      	ldr	r0, [pc, #4]	@ (80050d4 <__sfp_lock_release+0x8>)
 80050ce:	f000 b91b 	b.w	8005308 <__retarget_lock_release_recursive>
 80050d2:	bf00      	nop
 80050d4:	20000469 	.word	0x20000469

080050d8 <__sinit>:
 80050d8:	b510      	push	{r4, lr}
 80050da:	4604      	mov	r4, r0
 80050dc:	f7ff fff0 	bl	80050c0 <__sfp_lock_acquire>
 80050e0:	6a23      	ldr	r3, [r4, #32]
 80050e2:	b11b      	cbz	r3, 80050ec <__sinit+0x14>
 80050e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050e8:	f7ff bff0 	b.w	80050cc <__sfp_lock_release>
 80050ec:	4b04      	ldr	r3, [pc, #16]	@ (8005100 <__sinit+0x28>)
 80050ee:	6223      	str	r3, [r4, #32]
 80050f0:	4b04      	ldr	r3, [pc, #16]	@ (8005104 <__sinit+0x2c>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d1f5      	bne.n	80050e4 <__sinit+0xc>
 80050f8:	f7ff ffc4 	bl	8005084 <global_stdio_init.part.0>
 80050fc:	e7f2      	b.n	80050e4 <__sinit+0xc>
 80050fe:	bf00      	nop
 8005100:	08005045 	.word	0x08005045
 8005104:	20000460 	.word	0x20000460

08005108 <_fwalk_sglue>:
 8005108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800510c:	4607      	mov	r7, r0
 800510e:	4688      	mov	r8, r1
 8005110:	4614      	mov	r4, r2
 8005112:	2600      	movs	r6, #0
 8005114:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005118:	f1b9 0901 	subs.w	r9, r9, #1
 800511c:	d505      	bpl.n	800512a <_fwalk_sglue+0x22>
 800511e:	6824      	ldr	r4, [r4, #0]
 8005120:	2c00      	cmp	r4, #0
 8005122:	d1f7      	bne.n	8005114 <_fwalk_sglue+0xc>
 8005124:	4630      	mov	r0, r6
 8005126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800512a:	89ab      	ldrh	r3, [r5, #12]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d907      	bls.n	8005140 <_fwalk_sglue+0x38>
 8005130:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005134:	3301      	adds	r3, #1
 8005136:	d003      	beq.n	8005140 <_fwalk_sglue+0x38>
 8005138:	4629      	mov	r1, r5
 800513a:	4638      	mov	r0, r7
 800513c:	47c0      	blx	r8
 800513e:	4306      	orrs	r6, r0
 8005140:	3568      	adds	r5, #104	@ 0x68
 8005142:	e7e9      	b.n	8005118 <_fwalk_sglue+0x10>

08005144 <siprintf>:
 8005144:	b40e      	push	{r1, r2, r3}
 8005146:	b500      	push	{lr}
 8005148:	b09c      	sub	sp, #112	@ 0x70
 800514a:	ab1d      	add	r3, sp, #116	@ 0x74
 800514c:	9002      	str	r0, [sp, #8]
 800514e:	9006      	str	r0, [sp, #24]
 8005150:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005154:	4809      	ldr	r0, [pc, #36]	@ (800517c <siprintf+0x38>)
 8005156:	9107      	str	r1, [sp, #28]
 8005158:	9104      	str	r1, [sp, #16]
 800515a:	4909      	ldr	r1, [pc, #36]	@ (8005180 <siprintf+0x3c>)
 800515c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005160:	9105      	str	r1, [sp, #20]
 8005162:	6800      	ldr	r0, [r0, #0]
 8005164:	9301      	str	r3, [sp, #4]
 8005166:	a902      	add	r1, sp, #8
 8005168:	f002 fbd4 	bl	8007914 <_svfiprintf_r>
 800516c:	9b02      	ldr	r3, [sp, #8]
 800516e:	2200      	movs	r2, #0
 8005170:	701a      	strb	r2, [r3, #0]
 8005172:	b01c      	add	sp, #112	@ 0x70
 8005174:	f85d eb04 	ldr.w	lr, [sp], #4
 8005178:	b003      	add	sp, #12
 800517a:	4770      	bx	lr
 800517c:	20000018 	.word	0x20000018
 8005180:	ffff0208 	.word	0xffff0208

08005184 <__sread>:
 8005184:	b510      	push	{r4, lr}
 8005186:	460c      	mov	r4, r1
 8005188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800518c:	f000 f86c 	bl	8005268 <_read_r>
 8005190:	2800      	cmp	r0, #0
 8005192:	bfab      	itete	ge
 8005194:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005196:	89a3      	ldrhlt	r3, [r4, #12]
 8005198:	181b      	addge	r3, r3, r0
 800519a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800519e:	bfac      	ite	ge
 80051a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80051a2:	81a3      	strhlt	r3, [r4, #12]
 80051a4:	bd10      	pop	{r4, pc}

080051a6 <__swrite>:
 80051a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051aa:	461f      	mov	r7, r3
 80051ac:	898b      	ldrh	r3, [r1, #12]
 80051ae:	05db      	lsls	r3, r3, #23
 80051b0:	4605      	mov	r5, r0
 80051b2:	460c      	mov	r4, r1
 80051b4:	4616      	mov	r6, r2
 80051b6:	d505      	bpl.n	80051c4 <__swrite+0x1e>
 80051b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051bc:	2302      	movs	r3, #2
 80051be:	2200      	movs	r2, #0
 80051c0:	f000 f840 	bl	8005244 <_lseek_r>
 80051c4:	89a3      	ldrh	r3, [r4, #12]
 80051c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80051ce:	81a3      	strh	r3, [r4, #12]
 80051d0:	4632      	mov	r2, r6
 80051d2:	463b      	mov	r3, r7
 80051d4:	4628      	mov	r0, r5
 80051d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051da:	f000 b857 	b.w	800528c <_write_r>

080051de <__sseek>:
 80051de:	b510      	push	{r4, lr}
 80051e0:	460c      	mov	r4, r1
 80051e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051e6:	f000 f82d 	bl	8005244 <_lseek_r>
 80051ea:	1c43      	adds	r3, r0, #1
 80051ec:	89a3      	ldrh	r3, [r4, #12]
 80051ee:	bf15      	itete	ne
 80051f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80051f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80051f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80051fa:	81a3      	strheq	r3, [r4, #12]
 80051fc:	bf18      	it	ne
 80051fe:	81a3      	strhne	r3, [r4, #12]
 8005200:	bd10      	pop	{r4, pc}

08005202 <__sclose>:
 8005202:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005206:	f000 b80d 	b.w	8005224 <_close_r>

0800520a <memset>:
 800520a:	4402      	add	r2, r0
 800520c:	4603      	mov	r3, r0
 800520e:	4293      	cmp	r3, r2
 8005210:	d100      	bne.n	8005214 <memset+0xa>
 8005212:	4770      	bx	lr
 8005214:	f803 1b01 	strb.w	r1, [r3], #1
 8005218:	e7f9      	b.n	800520e <memset+0x4>
	...

0800521c <_localeconv_r>:
 800521c:	4800      	ldr	r0, [pc, #0]	@ (8005220 <_localeconv_r+0x4>)
 800521e:	4770      	bx	lr
 8005220:	20000158 	.word	0x20000158

08005224 <_close_r>:
 8005224:	b538      	push	{r3, r4, r5, lr}
 8005226:	4d06      	ldr	r5, [pc, #24]	@ (8005240 <_close_r+0x1c>)
 8005228:	2300      	movs	r3, #0
 800522a:	4604      	mov	r4, r0
 800522c:	4608      	mov	r0, r1
 800522e:	602b      	str	r3, [r5, #0]
 8005230:	f7fc f8f4 	bl	800141c <_close>
 8005234:	1c43      	adds	r3, r0, #1
 8005236:	d102      	bne.n	800523e <_close_r+0x1a>
 8005238:	682b      	ldr	r3, [r5, #0]
 800523a:	b103      	cbz	r3, 800523e <_close_r+0x1a>
 800523c:	6023      	str	r3, [r4, #0]
 800523e:	bd38      	pop	{r3, r4, r5, pc}
 8005240:	20000464 	.word	0x20000464

08005244 <_lseek_r>:
 8005244:	b538      	push	{r3, r4, r5, lr}
 8005246:	4d07      	ldr	r5, [pc, #28]	@ (8005264 <_lseek_r+0x20>)
 8005248:	4604      	mov	r4, r0
 800524a:	4608      	mov	r0, r1
 800524c:	4611      	mov	r1, r2
 800524e:	2200      	movs	r2, #0
 8005250:	602a      	str	r2, [r5, #0]
 8005252:	461a      	mov	r2, r3
 8005254:	f7fc f909 	bl	800146a <_lseek>
 8005258:	1c43      	adds	r3, r0, #1
 800525a:	d102      	bne.n	8005262 <_lseek_r+0x1e>
 800525c:	682b      	ldr	r3, [r5, #0]
 800525e:	b103      	cbz	r3, 8005262 <_lseek_r+0x1e>
 8005260:	6023      	str	r3, [r4, #0]
 8005262:	bd38      	pop	{r3, r4, r5, pc}
 8005264:	20000464 	.word	0x20000464

08005268 <_read_r>:
 8005268:	b538      	push	{r3, r4, r5, lr}
 800526a:	4d07      	ldr	r5, [pc, #28]	@ (8005288 <_read_r+0x20>)
 800526c:	4604      	mov	r4, r0
 800526e:	4608      	mov	r0, r1
 8005270:	4611      	mov	r1, r2
 8005272:	2200      	movs	r2, #0
 8005274:	602a      	str	r2, [r5, #0]
 8005276:	461a      	mov	r2, r3
 8005278:	f7fc f897 	bl	80013aa <_read>
 800527c:	1c43      	adds	r3, r0, #1
 800527e:	d102      	bne.n	8005286 <_read_r+0x1e>
 8005280:	682b      	ldr	r3, [r5, #0]
 8005282:	b103      	cbz	r3, 8005286 <_read_r+0x1e>
 8005284:	6023      	str	r3, [r4, #0]
 8005286:	bd38      	pop	{r3, r4, r5, pc}
 8005288:	20000464 	.word	0x20000464

0800528c <_write_r>:
 800528c:	b538      	push	{r3, r4, r5, lr}
 800528e:	4d07      	ldr	r5, [pc, #28]	@ (80052ac <_write_r+0x20>)
 8005290:	4604      	mov	r4, r0
 8005292:	4608      	mov	r0, r1
 8005294:	4611      	mov	r1, r2
 8005296:	2200      	movs	r2, #0
 8005298:	602a      	str	r2, [r5, #0]
 800529a:	461a      	mov	r2, r3
 800529c:	f7fc f8a2 	bl	80013e4 <_write>
 80052a0:	1c43      	adds	r3, r0, #1
 80052a2:	d102      	bne.n	80052aa <_write_r+0x1e>
 80052a4:	682b      	ldr	r3, [r5, #0]
 80052a6:	b103      	cbz	r3, 80052aa <_write_r+0x1e>
 80052a8:	6023      	str	r3, [r4, #0]
 80052aa:	bd38      	pop	{r3, r4, r5, pc}
 80052ac:	20000464 	.word	0x20000464

080052b0 <__errno>:
 80052b0:	4b01      	ldr	r3, [pc, #4]	@ (80052b8 <__errno+0x8>)
 80052b2:	6818      	ldr	r0, [r3, #0]
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	20000018 	.word	0x20000018

080052bc <__libc_init_array>:
 80052bc:	b570      	push	{r4, r5, r6, lr}
 80052be:	4d0d      	ldr	r5, [pc, #52]	@ (80052f4 <__libc_init_array+0x38>)
 80052c0:	4c0d      	ldr	r4, [pc, #52]	@ (80052f8 <__libc_init_array+0x3c>)
 80052c2:	1b64      	subs	r4, r4, r5
 80052c4:	10a4      	asrs	r4, r4, #2
 80052c6:	2600      	movs	r6, #0
 80052c8:	42a6      	cmp	r6, r4
 80052ca:	d109      	bne.n	80052e0 <__libc_init_array+0x24>
 80052cc:	4d0b      	ldr	r5, [pc, #44]	@ (80052fc <__libc_init_array+0x40>)
 80052ce:	4c0c      	ldr	r4, [pc, #48]	@ (8005300 <__libc_init_array+0x44>)
 80052d0:	f003 fb74 	bl	80089bc <_init>
 80052d4:	1b64      	subs	r4, r4, r5
 80052d6:	10a4      	asrs	r4, r4, #2
 80052d8:	2600      	movs	r6, #0
 80052da:	42a6      	cmp	r6, r4
 80052dc:	d105      	bne.n	80052ea <__libc_init_array+0x2e>
 80052de:	bd70      	pop	{r4, r5, r6, pc}
 80052e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80052e4:	4798      	blx	r3
 80052e6:	3601      	adds	r6, #1
 80052e8:	e7ee      	b.n	80052c8 <__libc_init_array+0xc>
 80052ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80052ee:	4798      	blx	r3
 80052f0:	3601      	adds	r6, #1
 80052f2:	e7f2      	b.n	80052da <__libc_init_array+0x1e>
 80052f4:	08008ea4 	.word	0x08008ea4
 80052f8:	08008ea4 	.word	0x08008ea4
 80052fc:	08008ea4 	.word	0x08008ea4
 8005300:	08008ea8 	.word	0x08008ea8

08005304 <__retarget_lock_init_recursive>:
 8005304:	4770      	bx	lr

08005306 <__retarget_lock_acquire_recursive>:
 8005306:	4770      	bx	lr

08005308 <__retarget_lock_release_recursive>:
 8005308:	4770      	bx	lr
	...

0800530c <nanf>:
 800530c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005314 <nanf+0x8>
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	7fc00000 	.word	0x7fc00000

08005318 <__assert_func>:
 8005318:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800531a:	4614      	mov	r4, r2
 800531c:	461a      	mov	r2, r3
 800531e:	4b09      	ldr	r3, [pc, #36]	@ (8005344 <__assert_func+0x2c>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4605      	mov	r5, r0
 8005324:	68d8      	ldr	r0, [r3, #12]
 8005326:	b954      	cbnz	r4, 800533e <__assert_func+0x26>
 8005328:	4b07      	ldr	r3, [pc, #28]	@ (8005348 <__assert_func+0x30>)
 800532a:	461c      	mov	r4, r3
 800532c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005330:	9100      	str	r1, [sp, #0]
 8005332:	462b      	mov	r3, r5
 8005334:	4905      	ldr	r1, [pc, #20]	@ (800534c <__assert_func+0x34>)
 8005336:	f002 fc95 	bl	8007c64 <fiprintf>
 800533a:	f002 fcf9 	bl	8007d30 <abort>
 800533e:	4b04      	ldr	r3, [pc, #16]	@ (8005350 <__assert_func+0x38>)
 8005340:	e7f4      	b.n	800532c <__assert_func+0x14>
 8005342:	bf00      	nop
 8005344:	20000018 	.word	0x20000018
 8005348:	08008afb 	.word	0x08008afb
 800534c:	08008acd 	.word	0x08008acd
 8005350:	08008ac0 	.word	0x08008ac0

08005354 <quorem>:
 8005354:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005358:	6903      	ldr	r3, [r0, #16]
 800535a:	690c      	ldr	r4, [r1, #16]
 800535c:	42a3      	cmp	r3, r4
 800535e:	4607      	mov	r7, r0
 8005360:	db7e      	blt.n	8005460 <quorem+0x10c>
 8005362:	3c01      	subs	r4, #1
 8005364:	f101 0814 	add.w	r8, r1, #20
 8005368:	00a3      	lsls	r3, r4, #2
 800536a:	f100 0514 	add.w	r5, r0, #20
 800536e:	9300      	str	r3, [sp, #0]
 8005370:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005374:	9301      	str	r3, [sp, #4]
 8005376:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800537a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800537e:	3301      	adds	r3, #1
 8005380:	429a      	cmp	r2, r3
 8005382:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005386:	fbb2 f6f3 	udiv	r6, r2, r3
 800538a:	d32e      	bcc.n	80053ea <quorem+0x96>
 800538c:	f04f 0a00 	mov.w	sl, #0
 8005390:	46c4      	mov	ip, r8
 8005392:	46ae      	mov	lr, r5
 8005394:	46d3      	mov	fp, sl
 8005396:	f85c 3b04 	ldr.w	r3, [ip], #4
 800539a:	b298      	uxth	r0, r3
 800539c:	fb06 a000 	mla	r0, r6, r0, sl
 80053a0:	0c02      	lsrs	r2, r0, #16
 80053a2:	0c1b      	lsrs	r3, r3, #16
 80053a4:	fb06 2303 	mla	r3, r6, r3, r2
 80053a8:	f8de 2000 	ldr.w	r2, [lr]
 80053ac:	b280      	uxth	r0, r0
 80053ae:	b292      	uxth	r2, r2
 80053b0:	1a12      	subs	r2, r2, r0
 80053b2:	445a      	add	r2, fp
 80053b4:	f8de 0000 	ldr.w	r0, [lr]
 80053b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80053bc:	b29b      	uxth	r3, r3
 80053be:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80053c2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80053c6:	b292      	uxth	r2, r2
 80053c8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80053cc:	45e1      	cmp	r9, ip
 80053ce:	f84e 2b04 	str.w	r2, [lr], #4
 80053d2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80053d6:	d2de      	bcs.n	8005396 <quorem+0x42>
 80053d8:	9b00      	ldr	r3, [sp, #0]
 80053da:	58eb      	ldr	r3, [r5, r3]
 80053dc:	b92b      	cbnz	r3, 80053ea <quorem+0x96>
 80053de:	9b01      	ldr	r3, [sp, #4]
 80053e0:	3b04      	subs	r3, #4
 80053e2:	429d      	cmp	r5, r3
 80053e4:	461a      	mov	r2, r3
 80053e6:	d32f      	bcc.n	8005448 <quorem+0xf4>
 80053e8:	613c      	str	r4, [r7, #16]
 80053ea:	4638      	mov	r0, r7
 80053ec:	f001 f9c4 	bl	8006778 <__mcmp>
 80053f0:	2800      	cmp	r0, #0
 80053f2:	db25      	blt.n	8005440 <quorem+0xec>
 80053f4:	4629      	mov	r1, r5
 80053f6:	2000      	movs	r0, #0
 80053f8:	f858 2b04 	ldr.w	r2, [r8], #4
 80053fc:	f8d1 c000 	ldr.w	ip, [r1]
 8005400:	fa1f fe82 	uxth.w	lr, r2
 8005404:	fa1f f38c 	uxth.w	r3, ip
 8005408:	eba3 030e 	sub.w	r3, r3, lr
 800540c:	4403      	add	r3, r0
 800540e:	0c12      	lsrs	r2, r2, #16
 8005410:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005414:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005418:	b29b      	uxth	r3, r3
 800541a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800541e:	45c1      	cmp	r9, r8
 8005420:	f841 3b04 	str.w	r3, [r1], #4
 8005424:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005428:	d2e6      	bcs.n	80053f8 <quorem+0xa4>
 800542a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800542e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005432:	b922      	cbnz	r2, 800543e <quorem+0xea>
 8005434:	3b04      	subs	r3, #4
 8005436:	429d      	cmp	r5, r3
 8005438:	461a      	mov	r2, r3
 800543a:	d30b      	bcc.n	8005454 <quorem+0x100>
 800543c:	613c      	str	r4, [r7, #16]
 800543e:	3601      	adds	r6, #1
 8005440:	4630      	mov	r0, r6
 8005442:	b003      	add	sp, #12
 8005444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005448:	6812      	ldr	r2, [r2, #0]
 800544a:	3b04      	subs	r3, #4
 800544c:	2a00      	cmp	r2, #0
 800544e:	d1cb      	bne.n	80053e8 <quorem+0x94>
 8005450:	3c01      	subs	r4, #1
 8005452:	e7c6      	b.n	80053e2 <quorem+0x8e>
 8005454:	6812      	ldr	r2, [r2, #0]
 8005456:	3b04      	subs	r3, #4
 8005458:	2a00      	cmp	r2, #0
 800545a:	d1ef      	bne.n	800543c <quorem+0xe8>
 800545c:	3c01      	subs	r4, #1
 800545e:	e7ea      	b.n	8005436 <quorem+0xe2>
 8005460:	2000      	movs	r0, #0
 8005462:	e7ee      	b.n	8005442 <quorem+0xee>
 8005464:	0000      	movs	r0, r0
	...

08005468 <_dtoa_r>:
 8005468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800546c:	69c7      	ldr	r7, [r0, #28]
 800546e:	b099      	sub	sp, #100	@ 0x64
 8005470:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005474:	ec55 4b10 	vmov	r4, r5, d0
 8005478:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800547a:	9109      	str	r1, [sp, #36]	@ 0x24
 800547c:	4683      	mov	fp, r0
 800547e:	920e      	str	r2, [sp, #56]	@ 0x38
 8005480:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005482:	b97f      	cbnz	r7, 80054a4 <_dtoa_r+0x3c>
 8005484:	2010      	movs	r0, #16
 8005486:	f000 fdfd 	bl	8006084 <malloc>
 800548a:	4602      	mov	r2, r0
 800548c:	f8cb 001c 	str.w	r0, [fp, #28]
 8005490:	b920      	cbnz	r0, 800549c <_dtoa_r+0x34>
 8005492:	4ba7      	ldr	r3, [pc, #668]	@ (8005730 <_dtoa_r+0x2c8>)
 8005494:	21ef      	movs	r1, #239	@ 0xef
 8005496:	48a7      	ldr	r0, [pc, #668]	@ (8005734 <_dtoa_r+0x2cc>)
 8005498:	f7ff ff3e 	bl	8005318 <__assert_func>
 800549c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80054a0:	6007      	str	r7, [r0, #0]
 80054a2:	60c7      	str	r7, [r0, #12]
 80054a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80054a8:	6819      	ldr	r1, [r3, #0]
 80054aa:	b159      	cbz	r1, 80054c4 <_dtoa_r+0x5c>
 80054ac:	685a      	ldr	r2, [r3, #4]
 80054ae:	604a      	str	r2, [r1, #4]
 80054b0:	2301      	movs	r3, #1
 80054b2:	4093      	lsls	r3, r2
 80054b4:	608b      	str	r3, [r1, #8]
 80054b6:	4658      	mov	r0, fp
 80054b8:	f000 feda 	bl	8006270 <_Bfree>
 80054bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80054c0:	2200      	movs	r2, #0
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	1e2b      	subs	r3, r5, #0
 80054c6:	bfb9      	ittee	lt
 80054c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80054cc:	9303      	strlt	r3, [sp, #12]
 80054ce:	2300      	movge	r3, #0
 80054d0:	6033      	strge	r3, [r6, #0]
 80054d2:	9f03      	ldr	r7, [sp, #12]
 80054d4:	4b98      	ldr	r3, [pc, #608]	@ (8005738 <_dtoa_r+0x2d0>)
 80054d6:	bfbc      	itt	lt
 80054d8:	2201      	movlt	r2, #1
 80054da:	6032      	strlt	r2, [r6, #0]
 80054dc:	43bb      	bics	r3, r7
 80054de:	d112      	bne.n	8005506 <_dtoa_r+0x9e>
 80054e0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80054e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80054e6:	6013      	str	r3, [r2, #0]
 80054e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80054ec:	4323      	orrs	r3, r4
 80054ee:	f000 854d 	beq.w	8005f8c <_dtoa_r+0xb24>
 80054f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80054f4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800574c <_dtoa_r+0x2e4>
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f000 854f 	beq.w	8005f9c <_dtoa_r+0xb34>
 80054fe:	f10a 0303 	add.w	r3, sl, #3
 8005502:	f000 bd49 	b.w	8005f98 <_dtoa_r+0xb30>
 8005506:	ed9d 7b02 	vldr	d7, [sp, #8]
 800550a:	2200      	movs	r2, #0
 800550c:	ec51 0b17 	vmov	r0, r1, d7
 8005510:	2300      	movs	r3, #0
 8005512:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005516:	f7fb fad7 	bl	8000ac8 <__aeabi_dcmpeq>
 800551a:	4680      	mov	r8, r0
 800551c:	b158      	cbz	r0, 8005536 <_dtoa_r+0xce>
 800551e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005520:	2301      	movs	r3, #1
 8005522:	6013      	str	r3, [r2, #0]
 8005524:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005526:	b113      	cbz	r3, 800552e <_dtoa_r+0xc6>
 8005528:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800552a:	4b84      	ldr	r3, [pc, #528]	@ (800573c <_dtoa_r+0x2d4>)
 800552c:	6013      	str	r3, [r2, #0]
 800552e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005750 <_dtoa_r+0x2e8>
 8005532:	f000 bd33 	b.w	8005f9c <_dtoa_r+0xb34>
 8005536:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800553a:	aa16      	add	r2, sp, #88	@ 0x58
 800553c:	a917      	add	r1, sp, #92	@ 0x5c
 800553e:	4658      	mov	r0, fp
 8005540:	f001 fa3a 	bl	80069b8 <__d2b>
 8005544:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005548:	4681      	mov	r9, r0
 800554a:	2e00      	cmp	r6, #0
 800554c:	d077      	beq.n	800563e <_dtoa_r+0x1d6>
 800554e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005550:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005558:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800555c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005560:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005564:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005568:	4619      	mov	r1, r3
 800556a:	2200      	movs	r2, #0
 800556c:	4b74      	ldr	r3, [pc, #464]	@ (8005740 <_dtoa_r+0x2d8>)
 800556e:	f7fa fe8b 	bl	8000288 <__aeabi_dsub>
 8005572:	a369      	add	r3, pc, #420	@ (adr r3, 8005718 <_dtoa_r+0x2b0>)
 8005574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005578:	f7fb f83e 	bl	80005f8 <__aeabi_dmul>
 800557c:	a368      	add	r3, pc, #416	@ (adr r3, 8005720 <_dtoa_r+0x2b8>)
 800557e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005582:	f7fa fe83 	bl	800028c <__adddf3>
 8005586:	4604      	mov	r4, r0
 8005588:	4630      	mov	r0, r6
 800558a:	460d      	mov	r5, r1
 800558c:	f7fa ffca 	bl	8000524 <__aeabi_i2d>
 8005590:	a365      	add	r3, pc, #404	@ (adr r3, 8005728 <_dtoa_r+0x2c0>)
 8005592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005596:	f7fb f82f 	bl	80005f8 <__aeabi_dmul>
 800559a:	4602      	mov	r2, r0
 800559c:	460b      	mov	r3, r1
 800559e:	4620      	mov	r0, r4
 80055a0:	4629      	mov	r1, r5
 80055a2:	f7fa fe73 	bl	800028c <__adddf3>
 80055a6:	4604      	mov	r4, r0
 80055a8:	460d      	mov	r5, r1
 80055aa:	f7fb fad5 	bl	8000b58 <__aeabi_d2iz>
 80055ae:	2200      	movs	r2, #0
 80055b0:	4607      	mov	r7, r0
 80055b2:	2300      	movs	r3, #0
 80055b4:	4620      	mov	r0, r4
 80055b6:	4629      	mov	r1, r5
 80055b8:	f7fb fa90 	bl	8000adc <__aeabi_dcmplt>
 80055bc:	b140      	cbz	r0, 80055d0 <_dtoa_r+0x168>
 80055be:	4638      	mov	r0, r7
 80055c0:	f7fa ffb0 	bl	8000524 <__aeabi_i2d>
 80055c4:	4622      	mov	r2, r4
 80055c6:	462b      	mov	r3, r5
 80055c8:	f7fb fa7e 	bl	8000ac8 <__aeabi_dcmpeq>
 80055cc:	b900      	cbnz	r0, 80055d0 <_dtoa_r+0x168>
 80055ce:	3f01      	subs	r7, #1
 80055d0:	2f16      	cmp	r7, #22
 80055d2:	d851      	bhi.n	8005678 <_dtoa_r+0x210>
 80055d4:	4b5b      	ldr	r3, [pc, #364]	@ (8005744 <_dtoa_r+0x2dc>)
 80055d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80055da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80055e2:	f7fb fa7b 	bl	8000adc <__aeabi_dcmplt>
 80055e6:	2800      	cmp	r0, #0
 80055e8:	d048      	beq.n	800567c <_dtoa_r+0x214>
 80055ea:	3f01      	subs	r7, #1
 80055ec:	2300      	movs	r3, #0
 80055ee:	9312      	str	r3, [sp, #72]	@ 0x48
 80055f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80055f2:	1b9b      	subs	r3, r3, r6
 80055f4:	1e5a      	subs	r2, r3, #1
 80055f6:	bf44      	itt	mi
 80055f8:	f1c3 0801 	rsbmi	r8, r3, #1
 80055fc:	2300      	movmi	r3, #0
 80055fe:	9208      	str	r2, [sp, #32]
 8005600:	bf54      	ite	pl
 8005602:	f04f 0800 	movpl.w	r8, #0
 8005606:	9308      	strmi	r3, [sp, #32]
 8005608:	2f00      	cmp	r7, #0
 800560a:	db39      	blt.n	8005680 <_dtoa_r+0x218>
 800560c:	9b08      	ldr	r3, [sp, #32]
 800560e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005610:	443b      	add	r3, r7
 8005612:	9308      	str	r3, [sp, #32]
 8005614:	2300      	movs	r3, #0
 8005616:	930a      	str	r3, [sp, #40]	@ 0x28
 8005618:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800561a:	2b09      	cmp	r3, #9
 800561c:	d864      	bhi.n	80056e8 <_dtoa_r+0x280>
 800561e:	2b05      	cmp	r3, #5
 8005620:	bfc4      	itt	gt
 8005622:	3b04      	subgt	r3, #4
 8005624:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005626:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005628:	f1a3 0302 	sub.w	r3, r3, #2
 800562c:	bfcc      	ite	gt
 800562e:	2400      	movgt	r4, #0
 8005630:	2401      	movle	r4, #1
 8005632:	2b03      	cmp	r3, #3
 8005634:	d863      	bhi.n	80056fe <_dtoa_r+0x296>
 8005636:	e8df f003 	tbb	[pc, r3]
 800563a:	372a      	.short	0x372a
 800563c:	5535      	.short	0x5535
 800563e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005642:	441e      	add	r6, r3
 8005644:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005648:	2b20      	cmp	r3, #32
 800564a:	bfc1      	itttt	gt
 800564c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005650:	409f      	lslgt	r7, r3
 8005652:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005656:	fa24 f303 	lsrgt.w	r3, r4, r3
 800565a:	bfd6      	itet	le
 800565c:	f1c3 0320 	rsble	r3, r3, #32
 8005660:	ea47 0003 	orrgt.w	r0, r7, r3
 8005664:	fa04 f003 	lslle.w	r0, r4, r3
 8005668:	f7fa ff4c 	bl	8000504 <__aeabi_ui2d>
 800566c:	2201      	movs	r2, #1
 800566e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005672:	3e01      	subs	r6, #1
 8005674:	9214      	str	r2, [sp, #80]	@ 0x50
 8005676:	e777      	b.n	8005568 <_dtoa_r+0x100>
 8005678:	2301      	movs	r3, #1
 800567a:	e7b8      	b.n	80055ee <_dtoa_r+0x186>
 800567c:	9012      	str	r0, [sp, #72]	@ 0x48
 800567e:	e7b7      	b.n	80055f0 <_dtoa_r+0x188>
 8005680:	427b      	negs	r3, r7
 8005682:	930a      	str	r3, [sp, #40]	@ 0x28
 8005684:	2300      	movs	r3, #0
 8005686:	eba8 0807 	sub.w	r8, r8, r7
 800568a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800568c:	e7c4      	b.n	8005618 <_dtoa_r+0x1b0>
 800568e:	2300      	movs	r3, #0
 8005690:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005692:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005694:	2b00      	cmp	r3, #0
 8005696:	dc35      	bgt.n	8005704 <_dtoa_r+0x29c>
 8005698:	2301      	movs	r3, #1
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	9307      	str	r3, [sp, #28]
 800569e:	461a      	mov	r2, r3
 80056a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80056a2:	e00b      	b.n	80056bc <_dtoa_r+0x254>
 80056a4:	2301      	movs	r3, #1
 80056a6:	e7f3      	b.n	8005690 <_dtoa_r+0x228>
 80056a8:	2300      	movs	r3, #0
 80056aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80056ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80056ae:	18fb      	adds	r3, r7, r3
 80056b0:	9300      	str	r3, [sp, #0]
 80056b2:	3301      	adds	r3, #1
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	9307      	str	r3, [sp, #28]
 80056b8:	bfb8      	it	lt
 80056ba:	2301      	movlt	r3, #1
 80056bc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80056c0:	2100      	movs	r1, #0
 80056c2:	2204      	movs	r2, #4
 80056c4:	f102 0514 	add.w	r5, r2, #20
 80056c8:	429d      	cmp	r5, r3
 80056ca:	d91f      	bls.n	800570c <_dtoa_r+0x2a4>
 80056cc:	6041      	str	r1, [r0, #4]
 80056ce:	4658      	mov	r0, fp
 80056d0:	f000 fd8e 	bl	80061f0 <_Balloc>
 80056d4:	4682      	mov	sl, r0
 80056d6:	2800      	cmp	r0, #0
 80056d8:	d13c      	bne.n	8005754 <_dtoa_r+0x2ec>
 80056da:	4b1b      	ldr	r3, [pc, #108]	@ (8005748 <_dtoa_r+0x2e0>)
 80056dc:	4602      	mov	r2, r0
 80056de:	f240 11af 	movw	r1, #431	@ 0x1af
 80056e2:	e6d8      	b.n	8005496 <_dtoa_r+0x2e>
 80056e4:	2301      	movs	r3, #1
 80056e6:	e7e0      	b.n	80056aa <_dtoa_r+0x242>
 80056e8:	2401      	movs	r4, #1
 80056ea:	2300      	movs	r3, #0
 80056ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80056ee:	940b      	str	r4, [sp, #44]	@ 0x2c
 80056f0:	f04f 33ff 	mov.w	r3, #4294967295
 80056f4:	9300      	str	r3, [sp, #0]
 80056f6:	9307      	str	r3, [sp, #28]
 80056f8:	2200      	movs	r2, #0
 80056fa:	2312      	movs	r3, #18
 80056fc:	e7d0      	b.n	80056a0 <_dtoa_r+0x238>
 80056fe:	2301      	movs	r3, #1
 8005700:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005702:	e7f5      	b.n	80056f0 <_dtoa_r+0x288>
 8005704:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005706:	9300      	str	r3, [sp, #0]
 8005708:	9307      	str	r3, [sp, #28]
 800570a:	e7d7      	b.n	80056bc <_dtoa_r+0x254>
 800570c:	3101      	adds	r1, #1
 800570e:	0052      	lsls	r2, r2, #1
 8005710:	e7d8      	b.n	80056c4 <_dtoa_r+0x25c>
 8005712:	bf00      	nop
 8005714:	f3af 8000 	nop.w
 8005718:	636f4361 	.word	0x636f4361
 800571c:	3fd287a7 	.word	0x3fd287a7
 8005720:	8b60c8b3 	.word	0x8b60c8b3
 8005724:	3fc68a28 	.word	0x3fc68a28
 8005728:	509f79fb 	.word	0x509f79fb
 800572c:	3fd34413 	.word	0x3fd34413
 8005730:	08008a18 	.word	0x08008a18
 8005734:	08008b09 	.word	0x08008b09
 8005738:	7ff00000 	.word	0x7ff00000
 800573c:	08008a98 	.word	0x08008a98
 8005740:	3ff80000 	.word	0x3ff80000
 8005744:	08008c00 	.word	0x08008c00
 8005748:	08008b61 	.word	0x08008b61
 800574c:	08008b05 	.word	0x08008b05
 8005750:	08008a97 	.word	0x08008a97
 8005754:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005758:	6018      	str	r0, [r3, #0]
 800575a:	9b07      	ldr	r3, [sp, #28]
 800575c:	2b0e      	cmp	r3, #14
 800575e:	f200 80a4 	bhi.w	80058aa <_dtoa_r+0x442>
 8005762:	2c00      	cmp	r4, #0
 8005764:	f000 80a1 	beq.w	80058aa <_dtoa_r+0x442>
 8005768:	2f00      	cmp	r7, #0
 800576a:	dd33      	ble.n	80057d4 <_dtoa_r+0x36c>
 800576c:	4bad      	ldr	r3, [pc, #692]	@ (8005a24 <_dtoa_r+0x5bc>)
 800576e:	f007 020f 	and.w	r2, r7, #15
 8005772:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005776:	ed93 7b00 	vldr	d7, [r3]
 800577a:	05f8      	lsls	r0, r7, #23
 800577c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005780:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005784:	d516      	bpl.n	80057b4 <_dtoa_r+0x34c>
 8005786:	4ba8      	ldr	r3, [pc, #672]	@ (8005a28 <_dtoa_r+0x5c0>)
 8005788:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800578c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005790:	f7fb f85c 	bl	800084c <__aeabi_ddiv>
 8005794:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005798:	f004 040f 	and.w	r4, r4, #15
 800579c:	2603      	movs	r6, #3
 800579e:	4da2      	ldr	r5, [pc, #648]	@ (8005a28 <_dtoa_r+0x5c0>)
 80057a0:	b954      	cbnz	r4, 80057b8 <_dtoa_r+0x350>
 80057a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057aa:	f7fb f84f 	bl	800084c <__aeabi_ddiv>
 80057ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057b2:	e028      	b.n	8005806 <_dtoa_r+0x39e>
 80057b4:	2602      	movs	r6, #2
 80057b6:	e7f2      	b.n	800579e <_dtoa_r+0x336>
 80057b8:	07e1      	lsls	r1, r4, #31
 80057ba:	d508      	bpl.n	80057ce <_dtoa_r+0x366>
 80057bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80057c4:	f7fa ff18 	bl	80005f8 <__aeabi_dmul>
 80057c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057cc:	3601      	adds	r6, #1
 80057ce:	1064      	asrs	r4, r4, #1
 80057d0:	3508      	adds	r5, #8
 80057d2:	e7e5      	b.n	80057a0 <_dtoa_r+0x338>
 80057d4:	f000 80d2 	beq.w	800597c <_dtoa_r+0x514>
 80057d8:	427c      	negs	r4, r7
 80057da:	4b92      	ldr	r3, [pc, #584]	@ (8005a24 <_dtoa_r+0x5bc>)
 80057dc:	4d92      	ldr	r5, [pc, #584]	@ (8005a28 <_dtoa_r+0x5c0>)
 80057de:	f004 020f 	and.w	r2, r4, #15
 80057e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80057e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80057ee:	f7fa ff03 	bl	80005f8 <__aeabi_dmul>
 80057f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057f6:	1124      	asrs	r4, r4, #4
 80057f8:	2300      	movs	r3, #0
 80057fa:	2602      	movs	r6, #2
 80057fc:	2c00      	cmp	r4, #0
 80057fe:	f040 80b2 	bne.w	8005966 <_dtoa_r+0x4fe>
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1d3      	bne.n	80057ae <_dtoa_r+0x346>
 8005806:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005808:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800580c:	2b00      	cmp	r3, #0
 800580e:	f000 80b7 	beq.w	8005980 <_dtoa_r+0x518>
 8005812:	4b86      	ldr	r3, [pc, #536]	@ (8005a2c <_dtoa_r+0x5c4>)
 8005814:	2200      	movs	r2, #0
 8005816:	4620      	mov	r0, r4
 8005818:	4629      	mov	r1, r5
 800581a:	f7fb f95f 	bl	8000adc <__aeabi_dcmplt>
 800581e:	2800      	cmp	r0, #0
 8005820:	f000 80ae 	beq.w	8005980 <_dtoa_r+0x518>
 8005824:	9b07      	ldr	r3, [sp, #28]
 8005826:	2b00      	cmp	r3, #0
 8005828:	f000 80aa 	beq.w	8005980 <_dtoa_r+0x518>
 800582c:	9b00      	ldr	r3, [sp, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	dd37      	ble.n	80058a2 <_dtoa_r+0x43a>
 8005832:	1e7b      	subs	r3, r7, #1
 8005834:	9304      	str	r3, [sp, #16]
 8005836:	4620      	mov	r0, r4
 8005838:	4b7d      	ldr	r3, [pc, #500]	@ (8005a30 <_dtoa_r+0x5c8>)
 800583a:	2200      	movs	r2, #0
 800583c:	4629      	mov	r1, r5
 800583e:	f7fa fedb 	bl	80005f8 <__aeabi_dmul>
 8005842:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005846:	9c00      	ldr	r4, [sp, #0]
 8005848:	3601      	adds	r6, #1
 800584a:	4630      	mov	r0, r6
 800584c:	f7fa fe6a 	bl	8000524 <__aeabi_i2d>
 8005850:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005854:	f7fa fed0 	bl	80005f8 <__aeabi_dmul>
 8005858:	4b76      	ldr	r3, [pc, #472]	@ (8005a34 <_dtoa_r+0x5cc>)
 800585a:	2200      	movs	r2, #0
 800585c:	f7fa fd16 	bl	800028c <__adddf3>
 8005860:	4605      	mov	r5, r0
 8005862:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005866:	2c00      	cmp	r4, #0
 8005868:	f040 808d 	bne.w	8005986 <_dtoa_r+0x51e>
 800586c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005870:	4b71      	ldr	r3, [pc, #452]	@ (8005a38 <_dtoa_r+0x5d0>)
 8005872:	2200      	movs	r2, #0
 8005874:	f7fa fd08 	bl	8000288 <__aeabi_dsub>
 8005878:	4602      	mov	r2, r0
 800587a:	460b      	mov	r3, r1
 800587c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005880:	462a      	mov	r2, r5
 8005882:	4633      	mov	r3, r6
 8005884:	f7fb f948 	bl	8000b18 <__aeabi_dcmpgt>
 8005888:	2800      	cmp	r0, #0
 800588a:	f040 828b 	bne.w	8005da4 <_dtoa_r+0x93c>
 800588e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005892:	462a      	mov	r2, r5
 8005894:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005898:	f7fb f920 	bl	8000adc <__aeabi_dcmplt>
 800589c:	2800      	cmp	r0, #0
 800589e:	f040 8128 	bne.w	8005af2 <_dtoa_r+0x68a>
 80058a2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80058a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80058aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	f2c0 815a 	blt.w	8005b66 <_dtoa_r+0x6fe>
 80058b2:	2f0e      	cmp	r7, #14
 80058b4:	f300 8157 	bgt.w	8005b66 <_dtoa_r+0x6fe>
 80058b8:	4b5a      	ldr	r3, [pc, #360]	@ (8005a24 <_dtoa_r+0x5bc>)
 80058ba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80058be:	ed93 7b00 	vldr	d7, [r3]
 80058c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	ed8d 7b00 	vstr	d7, [sp]
 80058ca:	da03      	bge.n	80058d4 <_dtoa_r+0x46c>
 80058cc:	9b07      	ldr	r3, [sp, #28]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f340 8101 	ble.w	8005ad6 <_dtoa_r+0x66e>
 80058d4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80058d8:	4656      	mov	r6, sl
 80058da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80058de:	4620      	mov	r0, r4
 80058e0:	4629      	mov	r1, r5
 80058e2:	f7fa ffb3 	bl	800084c <__aeabi_ddiv>
 80058e6:	f7fb f937 	bl	8000b58 <__aeabi_d2iz>
 80058ea:	4680      	mov	r8, r0
 80058ec:	f7fa fe1a 	bl	8000524 <__aeabi_i2d>
 80058f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80058f4:	f7fa fe80 	bl	80005f8 <__aeabi_dmul>
 80058f8:	4602      	mov	r2, r0
 80058fa:	460b      	mov	r3, r1
 80058fc:	4620      	mov	r0, r4
 80058fe:	4629      	mov	r1, r5
 8005900:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005904:	f7fa fcc0 	bl	8000288 <__aeabi_dsub>
 8005908:	f806 4b01 	strb.w	r4, [r6], #1
 800590c:	9d07      	ldr	r5, [sp, #28]
 800590e:	eba6 040a 	sub.w	r4, r6, sl
 8005912:	42a5      	cmp	r5, r4
 8005914:	4602      	mov	r2, r0
 8005916:	460b      	mov	r3, r1
 8005918:	f040 8117 	bne.w	8005b4a <_dtoa_r+0x6e2>
 800591c:	f7fa fcb6 	bl	800028c <__adddf3>
 8005920:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005924:	4604      	mov	r4, r0
 8005926:	460d      	mov	r5, r1
 8005928:	f7fb f8f6 	bl	8000b18 <__aeabi_dcmpgt>
 800592c:	2800      	cmp	r0, #0
 800592e:	f040 80f9 	bne.w	8005b24 <_dtoa_r+0x6bc>
 8005932:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005936:	4620      	mov	r0, r4
 8005938:	4629      	mov	r1, r5
 800593a:	f7fb f8c5 	bl	8000ac8 <__aeabi_dcmpeq>
 800593e:	b118      	cbz	r0, 8005948 <_dtoa_r+0x4e0>
 8005940:	f018 0f01 	tst.w	r8, #1
 8005944:	f040 80ee 	bne.w	8005b24 <_dtoa_r+0x6bc>
 8005948:	4649      	mov	r1, r9
 800594a:	4658      	mov	r0, fp
 800594c:	f000 fc90 	bl	8006270 <_Bfree>
 8005950:	2300      	movs	r3, #0
 8005952:	7033      	strb	r3, [r6, #0]
 8005954:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005956:	3701      	adds	r7, #1
 8005958:	601f      	str	r7, [r3, #0]
 800595a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800595c:	2b00      	cmp	r3, #0
 800595e:	f000 831d 	beq.w	8005f9c <_dtoa_r+0xb34>
 8005962:	601e      	str	r6, [r3, #0]
 8005964:	e31a      	b.n	8005f9c <_dtoa_r+0xb34>
 8005966:	07e2      	lsls	r2, r4, #31
 8005968:	d505      	bpl.n	8005976 <_dtoa_r+0x50e>
 800596a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800596e:	f7fa fe43 	bl	80005f8 <__aeabi_dmul>
 8005972:	3601      	adds	r6, #1
 8005974:	2301      	movs	r3, #1
 8005976:	1064      	asrs	r4, r4, #1
 8005978:	3508      	adds	r5, #8
 800597a:	e73f      	b.n	80057fc <_dtoa_r+0x394>
 800597c:	2602      	movs	r6, #2
 800597e:	e742      	b.n	8005806 <_dtoa_r+0x39e>
 8005980:	9c07      	ldr	r4, [sp, #28]
 8005982:	9704      	str	r7, [sp, #16]
 8005984:	e761      	b.n	800584a <_dtoa_r+0x3e2>
 8005986:	4b27      	ldr	r3, [pc, #156]	@ (8005a24 <_dtoa_r+0x5bc>)
 8005988:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800598a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800598e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005992:	4454      	add	r4, sl
 8005994:	2900      	cmp	r1, #0
 8005996:	d053      	beq.n	8005a40 <_dtoa_r+0x5d8>
 8005998:	4928      	ldr	r1, [pc, #160]	@ (8005a3c <_dtoa_r+0x5d4>)
 800599a:	2000      	movs	r0, #0
 800599c:	f7fa ff56 	bl	800084c <__aeabi_ddiv>
 80059a0:	4633      	mov	r3, r6
 80059a2:	462a      	mov	r2, r5
 80059a4:	f7fa fc70 	bl	8000288 <__aeabi_dsub>
 80059a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80059ac:	4656      	mov	r6, sl
 80059ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059b2:	f7fb f8d1 	bl	8000b58 <__aeabi_d2iz>
 80059b6:	4605      	mov	r5, r0
 80059b8:	f7fa fdb4 	bl	8000524 <__aeabi_i2d>
 80059bc:	4602      	mov	r2, r0
 80059be:	460b      	mov	r3, r1
 80059c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059c4:	f7fa fc60 	bl	8000288 <__aeabi_dsub>
 80059c8:	3530      	adds	r5, #48	@ 0x30
 80059ca:	4602      	mov	r2, r0
 80059cc:	460b      	mov	r3, r1
 80059ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80059d2:	f806 5b01 	strb.w	r5, [r6], #1
 80059d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80059da:	f7fb f87f 	bl	8000adc <__aeabi_dcmplt>
 80059de:	2800      	cmp	r0, #0
 80059e0:	d171      	bne.n	8005ac6 <_dtoa_r+0x65e>
 80059e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80059e6:	4911      	ldr	r1, [pc, #68]	@ (8005a2c <_dtoa_r+0x5c4>)
 80059e8:	2000      	movs	r0, #0
 80059ea:	f7fa fc4d 	bl	8000288 <__aeabi_dsub>
 80059ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80059f2:	f7fb f873 	bl	8000adc <__aeabi_dcmplt>
 80059f6:	2800      	cmp	r0, #0
 80059f8:	f040 8095 	bne.w	8005b26 <_dtoa_r+0x6be>
 80059fc:	42a6      	cmp	r6, r4
 80059fe:	f43f af50 	beq.w	80058a2 <_dtoa_r+0x43a>
 8005a02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005a06:	4b0a      	ldr	r3, [pc, #40]	@ (8005a30 <_dtoa_r+0x5c8>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f7fa fdf5 	bl	80005f8 <__aeabi_dmul>
 8005a0e:	4b08      	ldr	r3, [pc, #32]	@ (8005a30 <_dtoa_r+0x5c8>)
 8005a10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005a14:	2200      	movs	r2, #0
 8005a16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a1a:	f7fa fded 	bl	80005f8 <__aeabi_dmul>
 8005a1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a22:	e7c4      	b.n	80059ae <_dtoa_r+0x546>
 8005a24:	08008c00 	.word	0x08008c00
 8005a28:	08008bd8 	.word	0x08008bd8
 8005a2c:	3ff00000 	.word	0x3ff00000
 8005a30:	40240000 	.word	0x40240000
 8005a34:	401c0000 	.word	0x401c0000
 8005a38:	40140000 	.word	0x40140000
 8005a3c:	3fe00000 	.word	0x3fe00000
 8005a40:	4631      	mov	r1, r6
 8005a42:	4628      	mov	r0, r5
 8005a44:	f7fa fdd8 	bl	80005f8 <__aeabi_dmul>
 8005a48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005a4c:	9415      	str	r4, [sp, #84]	@ 0x54
 8005a4e:	4656      	mov	r6, sl
 8005a50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a54:	f7fb f880 	bl	8000b58 <__aeabi_d2iz>
 8005a58:	4605      	mov	r5, r0
 8005a5a:	f7fa fd63 	bl	8000524 <__aeabi_i2d>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	460b      	mov	r3, r1
 8005a62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a66:	f7fa fc0f 	bl	8000288 <__aeabi_dsub>
 8005a6a:	3530      	adds	r5, #48	@ 0x30
 8005a6c:	f806 5b01 	strb.w	r5, [r6], #1
 8005a70:	4602      	mov	r2, r0
 8005a72:	460b      	mov	r3, r1
 8005a74:	42a6      	cmp	r6, r4
 8005a76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005a7a:	f04f 0200 	mov.w	r2, #0
 8005a7e:	d124      	bne.n	8005aca <_dtoa_r+0x662>
 8005a80:	4bac      	ldr	r3, [pc, #688]	@ (8005d34 <_dtoa_r+0x8cc>)
 8005a82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005a86:	f7fa fc01 	bl	800028c <__adddf3>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a92:	f7fb f841 	bl	8000b18 <__aeabi_dcmpgt>
 8005a96:	2800      	cmp	r0, #0
 8005a98:	d145      	bne.n	8005b26 <_dtoa_r+0x6be>
 8005a9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005a9e:	49a5      	ldr	r1, [pc, #660]	@ (8005d34 <_dtoa_r+0x8cc>)
 8005aa0:	2000      	movs	r0, #0
 8005aa2:	f7fa fbf1 	bl	8000288 <__aeabi_dsub>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005aae:	f7fb f815 	bl	8000adc <__aeabi_dcmplt>
 8005ab2:	2800      	cmp	r0, #0
 8005ab4:	f43f aef5 	beq.w	80058a2 <_dtoa_r+0x43a>
 8005ab8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005aba:	1e73      	subs	r3, r6, #1
 8005abc:	9315      	str	r3, [sp, #84]	@ 0x54
 8005abe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005ac2:	2b30      	cmp	r3, #48	@ 0x30
 8005ac4:	d0f8      	beq.n	8005ab8 <_dtoa_r+0x650>
 8005ac6:	9f04      	ldr	r7, [sp, #16]
 8005ac8:	e73e      	b.n	8005948 <_dtoa_r+0x4e0>
 8005aca:	4b9b      	ldr	r3, [pc, #620]	@ (8005d38 <_dtoa_r+0x8d0>)
 8005acc:	f7fa fd94 	bl	80005f8 <__aeabi_dmul>
 8005ad0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ad4:	e7bc      	b.n	8005a50 <_dtoa_r+0x5e8>
 8005ad6:	d10c      	bne.n	8005af2 <_dtoa_r+0x68a>
 8005ad8:	4b98      	ldr	r3, [pc, #608]	@ (8005d3c <_dtoa_r+0x8d4>)
 8005ada:	2200      	movs	r2, #0
 8005adc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ae0:	f7fa fd8a 	bl	80005f8 <__aeabi_dmul>
 8005ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ae8:	f7fb f80c 	bl	8000b04 <__aeabi_dcmpge>
 8005aec:	2800      	cmp	r0, #0
 8005aee:	f000 8157 	beq.w	8005da0 <_dtoa_r+0x938>
 8005af2:	2400      	movs	r4, #0
 8005af4:	4625      	mov	r5, r4
 8005af6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005af8:	43db      	mvns	r3, r3
 8005afa:	9304      	str	r3, [sp, #16]
 8005afc:	4656      	mov	r6, sl
 8005afe:	2700      	movs	r7, #0
 8005b00:	4621      	mov	r1, r4
 8005b02:	4658      	mov	r0, fp
 8005b04:	f000 fbb4 	bl	8006270 <_Bfree>
 8005b08:	2d00      	cmp	r5, #0
 8005b0a:	d0dc      	beq.n	8005ac6 <_dtoa_r+0x65e>
 8005b0c:	b12f      	cbz	r7, 8005b1a <_dtoa_r+0x6b2>
 8005b0e:	42af      	cmp	r7, r5
 8005b10:	d003      	beq.n	8005b1a <_dtoa_r+0x6b2>
 8005b12:	4639      	mov	r1, r7
 8005b14:	4658      	mov	r0, fp
 8005b16:	f000 fbab 	bl	8006270 <_Bfree>
 8005b1a:	4629      	mov	r1, r5
 8005b1c:	4658      	mov	r0, fp
 8005b1e:	f000 fba7 	bl	8006270 <_Bfree>
 8005b22:	e7d0      	b.n	8005ac6 <_dtoa_r+0x65e>
 8005b24:	9704      	str	r7, [sp, #16]
 8005b26:	4633      	mov	r3, r6
 8005b28:	461e      	mov	r6, r3
 8005b2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b2e:	2a39      	cmp	r2, #57	@ 0x39
 8005b30:	d107      	bne.n	8005b42 <_dtoa_r+0x6da>
 8005b32:	459a      	cmp	sl, r3
 8005b34:	d1f8      	bne.n	8005b28 <_dtoa_r+0x6c0>
 8005b36:	9a04      	ldr	r2, [sp, #16]
 8005b38:	3201      	adds	r2, #1
 8005b3a:	9204      	str	r2, [sp, #16]
 8005b3c:	2230      	movs	r2, #48	@ 0x30
 8005b3e:	f88a 2000 	strb.w	r2, [sl]
 8005b42:	781a      	ldrb	r2, [r3, #0]
 8005b44:	3201      	adds	r2, #1
 8005b46:	701a      	strb	r2, [r3, #0]
 8005b48:	e7bd      	b.n	8005ac6 <_dtoa_r+0x65e>
 8005b4a:	4b7b      	ldr	r3, [pc, #492]	@ (8005d38 <_dtoa_r+0x8d0>)
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f7fa fd53 	bl	80005f8 <__aeabi_dmul>
 8005b52:	2200      	movs	r2, #0
 8005b54:	2300      	movs	r3, #0
 8005b56:	4604      	mov	r4, r0
 8005b58:	460d      	mov	r5, r1
 8005b5a:	f7fa ffb5 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b5e:	2800      	cmp	r0, #0
 8005b60:	f43f aebb 	beq.w	80058da <_dtoa_r+0x472>
 8005b64:	e6f0      	b.n	8005948 <_dtoa_r+0x4e0>
 8005b66:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005b68:	2a00      	cmp	r2, #0
 8005b6a:	f000 80db 	beq.w	8005d24 <_dtoa_r+0x8bc>
 8005b6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b70:	2a01      	cmp	r2, #1
 8005b72:	f300 80bf 	bgt.w	8005cf4 <_dtoa_r+0x88c>
 8005b76:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005b78:	2a00      	cmp	r2, #0
 8005b7a:	f000 80b7 	beq.w	8005cec <_dtoa_r+0x884>
 8005b7e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005b82:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005b84:	4646      	mov	r6, r8
 8005b86:	9a08      	ldr	r2, [sp, #32]
 8005b88:	2101      	movs	r1, #1
 8005b8a:	441a      	add	r2, r3
 8005b8c:	4658      	mov	r0, fp
 8005b8e:	4498      	add	r8, r3
 8005b90:	9208      	str	r2, [sp, #32]
 8005b92:	f000 fc6b 	bl	800646c <__i2b>
 8005b96:	4605      	mov	r5, r0
 8005b98:	b15e      	cbz	r6, 8005bb2 <_dtoa_r+0x74a>
 8005b9a:	9b08      	ldr	r3, [sp, #32]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	dd08      	ble.n	8005bb2 <_dtoa_r+0x74a>
 8005ba0:	42b3      	cmp	r3, r6
 8005ba2:	9a08      	ldr	r2, [sp, #32]
 8005ba4:	bfa8      	it	ge
 8005ba6:	4633      	movge	r3, r6
 8005ba8:	eba8 0803 	sub.w	r8, r8, r3
 8005bac:	1af6      	subs	r6, r6, r3
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	9308      	str	r3, [sp, #32]
 8005bb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005bb4:	b1f3      	cbz	r3, 8005bf4 <_dtoa_r+0x78c>
 8005bb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f000 80b7 	beq.w	8005d2c <_dtoa_r+0x8c4>
 8005bbe:	b18c      	cbz	r4, 8005be4 <_dtoa_r+0x77c>
 8005bc0:	4629      	mov	r1, r5
 8005bc2:	4622      	mov	r2, r4
 8005bc4:	4658      	mov	r0, fp
 8005bc6:	f000 fd11 	bl	80065ec <__pow5mult>
 8005bca:	464a      	mov	r2, r9
 8005bcc:	4601      	mov	r1, r0
 8005bce:	4605      	mov	r5, r0
 8005bd0:	4658      	mov	r0, fp
 8005bd2:	f000 fc61 	bl	8006498 <__multiply>
 8005bd6:	4649      	mov	r1, r9
 8005bd8:	9004      	str	r0, [sp, #16]
 8005bda:	4658      	mov	r0, fp
 8005bdc:	f000 fb48 	bl	8006270 <_Bfree>
 8005be0:	9b04      	ldr	r3, [sp, #16]
 8005be2:	4699      	mov	r9, r3
 8005be4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005be6:	1b1a      	subs	r2, r3, r4
 8005be8:	d004      	beq.n	8005bf4 <_dtoa_r+0x78c>
 8005bea:	4649      	mov	r1, r9
 8005bec:	4658      	mov	r0, fp
 8005bee:	f000 fcfd 	bl	80065ec <__pow5mult>
 8005bf2:	4681      	mov	r9, r0
 8005bf4:	2101      	movs	r1, #1
 8005bf6:	4658      	mov	r0, fp
 8005bf8:	f000 fc38 	bl	800646c <__i2b>
 8005bfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005bfe:	4604      	mov	r4, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f000 81cf 	beq.w	8005fa4 <_dtoa_r+0xb3c>
 8005c06:	461a      	mov	r2, r3
 8005c08:	4601      	mov	r1, r0
 8005c0a:	4658      	mov	r0, fp
 8005c0c:	f000 fcee 	bl	80065ec <__pow5mult>
 8005c10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	4604      	mov	r4, r0
 8005c16:	f300 8095 	bgt.w	8005d44 <_dtoa_r+0x8dc>
 8005c1a:	9b02      	ldr	r3, [sp, #8]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	f040 8087 	bne.w	8005d30 <_dtoa_r+0x8c8>
 8005c22:	9b03      	ldr	r3, [sp, #12]
 8005c24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f040 8089 	bne.w	8005d40 <_dtoa_r+0x8d8>
 8005c2e:	9b03      	ldr	r3, [sp, #12]
 8005c30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005c34:	0d1b      	lsrs	r3, r3, #20
 8005c36:	051b      	lsls	r3, r3, #20
 8005c38:	b12b      	cbz	r3, 8005c46 <_dtoa_r+0x7de>
 8005c3a:	9b08      	ldr	r3, [sp, #32]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	9308      	str	r3, [sp, #32]
 8005c40:	f108 0801 	add.w	r8, r8, #1
 8005c44:	2301      	movs	r3, #1
 8005c46:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	f000 81b0 	beq.w	8005fb0 <_dtoa_r+0xb48>
 8005c50:	6923      	ldr	r3, [r4, #16]
 8005c52:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005c56:	6918      	ldr	r0, [r3, #16]
 8005c58:	f000 fbbc 	bl	80063d4 <__hi0bits>
 8005c5c:	f1c0 0020 	rsb	r0, r0, #32
 8005c60:	9b08      	ldr	r3, [sp, #32]
 8005c62:	4418      	add	r0, r3
 8005c64:	f010 001f 	ands.w	r0, r0, #31
 8005c68:	d077      	beq.n	8005d5a <_dtoa_r+0x8f2>
 8005c6a:	f1c0 0320 	rsb	r3, r0, #32
 8005c6e:	2b04      	cmp	r3, #4
 8005c70:	dd6b      	ble.n	8005d4a <_dtoa_r+0x8e2>
 8005c72:	9b08      	ldr	r3, [sp, #32]
 8005c74:	f1c0 001c 	rsb	r0, r0, #28
 8005c78:	4403      	add	r3, r0
 8005c7a:	4480      	add	r8, r0
 8005c7c:	4406      	add	r6, r0
 8005c7e:	9308      	str	r3, [sp, #32]
 8005c80:	f1b8 0f00 	cmp.w	r8, #0
 8005c84:	dd05      	ble.n	8005c92 <_dtoa_r+0x82a>
 8005c86:	4649      	mov	r1, r9
 8005c88:	4642      	mov	r2, r8
 8005c8a:	4658      	mov	r0, fp
 8005c8c:	f000 fd08 	bl	80066a0 <__lshift>
 8005c90:	4681      	mov	r9, r0
 8005c92:	9b08      	ldr	r3, [sp, #32]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	dd05      	ble.n	8005ca4 <_dtoa_r+0x83c>
 8005c98:	4621      	mov	r1, r4
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	4658      	mov	r0, fp
 8005c9e:	f000 fcff 	bl	80066a0 <__lshift>
 8005ca2:	4604      	mov	r4, r0
 8005ca4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d059      	beq.n	8005d5e <_dtoa_r+0x8f6>
 8005caa:	4621      	mov	r1, r4
 8005cac:	4648      	mov	r0, r9
 8005cae:	f000 fd63 	bl	8006778 <__mcmp>
 8005cb2:	2800      	cmp	r0, #0
 8005cb4:	da53      	bge.n	8005d5e <_dtoa_r+0x8f6>
 8005cb6:	1e7b      	subs	r3, r7, #1
 8005cb8:	9304      	str	r3, [sp, #16]
 8005cba:	4649      	mov	r1, r9
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	220a      	movs	r2, #10
 8005cc0:	4658      	mov	r0, fp
 8005cc2:	f000 faf7 	bl	80062b4 <__multadd>
 8005cc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005cc8:	4681      	mov	r9, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f000 8172 	beq.w	8005fb4 <_dtoa_r+0xb4c>
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	4629      	mov	r1, r5
 8005cd4:	220a      	movs	r2, #10
 8005cd6:	4658      	mov	r0, fp
 8005cd8:	f000 faec 	bl	80062b4 <__multadd>
 8005cdc:	9b00      	ldr	r3, [sp, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	4605      	mov	r5, r0
 8005ce2:	dc67      	bgt.n	8005db4 <_dtoa_r+0x94c>
 8005ce4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	dc41      	bgt.n	8005d6e <_dtoa_r+0x906>
 8005cea:	e063      	b.n	8005db4 <_dtoa_r+0x94c>
 8005cec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005cee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005cf2:	e746      	b.n	8005b82 <_dtoa_r+0x71a>
 8005cf4:	9b07      	ldr	r3, [sp, #28]
 8005cf6:	1e5c      	subs	r4, r3, #1
 8005cf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005cfa:	42a3      	cmp	r3, r4
 8005cfc:	bfbf      	itttt	lt
 8005cfe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005d00:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005d02:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005d04:	1ae3      	sublt	r3, r4, r3
 8005d06:	bfb4      	ite	lt
 8005d08:	18d2      	addlt	r2, r2, r3
 8005d0a:	1b1c      	subge	r4, r3, r4
 8005d0c:	9b07      	ldr	r3, [sp, #28]
 8005d0e:	bfbc      	itt	lt
 8005d10:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005d12:	2400      	movlt	r4, #0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	bfb5      	itete	lt
 8005d18:	eba8 0603 	sublt.w	r6, r8, r3
 8005d1c:	9b07      	ldrge	r3, [sp, #28]
 8005d1e:	2300      	movlt	r3, #0
 8005d20:	4646      	movge	r6, r8
 8005d22:	e730      	b.n	8005b86 <_dtoa_r+0x71e>
 8005d24:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005d26:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005d28:	4646      	mov	r6, r8
 8005d2a:	e735      	b.n	8005b98 <_dtoa_r+0x730>
 8005d2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005d2e:	e75c      	b.n	8005bea <_dtoa_r+0x782>
 8005d30:	2300      	movs	r3, #0
 8005d32:	e788      	b.n	8005c46 <_dtoa_r+0x7de>
 8005d34:	3fe00000 	.word	0x3fe00000
 8005d38:	40240000 	.word	0x40240000
 8005d3c:	40140000 	.word	0x40140000
 8005d40:	9b02      	ldr	r3, [sp, #8]
 8005d42:	e780      	b.n	8005c46 <_dtoa_r+0x7de>
 8005d44:	2300      	movs	r3, #0
 8005d46:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d48:	e782      	b.n	8005c50 <_dtoa_r+0x7e8>
 8005d4a:	d099      	beq.n	8005c80 <_dtoa_r+0x818>
 8005d4c:	9a08      	ldr	r2, [sp, #32]
 8005d4e:	331c      	adds	r3, #28
 8005d50:	441a      	add	r2, r3
 8005d52:	4498      	add	r8, r3
 8005d54:	441e      	add	r6, r3
 8005d56:	9208      	str	r2, [sp, #32]
 8005d58:	e792      	b.n	8005c80 <_dtoa_r+0x818>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	e7f6      	b.n	8005d4c <_dtoa_r+0x8e4>
 8005d5e:	9b07      	ldr	r3, [sp, #28]
 8005d60:	9704      	str	r7, [sp, #16]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	dc20      	bgt.n	8005da8 <_dtoa_r+0x940>
 8005d66:	9300      	str	r3, [sp, #0]
 8005d68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	dd1e      	ble.n	8005dac <_dtoa_r+0x944>
 8005d6e:	9b00      	ldr	r3, [sp, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f47f aec0 	bne.w	8005af6 <_dtoa_r+0x68e>
 8005d76:	4621      	mov	r1, r4
 8005d78:	2205      	movs	r2, #5
 8005d7a:	4658      	mov	r0, fp
 8005d7c:	f000 fa9a 	bl	80062b4 <__multadd>
 8005d80:	4601      	mov	r1, r0
 8005d82:	4604      	mov	r4, r0
 8005d84:	4648      	mov	r0, r9
 8005d86:	f000 fcf7 	bl	8006778 <__mcmp>
 8005d8a:	2800      	cmp	r0, #0
 8005d8c:	f77f aeb3 	ble.w	8005af6 <_dtoa_r+0x68e>
 8005d90:	4656      	mov	r6, sl
 8005d92:	2331      	movs	r3, #49	@ 0x31
 8005d94:	f806 3b01 	strb.w	r3, [r6], #1
 8005d98:	9b04      	ldr	r3, [sp, #16]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	9304      	str	r3, [sp, #16]
 8005d9e:	e6ae      	b.n	8005afe <_dtoa_r+0x696>
 8005da0:	9c07      	ldr	r4, [sp, #28]
 8005da2:	9704      	str	r7, [sp, #16]
 8005da4:	4625      	mov	r5, r4
 8005da6:	e7f3      	b.n	8005d90 <_dtoa_r+0x928>
 8005da8:	9b07      	ldr	r3, [sp, #28]
 8005daa:	9300      	str	r3, [sp, #0]
 8005dac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	f000 8104 	beq.w	8005fbc <_dtoa_r+0xb54>
 8005db4:	2e00      	cmp	r6, #0
 8005db6:	dd05      	ble.n	8005dc4 <_dtoa_r+0x95c>
 8005db8:	4629      	mov	r1, r5
 8005dba:	4632      	mov	r2, r6
 8005dbc:	4658      	mov	r0, fp
 8005dbe:	f000 fc6f 	bl	80066a0 <__lshift>
 8005dc2:	4605      	mov	r5, r0
 8005dc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d05a      	beq.n	8005e80 <_dtoa_r+0xa18>
 8005dca:	6869      	ldr	r1, [r5, #4]
 8005dcc:	4658      	mov	r0, fp
 8005dce:	f000 fa0f 	bl	80061f0 <_Balloc>
 8005dd2:	4606      	mov	r6, r0
 8005dd4:	b928      	cbnz	r0, 8005de2 <_dtoa_r+0x97a>
 8005dd6:	4b84      	ldr	r3, [pc, #528]	@ (8005fe8 <_dtoa_r+0xb80>)
 8005dd8:	4602      	mov	r2, r0
 8005dda:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005dde:	f7ff bb5a 	b.w	8005496 <_dtoa_r+0x2e>
 8005de2:	692a      	ldr	r2, [r5, #16]
 8005de4:	3202      	adds	r2, #2
 8005de6:	0092      	lsls	r2, r2, #2
 8005de8:	f105 010c 	add.w	r1, r5, #12
 8005dec:	300c      	adds	r0, #12
 8005dee:	f001 ff87 	bl	8007d00 <memcpy>
 8005df2:	2201      	movs	r2, #1
 8005df4:	4631      	mov	r1, r6
 8005df6:	4658      	mov	r0, fp
 8005df8:	f000 fc52 	bl	80066a0 <__lshift>
 8005dfc:	f10a 0301 	add.w	r3, sl, #1
 8005e00:	9307      	str	r3, [sp, #28]
 8005e02:	9b00      	ldr	r3, [sp, #0]
 8005e04:	4453      	add	r3, sl
 8005e06:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e08:	9b02      	ldr	r3, [sp, #8]
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	462f      	mov	r7, r5
 8005e10:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e12:	4605      	mov	r5, r0
 8005e14:	9b07      	ldr	r3, [sp, #28]
 8005e16:	4621      	mov	r1, r4
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	4648      	mov	r0, r9
 8005e1c:	9300      	str	r3, [sp, #0]
 8005e1e:	f7ff fa99 	bl	8005354 <quorem>
 8005e22:	4639      	mov	r1, r7
 8005e24:	9002      	str	r0, [sp, #8]
 8005e26:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005e2a:	4648      	mov	r0, r9
 8005e2c:	f000 fca4 	bl	8006778 <__mcmp>
 8005e30:	462a      	mov	r2, r5
 8005e32:	9008      	str	r0, [sp, #32]
 8005e34:	4621      	mov	r1, r4
 8005e36:	4658      	mov	r0, fp
 8005e38:	f000 fcba 	bl	80067b0 <__mdiff>
 8005e3c:	68c2      	ldr	r2, [r0, #12]
 8005e3e:	4606      	mov	r6, r0
 8005e40:	bb02      	cbnz	r2, 8005e84 <_dtoa_r+0xa1c>
 8005e42:	4601      	mov	r1, r0
 8005e44:	4648      	mov	r0, r9
 8005e46:	f000 fc97 	bl	8006778 <__mcmp>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	4631      	mov	r1, r6
 8005e4e:	4658      	mov	r0, fp
 8005e50:	920e      	str	r2, [sp, #56]	@ 0x38
 8005e52:	f000 fa0d 	bl	8006270 <_Bfree>
 8005e56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e58:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005e5a:	9e07      	ldr	r6, [sp, #28]
 8005e5c:	ea43 0102 	orr.w	r1, r3, r2
 8005e60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e62:	4319      	orrs	r1, r3
 8005e64:	d110      	bne.n	8005e88 <_dtoa_r+0xa20>
 8005e66:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005e6a:	d029      	beq.n	8005ec0 <_dtoa_r+0xa58>
 8005e6c:	9b08      	ldr	r3, [sp, #32]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	dd02      	ble.n	8005e78 <_dtoa_r+0xa10>
 8005e72:	9b02      	ldr	r3, [sp, #8]
 8005e74:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005e78:	9b00      	ldr	r3, [sp, #0]
 8005e7a:	f883 8000 	strb.w	r8, [r3]
 8005e7e:	e63f      	b.n	8005b00 <_dtoa_r+0x698>
 8005e80:	4628      	mov	r0, r5
 8005e82:	e7bb      	b.n	8005dfc <_dtoa_r+0x994>
 8005e84:	2201      	movs	r2, #1
 8005e86:	e7e1      	b.n	8005e4c <_dtoa_r+0x9e4>
 8005e88:	9b08      	ldr	r3, [sp, #32]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	db04      	blt.n	8005e98 <_dtoa_r+0xa30>
 8005e8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005e90:	430b      	orrs	r3, r1
 8005e92:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005e94:	430b      	orrs	r3, r1
 8005e96:	d120      	bne.n	8005eda <_dtoa_r+0xa72>
 8005e98:	2a00      	cmp	r2, #0
 8005e9a:	dded      	ble.n	8005e78 <_dtoa_r+0xa10>
 8005e9c:	4649      	mov	r1, r9
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	4658      	mov	r0, fp
 8005ea2:	f000 fbfd 	bl	80066a0 <__lshift>
 8005ea6:	4621      	mov	r1, r4
 8005ea8:	4681      	mov	r9, r0
 8005eaa:	f000 fc65 	bl	8006778 <__mcmp>
 8005eae:	2800      	cmp	r0, #0
 8005eb0:	dc03      	bgt.n	8005eba <_dtoa_r+0xa52>
 8005eb2:	d1e1      	bne.n	8005e78 <_dtoa_r+0xa10>
 8005eb4:	f018 0f01 	tst.w	r8, #1
 8005eb8:	d0de      	beq.n	8005e78 <_dtoa_r+0xa10>
 8005eba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005ebe:	d1d8      	bne.n	8005e72 <_dtoa_r+0xa0a>
 8005ec0:	9a00      	ldr	r2, [sp, #0]
 8005ec2:	2339      	movs	r3, #57	@ 0x39
 8005ec4:	7013      	strb	r3, [r2, #0]
 8005ec6:	4633      	mov	r3, r6
 8005ec8:	461e      	mov	r6, r3
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005ed0:	2a39      	cmp	r2, #57	@ 0x39
 8005ed2:	d052      	beq.n	8005f7a <_dtoa_r+0xb12>
 8005ed4:	3201      	adds	r2, #1
 8005ed6:	701a      	strb	r2, [r3, #0]
 8005ed8:	e612      	b.n	8005b00 <_dtoa_r+0x698>
 8005eda:	2a00      	cmp	r2, #0
 8005edc:	dd07      	ble.n	8005eee <_dtoa_r+0xa86>
 8005ede:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005ee2:	d0ed      	beq.n	8005ec0 <_dtoa_r+0xa58>
 8005ee4:	9a00      	ldr	r2, [sp, #0]
 8005ee6:	f108 0301 	add.w	r3, r8, #1
 8005eea:	7013      	strb	r3, [r2, #0]
 8005eec:	e608      	b.n	8005b00 <_dtoa_r+0x698>
 8005eee:	9b07      	ldr	r3, [sp, #28]
 8005ef0:	9a07      	ldr	r2, [sp, #28]
 8005ef2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005ef6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d028      	beq.n	8005f4e <_dtoa_r+0xae6>
 8005efc:	4649      	mov	r1, r9
 8005efe:	2300      	movs	r3, #0
 8005f00:	220a      	movs	r2, #10
 8005f02:	4658      	mov	r0, fp
 8005f04:	f000 f9d6 	bl	80062b4 <__multadd>
 8005f08:	42af      	cmp	r7, r5
 8005f0a:	4681      	mov	r9, r0
 8005f0c:	f04f 0300 	mov.w	r3, #0
 8005f10:	f04f 020a 	mov.w	r2, #10
 8005f14:	4639      	mov	r1, r7
 8005f16:	4658      	mov	r0, fp
 8005f18:	d107      	bne.n	8005f2a <_dtoa_r+0xac2>
 8005f1a:	f000 f9cb 	bl	80062b4 <__multadd>
 8005f1e:	4607      	mov	r7, r0
 8005f20:	4605      	mov	r5, r0
 8005f22:	9b07      	ldr	r3, [sp, #28]
 8005f24:	3301      	adds	r3, #1
 8005f26:	9307      	str	r3, [sp, #28]
 8005f28:	e774      	b.n	8005e14 <_dtoa_r+0x9ac>
 8005f2a:	f000 f9c3 	bl	80062b4 <__multadd>
 8005f2e:	4629      	mov	r1, r5
 8005f30:	4607      	mov	r7, r0
 8005f32:	2300      	movs	r3, #0
 8005f34:	220a      	movs	r2, #10
 8005f36:	4658      	mov	r0, fp
 8005f38:	f000 f9bc 	bl	80062b4 <__multadd>
 8005f3c:	4605      	mov	r5, r0
 8005f3e:	e7f0      	b.n	8005f22 <_dtoa_r+0xaba>
 8005f40:	9b00      	ldr	r3, [sp, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	bfcc      	ite	gt
 8005f46:	461e      	movgt	r6, r3
 8005f48:	2601      	movle	r6, #1
 8005f4a:	4456      	add	r6, sl
 8005f4c:	2700      	movs	r7, #0
 8005f4e:	4649      	mov	r1, r9
 8005f50:	2201      	movs	r2, #1
 8005f52:	4658      	mov	r0, fp
 8005f54:	f000 fba4 	bl	80066a0 <__lshift>
 8005f58:	4621      	mov	r1, r4
 8005f5a:	4681      	mov	r9, r0
 8005f5c:	f000 fc0c 	bl	8006778 <__mcmp>
 8005f60:	2800      	cmp	r0, #0
 8005f62:	dcb0      	bgt.n	8005ec6 <_dtoa_r+0xa5e>
 8005f64:	d102      	bne.n	8005f6c <_dtoa_r+0xb04>
 8005f66:	f018 0f01 	tst.w	r8, #1
 8005f6a:	d1ac      	bne.n	8005ec6 <_dtoa_r+0xa5e>
 8005f6c:	4633      	mov	r3, r6
 8005f6e:	461e      	mov	r6, r3
 8005f70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f74:	2a30      	cmp	r2, #48	@ 0x30
 8005f76:	d0fa      	beq.n	8005f6e <_dtoa_r+0xb06>
 8005f78:	e5c2      	b.n	8005b00 <_dtoa_r+0x698>
 8005f7a:	459a      	cmp	sl, r3
 8005f7c:	d1a4      	bne.n	8005ec8 <_dtoa_r+0xa60>
 8005f7e:	9b04      	ldr	r3, [sp, #16]
 8005f80:	3301      	adds	r3, #1
 8005f82:	9304      	str	r3, [sp, #16]
 8005f84:	2331      	movs	r3, #49	@ 0x31
 8005f86:	f88a 3000 	strb.w	r3, [sl]
 8005f8a:	e5b9      	b.n	8005b00 <_dtoa_r+0x698>
 8005f8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005f8e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005fec <_dtoa_r+0xb84>
 8005f92:	b11b      	cbz	r3, 8005f9c <_dtoa_r+0xb34>
 8005f94:	f10a 0308 	add.w	r3, sl, #8
 8005f98:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005f9a:	6013      	str	r3, [r2, #0]
 8005f9c:	4650      	mov	r0, sl
 8005f9e:	b019      	add	sp, #100	@ 0x64
 8005fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	f77f ae37 	ble.w	8005c1a <_dtoa_r+0x7b2>
 8005fac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005fae:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fb0:	2001      	movs	r0, #1
 8005fb2:	e655      	b.n	8005c60 <_dtoa_r+0x7f8>
 8005fb4:	9b00      	ldr	r3, [sp, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	f77f aed6 	ble.w	8005d68 <_dtoa_r+0x900>
 8005fbc:	4656      	mov	r6, sl
 8005fbe:	4621      	mov	r1, r4
 8005fc0:	4648      	mov	r0, r9
 8005fc2:	f7ff f9c7 	bl	8005354 <quorem>
 8005fc6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005fca:	f806 8b01 	strb.w	r8, [r6], #1
 8005fce:	9b00      	ldr	r3, [sp, #0]
 8005fd0:	eba6 020a 	sub.w	r2, r6, sl
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	ddb3      	ble.n	8005f40 <_dtoa_r+0xad8>
 8005fd8:	4649      	mov	r1, r9
 8005fda:	2300      	movs	r3, #0
 8005fdc:	220a      	movs	r2, #10
 8005fde:	4658      	mov	r0, fp
 8005fe0:	f000 f968 	bl	80062b4 <__multadd>
 8005fe4:	4681      	mov	r9, r0
 8005fe6:	e7ea      	b.n	8005fbe <_dtoa_r+0xb56>
 8005fe8:	08008b61 	.word	0x08008b61
 8005fec:	08008afc 	.word	0x08008afc

08005ff0 <_free_r>:
 8005ff0:	b538      	push	{r3, r4, r5, lr}
 8005ff2:	4605      	mov	r5, r0
 8005ff4:	2900      	cmp	r1, #0
 8005ff6:	d041      	beq.n	800607c <_free_r+0x8c>
 8005ff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ffc:	1f0c      	subs	r4, r1, #4
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	bfb8      	it	lt
 8006002:	18e4      	addlt	r4, r4, r3
 8006004:	f000 f8e8 	bl	80061d8 <__malloc_lock>
 8006008:	4a1d      	ldr	r2, [pc, #116]	@ (8006080 <_free_r+0x90>)
 800600a:	6813      	ldr	r3, [r2, #0]
 800600c:	b933      	cbnz	r3, 800601c <_free_r+0x2c>
 800600e:	6063      	str	r3, [r4, #4]
 8006010:	6014      	str	r4, [r2, #0]
 8006012:	4628      	mov	r0, r5
 8006014:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006018:	f000 b8e4 	b.w	80061e4 <__malloc_unlock>
 800601c:	42a3      	cmp	r3, r4
 800601e:	d908      	bls.n	8006032 <_free_r+0x42>
 8006020:	6820      	ldr	r0, [r4, #0]
 8006022:	1821      	adds	r1, r4, r0
 8006024:	428b      	cmp	r3, r1
 8006026:	bf01      	itttt	eq
 8006028:	6819      	ldreq	r1, [r3, #0]
 800602a:	685b      	ldreq	r3, [r3, #4]
 800602c:	1809      	addeq	r1, r1, r0
 800602e:	6021      	streq	r1, [r4, #0]
 8006030:	e7ed      	b.n	800600e <_free_r+0x1e>
 8006032:	461a      	mov	r2, r3
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	b10b      	cbz	r3, 800603c <_free_r+0x4c>
 8006038:	42a3      	cmp	r3, r4
 800603a:	d9fa      	bls.n	8006032 <_free_r+0x42>
 800603c:	6811      	ldr	r1, [r2, #0]
 800603e:	1850      	adds	r0, r2, r1
 8006040:	42a0      	cmp	r0, r4
 8006042:	d10b      	bne.n	800605c <_free_r+0x6c>
 8006044:	6820      	ldr	r0, [r4, #0]
 8006046:	4401      	add	r1, r0
 8006048:	1850      	adds	r0, r2, r1
 800604a:	4283      	cmp	r3, r0
 800604c:	6011      	str	r1, [r2, #0]
 800604e:	d1e0      	bne.n	8006012 <_free_r+0x22>
 8006050:	6818      	ldr	r0, [r3, #0]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	6053      	str	r3, [r2, #4]
 8006056:	4408      	add	r0, r1
 8006058:	6010      	str	r0, [r2, #0]
 800605a:	e7da      	b.n	8006012 <_free_r+0x22>
 800605c:	d902      	bls.n	8006064 <_free_r+0x74>
 800605e:	230c      	movs	r3, #12
 8006060:	602b      	str	r3, [r5, #0]
 8006062:	e7d6      	b.n	8006012 <_free_r+0x22>
 8006064:	6820      	ldr	r0, [r4, #0]
 8006066:	1821      	adds	r1, r4, r0
 8006068:	428b      	cmp	r3, r1
 800606a:	bf04      	itt	eq
 800606c:	6819      	ldreq	r1, [r3, #0]
 800606e:	685b      	ldreq	r3, [r3, #4]
 8006070:	6063      	str	r3, [r4, #4]
 8006072:	bf04      	itt	eq
 8006074:	1809      	addeq	r1, r1, r0
 8006076:	6021      	streq	r1, [r4, #0]
 8006078:	6054      	str	r4, [r2, #4]
 800607a:	e7ca      	b.n	8006012 <_free_r+0x22>
 800607c:	bd38      	pop	{r3, r4, r5, pc}
 800607e:	bf00      	nop
 8006080:	20000470 	.word	0x20000470

08006084 <malloc>:
 8006084:	4b02      	ldr	r3, [pc, #8]	@ (8006090 <malloc+0xc>)
 8006086:	4601      	mov	r1, r0
 8006088:	6818      	ldr	r0, [r3, #0]
 800608a:	f000 b825 	b.w	80060d8 <_malloc_r>
 800608e:	bf00      	nop
 8006090:	20000018 	.word	0x20000018

08006094 <sbrk_aligned>:
 8006094:	b570      	push	{r4, r5, r6, lr}
 8006096:	4e0f      	ldr	r6, [pc, #60]	@ (80060d4 <sbrk_aligned+0x40>)
 8006098:	460c      	mov	r4, r1
 800609a:	6831      	ldr	r1, [r6, #0]
 800609c:	4605      	mov	r5, r0
 800609e:	b911      	cbnz	r1, 80060a6 <sbrk_aligned+0x12>
 80060a0:	f001 fe1e 	bl	8007ce0 <_sbrk_r>
 80060a4:	6030      	str	r0, [r6, #0]
 80060a6:	4621      	mov	r1, r4
 80060a8:	4628      	mov	r0, r5
 80060aa:	f001 fe19 	bl	8007ce0 <_sbrk_r>
 80060ae:	1c43      	adds	r3, r0, #1
 80060b0:	d103      	bne.n	80060ba <sbrk_aligned+0x26>
 80060b2:	f04f 34ff 	mov.w	r4, #4294967295
 80060b6:	4620      	mov	r0, r4
 80060b8:	bd70      	pop	{r4, r5, r6, pc}
 80060ba:	1cc4      	adds	r4, r0, #3
 80060bc:	f024 0403 	bic.w	r4, r4, #3
 80060c0:	42a0      	cmp	r0, r4
 80060c2:	d0f8      	beq.n	80060b6 <sbrk_aligned+0x22>
 80060c4:	1a21      	subs	r1, r4, r0
 80060c6:	4628      	mov	r0, r5
 80060c8:	f001 fe0a 	bl	8007ce0 <_sbrk_r>
 80060cc:	3001      	adds	r0, #1
 80060ce:	d1f2      	bne.n	80060b6 <sbrk_aligned+0x22>
 80060d0:	e7ef      	b.n	80060b2 <sbrk_aligned+0x1e>
 80060d2:	bf00      	nop
 80060d4:	2000046c 	.word	0x2000046c

080060d8 <_malloc_r>:
 80060d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060dc:	1ccd      	adds	r5, r1, #3
 80060de:	f025 0503 	bic.w	r5, r5, #3
 80060e2:	3508      	adds	r5, #8
 80060e4:	2d0c      	cmp	r5, #12
 80060e6:	bf38      	it	cc
 80060e8:	250c      	movcc	r5, #12
 80060ea:	2d00      	cmp	r5, #0
 80060ec:	4606      	mov	r6, r0
 80060ee:	db01      	blt.n	80060f4 <_malloc_r+0x1c>
 80060f0:	42a9      	cmp	r1, r5
 80060f2:	d904      	bls.n	80060fe <_malloc_r+0x26>
 80060f4:	230c      	movs	r3, #12
 80060f6:	6033      	str	r3, [r6, #0]
 80060f8:	2000      	movs	r0, #0
 80060fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80061d4 <_malloc_r+0xfc>
 8006102:	f000 f869 	bl	80061d8 <__malloc_lock>
 8006106:	f8d8 3000 	ldr.w	r3, [r8]
 800610a:	461c      	mov	r4, r3
 800610c:	bb44      	cbnz	r4, 8006160 <_malloc_r+0x88>
 800610e:	4629      	mov	r1, r5
 8006110:	4630      	mov	r0, r6
 8006112:	f7ff ffbf 	bl	8006094 <sbrk_aligned>
 8006116:	1c43      	adds	r3, r0, #1
 8006118:	4604      	mov	r4, r0
 800611a:	d158      	bne.n	80061ce <_malloc_r+0xf6>
 800611c:	f8d8 4000 	ldr.w	r4, [r8]
 8006120:	4627      	mov	r7, r4
 8006122:	2f00      	cmp	r7, #0
 8006124:	d143      	bne.n	80061ae <_malloc_r+0xd6>
 8006126:	2c00      	cmp	r4, #0
 8006128:	d04b      	beq.n	80061c2 <_malloc_r+0xea>
 800612a:	6823      	ldr	r3, [r4, #0]
 800612c:	4639      	mov	r1, r7
 800612e:	4630      	mov	r0, r6
 8006130:	eb04 0903 	add.w	r9, r4, r3
 8006134:	f001 fdd4 	bl	8007ce0 <_sbrk_r>
 8006138:	4581      	cmp	r9, r0
 800613a:	d142      	bne.n	80061c2 <_malloc_r+0xea>
 800613c:	6821      	ldr	r1, [r4, #0]
 800613e:	1a6d      	subs	r5, r5, r1
 8006140:	4629      	mov	r1, r5
 8006142:	4630      	mov	r0, r6
 8006144:	f7ff ffa6 	bl	8006094 <sbrk_aligned>
 8006148:	3001      	adds	r0, #1
 800614a:	d03a      	beq.n	80061c2 <_malloc_r+0xea>
 800614c:	6823      	ldr	r3, [r4, #0]
 800614e:	442b      	add	r3, r5
 8006150:	6023      	str	r3, [r4, #0]
 8006152:	f8d8 3000 	ldr.w	r3, [r8]
 8006156:	685a      	ldr	r2, [r3, #4]
 8006158:	bb62      	cbnz	r2, 80061b4 <_malloc_r+0xdc>
 800615a:	f8c8 7000 	str.w	r7, [r8]
 800615e:	e00f      	b.n	8006180 <_malloc_r+0xa8>
 8006160:	6822      	ldr	r2, [r4, #0]
 8006162:	1b52      	subs	r2, r2, r5
 8006164:	d420      	bmi.n	80061a8 <_malloc_r+0xd0>
 8006166:	2a0b      	cmp	r2, #11
 8006168:	d917      	bls.n	800619a <_malloc_r+0xc2>
 800616a:	1961      	adds	r1, r4, r5
 800616c:	42a3      	cmp	r3, r4
 800616e:	6025      	str	r5, [r4, #0]
 8006170:	bf18      	it	ne
 8006172:	6059      	strne	r1, [r3, #4]
 8006174:	6863      	ldr	r3, [r4, #4]
 8006176:	bf08      	it	eq
 8006178:	f8c8 1000 	streq.w	r1, [r8]
 800617c:	5162      	str	r2, [r4, r5]
 800617e:	604b      	str	r3, [r1, #4]
 8006180:	4630      	mov	r0, r6
 8006182:	f000 f82f 	bl	80061e4 <__malloc_unlock>
 8006186:	f104 000b 	add.w	r0, r4, #11
 800618a:	1d23      	adds	r3, r4, #4
 800618c:	f020 0007 	bic.w	r0, r0, #7
 8006190:	1ac2      	subs	r2, r0, r3
 8006192:	bf1c      	itt	ne
 8006194:	1a1b      	subne	r3, r3, r0
 8006196:	50a3      	strne	r3, [r4, r2]
 8006198:	e7af      	b.n	80060fa <_malloc_r+0x22>
 800619a:	6862      	ldr	r2, [r4, #4]
 800619c:	42a3      	cmp	r3, r4
 800619e:	bf0c      	ite	eq
 80061a0:	f8c8 2000 	streq.w	r2, [r8]
 80061a4:	605a      	strne	r2, [r3, #4]
 80061a6:	e7eb      	b.n	8006180 <_malloc_r+0xa8>
 80061a8:	4623      	mov	r3, r4
 80061aa:	6864      	ldr	r4, [r4, #4]
 80061ac:	e7ae      	b.n	800610c <_malloc_r+0x34>
 80061ae:	463c      	mov	r4, r7
 80061b0:	687f      	ldr	r7, [r7, #4]
 80061b2:	e7b6      	b.n	8006122 <_malloc_r+0x4a>
 80061b4:	461a      	mov	r2, r3
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	42a3      	cmp	r3, r4
 80061ba:	d1fb      	bne.n	80061b4 <_malloc_r+0xdc>
 80061bc:	2300      	movs	r3, #0
 80061be:	6053      	str	r3, [r2, #4]
 80061c0:	e7de      	b.n	8006180 <_malloc_r+0xa8>
 80061c2:	230c      	movs	r3, #12
 80061c4:	6033      	str	r3, [r6, #0]
 80061c6:	4630      	mov	r0, r6
 80061c8:	f000 f80c 	bl	80061e4 <__malloc_unlock>
 80061cc:	e794      	b.n	80060f8 <_malloc_r+0x20>
 80061ce:	6005      	str	r5, [r0, #0]
 80061d0:	e7d6      	b.n	8006180 <_malloc_r+0xa8>
 80061d2:	bf00      	nop
 80061d4:	20000470 	.word	0x20000470

080061d8 <__malloc_lock>:
 80061d8:	4801      	ldr	r0, [pc, #4]	@ (80061e0 <__malloc_lock+0x8>)
 80061da:	f7ff b894 	b.w	8005306 <__retarget_lock_acquire_recursive>
 80061de:	bf00      	nop
 80061e0:	20000468 	.word	0x20000468

080061e4 <__malloc_unlock>:
 80061e4:	4801      	ldr	r0, [pc, #4]	@ (80061ec <__malloc_unlock+0x8>)
 80061e6:	f7ff b88f 	b.w	8005308 <__retarget_lock_release_recursive>
 80061ea:	bf00      	nop
 80061ec:	20000468 	.word	0x20000468

080061f0 <_Balloc>:
 80061f0:	b570      	push	{r4, r5, r6, lr}
 80061f2:	69c6      	ldr	r6, [r0, #28]
 80061f4:	4604      	mov	r4, r0
 80061f6:	460d      	mov	r5, r1
 80061f8:	b976      	cbnz	r6, 8006218 <_Balloc+0x28>
 80061fa:	2010      	movs	r0, #16
 80061fc:	f7ff ff42 	bl	8006084 <malloc>
 8006200:	4602      	mov	r2, r0
 8006202:	61e0      	str	r0, [r4, #28]
 8006204:	b920      	cbnz	r0, 8006210 <_Balloc+0x20>
 8006206:	4b18      	ldr	r3, [pc, #96]	@ (8006268 <_Balloc+0x78>)
 8006208:	4818      	ldr	r0, [pc, #96]	@ (800626c <_Balloc+0x7c>)
 800620a:	216b      	movs	r1, #107	@ 0x6b
 800620c:	f7ff f884 	bl	8005318 <__assert_func>
 8006210:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006214:	6006      	str	r6, [r0, #0]
 8006216:	60c6      	str	r6, [r0, #12]
 8006218:	69e6      	ldr	r6, [r4, #28]
 800621a:	68f3      	ldr	r3, [r6, #12]
 800621c:	b183      	cbz	r3, 8006240 <_Balloc+0x50>
 800621e:	69e3      	ldr	r3, [r4, #28]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006226:	b9b8      	cbnz	r0, 8006258 <_Balloc+0x68>
 8006228:	2101      	movs	r1, #1
 800622a:	fa01 f605 	lsl.w	r6, r1, r5
 800622e:	1d72      	adds	r2, r6, #5
 8006230:	0092      	lsls	r2, r2, #2
 8006232:	4620      	mov	r0, r4
 8006234:	f001 fd83 	bl	8007d3e <_calloc_r>
 8006238:	b160      	cbz	r0, 8006254 <_Balloc+0x64>
 800623a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800623e:	e00e      	b.n	800625e <_Balloc+0x6e>
 8006240:	2221      	movs	r2, #33	@ 0x21
 8006242:	2104      	movs	r1, #4
 8006244:	4620      	mov	r0, r4
 8006246:	f001 fd7a 	bl	8007d3e <_calloc_r>
 800624a:	69e3      	ldr	r3, [r4, #28]
 800624c:	60f0      	str	r0, [r6, #12]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d1e4      	bne.n	800621e <_Balloc+0x2e>
 8006254:	2000      	movs	r0, #0
 8006256:	bd70      	pop	{r4, r5, r6, pc}
 8006258:	6802      	ldr	r2, [r0, #0]
 800625a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800625e:	2300      	movs	r3, #0
 8006260:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006264:	e7f7      	b.n	8006256 <_Balloc+0x66>
 8006266:	bf00      	nop
 8006268:	08008a18 	.word	0x08008a18
 800626c:	08008b72 	.word	0x08008b72

08006270 <_Bfree>:
 8006270:	b570      	push	{r4, r5, r6, lr}
 8006272:	69c6      	ldr	r6, [r0, #28]
 8006274:	4605      	mov	r5, r0
 8006276:	460c      	mov	r4, r1
 8006278:	b976      	cbnz	r6, 8006298 <_Bfree+0x28>
 800627a:	2010      	movs	r0, #16
 800627c:	f7ff ff02 	bl	8006084 <malloc>
 8006280:	4602      	mov	r2, r0
 8006282:	61e8      	str	r0, [r5, #28]
 8006284:	b920      	cbnz	r0, 8006290 <_Bfree+0x20>
 8006286:	4b09      	ldr	r3, [pc, #36]	@ (80062ac <_Bfree+0x3c>)
 8006288:	4809      	ldr	r0, [pc, #36]	@ (80062b0 <_Bfree+0x40>)
 800628a:	218f      	movs	r1, #143	@ 0x8f
 800628c:	f7ff f844 	bl	8005318 <__assert_func>
 8006290:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006294:	6006      	str	r6, [r0, #0]
 8006296:	60c6      	str	r6, [r0, #12]
 8006298:	b13c      	cbz	r4, 80062aa <_Bfree+0x3a>
 800629a:	69eb      	ldr	r3, [r5, #28]
 800629c:	6862      	ldr	r2, [r4, #4]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80062a4:	6021      	str	r1, [r4, #0]
 80062a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80062aa:	bd70      	pop	{r4, r5, r6, pc}
 80062ac:	08008a18 	.word	0x08008a18
 80062b0:	08008b72 	.word	0x08008b72

080062b4 <__multadd>:
 80062b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062b8:	690d      	ldr	r5, [r1, #16]
 80062ba:	4607      	mov	r7, r0
 80062bc:	460c      	mov	r4, r1
 80062be:	461e      	mov	r6, r3
 80062c0:	f101 0c14 	add.w	ip, r1, #20
 80062c4:	2000      	movs	r0, #0
 80062c6:	f8dc 3000 	ldr.w	r3, [ip]
 80062ca:	b299      	uxth	r1, r3
 80062cc:	fb02 6101 	mla	r1, r2, r1, r6
 80062d0:	0c1e      	lsrs	r6, r3, #16
 80062d2:	0c0b      	lsrs	r3, r1, #16
 80062d4:	fb02 3306 	mla	r3, r2, r6, r3
 80062d8:	b289      	uxth	r1, r1
 80062da:	3001      	adds	r0, #1
 80062dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80062e0:	4285      	cmp	r5, r0
 80062e2:	f84c 1b04 	str.w	r1, [ip], #4
 80062e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80062ea:	dcec      	bgt.n	80062c6 <__multadd+0x12>
 80062ec:	b30e      	cbz	r6, 8006332 <__multadd+0x7e>
 80062ee:	68a3      	ldr	r3, [r4, #8]
 80062f0:	42ab      	cmp	r3, r5
 80062f2:	dc19      	bgt.n	8006328 <__multadd+0x74>
 80062f4:	6861      	ldr	r1, [r4, #4]
 80062f6:	4638      	mov	r0, r7
 80062f8:	3101      	adds	r1, #1
 80062fa:	f7ff ff79 	bl	80061f0 <_Balloc>
 80062fe:	4680      	mov	r8, r0
 8006300:	b928      	cbnz	r0, 800630e <__multadd+0x5a>
 8006302:	4602      	mov	r2, r0
 8006304:	4b0c      	ldr	r3, [pc, #48]	@ (8006338 <__multadd+0x84>)
 8006306:	480d      	ldr	r0, [pc, #52]	@ (800633c <__multadd+0x88>)
 8006308:	21ba      	movs	r1, #186	@ 0xba
 800630a:	f7ff f805 	bl	8005318 <__assert_func>
 800630e:	6922      	ldr	r2, [r4, #16]
 8006310:	3202      	adds	r2, #2
 8006312:	f104 010c 	add.w	r1, r4, #12
 8006316:	0092      	lsls	r2, r2, #2
 8006318:	300c      	adds	r0, #12
 800631a:	f001 fcf1 	bl	8007d00 <memcpy>
 800631e:	4621      	mov	r1, r4
 8006320:	4638      	mov	r0, r7
 8006322:	f7ff ffa5 	bl	8006270 <_Bfree>
 8006326:	4644      	mov	r4, r8
 8006328:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800632c:	3501      	adds	r5, #1
 800632e:	615e      	str	r6, [r3, #20]
 8006330:	6125      	str	r5, [r4, #16]
 8006332:	4620      	mov	r0, r4
 8006334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006338:	08008b61 	.word	0x08008b61
 800633c:	08008b72 	.word	0x08008b72

08006340 <__s2b>:
 8006340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006344:	460c      	mov	r4, r1
 8006346:	4615      	mov	r5, r2
 8006348:	461f      	mov	r7, r3
 800634a:	2209      	movs	r2, #9
 800634c:	3308      	adds	r3, #8
 800634e:	4606      	mov	r6, r0
 8006350:	fb93 f3f2 	sdiv	r3, r3, r2
 8006354:	2100      	movs	r1, #0
 8006356:	2201      	movs	r2, #1
 8006358:	429a      	cmp	r2, r3
 800635a:	db09      	blt.n	8006370 <__s2b+0x30>
 800635c:	4630      	mov	r0, r6
 800635e:	f7ff ff47 	bl	80061f0 <_Balloc>
 8006362:	b940      	cbnz	r0, 8006376 <__s2b+0x36>
 8006364:	4602      	mov	r2, r0
 8006366:	4b19      	ldr	r3, [pc, #100]	@ (80063cc <__s2b+0x8c>)
 8006368:	4819      	ldr	r0, [pc, #100]	@ (80063d0 <__s2b+0x90>)
 800636a:	21d3      	movs	r1, #211	@ 0xd3
 800636c:	f7fe ffd4 	bl	8005318 <__assert_func>
 8006370:	0052      	lsls	r2, r2, #1
 8006372:	3101      	adds	r1, #1
 8006374:	e7f0      	b.n	8006358 <__s2b+0x18>
 8006376:	9b08      	ldr	r3, [sp, #32]
 8006378:	6143      	str	r3, [r0, #20]
 800637a:	2d09      	cmp	r5, #9
 800637c:	f04f 0301 	mov.w	r3, #1
 8006380:	6103      	str	r3, [r0, #16]
 8006382:	dd16      	ble.n	80063b2 <__s2b+0x72>
 8006384:	f104 0909 	add.w	r9, r4, #9
 8006388:	46c8      	mov	r8, r9
 800638a:	442c      	add	r4, r5
 800638c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006390:	4601      	mov	r1, r0
 8006392:	3b30      	subs	r3, #48	@ 0x30
 8006394:	220a      	movs	r2, #10
 8006396:	4630      	mov	r0, r6
 8006398:	f7ff ff8c 	bl	80062b4 <__multadd>
 800639c:	45a0      	cmp	r8, r4
 800639e:	d1f5      	bne.n	800638c <__s2b+0x4c>
 80063a0:	f1a5 0408 	sub.w	r4, r5, #8
 80063a4:	444c      	add	r4, r9
 80063a6:	1b2d      	subs	r5, r5, r4
 80063a8:	1963      	adds	r3, r4, r5
 80063aa:	42bb      	cmp	r3, r7
 80063ac:	db04      	blt.n	80063b8 <__s2b+0x78>
 80063ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063b2:	340a      	adds	r4, #10
 80063b4:	2509      	movs	r5, #9
 80063b6:	e7f6      	b.n	80063a6 <__s2b+0x66>
 80063b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80063bc:	4601      	mov	r1, r0
 80063be:	3b30      	subs	r3, #48	@ 0x30
 80063c0:	220a      	movs	r2, #10
 80063c2:	4630      	mov	r0, r6
 80063c4:	f7ff ff76 	bl	80062b4 <__multadd>
 80063c8:	e7ee      	b.n	80063a8 <__s2b+0x68>
 80063ca:	bf00      	nop
 80063cc:	08008b61 	.word	0x08008b61
 80063d0:	08008b72 	.word	0x08008b72

080063d4 <__hi0bits>:
 80063d4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80063d8:	4603      	mov	r3, r0
 80063da:	bf36      	itet	cc
 80063dc:	0403      	lslcc	r3, r0, #16
 80063de:	2000      	movcs	r0, #0
 80063e0:	2010      	movcc	r0, #16
 80063e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80063e6:	bf3c      	itt	cc
 80063e8:	021b      	lslcc	r3, r3, #8
 80063ea:	3008      	addcc	r0, #8
 80063ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063f0:	bf3c      	itt	cc
 80063f2:	011b      	lslcc	r3, r3, #4
 80063f4:	3004      	addcc	r0, #4
 80063f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063fa:	bf3c      	itt	cc
 80063fc:	009b      	lslcc	r3, r3, #2
 80063fe:	3002      	addcc	r0, #2
 8006400:	2b00      	cmp	r3, #0
 8006402:	db05      	blt.n	8006410 <__hi0bits+0x3c>
 8006404:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006408:	f100 0001 	add.w	r0, r0, #1
 800640c:	bf08      	it	eq
 800640e:	2020      	moveq	r0, #32
 8006410:	4770      	bx	lr

08006412 <__lo0bits>:
 8006412:	6803      	ldr	r3, [r0, #0]
 8006414:	4602      	mov	r2, r0
 8006416:	f013 0007 	ands.w	r0, r3, #7
 800641a:	d00b      	beq.n	8006434 <__lo0bits+0x22>
 800641c:	07d9      	lsls	r1, r3, #31
 800641e:	d421      	bmi.n	8006464 <__lo0bits+0x52>
 8006420:	0798      	lsls	r0, r3, #30
 8006422:	bf49      	itett	mi
 8006424:	085b      	lsrmi	r3, r3, #1
 8006426:	089b      	lsrpl	r3, r3, #2
 8006428:	2001      	movmi	r0, #1
 800642a:	6013      	strmi	r3, [r2, #0]
 800642c:	bf5c      	itt	pl
 800642e:	6013      	strpl	r3, [r2, #0]
 8006430:	2002      	movpl	r0, #2
 8006432:	4770      	bx	lr
 8006434:	b299      	uxth	r1, r3
 8006436:	b909      	cbnz	r1, 800643c <__lo0bits+0x2a>
 8006438:	0c1b      	lsrs	r3, r3, #16
 800643a:	2010      	movs	r0, #16
 800643c:	b2d9      	uxtb	r1, r3
 800643e:	b909      	cbnz	r1, 8006444 <__lo0bits+0x32>
 8006440:	3008      	adds	r0, #8
 8006442:	0a1b      	lsrs	r3, r3, #8
 8006444:	0719      	lsls	r1, r3, #28
 8006446:	bf04      	itt	eq
 8006448:	091b      	lsreq	r3, r3, #4
 800644a:	3004      	addeq	r0, #4
 800644c:	0799      	lsls	r1, r3, #30
 800644e:	bf04      	itt	eq
 8006450:	089b      	lsreq	r3, r3, #2
 8006452:	3002      	addeq	r0, #2
 8006454:	07d9      	lsls	r1, r3, #31
 8006456:	d403      	bmi.n	8006460 <__lo0bits+0x4e>
 8006458:	085b      	lsrs	r3, r3, #1
 800645a:	f100 0001 	add.w	r0, r0, #1
 800645e:	d003      	beq.n	8006468 <__lo0bits+0x56>
 8006460:	6013      	str	r3, [r2, #0]
 8006462:	4770      	bx	lr
 8006464:	2000      	movs	r0, #0
 8006466:	4770      	bx	lr
 8006468:	2020      	movs	r0, #32
 800646a:	4770      	bx	lr

0800646c <__i2b>:
 800646c:	b510      	push	{r4, lr}
 800646e:	460c      	mov	r4, r1
 8006470:	2101      	movs	r1, #1
 8006472:	f7ff febd 	bl	80061f0 <_Balloc>
 8006476:	4602      	mov	r2, r0
 8006478:	b928      	cbnz	r0, 8006486 <__i2b+0x1a>
 800647a:	4b05      	ldr	r3, [pc, #20]	@ (8006490 <__i2b+0x24>)
 800647c:	4805      	ldr	r0, [pc, #20]	@ (8006494 <__i2b+0x28>)
 800647e:	f240 1145 	movw	r1, #325	@ 0x145
 8006482:	f7fe ff49 	bl	8005318 <__assert_func>
 8006486:	2301      	movs	r3, #1
 8006488:	6144      	str	r4, [r0, #20]
 800648a:	6103      	str	r3, [r0, #16]
 800648c:	bd10      	pop	{r4, pc}
 800648e:	bf00      	nop
 8006490:	08008b61 	.word	0x08008b61
 8006494:	08008b72 	.word	0x08008b72

08006498 <__multiply>:
 8006498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800649c:	4614      	mov	r4, r2
 800649e:	690a      	ldr	r2, [r1, #16]
 80064a0:	6923      	ldr	r3, [r4, #16]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	bfa8      	it	ge
 80064a6:	4623      	movge	r3, r4
 80064a8:	460f      	mov	r7, r1
 80064aa:	bfa4      	itt	ge
 80064ac:	460c      	movge	r4, r1
 80064ae:	461f      	movge	r7, r3
 80064b0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80064b4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80064b8:	68a3      	ldr	r3, [r4, #8]
 80064ba:	6861      	ldr	r1, [r4, #4]
 80064bc:	eb0a 0609 	add.w	r6, sl, r9
 80064c0:	42b3      	cmp	r3, r6
 80064c2:	b085      	sub	sp, #20
 80064c4:	bfb8      	it	lt
 80064c6:	3101      	addlt	r1, #1
 80064c8:	f7ff fe92 	bl	80061f0 <_Balloc>
 80064cc:	b930      	cbnz	r0, 80064dc <__multiply+0x44>
 80064ce:	4602      	mov	r2, r0
 80064d0:	4b44      	ldr	r3, [pc, #272]	@ (80065e4 <__multiply+0x14c>)
 80064d2:	4845      	ldr	r0, [pc, #276]	@ (80065e8 <__multiply+0x150>)
 80064d4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80064d8:	f7fe ff1e 	bl	8005318 <__assert_func>
 80064dc:	f100 0514 	add.w	r5, r0, #20
 80064e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80064e4:	462b      	mov	r3, r5
 80064e6:	2200      	movs	r2, #0
 80064e8:	4543      	cmp	r3, r8
 80064ea:	d321      	bcc.n	8006530 <__multiply+0x98>
 80064ec:	f107 0114 	add.w	r1, r7, #20
 80064f0:	f104 0214 	add.w	r2, r4, #20
 80064f4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80064f8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80064fc:	9302      	str	r3, [sp, #8]
 80064fe:	1b13      	subs	r3, r2, r4
 8006500:	3b15      	subs	r3, #21
 8006502:	f023 0303 	bic.w	r3, r3, #3
 8006506:	3304      	adds	r3, #4
 8006508:	f104 0715 	add.w	r7, r4, #21
 800650c:	42ba      	cmp	r2, r7
 800650e:	bf38      	it	cc
 8006510:	2304      	movcc	r3, #4
 8006512:	9301      	str	r3, [sp, #4]
 8006514:	9b02      	ldr	r3, [sp, #8]
 8006516:	9103      	str	r1, [sp, #12]
 8006518:	428b      	cmp	r3, r1
 800651a:	d80c      	bhi.n	8006536 <__multiply+0x9e>
 800651c:	2e00      	cmp	r6, #0
 800651e:	dd03      	ble.n	8006528 <__multiply+0x90>
 8006520:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006524:	2b00      	cmp	r3, #0
 8006526:	d05b      	beq.n	80065e0 <__multiply+0x148>
 8006528:	6106      	str	r6, [r0, #16]
 800652a:	b005      	add	sp, #20
 800652c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006530:	f843 2b04 	str.w	r2, [r3], #4
 8006534:	e7d8      	b.n	80064e8 <__multiply+0x50>
 8006536:	f8b1 a000 	ldrh.w	sl, [r1]
 800653a:	f1ba 0f00 	cmp.w	sl, #0
 800653e:	d024      	beq.n	800658a <__multiply+0xf2>
 8006540:	f104 0e14 	add.w	lr, r4, #20
 8006544:	46a9      	mov	r9, r5
 8006546:	f04f 0c00 	mov.w	ip, #0
 800654a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800654e:	f8d9 3000 	ldr.w	r3, [r9]
 8006552:	fa1f fb87 	uxth.w	fp, r7
 8006556:	b29b      	uxth	r3, r3
 8006558:	fb0a 330b 	mla	r3, sl, fp, r3
 800655c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006560:	f8d9 7000 	ldr.w	r7, [r9]
 8006564:	4463      	add	r3, ip
 8006566:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800656a:	fb0a c70b 	mla	r7, sl, fp, ip
 800656e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006572:	b29b      	uxth	r3, r3
 8006574:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006578:	4572      	cmp	r2, lr
 800657a:	f849 3b04 	str.w	r3, [r9], #4
 800657e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006582:	d8e2      	bhi.n	800654a <__multiply+0xb2>
 8006584:	9b01      	ldr	r3, [sp, #4]
 8006586:	f845 c003 	str.w	ip, [r5, r3]
 800658a:	9b03      	ldr	r3, [sp, #12]
 800658c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006590:	3104      	adds	r1, #4
 8006592:	f1b9 0f00 	cmp.w	r9, #0
 8006596:	d021      	beq.n	80065dc <__multiply+0x144>
 8006598:	682b      	ldr	r3, [r5, #0]
 800659a:	f104 0c14 	add.w	ip, r4, #20
 800659e:	46ae      	mov	lr, r5
 80065a0:	f04f 0a00 	mov.w	sl, #0
 80065a4:	f8bc b000 	ldrh.w	fp, [ip]
 80065a8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80065ac:	fb09 770b 	mla	r7, r9, fp, r7
 80065b0:	4457      	add	r7, sl
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80065b8:	f84e 3b04 	str.w	r3, [lr], #4
 80065bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80065c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80065c4:	f8be 3000 	ldrh.w	r3, [lr]
 80065c8:	fb09 330a 	mla	r3, r9, sl, r3
 80065cc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80065d0:	4562      	cmp	r2, ip
 80065d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80065d6:	d8e5      	bhi.n	80065a4 <__multiply+0x10c>
 80065d8:	9f01      	ldr	r7, [sp, #4]
 80065da:	51eb      	str	r3, [r5, r7]
 80065dc:	3504      	adds	r5, #4
 80065de:	e799      	b.n	8006514 <__multiply+0x7c>
 80065e0:	3e01      	subs	r6, #1
 80065e2:	e79b      	b.n	800651c <__multiply+0x84>
 80065e4:	08008b61 	.word	0x08008b61
 80065e8:	08008b72 	.word	0x08008b72

080065ec <__pow5mult>:
 80065ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065f0:	4615      	mov	r5, r2
 80065f2:	f012 0203 	ands.w	r2, r2, #3
 80065f6:	4607      	mov	r7, r0
 80065f8:	460e      	mov	r6, r1
 80065fa:	d007      	beq.n	800660c <__pow5mult+0x20>
 80065fc:	4c25      	ldr	r4, [pc, #148]	@ (8006694 <__pow5mult+0xa8>)
 80065fe:	3a01      	subs	r2, #1
 8006600:	2300      	movs	r3, #0
 8006602:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006606:	f7ff fe55 	bl	80062b4 <__multadd>
 800660a:	4606      	mov	r6, r0
 800660c:	10ad      	asrs	r5, r5, #2
 800660e:	d03d      	beq.n	800668c <__pow5mult+0xa0>
 8006610:	69fc      	ldr	r4, [r7, #28]
 8006612:	b97c      	cbnz	r4, 8006634 <__pow5mult+0x48>
 8006614:	2010      	movs	r0, #16
 8006616:	f7ff fd35 	bl	8006084 <malloc>
 800661a:	4602      	mov	r2, r0
 800661c:	61f8      	str	r0, [r7, #28]
 800661e:	b928      	cbnz	r0, 800662c <__pow5mult+0x40>
 8006620:	4b1d      	ldr	r3, [pc, #116]	@ (8006698 <__pow5mult+0xac>)
 8006622:	481e      	ldr	r0, [pc, #120]	@ (800669c <__pow5mult+0xb0>)
 8006624:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006628:	f7fe fe76 	bl	8005318 <__assert_func>
 800662c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006630:	6004      	str	r4, [r0, #0]
 8006632:	60c4      	str	r4, [r0, #12]
 8006634:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006638:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800663c:	b94c      	cbnz	r4, 8006652 <__pow5mult+0x66>
 800663e:	f240 2171 	movw	r1, #625	@ 0x271
 8006642:	4638      	mov	r0, r7
 8006644:	f7ff ff12 	bl	800646c <__i2b>
 8006648:	2300      	movs	r3, #0
 800664a:	f8c8 0008 	str.w	r0, [r8, #8]
 800664e:	4604      	mov	r4, r0
 8006650:	6003      	str	r3, [r0, #0]
 8006652:	f04f 0900 	mov.w	r9, #0
 8006656:	07eb      	lsls	r3, r5, #31
 8006658:	d50a      	bpl.n	8006670 <__pow5mult+0x84>
 800665a:	4631      	mov	r1, r6
 800665c:	4622      	mov	r2, r4
 800665e:	4638      	mov	r0, r7
 8006660:	f7ff ff1a 	bl	8006498 <__multiply>
 8006664:	4631      	mov	r1, r6
 8006666:	4680      	mov	r8, r0
 8006668:	4638      	mov	r0, r7
 800666a:	f7ff fe01 	bl	8006270 <_Bfree>
 800666e:	4646      	mov	r6, r8
 8006670:	106d      	asrs	r5, r5, #1
 8006672:	d00b      	beq.n	800668c <__pow5mult+0xa0>
 8006674:	6820      	ldr	r0, [r4, #0]
 8006676:	b938      	cbnz	r0, 8006688 <__pow5mult+0x9c>
 8006678:	4622      	mov	r2, r4
 800667a:	4621      	mov	r1, r4
 800667c:	4638      	mov	r0, r7
 800667e:	f7ff ff0b 	bl	8006498 <__multiply>
 8006682:	6020      	str	r0, [r4, #0]
 8006684:	f8c0 9000 	str.w	r9, [r0]
 8006688:	4604      	mov	r4, r0
 800668a:	e7e4      	b.n	8006656 <__pow5mult+0x6a>
 800668c:	4630      	mov	r0, r6
 800668e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006692:	bf00      	nop
 8006694:	08008bcc 	.word	0x08008bcc
 8006698:	08008a18 	.word	0x08008a18
 800669c:	08008b72 	.word	0x08008b72

080066a0 <__lshift>:
 80066a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066a4:	460c      	mov	r4, r1
 80066a6:	6849      	ldr	r1, [r1, #4]
 80066a8:	6923      	ldr	r3, [r4, #16]
 80066aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80066ae:	68a3      	ldr	r3, [r4, #8]
 80066b0:	4607      	mov	r7, r0
 80066b2:	4691      	mov	r9, r2
 80066b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80066b8:	f108 0601 	add.w	r6, r8, #1
 80066bc:	42b3      	cmp	r3, r6
 80066be:	db0b      	blt.n	80066d8 <__lshift+0x38>
 80066c0:	4638      	mov	r0, r7
 80066c2:	f7ff fd95 	bl	80061f0 <_Balloc>
 80066c6:	4605      	mov	r5, r0
 80066c8:	b948      	cbnz	r0, 80066de <__lshift+0x3e>
 80066ca:	4602      	mov	r2, r0
 80066cc:	4b28      	ldr	r3, [pc, #160]	@ (8006770 <__lshift+0xd0>)
 80066ce:	4829      	ldr	r0, [pc, #164]	@ (8006774 <__lshift+0xd4>)
 80066d0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80066d4:	f7fe fe20 	bl	8005318 <__assert_func>
 80066d8:	3101      	adds	r1, #1
 80066da:	005b      	lsls	r3, r3, #1
 80066dc:	e7ee      	b.n	80066bc <__lshift+0x1c>
 80066de:	2300      	movs	r3, #0
 80066e0:	f100 0114 	add.w	r1, r0, #20
 80066e4:	f100 0210 	add.w	r2, r0, #16
 80066e8:	4618      	mov	r0, r3
 80066ea:	4553      	cmp	r3, sl
 80066ec:	db33      	blt.n	8006756 <__lshift+0xb6>
 80066ee:	6920      	ldr	r0, [r4, #16]
 80066f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80066f4:	f104 0314 	add.w	r3, r4, #20
 80066f8:	f019 091f 	ands.w	r9, r9, #31
 80066fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006700:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006704:	d02b      	beq.n	800675e <__lshift+0xbe>
 8006706:	f1c9 0e20 	rsb	lr, r9, #32
 800670a:	468a      	mov	sl, r1
 800670c:	2200      	movs	r2, #0
 800670e:	6818      	ldr	r0, [r3, #0]
 8006710:	fa00 f009 	lsl.w	r0, r0, r9
 8006714:	4310      	orrs	r0, r2
 8006716:	f84a 0b04 	str.w	r0, [sl], #4
 800671a:	f853 2b04 	ldr.w	r2, [r3], #4
 800671e:	459c      	cmp	ip, r3
 8006720:	fa22 f20e 	lsr.w	r2, r2, lr
 8006724:	d8f3      	bhi.n	800670e <__lshift+0x6e>
 8006726:	ebac 0304 	sub.w	r3, ip, r4
 800672a:	3b15      	subs	r3, #21
 800672c:	f023 0303 	bic.w	r3, r3, #3
 8006730:	3304      	adds	r3, #4
 8006732:	f104 0015 	add.w	r0, r4, #21
 8006736:	4584      	cmp	ip, r0
 8006738:	bf38      	it	cc
 800673a:	2304      	movcc	r3, #4
 800673c:	50ca      	str	r2, [r1, r3]
 800673e:	b10a      	cbz	r2, 8006744 <__lshift+0xa4>
 8006740:	f108 0602 	add.w	r6, r8, #2
 8006744:	3e01      	subs	r6, #1
 8006746:	4638      	mov	r0, r7
 8006748:	612e      	str	r6, [r5, #16]
 800674a:	4621      	mov	r1, r4
 800674c:	f7ff fd90 	bl	8006270 <_Bfree>
 8006750:	4628      	mov	r0, r5
 8006752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006756:	f842 0f04 	str.w	r0, [r2, #4]!
 800675a:	3301      	adds	r3, #1
 800675c:	e7c5      	b.n	80066ea <__lshift+0x4a>
 800675e:	3904      	subs	r1, #4
 8006760:	f853 2b04 	ldr.w	r2, [r3], #4
 8006764:	f841 2f04 	str.w	r2, [r1, #4]!
 8006768:	459c      	cmp	ip, r3
 800676a:	d8f9      	bhi.n	8006760 <__lshift+0xc0>
 800676c:	e7ea      	b.n	8006744 <__lshift+0xa4>
 800676e:	bf00      	nop
 8006770:	08008b61 	.word	0x08008b61
 8006774:	08008b72 	.word	0x08008b72

08006778 <__mcmp>:
 8006778:	690a      	ldr	r2, [r1, #16]
 800677a:	4603      	mov	r3, r0
 800677c:	6900      	ldr	r0, [r0, #16]
 800677e:	1a80      	subs	r0, r0, r2
 8006780:	b530      	push	{r4, r5, lr}
 8006782:	d10e      	bne.n	80067a2 <__mcmp+0x2a>
 8006784:	3314      	adds	r3, #20
 8006786:	3114      	adds	r1, #20
 8006788:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800678c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006790:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006794:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006798:	4295      	cmp	r5, r2
 800679a:	d003      	beq.n	80067a4 <__mcmp+0x2c>
 800679c:	d205      	bcs.n	80067aa <__mcmp+0x32>
 800679e:	f04f 30ff 	mov.w	r0, #4294967295
 80067a2:	bd30      	pop	{r4, r5, pc}
 80067a4:	42a3      	cmp	r3, r4
 80067a6:	d3f3      	bcc.n	8006790 <__mcmp+0x18>
 80067a8:	e7fb      	b.n	80067a2 <__mcmp+0x2a>
 80067aa:	2001      	movs	r0, #1
 80067ac:	e7f9      	b.n	80067a2 <__mcmp+0x2a>
	...

080067b0 <__mdiff>:
 80067b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067b4:	4689      	mov	r9, r1
 80067b6:	4606      	mov	r6, r0
 80067b8:	4611      	mov	r1, r2
 80067ba:	4648      	mov	r0, r9
 80067bc:	4614      	mov	r4, r2
 80067be:	f7ff ffdb 	bl	8006778 <__mcmp>
 80067c2:	1e05      	subs	r5, r0, #0
 80067c4:	d112      	bne.n	80067ec <__mdiff+0x3c>
 80067c6:	4629      	mov	r1, r5
 80067c8:	4630      	mov	r0, r6
 80067ca:	f7ff fd11 	bl	80061f0 <_Balloc>
 80067ce:	4602      	mov	r2, r0
 80067d0:	b928      	cbnz	r0, 80067de <__mdiff+0x2e>
 80067d2:	4b3f      	ldr	r3, [pc, #252]	@ (80068d0 <__mdiff+0x120>)
 80067d4:	f240 2137 	movw	r1, #567	@ 0x237
 80067d8:	483e      	ldr	r0, [pc, #248]	@ (80068d4 <__mdiff+0x124>)
 80067da:	f7fe fd9d 	bl	8005318 <__assert_func>
 80067de:	2301      	movs	r3, #1
 80067e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80067e4:	4610      	mov	r0, r2
 80067e6:	b003      	add	sp, #12
 80067e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ec:	bfbc      	itt	lt
 80067ee:	464b      	movlt	r3, r9
 80067f0:	46a1      	movlt	r9, r4
 80067f2:	4630      	mov	r0, r6
 80067f4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80067f8:	bfba      	itte	lt
 80067fa:	461c      	movlt	r4, r3
 80067fc:	2501      	movlt	r5, #1
 80067fe:	2500      	movge	r5, #0
 8006800:	f7ff fcf6 	bl	80061f0 <_Balloc>
 8006804:	4602      	mov	r2, r0
 8006806:	b918      	cbnz	r0, 8006810 <__mdiff+0x60>
 8006808:	4b31      	ldr	r3, [pc, #196]	@ (80068d0 <__mdiff+0x120>)
 800680a:	f240 2145 	movw	r1, #581	@ 0x245
 800680e:	e7e3      	b.n	80067d8 <__mdiff+0x28>
 8006810:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006814:	6926      	ldr	r6, [r4, #16]
 8006816:	60c5      	str	r5, [r0, #12]
 8006818:	f109 0310 	add.w	r3, r9, #16
 800681c:	f109 0514 	add.w	r5, r9, #20
 8006820:	f104 0e14 	add.w	lr, r4, #20
 8006824:	f100 0b14 	add.w	fp, r0, #20
 8006828:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800682c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006830:	9301      	str	r3, [sp, #4]
 8006832:	46d9      	mov	r9, fp
 8006834:	f04f 0c00 	mov.w	ip, #0
 8006838:	9b01      	ldr	r3, [sp, #4]
 800683a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800683e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006842:	9301      	str	r3, [sp, #4]
 8006844:	fa1f f38a 	uxth.w	r3, sl
 8006848:	4619      	mov	r1, r3
 800684a:	b283      	uxth	r3, r0
 800684c:	1acb      	subs	r3, r1, r3
 800684e:	0c00      	lsrs	r0, r0, #16
 8006850:	4463      	add	r3, ip
 8006852:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006856:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800685a:	b29b      	uxth	r3, r3
 800685c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006860:	4576      	cmp	r6, lr
 8006862:	f849 3b04 	str.w	r3, [r9], #4
 8006866:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800686a:	d8e5      	bhi.n	8006838 <__mdiff+0x88>
 800686c:	1b33      	subs	r3, r6, r4
 800686e:	3b15      	subs	r3, #21
 8006870:	f023 0303 	bic.w	r3, r3, #3
 8006874:	3415      	adds	r4, #21
 8006876:	3304      	adds	r3, #4
 8006878:	42a6      	cmp	r6, r4
 800687a:	bf38      	it	cc
 800687c:	2304      	movcc	r3, #4
 800687e:	441d      	add	r5, r3
 8006880:	445b      	add	r3, fp
 8006882:	461e      	mov	r6, r3
 8006884:	462c      	mov	r4, r5
 8006886:	4544      	cmp	r4, r8
 8006888:	d30e      	bcc.n	80068a8 <__mdiff+0xf8>
 800688a:	f108 0103 	add.w	r1, r8, #3
 800688e:	1b49      	subs	r1, r1, r5
 8006890:	f021 0103 	bic.w	r1, r1, #3
 8006894:	3d03      	subs	r5, #3
 8006896:	45a8      	cmp	r8, r5
 8006898:	bf38      	it	cc
 800689a:	2100      	movcc	r1, #0
 800689c:	440b      	add	r3, r1
 800689e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80068a2:	b191      	cbz	r1, 80068ca <__mdiff+0x11a>
 80068a4:	6117      	str	r7, [r2, #16]
 80068a6:	e79d      	b.n	80067e4 <__mdiff+0x34>
 80068a8:	f854 1b04 	ldr.w	r1, [r4], #4
 80068ac:	46e6      	mov	lr, ip
 80068ae:	0c08      	lsrs	r0, r1, #16
 80068b0:	fa1c fc81 	uxtah	ip, ip, r1
 80068b4:	4471      	add	r1, lr
 80068b6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80068ba:	b289      	uxth	r1, r1
 80068bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80068c0:	f846 1b04 	str.w	r1, [r6], #4
 80068c4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80068c8:	e7dd      	b.n	8006886 <__mdiff+0xd6>
 80068ca:	3f01      	subs	r7, #1
 80068cc:	e7e7      	b.n	800689e <__mdiff+0xee>
 80068ce:	bf00      	nop
 80068d0:	08008b61 	.word	0x08008b61
 80068d4:	08008b72 	.word	0x08008b72

080068d8 <__ulp>:
 80068d8:	b082      	sub	sp, #8
 80068da:	ed8d 0b00 	vstr	d0, [sp]
 80068de:	9a01      	ldr	r2, [sp, #4]
 80068e0:	4b0f      	ldr	r3, [pc, #60]	@ (8006920 <__ulp+0x48>)
 80068e2:	4013      	ands	r3, r2
 80068e4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	dc08      	bgt.n	80068fe <__ulp+0x26>
 80068ec:	425b      	negs	r3, r3
 80068ee:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80068f2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80068f6:	da04      	bge.n	8006902 <__ulp+0x2a>
 80068f8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80068fc:	4113      	asrs	r3, r2
 80068fe:	2200      	movs	r2, #0
 8006900:	e008      	b.n	8006914 <__ulp+0x3c>
 8006902:	f1a2 0314 	sub.w	r3, r2, #20
 8006906:	2b1e      	cmp	r3, #30
 8006908:	bfda      	itte	le
 800690a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800690e:	40da      	lsrle	r2, r3
 8006910:	2201      	movgt	r2, #1
 8006912:	2300      	movs	r3, #0
 8006914:	4619      	mov	r1, r3
 8006916:	4610      	mov	r0, r2
 8006918:	ec41 0b10 	vmov	d0, r0, r1
 800691c:	b002      	add	sp, #8
 800691e:	4770      	bx	lr
 8006920:	7ff00000 	.word	0x7ff00000

08006924 <__b2d>:
 8006924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006928:	6906      	ldr	r6, [r0, #16]
 800692a:	f100 0814 	add.w	r8, r0, #20
 800692e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8006932:	1f37      	subs	r7, r6, #4
 8006934:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006938:	4610      	mov	r0, r2
 800693a:	f7ff fd4b 	bl	80063d4 <__hi0bits>
 800693e:	f1c0 0320 	rsb	r3, r0, #32
 8006942:	280a      	cmp	r0, #10
 8006944:	600b      	str	r3, [r1, #0]
 8006946:	491b      	ldr	r1, [pc, #108]	@ (80069b4 <__b2d+0x90>)
 8006948:	dc15      	bgt.n	8006976 <__b2d+0x52>
 800694a:	f1c0 0c0b 	rsb	ip, r0, #11
 800694e:	fa22 f30c 	lsr.w	r3, r2, ip
 8006952:	45b8      	cmp	r8, r7
 8006954:	ea43 0501 	orr.w	r5, r3, r1
 8006958:	bf34      	ite	cc
 800695a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800695e:	2300      	movcs	r3, #0
 8006960:	3015      	adds	r0, #21
 8006962:	fa02 f000 	lsl.w	r0, r2, r0
 8006966:	fa23 f30c 	lsr.w	r3, r3, ip
 800696a:	4303      	orrs	r3, r0
 800696c:	461c      	mov	r4, r3
 800696e:	ec45 4b10 	vmov	d0, r4, r5
 8006972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006976:	45b8      	cmp	r8, r7
 8006978:	bf3a      	itte	cc
 800697a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800697e:	f1a6 0708 	subcc.w	r7, r6, #8
 8006982:	2300      	movcs	r3, #0
 8006984:	380b      	subs	r0, #11
 8006986:	d012      	beq.n	80069ae <__b2d+0x8a>
 8006988:	f1c0 0120 	rsb	r1, r0, #32
 800698c:	fa23 f401 	lsr.w	r4, r3, r1
 8006990:	4082      	lsls	r2, r0
 8006992:	4322      	orrs	r2, r4
 8006994:	4547      	cmp	r7, r8
 8006996:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800699a:	bf8c      	ite	hi
 800699c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80069a0:	2200      	movls	r2, #0
 80069a2:	4083      	lsls	r3, r0
 80069a4:	40ca      	lsrs	r2, r1
 80069a6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80069aa:	4313      	orrs	r3, r2
 80069ac:	e7de      	b.n	800696c <__b2d+0x48>
 80069ae:	ea42 0501 	orr.w	r5, r2, r1
 80069b2:	e7db      	b.n	800696c <__b2d+0x48>
 80069b4:	3ff00000 	.word	0x3ff00000

080069b8 <__d2b>:
 80069b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80069bc:	460f      	mov	r7, r1
 80069be:	2101      	movs	r1, #1
 80069c0:	ec59 8b10 	vmov	r8, r9, d0
 80069c4:	4616      	mov	r6, r2
 80069c6:	f7ff fc13 	bl	80061f0 <_Balloc>
 80069ca:	4604      	mov	r4, r0
 80069cc:	b930      	cbnz	r0, 80069dc <__d2b+0x24>
 80069ce:	4602      	mov	r2, r0
 80069d0:	4b23      	ldr	r3, [pc, #140]	@ (8006a60 <__d2b+0xa8>)
 80069d2:	4824      	ldr	r0, [pc, #144]	@ (8006a64 <__d2b+0xac>)
 80069d4:	f240 310f 	movw	r1, #783	@ 0x30f
 80069d8:	f7fe fc9e 	bl	8005318 <__assert_func>
 80069dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80069e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80069e4:	b10d      	cbz	r5, 80069ea <__d2b+0x32>
 80069e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80069ea:	9301      	str	r3, [sp, #4]
 80069ec:	f1b8 0300 	subs.w	r3, r8, #0
 80069f0:	d023      	beq.n	8006a3a <__d2b+0x82>
 80069f2:	4668      	mov	r0, sp
 80069f4:	9300      	str	r3, [sp, #0]
 80069f6:	f7ff fd0c 	bl	8006412 <__lo0bits>
 80069fa:	e9dd 1200 	ldrd	r1, r2, [sp]
 80069fe:	b1d0      	cbz	r0, 8006a36 <__d2b+0x7e>
 8006a00:	f1c0 0320 	rsb	r3, r0, #32
 8006a04:	fa02 f303 	lsl.w	r3, r2, r3
 8006a08:	430b      	orrs	r3, r1
 8006a0a:	40c2      	lsrs	r2, r0
 8006a0c:	6163      	str	r3, [r4, #20]
 8006a0e:	9201      	str	r2, [sp, #4]
 8006a10:	9b01      	ldr	r3, [sp, #4]
 8006a12:	61a3      	str	r3, [r4, #24]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	bf0c      	ite	eq
 8006a18:	2201      	moveq	r2, #1
 8006a1a:	2202      	movne	r2, #2
 8006a1c:	6122      	str	r2, [r4, #16]
 8006a1e:	b1a5      	cbz	r5, 8006a4a <__d2b+0x92>
 8006a20:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006a24:	4405      	add	r5, r0
 8006a26:	603d      	str	r5, [r7, #0]
 8006a28:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006a2c:	6030      	str	r0, [r6, #0]
 8006a2e:	4620      	mov	r0, r4
 8006a30:	b003      	add	sp, #12
 8006a32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a36:	6161      	str	r1, [r4, #20]
 8006a38:	e7ea      	b.n	8006a10 <__d2b+0x58>
 8006a3a:	a801      	add	r0, sp, #4
 8006a3c:	f7ff fce9 	bl	8006412 <__lo0bits>
 8006a40:	9b01      	ldr	r3, [sp, #4]
 8006a42:	6163      	str	r3, [r4, #20]
 8006a44:	3020      	adds	r0, #32
 8006a46:	2201      	movs	r2, #1
 8006a48:	e7e8      	b.n	8006a1c <__d2b+0x64>
 8006a4a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006a4e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006a52:	6038      	str	r0, [r7, #0]
 8006a54:	6918      	ldr	r0, [r3, #16]
 8006a56:	f7ff fcbd 	bl	80063d4 <__hi0bits>
 8006a5a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006a5e:	e7e5      	b.n	8006a2c <__d2b+0x74>
 8006a60:	08008b61 	.word	0x08008b61
 8006a64:	08008b72 	.word	0x08008b72

08006a68 <__ratio>:
 8006a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a6c:	b085      	sub	sp, #20
 8006a6e:	e9cd 1000 	strd	r1, r0, [sp]
 8006a72:	a902      	add	r1, sp, #8
 8006a74:	f7ff ff56 	bl	8006924 <__b2d>
 8006a78:	9800      	ldr	r0, [sp, #0]
 8006a7a:	a903      	add	r1, sp, #12
 8006a7c:	ec55 4b10 	vmov	r4, r5, d0
 8006a80:	f7ff ff50 	bl	8006924 <__b2d>
 8006a84:	9b01      	ldr	r3, [sp, #4]
 8006a86:	6919      	ldr	r1, [r3, #16]
 8006a88:	9b00      	ldr	r3, [sp, #0]
 8006a8a:	691b      	ldr	r3, [r3, #16]
 8006a8c:	1ac9      	subs	r1, r1, r3
 8006a8e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006a92:	1a9b      	subs	r3, r3, r2
 8006a94:	ec5b ab10 	vmov	sl, fp, d0
 8006a98:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	bfce      	itee	gt
 8006aa0:	462a      	movgt	r2, r5
 8006aa2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006aa6:	465a      	movle	r2, fp
 8006aa8:	462f      	mov	r7, r5
 8006aaa:	46d9      	mov	r9, fp
 8006aac:	bfcc      	ite	gt
 8006aae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006ab2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006ab6:	464b      	mov	r3, r9
 8006ab8:	4652      	mov	r2, sl
 8006aba:	4620      	mov	r0, r4
 8006abc:	4639      	mov	r1, r7
 8006abe:	f7f9 fec5 	bl	800084c <__aeabi_ddiv>
 8006ac2:	ec41 0b10 	vmov	d0, r0, r1
 8006ac6:	b005      	add	sp, #20
 8006ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006acc <__copybits>:
 8006acc:	3901      	subs	r1, #1
 8006ace:	b570      	push	{r4, r5, r6, lr}
 8006ad0:	1149      	asrs	r1, r1, #5
 8006ad2:	6914      	ldr	r4, [r2, #16]
 8006ad4:	3101      	adds	r1, #1
 8006ad6:	f102 0314 	add.w	r3, r2, #20
 8006ada:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006ade:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006ae2:	1f05      	subs	r5, r0, #4
 8006ae4:	42a3      	cmp	r3, r4
 8006ae6:	d30c      	bcc.n	8006b02 <__copybits+0x36>
 8006ae8:	1aa3      	subs	r3, r4, r2
 8006aea:	3b11      	subs	r3, #17
 8006aec:	f023 0303 	bic.w	r3, r3, #3
 8006af0:	3211      	adds	r2, #17
 8006af2:	42a2      	cmp	r2, r4
 8006af4:	bf88      	it	hi
 8006af6:	2300      	movhi	r3, #0
 8006af8:	4418      	add	r0, r3
 8006afa:	2300      	movs	r3, #0
 8006afc:	4288      	cmp	r0, r1
 8006afe:	d305      	bcc.n	8006b0c <__copybits+0x40>
 8006b00:	bd70      	pop	{r4, r5, r6, pc}
 8006b02:	f853 6b04 	ldr.w	r6, [r3], #4
 8006b06:	f845 6f04 	str.w	r6, [r5, #4]!
 8006b0a:	e7eb      	b.n	8006ae4 <__copybits+0x18>
 8006b0c:	f840 3b04 	str.w	r3, [r0], #4
 8006b10:	e7f4      	b.n	8006afc <__copybits+0x30>

08006b12 <__any_on>:
 8006b12:	f100 0214 	add.w	r2, r0, #20
 8006b16:	6900      	ldr	r0, [r0, #16]
 8006b18:	114b      	asrs	r3, r1, #5
 8006b1a:	4298      	cmp	r0, r3
 8006b1c:	b510      	push	{r4, lr}
 8006b1e:	db11      	blt.n	8006b44 <__any_on+0x32>
 8006b20:	dd0a      	ble.n	8006b38 <__any_on+0x26>
 8006b22:	f011 011f 	ands.w	r1, r1, #31
 8006b26:	d007      	beq.n	8006b38 <__any_on+0x26>
 8006b28:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006b2c:	fa24 f001 	lsr.w	r0, r4, r1
 8006b30:	fa00 f101 	lsl.w	r1, r0, r1
 8006b34:	428c      	cmp	r4, r1
 8006b36:	d10b      	bne.n	8006b50 <__any_on+0x3e>
 8006b38:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d803      	bhi.n	8006b48 <__any_on+0x36>
 8006b40:	2000      	movs	r0, #0
 8006b42:	bd10      	pop	{r4, pc}
 8006b44:	4603      	mov	r3, r0
 8006b46:	e7f7      	b.n	8006b38 <__any_on+0x26>
 8006b48:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006b4c:	2900      	cmp	r1, #0
 8006b4e:	d0f5      	beq.n	8006b3c <__any_on+0x2a>
 8006b50:	2001      	movs	r0, #1
 8006b52:	e7f6      	b.n	8006b42 <__any_on+0x30>

08006b54 <sulp>:
 8006b54:	b570      	push	{r4, r5, r6, lr}
 8006b56:	4604      	mov	r4, r0
 8006b58:	460d      	mov	r5, r1
 8006b5a:	ec45 4b10 	vmov	d0, r4, r5
 8006b5e:	4616      	mov	r6, r2
 8006b60:	f7ff feba 	bl	80068d8 <__ulp>
 8006b64:	ec51 0b10 	vmov	r0, r1, d0
 8006b68:	b17e      	cbz	r6, 8006b8a <sulp+0x36>
 8006b6a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006b6e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	dd09      	ble.n	8006b8a <sulp+0x36>
 8006b76:	051b      	lsls	r3, r3, #20
 8006b78:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006b7c:	2400      	movs	r4, #0
 8006b7e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006b82:	4622      	mov	r2, r4
 8006b84:	462b      	mov	r3, r5
 8006b86:	f7f9 fd37 	bl	80005f8 <__aeabi_dmul>
 8006b8a:	ec41 0b10 	vmov	d0, r0, r1
 8006b8e:	bd70      	pop	{r4, r5, r6, pc}

08006b90 <_strtod_l>:
 8006b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b94:	b09f      	sub	sp, #124	@ 0x7c
 8006b96:	460c      	mov	r4, r1
 8006b98:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	921a      	str	r2, [sp, #104]	@ 0x68
 8006b9e:	9005      	str	r0, [sp, #20]
 8006ba0:	f04f 0a00 	mov.w	sl, #0
 8006ba4:	f04f 0b00 	mov.w	fp, #0
 8006ba8:	460a      	mov	r2, r1
 8006baa:	9219      	str	r2, [sp, #100]	@ 0x64
 8006bac:	7811      	ldrb	r1, [r2, #0]
 8006bae:	292b      	cmp	r1, #43	@ 0x2b
 8006bb0:	d04a      	beq.n	8006c48 <_strtod_l+0xb8>
 8006bb2:	d838      	bhi.n	8006c26 <_strtod_l+0x96>
 8006bb4:	290d      	cmp	r1, #13
 8006bb6:	d832      	bhi.n	8006c1e <_strtod_l+0x8e>
 8006bb8:	2908      	cmp	r1, #8
 8006bba:	d832      	bhi.n	8006c22 <_strtod_l+0x92>
 8006bbc:	2900      	cmp	r1, #0
 8006bbe:	d03b      	beq.n	8006c38 <_strtod_l+0xa8>
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006bc4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006bc6:	782a      	ldrb	r2, [r5, #0]
 8006bc8:	2a30      	cmp	r2, #48	@ 0x30
 8006bca:	f040 80b3 	bne.w	8006d34 <_strtod_l+0x1a4>
 8006bce:	786a      	ldrb	r2, [r5, #1]
 8006bd0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006bd4:	2a58      	cmp	r2, #88	@ 0x58
 8006bd6:	d16e      	bne.n	8006cb6 <_strtod_l+0x126>
 8006bd8:	9302      	str	r3, [sp, #8]
 8006bda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006bdc:	9301      	str	r3, [sp, #4]
 8006bde:	ab1a      	add	r3, sp, #104	@ 0x68
 8006be0:	9300      	str	r3, [sp, #0]
 8006be2:	4a8e      	ldr	r2, [pc, #568]	@ (8006e1c <_strtod_l+0x28c>)
 8006be4:	9805      	ldr	r0, [sp, #20]
 8006be6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006be8:	a919      	add	r1, sp, #100	@ 0x64
 8006bea:	f001 f923 	bl	8007e34 <__gethex>
 8006bee:	f010 060f 	ands.w	r6, r0, #15
 8006bf2:	4604      	mov	r4, r0
 8006bf4:	d005      	beq.n	8006c02 <_strtod_l+0x72>
 8006bf6:	2e06      	cmp	r6, #6
 8006bf8:	d128      	bne.n	8006c4c <_strtod_l+0xbc>
 8006bfa:	3501      	adds	r5, #1
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	9519      	str	r5, [sp, #100]	@ 0x64
 8006c00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c02:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	f040 858e 	bne.w	8007726 <_strtod_l+0xb96>
 8006c0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c0c:	b1cb      	cbz	r3, 8006c42 <_strtod_l+0xb2>
 8006c0e:	4652      	mov	r2, sl
 8006c10:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006c14:	ec43 2b10 	vmov	d0, r2, r3
 8006c18:	b01f      	add	sp, #124	@ 0x7c
 8006c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c1e:	2920      	cmp	r1, #32
 8006c20:	d1ce      	bne.n	8006bc0 <_strtod_l+0x30>
 8006c22:	3201      	adds	r2, #1
 8006c24:	e7c1      	b.n	8006baa <_strtod_l+0x1a>
 8006c26:	292d      	cmp	r1, #45	@ 0x2d
 8006c28:	d1ca      	bne.n	8006bc0 <_strtod_l+0x30>
 8006c2a:	2101      	movs	r1, #1
 8006c2c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006c2e:	1c51      	adds	r1, r2, #1
 8006c30:	9119      	str	r1, [sp, #100]	@ 0x64
 8006c32:	7852      	ldrb	r2, [r2, #1]
 8006c34:	2a00      	cmp	r2, #0
 8006c36:	d1c5      	bne.n	8006bc4 <_strtod_l+0x34>
 8006c38:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006c3a:	9419      	str	r4, [sp, #100]	@ 0x64
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f040 8570 	bne.w	8007722 <_strtod_l+0xb92>
 8006c42:	4652      	mov	r2, sl
 8006c44:	465b      	mov	r3, fp
 8006c46:	e7e5      	b.n	8006c14 <_strtod_l+0x84>
 8006c48:	2100      	movs	r1, #0
 8006c4a:	e7ef      	b.n	8006c2c <_strtod_l+0x9c>
 8006c4c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006c4e:	b13a      	cbz	r2, 8006c60 <_strtod_l+0xd0>
 8006c50:	2135      	movs	r1, #53	@ 0x35
 8006c52:	a81c      	add	r0, sp, #112	@ 0x70
 8006c54:	f7ff ff3a 	bl	8006acc <__copybits>
 8006c58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006c5a:	9805      	ldr	r0, [sp, #20]
 8006c5c:	f7ff fb08 	bl	8006270 <_Bfree>
 8006c60:	3e01      	subs	r6, #1
 8006c62:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006c64:	2e04      	cmp	r6, #4
 8006c66:	d806      	bhi.n	8006c76 <_strtod_l+0xe6>
 8006c68:	e8df f006 	tbb	[pc, r6]
 8006c6c:	201d0314 	.word	0x201d0314
 8006c70:	14          	.byte	0x14
 8006c71:	00          	.byte	0x00
 8006c72:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006c76:	05e1      	lsls	r1, r4, #23
 8006c78:	bf48      	it	mi
 8006c7a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006c7e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006c82:	0d1b      	lsrs	r3, r3, #20
 8006c84:	051b      	lsls	r3, r3, #20
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d1bb      	bne.n	8006c02 <_strtod_l+0x72>
 8006c8a:	f7fe fb11 	bl	80052b0 <__errno>
 8006c8e:	2322      	movs	r3, #34	@ 0x22
 8006c90:	6003      	str	r3, [r0, #0]
 8006c92:	e7b6      	b.n	8006c02 <_strtod_l+0x72>
 8006c94:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006c98:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006c9c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006ca0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006ca4:	e7e7      	b.n	8006c76 <_strtod_l+0xe6>
 8006ca6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006e24 <_strtod_l+0x294>
 8006caa:	e7e4      	b.n	8006c76 <_strtod_l+0xe6>
 8006cac:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006cb0:	f04f 3aff 	mov.w	sl, #4294967295
 8006cb4:	e7df      	b.n	8006c76 <_strtod_l+0xe6>
 8006cb6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006cb8:	1c5a      	adds	r2, r3, #1
 8006cba:	9219      	str	r2, [sp, #100]	@ 0x64
 8006cbc:	785b      	ldrb	r3, [r3, #1]
 8006cbe:	2b30      	cmp	r3, #48	@ 0x30
 8006cc0:	d0f9      	beq.n	8006cb6 <_strtod_l+0x126>
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d09d      	beq.n	8006c02 <_strtod_l+0x72>
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ccc:	930c      	str	r3, [sp, #48]	@ 0x30
 8006cce:	2300      	movs	r3, #0
 8006cd0:	9308      	str	r3, [sp, #32]
 8006cd2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006cd4:	461f      	mov	r7, r3
 8006cd6:	220a      	movs	r2, #10
 8006cd8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006cda:	7805      	ldrb	r5, [r0, #0]
 8006cdc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006ce0:	b2d9      	uxtb	r1, r3
 8006ce2:	2909      	cmp	r1, #9
 8006ce4:	d928      	bls.n	8006d38 <_strtod_l+0x1a8>
 8006ce6:	494e      	ldr	r1, [pc, #312]	@ (8006e20 <_strtod_l+0x290>)
 8006ce8:	2201      	movs	r2, #1
 8006cea:	f000 ffe7 	bl	8007cbc <strncmp>
 8006cee:	2800      	cmp	r0, #0
 8006cf0:	d032      	beq.n	8006d58 <_strtod_l+0x1c8>
 8006cf2:	2000      	movs	r0, #0
 8006cf4:	462a      	mov	r2, r5
 8006cf6:	4681      	mov	r9, r0
 8006cf8:	463d      	mov	r5, r7
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2a65      	cmp	r2, #101	@ 0x65
 8006cfe:	d001      	beq.n	8006d04 <_strtod_l+0x174>
 8006d00:	2a45      	cmp	r2, #69	@ 0x45
 8006d02:	d114      	bne.n	8006d2e <_strtod_l+0x19e>
 8006d04:	b91d      	cbnz	r5, 8006d0e <_strtod_l+0x17e>
 8006d06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d08:	4302      	orrs	r2, r0
 8006d0a:	d095      	beq.n	8006c38 <_strtod_l+0xa8>
 8006d0c:	2500      	movs	r5, #0
 8006d0e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006d10:	1c62      	adds	r2, r4, #1
 8006d12:	9219      	str	r2, [sp, #100]	@ 0x64
 8006d14:	7862      	ldrb	r2, [r4, #1]
 8006d16:	2a2b      	cmp	r2, #43	@ 0x2b
 8006d18:	d077      	beq.n	8006e0a <_strtod_l+0x27a>
 8006d1a:	2a2d      	cmp	r2, #45	@ 0x2d
 8006d1c:	d07b      	beq.n	8006e16 <_strtod_l+0x286>
 8006d1e:	f04f 0c00 	mov.w	ip, #0
 8006d22:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006d26:	2909      	cmp	r1, #9
 8006d28:	f240 8082 	bls.w	8006e30 <_strtod_l+0x2a0>
 8006d2c:	9419      	str	r4, [sp, #100]	@ 0x64
 8006d2e:	f04f 0800 	mov.w	r8, #0
 8006d32:	e0a2      	b.n	8006e7a <_strtod_l+0x2ea>
 8006d34:	2300      	movs	r3, #0
 8006d36:	e7c7      	b.n	8006cc8 <_strtod_l+0x138>
 8006d38:	2f08      	cmp	r7, #8
 8006d3a:	bfd5      	itete	le
 8006d3c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006d3e:	9908      	ldrgt	r1, [sp, #32]
 8006d40:	fb02 3301 	mlale	r3, r2, r1, r3
 8006d44:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006d48:	f100 0001 	add.w	r0, r0, #1
 8006d4c:	bfd4      	ite	le
 8006d4e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006d50:	9308      	strgt	r3, [sp, #32]
 8006d52:	3701      	adds	r7, #1
 8006d54:	9019      	str	r0, [sp, #100]	@ 0x64
 8006d56:	e7bf      	b.n	8006cd8 <_strtod_l+0x148>
 8006d58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006d5a:	1c5a      	adds	r2, r3, #1
 8006d5c:	9219      	str	r2, [sp, #100]	@ 0x64
 8006d5e:	785a      	ldrb	r2, [r3, #1]
 8006d60:	b37f      	cbz	r7, 8006dc2 <_strtod_l+0x232>
 8006d62:	4681      	mov	r9, r0
 8006d64:	463d      	mov	r5, r7
 8006d66:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006d6a:	2b09      	cmp	r3, #9
 8006d6c:	d912      	bls.n	8006d94 <_strtod_l+0x204>
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e7c4      	b.n	8006cfc <_strtod_l+0x16c>
 8006d72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006d74:	1c5a      	adds	r2, r3, #1
 8006d76:	9219      	str	r2, [sp, #100]	@ 0x64
 8006d78:	785a      	ldrb	r2, [r3, #1]
 8006d7a:	3001      	adds	r0, #1
 8006d7c:	2a30      	cmp	r2, #48	@ 0x30
 8006d7e:	d0f8      	beq.n	8006d72 <_strtod_l+0x1e2>
 8006d80:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006d84:	2b08      	cmp	r3, #8
 8006d86:	f200 84d3 	bhi.w	8007730 <_strtod_l+0xba0>
 8006d8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006d8c:	930c      	str	r3, [sp, #48]	@ 0x30
 8006d8e:	4681      	mov	r9, r0
 8006d90:	2000      	movs	r0, #0
 8006d92:	4605      	mov	r5, r0
 8006d94:	3a30      	subs	r2, #48	@ 0x30
 8006d96:	f100 0301 	add.w	r3, r0, #1
 8006d9a:	d02a      	beq.n	8006df2 <_strtod_l+0x262>
 8006d9c:	4499      	add	r9, r3
 8006d9e:	eb00 0c05 	add.w	ip, r0, r5
 8006da2:	462b      	mov	r3, r5
 8006da4:	210a      	movs	r1, #10
 8006da6:	4563      	cmp	r3, ip
 8006da8:	d10d      	bne.n	8006dc6 <_strtod_l+0x236>
 8006daa:	1c69      	adds	r1, r5, #1
 8006dac:	4401      	add	r1, r0
 8006dae:	4428      	add	r0, r5
 8006db0:	2808      	cmp	r0, #8
 8006db2:	dc16      	bgt.n	8006de2 <_strtod_l+0x252>
 8006db4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006db6:	230a      	movs	r3, #10
 8006db8:	fb03 2300 	mla	r3, r3, r0, r2
 8006dbc:	930a      	str	r3, [sp, #40]	@ 0x28
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	e018      	b.n	8006df4 <_strtod_l+0x264>
 8006dc2:	4638      	mov	r0, r7
 8006dc4:	e7da      	b.n	8006d7c <_strtod_l+0x1ec>
 8006dc6:	2b08      	cmp	r3, #8
 8006dc8:	f103 0301 	add.w	r3, r3, #1
 8006dcc:	dc03      	bgt.n	8006dd6 <_strtod_l+0x246>
 8006dce:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006dd0:	434e      	muls	r6, r1
 8006dd2:	960a      	str	r6, [sp, #40]	@ 0x28
 8006dd4:	e7e7      	b.n	8006da6 <_strtod_l+0x216>
 8006dd6:	2b10      	cmp	r3, #16
 8006dd8:	bfde      	ittt	le
 8006dda:	9e08      	ldrle	r6, [sp, #32]
 8006ddc:	434e      	mulle	r6, r1
 8006dde:	9608      	strle	r6, [sp, #32]
 8006de0:	e7e1      	b.n	8006da6 <_strtod_l+0x216>
 8006de2:	280f      	cmp	r0, #15
 8006de4:	dceb      	bgt.n	8006dbe <_strtod_l+0x22e>
 8006de6:	9808      	ldr	r0, [sp, #32]
 8006de8:	230a      	movs	r3, #10
 8006dea:	fb03 2300 	mla	r3, r3, r0, r2
 8006dee:	9308      	str	r3, [sp, #32]
 8006df0:	e7e5      	b.n	8006dbe <_strtod_l+0x22e>
 8006df2:	4629      	mov	r1, r5
 8006df4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006df6:	1c50      	adds	r0, r2, #1
 8006df8:	9019      	str	r0, [sp, #100]	@ 0x64
 8006dfa:	7852      	ldrb	r2, [r2, #1]
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	460d      	mov	r5, r1
 8006e00:	e7b1      	b.n	8006d66 <_strtod_l+0x1d6>
 8006e02:	f04f 0900 	mov.w	r9, #0
 8006e06:	2301      	movs	r3, #1
 8006e08:	e77d      	b.n	8006d06 <_strtod_l+0x176>
 8006e0a:	f04f 0c00 	mov.w	ip, #0
 8006e0e:	1ca2      	adds	r2, r4, #2
 8006e10:	9219      	str	r2, [sp, #100]	@ 0x64
 8006e12:	78a2      	ldrb	r2, [r4, #2]
 8006e14:	e785      	b.n	8006d22 <_strtod_l+0x192>
 8006e16:	f04f 0c01 	mov.w	ip, #1
 8006e1a:	e7f8      	b.n	8006e0e <_strtod_l+0x27e>
 8006e1c:	08008ce0 	.word	0x08008ce0
 8006e20:	08008cc8 	.word	0x08008cc8
 8006e24:	7ff00000 	.word	0x7ff00000
 8006e28:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006e2a:	1c51      	adds	r1, r2, #1
 8006e2c:	9119      	str	r1, [sp, #100]	@ 0x64
 8006e2e:	7852      	ldrb	r2, [r2, #1]
 8006e30:	2a30      	cmp	r2, #48	@ 0x30
 8006e32:	d0f9      	beq.n	8006e28 <_strtod_l+0x298>
 8006e34:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006e38:	2908      	cmp	r1, #8
 8006e3a:	f63f af78 	bhi.w	8006d2e <_strtod_l+0x19e>
 8006e3e:	3a30      	subs	r2, #48	@ 0x30
 8006e40:	920e      	str	r2, [sp, #56]	@ 0x38
 8006e42:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006e44:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006e46:	f04f 080a 	mov.w	r8, #10
 8006e4a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006e4c:	1c56      	adds	r6, r2, #1
 8006e4e:	9619      	str	r6, [sp, #100]	@ 0x64
 8006e50:	7852      	ldrb	r2, [r2, #1]
 8006e52:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006e56:	f1be 0f09 	cmp.w	lr, #9
 8006e5a:	d939      	bls.n	8006ed0 <_strtod_l+0x340>
 8006e5c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006e5e:	1a76      	subs	r6, r6, r1
 8006e60:	2e08      	cmp	r6, #8
 8006e62:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006e66:	dc03      	bgt.n	8006e70 <_strtod_l+0x2e0>
 8006e68:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006e6a:	4588      	cmp	r8, r1
 8006e6c:	bfa8      	it	ge
 8006e6e:	4688      	movge	r8, r1
 8006e70:	f1bc 0f00 	cmp.w	ip, #0
 8006e74:	d001      	beq.n	8006e7a <_strtod_l+0x2ea>
 8006e76:	f1c8 0800 	rsb	r8, r8, #0
 8006e7a:	2d00      	cmp	r5, #0
 8006e7c:	d14e      	bne.n	8006f1c <_strtod_l+0x38c>
 8006e7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006e80:	4308      	orrs	r0, r1
 8006e82:	f47f aebe 	bne.w	8006c02 <_strtod_l+0x72>
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	f47f aed6 	bne.w	8006c38 <_strtod_l+0xa8>
 8006e8c:	2a69      	cmp	r2, #105	@ 0x69
 8006e8e:	d028      	beq.n	8006ee2 <_strtod_l+0x352>
 8006e90:	dc25      	bgt.n	8006ede <_strtod_l+0x34e>
 8006e92:	2a49      	cmp	r2, #73	@ 0x49
 8006e94:	d025      	beq.n	8006ee2 <_strtod_l+0x352>
 8006e96:	2a4e      	cmp	r2, #78	@ 0x4e
 8006e98:	f47f aece 	bne.w	8006c38 <_strtod_l+0xa8>
 8006e9c:	499b      	ldr	r1, [pc, #620]	@ (800710c <_strtod_l+0x57c>)
 8006e9e:	a819      	add	r0, sp, #100	@ 0x64
 8006ea0:	f001 f9ea 	bl	8008278 <__match>
 8006ea4:	2800      	cmp	r0, #0
 8006ea6:	f43f aec7 	beq.w	8006c38 <_strtod_l+0xa8>
 8006eaa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	2b28      	cmp	r3, #40	@ 0x28
 8006eb0:	d12e      	bne.n	8006f10 <_strtod_l+0x380>
 8006eb2:	4997      	ldr	r1, [pc, #604]	@ (8007110 <_strtod_l+0x580>)
 8006eb4:	aa1c      	add	r2, sp, #112	@ 0x70
 8006eb6:	a819      	add	r0, sp, #100	@ 0x64
 8006eb8:	f001 f9f2 	bl	80082a0 <__hexnan>
 8006ebc:	2805      	cmp	r0, #5
 8006ebe:	d127      	bne.n	8006f10 <_strtod_l+0x380>
 8006ec0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006ec2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006ec6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006eca:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006ece:	e698      	b.n	8006c02 <_strtod_l+0x72>
 8006ed0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006ed2:	fb08 2101 	mla	r1, r8, r1, r2
 8006ed6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006eda:	920e      	str	r2, [sp, #56]	@ 0x38
 8006edc:	e7b5      	b.n	8006e4a <_strtod_l+0x2ba>
 8006ede:	2a6e      	cmp	r2, #110	@ 0x6e
 8006ee0:	e7da      	b.n	8006e98 <_strtod_l+0x308>
 8006ee2:	498c      	ldr	r1, [pc, #560]	@ (8007114 <_strtod_l+0x584>)
 8006ee4:	a819      	add	r0, sp, #100	@ 0x64
 8006ee6:	f001 f9c7 	bl	8008278 <__match>
 8006eea:	2800      	cmp	r0, #0
 8006eec:	f43f aea4 	beq.w	8006c38 <_strtod_l+0xa8>
 8006ef0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ef2:	4989      	ldr	r1, [pc, #548]	@ (8007118 <_strtod_l+0x588>)
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	a819      	add	r0, sp, #100	@ 0x64
 8006ef8:	9319      	str	r3, [sp, #100]	@ 0x64
 8006efa:	f001 f9bd 	bl	8008278 <__match>
 8006efe:	b910      	cbnz	r0, 8006f06 <_strtod_l+0x376>
 8006f00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006f02:	3301      	adds	r3, #1
 8006f04:	9319      	str	r3, [sp, #100]	@ 0x64
 8006f06:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007128 <_strtod_l+0x598>
 8006f0a:	f04f 0a00 	mov.w	sl, #0
 8006f0e:	e678      	b.n	8006c02 <_strtod_l+0x72>
 8006f10:	4882      	ldr	r0, [pc, #520]	@ (800711c <_strtod_l+0x58c>)
 8006f12:	f000 ff05 	bl	8007d20 <nan>
 8006f16:	ec5b ab10 	vmov	sl, fp, d0
 8006f1a:	e672      	b.n	8006c02 <_strtod_l+0x72>
 8006f1c:	eba8 0309 	sub.w	r3, r8, r9
 8006f20:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006f22:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f24:	2f00      	cmp	r7, #0
 8006f26:	bf08      	it	eq
 8006f28:	462f      	moveq	r7, r5
 8006f2a:	2d10      	cmp	r5, #16
 8006f2c:	462c      	mov	r4, r5
 8006f2e:	bfa8      	it	ge
 8006f30:	2410      	movge	r4, #16
 8006f32:	f7f9 fae7 	bl	8000504 <__aeabi_ui2d>
 8006f36:	2d09      	cmp	r5, #9
 8006f38:	4682      	mov	sl, r0
 8006f3a:	468b      	mov	fp, r1
 8006f3c:	dc13      	bgt.n	8006f66 <_strtod_l+0x3d6>
 8006f3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f43f ae5e 	beq.w	8006c02 <_strtod_l+0x72>
 8006f46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f48:	dd78      	ble.n	800703c <_strtod_l+0x4ac>
 8006f4a:	2b16      	cmp	r3, #22
 8006f4c:	dc5f      	bgt.n	800700e <_strtod_l+0x47e>
 8006f4e:	4974      	ldr	r1, [pc, #464]	@ (8007120 <_strtod_l+0x590>)
 8006f50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006f54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f58:	4652      	mov	r2, sl
 8006f5a:	465b      	mov	r3, fp
 8006f5c:	f7f9 fb4c 	bl	80005f8 <__aeabi_dmul>
 8006f60:	4682      	mov	sl, r0
 8006f62:	468b      	mov	fp, r1
 8006f64:	e64d      	b.n	8006c02 <_strtod_l+0x72>
 8006f66:	4b6e      	ldr	r3, [pc, #440]	@ (8007120 <_strtod_l+0x590>)
 8006f68:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006f6c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006f70:	f7f9 fb42 	bl	80005f8 <__aeabi_dmul>
 8006f74:	4682      	mov	sl, r0
 8006f76:	9808      	ldr	r0, [sp, #32]
 8006f78:	468b      	mov	fp, r1
 8006f7a:	f7f9 fac3 	bl	8000504 <__aeabi_ui2d>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	460b      	mov	r3, r1
 8006f82:	4650      	mov	r0, sl
 8006f84:	4659      	mov	r1, fp
 8006f86:	f7f9 f981 	bl	800028c <__adddf3>
 8006f8a:	2d0f      	cmp	r5, #15
 8006f8c:	4682      	mov	sl, r0
 8006f8e:	468b      	mov	fp, r1
 8006f90:	ddd5      	ble.n	8006f3e <_strtod_l+0x3ae>
 8006f92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f94:	1b2c      	subs	r4, r5, r4
 8006f96:	441c      	add	r4, r3
 8006f98:	2c00      	cmp	r4, #0
 8006f9a:	f340 8096 	ble.w	80070ca <_strtod_l+0x53a>
 8006f9e:	f014 030f 	ands.w	r3, r4, #15
 8006fa2:	d00a      	beq.n	8006fba <_strtod_l+0x42a>
 8006fa4:	495e      	ldr	r1, [pc, #376]	@ (8007120 <_strtod_l+0x590>)
 8006fa6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006faa:	4652      	mov	r2, sl
 8006fac:	465b      	mov	r3, fp
 8006fae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fb2:	f7f9 fb21 	bl	80005f8 <__aeabi_dmul>
 8006fb6:	4682      	mov	sl, r0
 8006fb8:	468b      	mov	fp, r1
 8006fba:	f034 040f 	bics.w	r4, r4, #15
 8006fbe:	d073      	beq.n	80070a8 <_strtod_l+0x518>
 8006fc0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006fc4:	dd48      	ble.n	8007058 <_strtod_l+0x4c8>
 8006fc6:	2400      	movs	r4, #0
 8006fc8:	46a0      	mov	r8, r4
 8006fca:	940a      	str	r4, [sp, #40]	@ 0x28
 8006fcc:	46a1      	mov	r9, r4
 8006fce:	9a05      	ldr	r2, [sp, #20]
 8006fd0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007128 <_strtod_l+0x598>
 8006fd4:	2322      	movs	r3, #34	@ 0x22
 8006fd6:	6013      	str	r3, [r2, #0]
 8006fd8:	f04f 0a00 	mov.w	sl, #0
 8006fdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	f43f ae0f 	beq.w	8006c02 <_strtod_l+0x72>
 8006fe4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006fe6:	9805      	ldr	r0, [sp, #20]
 8006fe8:	f7ff f942 	bl	8006270 <_Bfree>
 8006fec:	9805      	ldr	r0, [sp, #20]
 8006fee:	4649      	mov	r1, r9
 8006ff0:	f7ff f93e 	bl	8006270 <_Bfree>
 8006ff4:	9805      	ldr	r0, [sp, #20]
 8006ff6:	4641      	mov	r1, r8
 8006ff8:	f7ff f93a 	bl	8006270 <_Bfree>
 8006ffc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006ffe:	9805      	ldr	r0, [sp, #20]
 8007000:	f7ff f936 	bl	8006270 <_Bfree>
 8007004:	9805      	ldr	r0, [sp, #20]
 8007006:	4621      	mov	r1, r4
 8007008:	f7ff f932 	bl	8006270 <_Bfree>
 800700c:	e5f9      	b.n	8006c02 <_strtod_l+0x72>
 800700e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007010:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007014:	4293      	cmp	r3, r2
 8007016:	dbbc      	blt.n	8006f92 <_strtod_l+0x402>
 8007018:	4c41      	ldr	r4, [pc, #260]	@ (8007120 <_strtod_l+0x590>)
 800701a:	f1c5 050f 	rsb	r5, r5, #15
 800701e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007022:	4652      	mov	r2, sl
 8007024:	465b      	mov	r3, fp
 8007026:	e9d1 0100 	ldrd	r0, r1, [r1]
 800702a:	f7f9 fae5 	bl	80005f8 <__aeabi_dmul>
 800702e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007030:	1b5d      	subs	r5, r3, r5
 8007032:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007036:	e9d4 2300 	ldrd	r2, r3, [r4]
 800703a:	e78f      	b.n	8006f5c <_strtod_l+0x3cc>
 800703c:	3316      	adds	r3, #22
 800703e:	dba8      	blt.n	8006f92 <_strtod_l+0x402>
 8007040:	4b37      	ldr	r3, [pc, #220]	@ (8007120 <_strtod_l+0x590>)
 8007042:	eba9 0808 	sub.w	r8, r9, r8
 8007046:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800704a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800704e:	4650      	mov	r0, sl
 8007050:	4659      	mov	r1, fp
 8007052:	f7f9 fbfb 	bl	800084c <__aeabi_ddiv>
 8007056:	e783      	b.n	8006f60 <_strtod_l+0x3d0>
 8007058:	4b32      	ldr	r3, [pc, #200]	@ (8007124 <_strtod_l+0x594>)
 800705a:	9308      	str	r3, [sp, #32]
 800705c:	2300      	movs	r3, #0
 800705e:	1124      	asrs	r4, r4, #4
 8007060:	4650      	mov	r0, sl
 8007062:	4659      	mov	r1, fp
 8007064:	461e      	mov	r6, r3
 8007066:	2c01      	cmp	r4, #1
 8007068:	dc21      	bgt.n	80070ae <_strtod_l+0x51e>
 800706a:	b10b      	cbz	r3, 8007070 <_strtod_l+0x4e0>
 800706c:	4682      	mov	sl, r0
 800706e:	468b      	mov	fp, r1
 8007070:	492c      	ldr	r1, [pc, #176]	@ (8007124 <_strtod_l+0x594>)
 8007072:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007076:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800707a:	4652      	mov	r2, sl
 800707c:	465b      	mov	r3, fp
 800707e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007082:	f7f9 fab9 	bl	80005f8 <__aeabi_dmul>
 8007086:	4b28      	ldr	r3, [pc, #160]	@ (8007128 <_strtod_l+0x598>)
 8007088:	460a      	mov	r2, r1
 800708a:	400b      	ands	r3, r1
 800708c:	4927      	ldr	r1, [pc, #156]	@ (800712c <_strtod_l+0x59c>)
 800708e:	428b      	cmp	r3, r1
 8007090:	4682      	mov	sl, r0
 8007092:	d898      	bhi.n	8006fc6 <_strtod_l+0x436>
 8007094:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007098:	428b      	cmp	r3, r1
 800709a:	bf86      	itte	hi
 800709c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007130 <_strtod_l+0x5a0>
 80070a0:	f04f 3aff 	movhi.w	sl, #4294967295
 80070a4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80070a8:	2300      	movs	r3, #0
 80070aa:	9308      	str	r3, [sp, #32]
 80070ac:	e07a      	b.n	80071a4 <_strtod_l+0x614>
 80070ae:	07e2      	lsls	r2, r4, #31
 80070b0:	d505      	bpl.n	80070be <_strtod_l+0x52e>
 80070b2:	9b08      	ldr	r3, [sp, #32]
 80070b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b8:	f7f9 fa9e 	bl	80005f8 <__aeabi_dmul>
 80070bc:	2301      	movs	r3, #1
 80070be:	9a08      	ldr	r2, [sp, #32]
 80070c0:	3208      	adds	r2, #8
 80070c2:	3601      	adds	r6, #1
 80070c4:	1064      	asrs	r4, r4, #1
 80070c6:	9208      	str	r2, [sp, #32]
 80070c8:	e7cd      	b.n	8007066 <_strtod_l+0x4d6>
 80070ca:	d0ed      	beq.n	80070a8 <_strtod_l+0x518>
 80070cc:	4264      	negs	r4, r4
 80070ce:	f014 020f 	ands.w	r2, r4, #15
 80070d2:	d00a      	beq.n	80070ea <_strtod_l+0x55a>
 80070d4:	4b12      	ldr	r3, [pc, #72]	@ (8007120 <_strtod_l+0x590>)
 80070d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070da:	4650      	mov	r0, sl
 80070dc:	4659      	mov	r1, fp
 80070de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e2:	f7f9 fbb3 	bl	800084c <__aeabi_ddiv>
 80070e6:	4682      	mov	sl, r0
 80070e8:	468b      	mov	fp, r1
 80070ea:	1124      	asrs	r4, r4, #4
 80070ec:	d0dc      	beq.n	80070a8 <_strtod_l+0x518>
 80070ee:	2c1f      	cmp	r4, #31
 80070f0:	dd20      	ble.n	8007134 <_strtod_l+0x5a4>
 80070f2:	2400      	movs	r4, #0
 80070f4:	46a0      	mov	r8, r4
 80070f6:	940a      	str	r4, [sp, #40]	@ 0x28
 80070f8:	46a1      	mov	r9, r4
 80070fa:	9a05      	ldr	r2, [sp, #20]
 80070fc:	2322      	movs	r3, #34	@ 0x22
 80070fe:	f04f 0a00 	mov.w	sl, #0
 8007102:	f04f 0b00 	mov.w	fp, #0
 8007106:	6013      	str	r3, [r2, #0]
 8007108:	e768      	b.n	8006fdc <_strtod_l+0x44c>
 800710a:	bf00      	nop
 800710c:	08008a94 	.word	0x08008a94
 8007110:	08008ccc 	.word	0x08008ccc
 8007114:	08008a8c 	.word	0x08008a8c
 8007118:	08008aff 	.word	0x08008aff
 800711c:	08008afb 	.word	0x08008afb
 8007120:	08008c00 	.word	0x08008c00
 8007124:	08008bd8 	.word	0x08008bd8
 8007128:	7ff00000 	.word	0x7ff00000
 800712c:	7ca00000 	.word	0x7ca00000
 8007130:	7fefffff 	.word	0x7fefffff
 8007134:	f014 0310 	ands.w	r3, r4, #16
 8007138:	bf18      	it	ne
 800713a:	236a      	movne	r3, #106	@ 0x6a
 800713c:	4ea9      	ldr	r6, [pc, #676]	@ (80073e4 <_strtod_l+0x854>)
 800713e:	9308      	str	r3, [sp, #32]
 8007140:	4650      	mov	r0, sl
 8007142:	4659      	mov	r1, fp
 8007144:	2300      	movs	r3, #0
 8007146:	07e2      	lsls	r2, r4, #31
 8007148:	d504      	bpl.n	8007154 <_strtod_l+0x5c4>
 800714a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800714e:	f7f9 fa53 	bl	80005f8 <__aeabi_dmul>
 8007152:	2301      	movs	r3, #1
 8007154:	1064      	asrs	r4, r4, #1
 8007156:	f106 0608 	add.w	r6, r6, #8
 800715a:	d1f4      	bne.n	8007146 <_strtod_l+0x5b6>
 800715c:	b10b      	cbz	r3, 8007162 <_strtod_l+0x5d2>
 800715e:	4682      	mov	sl, r0
 8007160:	468b      	mov	fp, r1
 8007162:	9b08      	ldr	r3, [sp, #32]
 8007164:	b1b3      	cbz	r3, 8007194 <_strtod_l+0x604>
 8007166:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800716a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800716e:	2b00      	cmp	r3, #0
 8007170:	4659      	mov	r1, fp
 8007172:	dd0f      	ble.n	8007194 <_strtod_l+0x604>
 8007174:	2b1f      	cmp	r3, #31
 8007176:	dd55      	ble.n	8007224 <_strtod_l+0x694>
 8007178:	2b34      	cmp	r3, #52	@ 0x34
 800717a:	bfde      	ittt	le
 800717c:	f04f 33ff 	movle.w	r3, #4294967295
 8007180:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007184:	4093      	lslle	r3, r2
 8007186:	f04f 0a00 	mov.w	sl, #0
 800718a:	bfcc      	ite	gt
 800718c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007190:	ea03 0b01 	andle.w	fp, r3, r1
 8007194:	2200      	movs	r2, #0
 8007196:	2300      	movs	r3, #0
 8007198:	4650      	mov	r0, sl
 800719a:	4659      	mov	r1, fp
 800719c:	f7f9 fc94 	bl	8000ac8 <__aeabi_dcmpeq>
 80071a0:	2800      	cmp	r0, #0
 80071a2:	d1a6      	bne.n	80070f2 <_strtod_l+0x562>
 80071a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80071aa:	9805      	ldr	r0, [sp, #20]
 80071ac:	462b      	mov	r3, r5
 80071ae:	463a      	mov	r2, r7
 80071b0:	f7ff f8c6 	bl	8006340 <__s2b>
 80071b4:	900a      	str	r0, [sp, #40]	@ 0x28
 80071b6:	2800      	cmp	r0, #0
 80071b8:	f43f af05 	beq.w	8006fc6 <_strtod_l+0x436>
 80071bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071be:	2a00      	cmp	r2, #0
 80071c0:	eba9 0308 	sub.w	r3, r9, r8
 80071c4:	bfa8      	it	ge
 80071c6:	2300      	movge	r3, #0
 80071c8:	9312      	str	r3, [sp, #72]	@ 0x48
 80071ca:	2400      	movs	r4, #0
 80071cc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80071d0:	9316      	str	r3, [sp, #88]	@ 0x58
 80071d2:	46a0      	mov	r8, r4
 80071d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071d6:	9805      	ldr	r0, [sp, #20]
 80071d8:	6859      	ldr	r1, [r3, #4]
 80071da:	f7ff f809 	bl	80061f0 <_Balloc>
 80071de:	4681      	mov	r9, r0
 80071e0:	2800      	cmp	r0, #0
 80071e2:	f43f aef4 	beq.w	8006fce <_strtod_l+0x43e>
 80071e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071e8:	691a      	ldr	r2, [r3, #16]
 80071ea:	3202      	adds	r2, #2
 80071ec:	f103 010c 	add.w	r1, r3, #12
 80071f0:	0092      	lsls	r2, r2, #2
 80071f2:	300c      	adds	r0, #12
 80071f4:	f000 fd84 	bl	8007d00 <memcpy>
 80071f8:	ec4b ab10 	vmov	d0, sl, fp
 80071fc:	9805      	ldr	r0, [sp, #20]
 80071fe:	aa1c      	add	r2, sp, #112	@ 0x70
 8007200:	a91b      	add	r1, sp, #108	@ 0x6c
 8007202:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007206:	f7ff fbd7 	bl	80069b8 <__d2b>
 800720a:	901a      	str	r0, [sp, #104]	@ 0x68
 800720c:	2800      	cmp	r0, #0
 800720e:	f43f aede 	beq.w	8006fce <_strtod_l+0x43e>
 8007212:	9805      	ldr	r0, [sp, #20]
 8007214:	2101      	movs	r1, #1
 8007216:	f7ff f929 	bl	800646c <__i2b>
 800721a:	4680      	mov	r8, r0
 800721c:	b948      	cbnz	r0, 8007232 <_strtod_l+0x6a2>
 800721e:	f04f 0800 	mov.w	r8, #0
 8007222:	e6d4      	b.n	8006fce <_strtod_l+0x43e>
 8007224:	f04f 32ff 	mov.w	r2, #4294967295
 8007228:	fa02 f303 	lsl.w	r3, r2, r3
 800722c:	ea03 0a0a 	and.w	sl, r3, sl
 8007230:	e7b0      	b.n	8007194 <_strtod_l+0x604>
 8007232:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007234:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007236:	2d00      	cmp	r5, #0
 8007238:	bfab      	itete	ge
 800723a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800723c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800723e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007240:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007242:	bfac      	ite	ge
 8007244:	18ef      	addge	r7, r5, r3
 8007246:	1b5e      	sublt	r6, r3, r5
 8007248:	9b08      	ldr	r3, [sp, #32]
 800724a:	1aed      	subs	r5, r5, r3
 800724c:	4415      	add	r5, r2
 800724e:	4b66      	ldr	r3, [pc, #408]	@ (80073e8 <_strtod_l+0x858>)
 8007250:	3d01      	subs	r5, #1
 8007252:	429d      	cmp	r5, r3
 8007254:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007258:	da50      	bge.n	80072fc <_strtod_l+0x76c>
 800725a:	1b5b      	subs	r3, r3, r5
 800725c:	2b1f      	cmp	r3, #31
 800725e:	eba2 0203 	sub.w	r2, r2, r3
 8007262:	f04f 0101 	mov.w	r1, #1
 8007266:	dc3d      	bgt.n	80072e4 <_strtod_l+0x754>
 8007268:	fa01 f303 	lsl.w	r3, r1, r3
 800726c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800726e:	2300      	movs	r3, #0
 8007270:	9310      	str	r3, [sp, #64]	@ 0x40
 8007272:	18bd      	adds	r5, r7, r2
 8007274:	9b08      	ldr	r3, [sp, #32]
 8007276:	42af      	cmp	r7, r5
 8007278:	4416      	add	r6, r2
 800727a:	441e      	add	r6, r3
 800727c:	463b      	mov	r3, r7
 800727e:	bfa8      	it	ge
 8007280:	462b      	movge	r3, r5
 8007282:	42b3      	cmp	r3, r6
 8007284:	bfa8      	it	ge
 8007286:	4633      	movge	r3, r6
 8007288:	2b00      	cmp	r3, #0
 800728a:	bfc2      	ittt	gt
 800728c:	1aed      	subgt	r5, r5, r3
 800728e:	1af6      	subgt	r6, r6, r3
 8007290:	1aff      	subgt	r7, r7, r3
 8007292:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007294:	2b00      	cmp	r3, #0
 8007296:	dd16      	ble.n	80072c6 <_strtod_l+0x736>
 8007298:	4641      	mov	r1, r8
 800729a:	9805      	ldr	r0, [sp, #20]
 800729c:	461a      	mov	r2, r3
 800729e:	f7ff f9a5 	bl	80065ec <__pow5mult>
 80072a2:	4680      	mov	r8, r0
 80072a4:	2800      	cmp	r0, #0
 80072a6:	d0ba      	beq.n	800721e <_strtod_l+0x68e>
 80072a8:	4601      	mov	r1, r0
 80072aa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80072ac:	9805      	ldr	r0, [sp, #20]
 80072ae:	f7ff f8f3 	bl	8006498 <__multiply>
 80072b2:	900e      	str	r0, [sp, #56]	@ 0x38
 80072b4:	2800      	cmp	r0, #0
 80072b6:	f43f ae8a 	beq.w	8006fce <_strtod_l+0x43e>
 80072ba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80072bc:	9805      	ldr	r0, [sp, #20]
 80072be:	f7fe ffd7 	bl	8006270 <_Bfree>
 80072c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80072c6:	2d00      	cmp	r5, #0
 80072c8:	dc1d      	bgt.n	8007306 <_strtod_l+0x776>
 80072ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	dd23      	ble.n	8007318 <_strtod_l+0x788>
 80072d0:	4649      	mov	r1, r9
 80072d2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80072d4:	9805      	ldr	r0, [sp, #20]
 80072d6:	f7ff f989 	bl	80065ec <__pow5mult>
 80072da:	4681      	mov	r9, r0
 80072dc:	b9e0      	cbnz	r0, 8007318 <_strtod_l+0x788>
 80072de:	f04f 0900 	mov.w	r9, #0
 80072e2:	e674      	b.n	8006fce <_strtod_l+0x43e>
 80072e4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80072e8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80072ec:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80072f0:	35e2      	adds	r5, #226	@ 0xe2
 80072f2:	fa01 f305 	lsl.w	r3, r1, r5
 80072f6:	9310      	str	r3, [sp, #64]	@ 0x40
 80072f8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80072fa:	e7ba      	b.n	8007272 <_strtod_l+0x6e2>
 80072fc:	2300      	movs	r3, #0
 80072fe:	9310      	str	r3, [sp, #64]	@ 0x40
 8007300:	2301      	movs	r3, #1
 8007302:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007304:	e7b5      	b.n	8007272 <_strtod_l+0x6e2>
 8007306:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007308:	9805      	ldr	r0, [sp, #20]
 800730a:	462a      	mov	r2, r5
 800730c:	f7ff f9c8 	bl	80066a0 <__lshift>
 8007310:	901a      	str	r0, [sp, #104]	@ 0x68
 8007312:	2800      	cmp	r0, #0
 8007314:	d1d9      	bne.n	80072ca <_strtod_l+0x73a>
 8007316:	e65a      	b.n	8006fce <_strtod_l+0x43e>
 8007318:	2e00      	cmp	r6, #0
 800731a:	dd07      	ble.n	800732c <_strtod_l+0x79c>
 800731c:	4649      	mov	r1, r9
 800731e:	9805      	ldr	r0, [sp, #20]
 8007320:	4632      	mov	r2, r6
 8007322:	f7ff f9bd 	bl	80066a0 <__lshift>
 8007326:	4681      	mov	r9, r0
 8007328:	2800      	cmp	r0, #0
 800732a:	d0d8      	beq.n	80072de <_strtod_l+0x74e>
 800732c:	2f00      	cmp	r7, #0
 800732e:	dd08      	ble.n	8007342 <_strtod_l+0x7b2>
 8007330:	4641      	mov	r1, r8
 8007332:	9805      	ldr	r0, [sp, #20]
 8007334:	463a      	mov	r2, r7
 8007336:	f7ff f9b3 	bl	80066a0 <__lshift>
 800733a:	4680      	mov	r8, r0
 800733c:	2800      	cmp	r0, #0
 800733e:	f43f ae46 	beq.w	8006fce <_strtod_l+0x43e>
 8007342:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007344:	9805      	ldr	r0, [sp, #20]
 8007346:	464a      	mov	r2, r9
 8007348:	f7ff fa32 	bl	80067b0 <__mdiff>
 800734c:	4604      	mov	r4, r0
 800734e:	2800      	cmp	r0, #0
 8007350:	f43f ae3d 	beq.w	8006fce <_strtod_l+0x43e>
 8007354:	68c3      	ldr	r3, [r0, #12]
 8007356:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007358:	2300      	movs	r3, #0
 800735a:	60c3      	str	r3, [r0, #12]
 800735c:	4641      	mov	r1, r8
 800735e:	f7ff fa0b 	bl	8006778 <__mcmp>
 8007362:	2800      	cmp	r0, #0
 8007364:	da46      	bge.n	80073f4 <_strtod_l+0x864>
 8007366:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007368:	ea53 030a 	orrs.w	r3, r3, sl
 800736c:	d16c      	bne.n	8007448 <_strtod_l+0x8b8>
 800736e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007372:	2b00      	cmp	r3, #0
 8007374:	d168      	bne.n	8007448 <_strtod_l+0x8b8>
 8007376:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800737a:	0d1b      	lsrs	r3, r3, #20
 800737c:	051b      	lsls	r3, r3, #20
 800737e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007382:	d961      	bls.n	8007448 <_strtod_l+0x8b8>
 8007384:	6963      	ldr	r3, [r4, #20]
 8007386:	b913      	cbnz	r3, 800738e <_strtod_l+0x7fe>
 8007388:	6923      	ldr	r3, [r4, #16]
 800738a:	2b01      	cmp	r3, #1
 800738c:	dd5c      	ble.n	8007448 <_strtod_l+0x8b8>
 800738e:	4621      	mov	r1, r4
 8007390:	2201      	movs	r2, #1
 8007392:	9805      	ldr	r0, [sp, #20]
 8007394:	f7ff f984 	bl	80066a0 <__lshift>
 8007398:	4641      	mov	r1, r8
 800739a:	4604      	mov	r4, r0
 800739c:	f7ff f9ec 	bl	8006778 <__mcmp>
 80073a0:	2800      	cmp	r0, #0
 80073a2:	dd51      	ble.n	8007448 <_strtod_l+0x8b8>
 80073a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80073a8:	9a08      	ldr	r2, [sp, #32]
 80073aa:	0d1b      	lsrs	r3, r3, #20
 80073ac:	051b      	lsls	r3, r3, #20
 80073ae:	2a00      	cmp	r2, #0
 80073b0:	d06b      	beq.n	800748a <_strtod_l+0x8fa>
 80073b2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80073b6:	d868      	bhi.n	800748a <_strtod_l+0x8fa>
 80073b8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80073bc:	f67f ae9d 	bls.w	80070fa <_strtod_l+0x56a>
 80073c0:	4b0a      	ldr	r3, [pc, #40]	@ (80073ec <_strtod_l+0x85c>)
 80073c2:	4650      	mov	r0, sl
 80073c4:	4659      	mov	r1, fp
 80073c6:	2200      	movs	r2, #0
 80073c8:	f7f9 f916 	bl	80005f8 <__aeabi_dmul>
 80073cc:	4b08      	ldr	r3, [pc, #32]	@ (80073f0 <_strtod_l+0x860>)
 80073ce:	400b      	ands	r3, r1
 80073d0:	4682      	mov	sl, r0
 80073d2:	468b      	mov	fp, r1
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f47f ae05 	bne.w	8006fe4 <_strtod_l+0x454>
 80073da:	9a05      	ldr	r2, [sp, #20]
 80073dc:	2322      	movs	r3, #34	@ 0x22
 80073de:	6013      	str	r3, [r2, #0]
 80073e0:	e600      	b.n	8006fe4 <_strtod_l+0x454>
 80073e2:	bf00      	nop
 80073e4:	08008cf8 	.word	0x08008cf8
 80073e8:	fffffc02 	.word	0xfffffc02
 80073ec:	39500000 	.word	0x39500000
 80073f0:	7ff00000 	.word	0x7ff00000
 80073f4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80073f8:	d165      	bne.n	80074c6 <_strtod_l+0x936>
 80073fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80073fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007400:	b35a      	cbz	r2, 800745a <_strtod_l+0x8ca>
 8007402:	4a9f      	ldr	r2, [pc, #636]	@ (8007680 <_strtod_l+0xaf0>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d12b      	bne.n	8007460 <_strtod_l+0x8d0>
 8007408:	9b08      	ldr	r3, [sp, #32]
 800740a:	4651      	mov	r1, sl
 800740c:	b303      	cbz	r3, 8007450 <_strtod_l+0x8c0>
 800740e:	4b9d      	ldr	r3, [pc, #628]	@ (8007684 <_strtod_l+0xaf4>)
 8007410:	465a      	mov	r2, fp
 8007412:	4013      	ands	r3, r2
 8007414:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007418:	f04f 32ff 	mov.w	r2, #4294967295
 800741c:	d81b      	bhi.n	8007456 <_strtod_l+0x8c6>
 800741e:	0d1b      	lsrs	r3, r3, #20
 8007420:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007424:	fa02 f303 	lsl.w	r3, r2, r3
 8007428:	4299      	cmp	r1, r3
 800742a:	d119      	bne.n	8007460 <_strtod_l+0x8d0>
 800742c:	4b96      	ldr	r3, [pc, #600]	@ (8007688 <_strtod_l+0xaf8>)
 800742e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007430:	429a      	cmp	r2, r3
 8007432:	d102      	bne.n	800743a <_strtod_l+0x8aa>
 8007434:	3101      	adds	r1, #1
 8007436:	f43f adca 	beq.w	8006fce <_strtod_l+0x43e>
 800743a:	4b92      	ldr	r3, [pc, #584]	@ (8007684 <_strtod_l+0xaf4>)
 800743c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800743e:	401a      	ands	r2, r3
 8007440:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007444:	f04f 0a00 	mov.w	sl, #0
 8007448:	9b08      	ldr	r3, [sp, #32]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1b8      	bne.n	80073c0 <_strtod_l+0x830>
 800744e:	e5c9      	b.n	8006fe4 <_strtod_l+0x454>
 8007450:	f04f 33ff 	mov.w	r3, #4294967295
 8007454:	e7e8      	b.n	8007428 <_strtod_l+0x898>
 8007456:	4613      	mov	r3, r2
 8007458:	e7e6      	b.n	8007428 <_strtod_l+0x898>
 800745a:	ea53 030a 	orrs.w	r3, r3, sl
 800745e:	d0a1      	beq.n	80073a4 <_strtod_l+0x814>
 8007460:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007462:	b1db      	cbz	r3, 800749c <_strtod_l+0x90c>
 8007464:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007466:	4213      	tst	r3, r2
 8007468:	d0ee      	beq.n	8007448 <_strtod_l+0x8b8>
 800746a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800746c:	9a08      	ldr	r2, [sp, #32]
 800746e:	4650      	mov	r0, sl
 8007470:	4659      	mov	r1, fp
 8007472:	b1bb      	cbz	r3, 80074a4 <_strtod_l+0x914>
 8007474:	f7ff fb6e 	bl	8006b54 <sulp>
 8007478:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800747c:	ec53 2b10 	vmov	r2, r3, d0
 8007480:	f7f8 ff04 	bl	800028c <__adddf3>
 8007484:	4682      	mov	sl, r0
 8007486:	468b      	mov	fp, r1
 8007488:	e7de      	b.n	8007448 <_strtod_l+0x8b8>
 800748a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800748e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007492:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007496:	f04f 3aff 	mov.w	sl, #4294967295
 800749a:	e7d5      	b.n	8007448 <_strtod_l+0x8b8>
 800749c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800749e:	ea13 0f0a 	tst.w	r3, sl
 80074a2:	e7e1      	b.n	8007468 <_strtod_l+0x8d8>
 80074a4:	f7ff fb56 	bl	8006b54 <sulp>
 80074a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80074ac:	ec53 2b10 	vmov	r2, r3, d0
 80074b0:	f7f8 feea 	bl	8000288 <__aeabi_dsub>
 80074b4:	2200      	movs	r2, #0
 80074b6:	2300      	movs	r3, #0
 80074b8:	4682      	mov	sl, r0
 80074ba:	468b      	mov	fp, r1
 80074bc:	f7f9 fb04 	bl	8000ac8 <__aeabi_dcmpeq>
 80074c0:	2800      	cmp	r0, #0
 80074c2:	d0c1      	beq.n	8007448 <_strtod_l+0x8b8>
 80074c4:	e619      	b.n	80070fa <_strtod_l+0x56a>
 80074c6:	4641      	mov	r1, r8
 80074c8:	4620      	mov	r0, r4
 80074ca:	f7ff facd 	bl	8006a68 <__ratio>
 80074ce:	ec57 6b10 	vmov	r6, r7, d0
 80074d2:	2200      	movs	r2, #0
 80074d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80074d8:	4630      	mov	r0, r6
 80074da:	4639      	mov	r1, r7
 80074dc:	f7f9 fb08 	bl	8000af0 <__aeabi_dcmple>
 80074e0:	2800      	cmp	r0, #0
 80074e2:	d06f      	beq.n	80075c4 <_strtod_l+0xa34>
 80074e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d17a      	bne.n	80075e0 <_strtod_l+0xa50>
 80074ea:	f1ba 0f00 	cmp.w	sl, #0
 80074ee:	d158      	bne.n	80075a2 <_strtod_l+0xa12>
 80074f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d15a      	bne.n	80075b0 <_strtod_l+0xa20>
 80074fa:	4b64      	ldr	r3, [pc, #400]	@ (800768c <_strtod_l+0xafc>)
 80074fc:	2200      	movs	r2, #0
 80074fe:	4630      	mov	r0, r6
 8007500:	4639      	mov	r1, r7
 8007502:	f7f9 faeb 	bl	8000adc <__aeabi_dcmplt>
 8007506:	2800      	cmp	r0, #0
 8007508:	d159      	bne.n	80075be <_strtod_l+0xa2e>
 800750a:	4630      	mov	r0, r6
 800750c:	4639      	mov	r1, r7
 800750e:	4b60      	ldr	r3, [pc, #384]	@ (8007690 <_strtod_l+0xb00>)
 8007510:	2200      	movs	r2, #0
 8007512:	f7f9 f871 	bl	80005f8 <__aeabi_dmul>
 8007516:	4606      	mov	r6, r0
 8007518:	460f      	mov	r7, r1
 800751a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800751e:	9606      	str	r6, [sp, #24]
 8007520:	9307      	str	r3, [sp, #28]
 8007522:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007526:	4d57      	ldr	r5, [pc, #348]	@ (8007684 <_strtod_l+0xaf4>)
 8007528:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800752c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800752e:	401d      	ands	r5, r3
 8007530:	4b58      	ldr	r3, [pc, #352]	@ (8007694 <_strtod_l+0xb04>)
 8007532:	429d      	cmp	r5, r3
 8007534:	f040 80b2 	bne.w	800769c <_strtod_l+0xb0c>
 8007538:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800753a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800753e:	ec4b ab10 	vmov	d0, sl, fp
 8007542:	f7ff f9c9 	bl	80068d8 <__ulp>
 8007546:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800754a:	ec51 0b10 	vmov	r0, r1, d0
 800754e:	f7f9 f853 	bl	80005f8 <__aeabi_dmul>
 8007552:	4652      	mov	r2, sl
 8007554:	465b      	mov	r3, fp
 8007556:	f7f8 fe99 	bl	800028c <__adddf3>
 800755a:	460b      	mov	r3, r1
 800755c:	4949      	ldr	r1, [pc, #292]	@ (8007684 <_strtod_l+0xaf4>)
 800755e:	4a4e      	ldr	r2, [pc, #312]	@ (8007698 <_strtod_l+0xb08>)
 8007560:	4019      	ands	r1, r3
 8007562:	4291      	cmp	r1, r2
 8007564:	4682      	mov	sl, r0
 8007566:	d942      	bls.n	80075ee <_strtod_l+0xa5e>
 8007568:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800756a:	4b47      	ldr	r3, [pc, #284]	@ (8007688 <_strtod_l+0xaf8>)
 800756c:	429a      	cmp	r2, r3
 800756e:	d103      	bne.n	8007578 <_strtod_l+0x9e8>
 8007570:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007572:	3301      	adds	r3, #1
 8007574:	f43f ad2b 	beq.w	8006fce <_strtod_l+0x43e>
 8007578:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007688 <_strtod_l+0xaf8>
 800757c:	f04f 3aff 	mov.w	sl, #4294967295
 8007580:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007582:	9805      	ldr	r0, [sp, #20]
 8007584:	f7fe fe74 	bl	8006270 <_Bfree>
 8007588:	9805      	ldr	r0, [sp, #20]
 800758a:	4649      	mov	r1, r9
 800758c:	f7fe fe70 	bl	8006270 <_Bfree>
 8007590:	9805      	ldr	r0, [sp, #20]
 8007592:	4641      	mov	r1, r8
 8007594:	f7fe fe6c 	bl	8006270 <_Bfree>
 8007598:	9805      	ldr	r0, [sp, #20]
 800759a:	4621      	mov	r1, r4
 800759c:	f7fe fe68 	bl	8006270 <_Bfree>
 80075a0:	e618      	b.n	80071d4 <_strtod_l+0x644>
 80075a2:	f1ba 0f01 	cmp.w	sl, #1
 80075a6:	d103      	bne.n	80075b0 <_strtod_l+0xa20>
 80075a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	f43f ada5 	beq.w	80070fa <_strtod_l+0x56a>
 80075b0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007660 <_strtod_l+0xad0>
 80075b4:	4f35      	ldr	r7, [pc, #212]	@ (800768c <_strtod_l+0xafc>)
 80075b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80075ba:	2600      	movs	r6, #0
 80075bc:	e7b1      	b.n	8007522 <_strtod_l+0x992>
 80075be:	4f34      	ldr	r7, [pc, #208]	@ (8007690 <_strtod_l+0xb00>)
 80075c0:	2600      	movs	r6, #0
 80075c2:	e7aa      	b.n	800751a <_strtod_l+0x98a>
 80075c4:	4b32      	ldr	r3, [pc, #200]	@ (8007690 <_strtod_l+0xb00>)
 80075c6:	4630      	mov	r0, r6
 80075c8:	4639      	mov	r1, r7
 80075ca:	2200      	movs	r2, #0
 80075cc:	f7f9 f814 	bl	80005f8 <__aeabi_dmul>
 80075d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075d2:	4606      	mov	r6, r0
 80075d4:	460f      	mov	r7, r1
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d09f      	beq.n	800751a <_strtod_l+0x98a>
 80075da:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80075de:	e7a0      	b.n	8007522 <_strtod_l+0x992>
 80075e0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007668 <_strtod_l+0xad8>
 80075e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80075e8:	ec57 6b17 	vmov	r6, r7, d7
 80075ec:	e799      	b.n	8007522 <_strtod_l+0x992>
 80075ee:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80075f2:	9b08      	ldr	r3, [sp, #32]
 80075f4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d1c1      	bne.n	8007580 <_strtod_l+0x9f0>
 80075fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007600:	0d1b      	lsrs	r3, r3, #20
 8007602:	051b      	lsls	r3, r3, #20
 8007604:	429d      	cmp	r5, r3
 8007606:	d1bb      	bne.n	8007580 <_strtod_l+0x9f0>
 8007608:	4630      	mov	r0, r6
 800760a:	4639      	mov	r1, r7
 800760c:	f7f9 fb3c 	bl	8000c88 <__aeabi_d2lz>
 8007610:	f7f8 ffc4 	bl	800059c <__aeabi_l2d>
 8007614:	4602      	mov	r2, r0
 8007616:	460b      	mov	r3, r1
 8007618:	4630      	mov	r0, r6
 800761a:	4639      	mov	r1, r7
 800761c:	f7f8 fe34 	bl	8000288 <__aeabi_dsub>
 8007620:	460b      	mov	r3, r1
 8007622:	4602      	mov	r2, r0
 8007624:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007628:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800762c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800762e:	ea46 060a 	orr.w	r6, r6, sl
 8007632:	431e      	orrs	r6, r3
 8007634:	d06f      	beq.n	8007716 <_strtod_l+0xb86>
 8007636:	a30e      	add	r3, pc, #56	@ (adr r3, 8007670 <_strtod_l+0xae0>)
 8007638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800763c:	f7f9 fa4e 	bl	8000adc <__aeabi_dcmplt>
 8007640:	2800      	cmp	r0, #0
 8007642:	f47f accf 	bne.w	8006fe4 <_strtod_l+0x454>
 8007646:	a30c      	add	r3, pc, #48	@ (adr r3, 8007678 <_strtod_l+0xae8>)
 8007648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007650:	f7f9 fa62 	bl	8000b18 <__aeabi_dcmpgt>
 8007654:	2800      	cmp	r0, #0
 8007656:	d093      	beq.n	8007580 <_strtod_l+0x9f0>
 8007658:	e4c4      	b.n	8006fe4 <_strtod_l+0x454>
 800765a:	bf00      	nop
 800765c:	f3af 8000 	nop.w
 8007660:	00000000 	.word	0x00000000
 8007664:	bff00000 	.word	0xbff00000
 8007668:	00000000 	.word	0x00000000
 800766c:	3ff00000 	.word	0x3ff00000
 8007670:	94a03595 	.word	0x94a03595
 8007674:	3fdfffff 	.word	0x3fdfffff
 8007678:	35afe535 	.word	0x35afe535
 800767c:	3fe00000 	.word	0x3fe00000
 8007680:	000fffff 	.word	0x000fffff
 8007684:	7ff00000 	.word	0x7ff00000
 8007688:	7fefffff 	.word	0x7fefffff
 800768c:	3ff00000 	.word	0x3ff00000
 8007690:	3fe00000 	.word	0x3fe00000
 8007694:	7fe00000 	.word	0x7fe00000
 8007698:	7c9fffff 	.word	0x7c9fffff
 800769c:	9b08      	ldr	r3, [sp, #32]
 800769e:	b323      	cbz	r3, 80076ea <_strtod_l+0xb5a>
 80076a0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80076a4:	d821      	bhi.n	80076ea <_strtod_l+0xb5a>
 80076a6:	a328      	add	r3, pc, #160	@ (adr r3, 8007748 <_strtod_l+0xbb8>)
 80076a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ac:	4630      	mov	r0, r6
 80076ae:	4639      	mov	r1, r7
 80076b0:	f7f9 fa1e 	bl	8000af0 <__aeabi_dcmple>
 80076b4:	b1a0      	cbz	r0, 80076e0 <_strtod_l+0xb50>
 80076b6:	4639      	mov	r1, r7
 80076b8:	4630      	mov	r0, r6
 80076ba:	f7f9 fa75 	bl	8000ba8 <__aeabi_d2uiz>
 80076be:	2801      	cmp	r0, #1
 80076c0:	bf38      	it	cc
 80076c2:	2001      	movcc	r0, #1
 80076c4:	f7f8 ff1e 	bl	8000504 <__aeabi_ui2d>
 80076c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80076ca:	4606      	mov	r6, r0
 80076cc:	460f      	mov	r7, r1
 80076ce:	b9fb      	cbnz	r3, 8007710 <_strtod_l+0xb80>
 80076d0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80076d4:	9014      	str	r0, [sp, #80]	@ 0x50
 80076d6:	9315      	str	r3, [sp, #84]	@ 0x54
 80076d8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80076dc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80076e0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80076e2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80076e6:	1b5b      	subs	r3, r3, r5
 80076e8:	9311      	str	r3, [sp, #68]	@ 0x44
 80076ea:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80076ee:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80076f2:	f7ff f8f1 	bl	80068d8 <__ulp>
 80076f6:	4650      	mov	r0, sl
 80076f8:	ec53 2b10 	vmov	r2, r3, d0
 80076fc:	4659      	mov	r1, fp
 80076fe:	f7f8 ff7b 	bl	80005f8 <__aeabi_dmul>
 8007702:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007706:	f7f8 fdc1 	bl	800028c <__adddf3>
 800770a:	4682      	mov	sl, r0
 800770c:	468b      	mov	fp, r1
 800770e:	e770      	b.n	80075f2 <_strtod_l+0xa62>
 8007710:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007714:	e7e0      	b.n	80076d8 <_strtod_l+0xb48>
 8007716:	a30e      	add	r3, pc, #56	@ (adr r3, 8007750 <_strtod_l+0xbc0>)
 8007718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771c:	f7f9 f9de 	bl	8000adc <__aeabi_dcmplt>
 8007720:	e798      	b.n	8007654 <_strtod_l+0xac4>
 8007722:	2300      	movs	r3, #0
 8007724:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007726:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007728:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800772a:	6013      	str	r3, [r2, #0]
 800772c:	f7ff ba6d 	b.w	8006c0a <_strtod_l+0x7a>
 8007730:	2a65      	cmp	r2, #101	@ 0x65
 8007732:	f43f ab66 	beq.w	8006e02 <_strtod_l+0x272>
 8007736:	2a45      	cmp	r2, #69	@ 0x45
 8007738:	f43f ab63 	beq.w	8006e02 <_strtod_l+0x272>
 800773c:	2301      	movs	r3, #1
 800773e:	f7ff bb9e 	b.w	8006e7e <_strtod_l+0x2ee>
 8007742:	bf00      	nop
 8007744:	f3af 8000 	nop.w
 8007748:	ffc00000 	.word	0xffc00000
 800774c:	41dfffff 	.word	0x41dfffff
 8007750:	94a03595 	.word	0x94a03595
 8007754:	3fcfffff 	.word	0x3fcfffff

08007758 <_strtod_r>:
 8007758:	4b01      	ldr	r3, [pc, #4]	@ (8007760 <_strtod_r+0x8>)
 800775a:	f7ff ba19 	b.w	8006b90 <_strtod_l>
 800775e:	bf00      	nop
 8007760:	20000068 	.word	0x20000068

08007764 <_strtol_l.constprop.0>:
 8007764:	2b24      	cmp	r3, #36	@ 0x24
 8007766:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800776a:	4686      	mov	lr, r0
 800776c:	4690      	mov	r8, r2
 800776e:	d801      	bhi.n	8007774 <_strtol_l.constprop.0+0x10>
 8007770:	2b01      	cmp	r3, #1
 8007772:	d106      	bne.n	8007782 <_strtol_l.constprop.0+0x1e>
 8007774:	f7fd fd9c 	bl	80052b0 <__errno>
 8007778:	2316      	movs	r3, #22
 800777a:	6003      	str	r3, [r0, #0]
 800777c:	2000      	movs	r0, #0
 800777e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007782:	4834      	ldr	r0, [pc, #208]	@ (8007854 <_strtol_l.constprop.0+0xf0>)
 8007784:	460d      	mov	r5, r1
 8007786:	462a      	mov	r2, r5
 8007788:	f815 4b01 	ldrb.w	r4, [r5], #1
 800778c:	5d06      	ldrb	r6, [r0, r4]
 800778e:	f016 0608 	ands.w	r6, r6, #8
 8007792:	d1f8      	bne.n	8007786 <_strtol_l.constprop.0+0x22>
 8007794:	2c2d      	cmp	r4, #45	@ 0x2d
 8007796:	d12d      	bne.n	80077f4 <_strtol_l.constprop.0+0x90>
 8007798:	782c      	ldrb	r4, [r5, #0]
 800779a:	2601      	movs	r6, #1
 800779c:	1c95      	adds	r5, r2, #2
 800779e:	f033 0210 	bics.w	r2, r3, #16
 80077a2:	d109      	bne.n	80077b8 <_strtol_l.constprop.0+0x54>
 80077a4:	2c30      	cmp	r4, #48	@ 0x30
 80077a6:	d12a      	bne.n	80077fe <_strtol_l.constprop.0+0x9a>
 80077a8:	782a      	ldrb	r2, [r5, #0]
 80077aa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80077ae:	2a58      	cmp	r2, #88	@ 0x58
 80077b0:	d125      	bne.n	80077fe <_strtol_l.constprop.0+0x9a>
 80077b2:	786c      	ldrb	r4, [r5, #1]
 80077b4:	2310      	movs	r3, #16
 80077b6:	3502      	adds	r5, #2
 80077b8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80077bc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80077c0:	2200      	movs	r2, #0
 80077c2:	fbbc f9f3 	udiv	r9, ip, r3
 80077c6:	4610      	mov	r0, r2
 80077c8:	fb03 ca19 	mls	sl, r3, r9, ip
 80077cc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80077d0:	2f09      	cmp	r7, #9
 80077d2:	d81b      	bhi.n	800780c <_strtol_l.constprop.0+0xa8>
 80077d4:	463c      	mov	r4, r7
 80077d6:	42a3      	cmp	r3, r4
 80077d8:	dd27      	ble.n	800782a <_strtol_l.constprop.0+0xc6>
 80077da:	1c57      	adds	r7, r2, #1
 80077dc:	d007      	beq.n	80077ee <_strtol_l.constprop.0+0x8a>
 80077de:	4581      	cmp	r9, r0
 80077e0:	d320      	bcc.n	8007824 <_strtol_l.constprop.0+0xc0>
 80077e2:	d101      	bne.n	80077e8 <_strtol_l.constprop.0+0x84>
 80077e4:	45a2      	cmp	sl, r4
 80077e6:	db1d      	blt.n	8007824 <_strtol_l.constprop.0+0xc0>
 80077e8:	fb00 4003 	mla	r0, r0, r3, r4
 80077ec:	2201      	movs	r2, #1
 80077ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80077f2:	e7eb      	b.n	80077cc <_strtol_l.constprop.0+0x68>
 80077f4:	2c2b      	cmp	r4, #43	@ 0x2b
 80077f6:	bf04      	itt	eq
 80077f8:	782c      	ldrbeq	r4, [r5, #0]
 80077fa:	1c95      	addeq	r5, r2, #2
 80077fc:	e7cf      	b.n	800779e <_strtol_l.constprop.0+0x3a>
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d1da      	bne.n	80077b8 <_strtol_l.constprop.0+0x54>
 8007802:	2c30      	cmp	r4, #48	@ 0x30
 8007804:	bf0c      	ite	eq
 8007806:	2308      	moveq	r3, #8
 8007808:	230a      	movne	r3, #10
 800780a:	e7d5      	b.n	80077b8 <_strtol_l.constprop.0+0x54>
 800780c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007810:	2f19      	cmp	r7, #25
 8007812:	d801      	bhi.n	8007818 <_strtol_l.constprop.0+0xb4>
 8007814:	3c37      	subs	r4, #55	@ 0x37
 8007816:	e7de      	b.n	80077d6 <_strtol_l.constprop.0+0x72>
 8007818:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800781c:	2f19      	cmp	r7, #25
 800781e:	d804      	bhi.n	800782a <_strtol_l.constprop.0+0xc6>
 8007820:	3c57      	subs	r4, #87	@ 0x57
 8007822:	e7d8      	b.n	80077d6 <_strtol_l.constprop.0+0x72>
 8007824:	f04f 32ff 	mov.w	r2, #4294967295
 8007828:	e7e1      	b.n	80077ee <_strtol_l.constprop.0+0x8a>
 800782a:	1c53      	adds	r3, r2, #1
 800782c:	d108      	bne.n	8007840 <_strtol_l.constprop.0+0xdc>
 800782e:	2322      	movs	r3, #34	@ 0x22
 8007830:	f8ce 3000 	str.w	r3, [lr]
 8007834:	4660      	mov	r0, ip
 8007836:	f1b8 0f00 	cmp.w	r8, #0
 800783a:	d0a0      	beq.n	800777e <_strtol_l.constprop.0+0x1a>
 800783c:	1e69      	subs	r1, r5, #1
 800783e:	e006      	b.n	800784e <_strtol_l.constprop.0+0xea>
 8007840:	b106      	cbz	r6, 8007844 <_strtol_l.constprop.0+0xe0>
 8007842:	4240      	negs	r0, r0
 8007844:	f1b8 0f00 	cmp.w	r8, #0
 8007848:	d099      	beq.n	800777e <_strtol_l.constprop.0+0x1a>
 800784a:	2a00      	cmp	r2, #0
 800784c:	d1f6      	bne.n	800783c <_strtol_l.constprop.0+0xd8>
 800784e:	f8c8 1000 	str.w	r1, [r8]
 8007852:	e794      	b.n	800777e <_strtol_l.constprop.0+0x1a>
 8007854:	08008d21 	.word	0x08008d21

08007858 <_strtol_r>:
 8007858:	f7ff bf84 	b.w	8007764 <_strtol_l.constprop.0>

0800785c <__ssputs_r>:
 800785c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007860:	688e      	ldr	r6, [r1, #8]
 8007862:	461f      	mov	r7, r3
 8007864:	42be      	cmp	r6, r7
 8007866:	680b      	ldr	r3, [r1, #0]
 8007868:	4682      	mov	sl, r0
 800786a:	460c      	mov	r4, r1
 800786c:	4690      	mov	r8, r2
 800786e:	d82d      	bhi.n	80078cc <__ssputs_r+0x70>
 8007870:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007874:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007878:	d026      	beq.n	80078c8 <__ssputs_r+0x6c>
 800787a:	6965      	ldr	r5, [r4, #20]
 800787c:	6909      	ldr	r1, [r1, #16]
 800787e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007882:	eba3 0901 	sub.w	r9, r3, r1
 8007886:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800788a:	1c7b      	adds	r3, r7, #1
 800788c:	444b      	add	r3, r9
 800788e:	106d      	asrs	r5, r5, #1
 8007890:	429d      	cmp	r5, r3
 8007892:	bf38      	it	cc
 8007894:	461d      	movcc	r5, r3
 8007896:	0553      	lsls	r3, r2, #21
 8007898:	d527      	bpl.n	80078ea <__ssputs_r+0x8e>
 800789a:	4629      	mov	r1, r5
 800789c:	f7fe fc1c 	bl	80060d8 <_malloc_r>
 80078a0:	4606      	mov	r6, r0
 80078a2:	b360      	cbz	r0, 80078fe <__ssputs_r+0xa2>
 80078a4:	6921      	ldr	r1, [r4, #16]
 80078a6:	464a      	mov	r2, r9
 80078a8:	f000 fa2a 	bl	8007d00 <memcpy>
 80078ac:	89a3      	ldrh	r3, [r4, #12]
 80078ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80078b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078b6:	81a3      	strh	r3, [r4, #12]
 80078b8:	6126      	str	r6, [r4, #16]
 80078ba:	6165      	str	r5, [r4, #20]
 80078bc:	444e      	add	r6, r9
 80078be:	eba5 0509 	sub.w	r5, r5, r9
 80078c2:	6026      	str	r6, [r4, #0]
 80078c4:	60a5      	str	r5, [r4, #8]
 80078c6:	463e      	mov	r6, r7
 80078c8:	42be      	cmp	r6, r7
 80078ca:	d900      	bls.n	80078ce <__ssputs_r+0x72>
 80078cc:	463e      	mov	r6, r7
 80078ce:	6820      	ldr	r0, [r4, #0]
 80078d0:	4632      	mov	r2, r6
 80078d2:	4641      	mov	r1, r8
 80078d4:	f000 f9d8 	bl	8007c88 <memmove>
 80078d8:	68a3      	ldr	r3, [r4, #8]
 80078da:	1b9b      	subs	r3, r3, r6
 80078dc:	60a3      	str	r3, [r4, #8]
 80078de:	6823      	ldr	r3, [r4, #0]
 80078e0:	4433      	add	r3, r6
 80078e2:	6023      	str	r3, [r4, #0]
 80078e4:	2000      	movs	r0, #0
 80078e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078ea:	462a      	mov	r2, r5
 80078ec:	f000 fd85 	bl	80083fa <_realloc_r>
 80078f0:	4606      	mov	r6, r0
 80078f2:	2800      	cmp	r0, #0
 80078f4:	d1e0      	bne.n	80078b8 <__ssputs_r+0x5c>
 80078f6:	6921      	ldr	r1, [r4, #16]
 80078f8:	4650      	mov	r0, sl
 80078fa:	f7fe fb79 	bl	8005ff0 <_free_r>
 80078fe:	230c      	movs	r3, #12
 8007900:	f8ca 3000 	str.w	r3, [sl]
 8007904:	89a3      	ldrh	r3, [r4, #12]
 8007906:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800790a:	81a3      	strh	r3, [r4, #12]
 800790c:	f04f 30ff 	mov.w	r0, #4294967295
 8007910:	e7e9      	b.n	80078e6 <__ssputs_r+0x8a>
	...

08007914 <_svfiprintf_r>:
 8007914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007918:	4698      	mov	r8, r3
 800791a:	898b      	ldrh	r3, [r1, #12]
 800791c:	061b      	lsls	r3, r3, #24
 800791e:	b09d      	sub	sp, #116	@ 0x74
 8007920:	4607      	mov	r7, r0
 8007922:	460d      	mov	r5, r1
 8007924:	4614      	mov	r4, r2
 8007926:	d510      	bpl.n	800794a <_svfiprintf_r+0x36>
 8007928:	690b      	ldr	r3, [r1, #16]
 800792a:	b973      	cbnz	r3, 800794a <_svfiprintf_r+0x36>
 800792c:	2140      	movs	r1, #64	@ 0x40
 800792e:	f7fe fbd3 	bl	80060d8 <_malloc_r>
 8007932:	6028      	str	r0, [r5, #0]
 8007934:	6128      	str	r0, [r5, #16]
 8007936:	b930      	cbnz	r0, 8007946 <_svfiprintf_r+0x32>
 8007938:	230c      	movs	r3, #12
 800793a:	603b      	str	r3, [r7, #0]
 800793c:	f04f 30ff 	mov.w	r0, #4294967295
 8007940:	b01d      	add	sp, #116	@ 0x74
 8007942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007946:	2340      	movs	r3, #64	@ 0x40
 8007948:	616b      	str	r3, [r5, #20]
 800794a:	2300      	movs	r3, #0
 800794c:	9309      	str	r3, [sp, #36]	@ 0x24
 800794e:	2320      	movs	r3, #32
 8007950:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007954:	f8cd 800c 	str.w	r8, [sp, #12]
 8007958:	2330      	movs	r3, #48	@ 0x30
 800795a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007af8 <_svfiprintf_r+0x1e4>
 800795e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007962:	f04f 0901 	mov.w	r9, #1
 8007966:	4623      	mov	r3, r4
 8007968:	469a      	mov	sl, r3
 800796a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800796e:	b10a      	cbz	r2, 8007974 <_svfiprintf_r+0x60>
 8007970:	2a25      	cmp	r2, #37	@ 0x25
 8007972:	d1f9      	bne.n	8007968 <_svfiprintf_r+0x54>
 8007974:	ebba 0b04 	subs.w	fp, sl, r4
 8007978:	d00b      	beq.n	8007992 <_svfiprintf_r+0x7e>
 800797a:	465b      	mov	r3, fp
 800797c:	4622      	mov	r2, r4
 800797e:	4629      	mov	r1, r5
 8007980:	4638      	mov	r0, r7
 8007982:	f7ff ff6b 	bl	800785c <__ssputs_r>
 8007986:	3001      	adds	r0, #1
 8007988:	f000 80a7 	beq.w	8007ada <_svfiprintf_r+0x1c6>
 800798c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800798e:	445a      	add	r2, fp
 8007990:	9209      	str	r2, [sp, #36]	@ 0x24
 8007992:	f89a 3000 	ldrb.w	r3, [sl]
 8007996:	2b00      	cmp	r3, #0
 8007998:	f000 809f 	beq.w	8007ada <_svfiprintf_r+0x1c6>
 800799c:	2300      	movs	r3, #0
 800799e:	f04f 32ff 	mov.w	r2, #4294967295
 80079a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079a6:	f10a 0a01 	add.w	sl, sl, #1
 80079aa:	9304      	str	r3, [sp, #16]
 80079ac:	9307      	str	r3, [sp, #28]
 80079ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80079b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80079b4:	4654      	mov	r4, sl
 80079b6:	2205      	movs	r2, #5
 80079b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079bc:	484e      	ldr	r0, [pc, #312]	@ (8007af8 <_svfiprintf_r+0x1e4>)
 80079be:	f7f8 fc07 	bl	80001d0 <memchr>
 80079c2:	9a04      	ldr	r2, [sp, #16]
 80079c4:	b9d8      	cbnz	r0, 80079fe <_svfiprintf_r+0xea>
 80079c6:	06d0      	lsls	r0, r2, #27
 80079c8:	bf44      	itt	mi
 80079ca:	2320      	movmi	r3, #32
 80079cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80079d0:	0711      	lsls	r1, r2, #28
 80079d2:	bf44      	itt	mi
 80079d4:	232b      	movmi	r3, #43	@ 0x2b
 80079d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80079da:	f89a 3000 	ldrb.w	r3, [sl]
 80079de:	2b2a      	cmp	r3, #42	@ 0x2a
 80079e0:	d015      	beq.n	8007a0e <_svfiprintf_r+0xfa>
 80079e2:	9a07      	ldr	r2, [sp, #28]
 80079e4:	4654      	mov	r4, sl
 80079e6:	2000      	movs	r0, #0
 80079e8:	f04f 0c0a 	mov.w	ip, #10
 80079ec:	4621      	mov	r1, r4
 80079ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079f2:	3b30      	subs	r3, #48	@ 0x30
 80079f4:	2b09      	cmp	r3, #9
 80079f6:	d94b      	bls.n	8007a90 <_svfiprintf_r+0x17c>
 80079f8:	b1b0      	cbz	r0, 8007a28 <_svfiprintf_r+0x114>
 80079fa:	9207      	str	r2, [sp, #28]
 80079fc:	e014      	b.n	8007a28 <_svfiprintf_r+0x114>
 80079fe:	eba0 0308 	sub.w	r3, r0, r8
 8007a02:	fa09 f303 	lsl.w	r3, r9, r3
 8007a06:	4313      	orrs	r3, r2
 8007a08:	9304      	str	r3, [sp, #16]
 8007a0a:	46a2      	mov	sl, r4
 8007a0c:	e7d2      	b.n	80079b4 <_svfiprintf_r+0xa0>
 8007a0e:	9b03      	ldr	r3, [sp, #12]
 8007a10:	1d19      	adds	r1, r3, #4
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	9103      	str	r1, [sp, #12]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	bfbb      	ittet	lt
 8007a1a:	425b      	neglt	r3, r3
 8007a1c:	f042 0202 	orrlt.w	r2, r2, #2
 8007a20:	9307      	strge	r3, [sp, #28]
 8007a22:	9307      	strlt	r3, [sp, #28]
 8007a24:	bfb8      	it	lt
 8007a26:	9204      	strlt	r2, [sp, #16]
 8007a28:	7823      	ldrb	r3, [r4, #0]
 8007a2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a2c:	d10a      	bne.n	8007a44 <_svfiprintf_r+0x130>
 8007a2e:	7863      	ldrb	r3, [r4, #1]
 8007a30:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a32:	d132      	bne.n	8007a9a <_svfiprintf_r+0x186>
 8007a34:	9b03      	ldr	r3, [sp, #12]
 8007a36:	1d1a      	adds	r2, r3, #4
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	9203      	str	r2, [sp, #12]
 8007a3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007a40:	3402      	adds	r4, #2
 8007a42:	9305      	str	r3, [sp, #20]
 8007a44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007b08 <_svfiprintf_r+0x1f4>
 8007a48:	7821      	ldrb	r1, [r4, #0]
 8007a4a:	2203      	movs	r2, #3
 8007a4c:	4650      	mov	r0, sl
 8007a4e:	f7f8 fbbf 	bl	80001d0 <memchr>
 8007a52:	b138      	cbz	r0, 8007a64 <_svfiprintf_r+0x150>
 8007a54:	9b04      	ldr	r3, [sp, #16]
 8007a56:	eba0 000a 	sub.w	r0, r0, sl
 8007a5a:	2240      	movs	r2, #64	@ 0x40
 8007a5c:	4082      	lsls	r2, r0
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	3401      	adds	r4, #1
 8007a62:	9304      	str	r3, [sp, #16]
 8007a64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a68:	4824      	ldr	r0, [pc, #144]	@ (8007afc <_svfiprintf_r+0x1e8>)
 8007a6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007a6e:	2206      	movs	r2, #6
 8007a70:	f7f8 fbae 	bl	80001d0 <memchr>
 8007a74:	2800      	cmp	r0, #0
 8007a76:	d036      	beq.n	8007ae6 <_svfiprintf_r+0x1d2>
 8007a78:	4b21      	ldr	r3, [pc, #132]	@ (8007b00 <_svfiprintf_r+0x1ec>)
 8007a7a:	bb1b      	cbnz	r3, 8007ac4 <_svfiprintf_r+0x1b0>
 8007a7c:	9b03      	ldr	r3, [sp, #12]
 8007a7e:	3307      	adds	r3, #7
 8007a80:	f023 0307 	bic.w	r3, r3, #7
 8007a84:	3308      	adds	r3, #8
 8007a86:	9303      	str	r3, [sp, #12]
 8007a88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a8a:	4433      	add	r3, r6
 8007a8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a8e:	e76a      	b.n	8007966 <_svfiprintf_r+0x52>
 8007a90:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a94:	460c      	mov	r4, r1
 8007a96:	2001      	movs	r0, #1
 8007a98:	e7a8      	b.n	80079ec <_svfiprintf_r+0xd8>
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	3401      	adds	r4, #1
 8007a9e:	9305      	str	r3, [sp, #20]
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	f04f 0c0a 	mov.w	ip, #10
 8007aa6:	4620      	mov	r0, r4
 8007aa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007aac:	3a30      	subs	r2, #48	@ 0x30
 8007aae:	2a09      	cmp	r2, #9
 8007ab0:	d903      	bls.n	8007aba <_svfiprintf_r+0x1a6>
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d0c6      	beq.n	8007a44 <_svfiprintf_r+0x130>
 8007ab6:	9105      	str	r1, [sp, #20]
 8007ab8:	e7c4      	b.n	8007a44 <_svfiprintf_r+0x130>
 8007aba:	fb0c 2101 	mla	r1, ip, r1, r2
 8007abe:	4604      	mov	r4, r0
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	e7f0      	b.n	8007aa6 <_svfiprintf_r+0x192>
 8007ac4:	ab03      	add	r3, sp, #12
 8007ac6:	9300      	str	r3, [sp, #0]
 8007ac8:	462a      	mov	r2, r5
 8007aca:	4b0e      	ldr	r3, [pc, #56]	@ (8007b04 <_svfiprintf_r+0x1f0>)
 8007acc:	a904      	add	r1, sp, #16
 8007ace:	4638      	mov	r0, r7
 8007ad0:	f7fc fcaa 	bl	8004428 <_printf_float>
 8007ad4:	1c42      	adds	r2, r0, #1
 8007ad6:	4606      	mov	r6, r0
 8007ad8:	d1d6      	bne.n	8007a88 <_svfiprintf_r+0x174>
 8007ada:	89ab      	ldrh	r3, [r5, #12]
 8007adc:	065b      	lsls	r3, r3, #25
 8007ade:	f53f af2d 	bmi.w	800793c <_svfiprintf_r+0x28>
 8007ae2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ae4:	e72c      	b.n	8007940 <_svfiprintf_r+0x2c>
 8007ae6:	ab03      	add	r3, sp, #12
 8007ae8:	9300      	str	r3, [sp, #0]
 8007aea:	462a      	mov	r2, r5
 8007aec:	4b05      	ldr	r3, [pc, #20]	@ (8007b04 <_svfiprintf_r+0x1f0>)
 8007aee:	a904      	add	r1, sp, #16
 8007af0:	4638      	mov	r0, r7
 8007af2:	f7fc ff31 	bl	8004958 <_printf_i>
 8007af6:	e7ed      	b.n	8007ad4 <_svfiprintf_r+0x1c0>
 8007af8:	08008e21 	.word	0x08008e21
 8007afc:	08008e2b 	.word	0x08008e2b
 8007b00:	08004429 	.word	0x08004429
 8007b04:	0800785d 	.word	0x0800785d
 8007b08:	08008e27 	.word	0x08008e27

08007b0c <__sflush_r>:
 8007b0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b14:	0716      	lsls	r6, r2, #28
 8007b16:	4605      	mov	r5, r0
 8007b18:	460c      	mov	r4, r1
 8007b1a:	d454      	bmi.n	8007bc6 <__sflush_r+0xba>
 8007b1c:	684b      	ldr	r3, [r1, #4]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	dc02      	bgt.n	8007b28 <__sflush_r+0x1c>
 8007b22:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	dd48      	ble.n	8007bba <__sflush_r+0xae>
 8007b28:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b2a:	2e00      	cmp	r6, #0
 8007b2c:	d045      	beq.n	8007bba <__sflush_r+0xae>
 8007b2e:	2300      	movs	r3, #0
 8007b30:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007b34:	682f      	ldr	r7, [r5, #0]
 8007b36:	6a21      	ldr	r1, [r4, #32]
 8007b38:	602b      	str	r3, [r5, #0]
 8007b3a:	d030      	beq.n	8007b9e <__sflush_r+0x92>
 8007b3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007b3e:	89a3      	ldrh	r3, [r4, #12]
 8007b40:	0759      	lsls	r1, r3, #29
 8007b42:	d505      	bpl.n	8007b50 <__sflush_r+0x44>
 8007b44:	6863      	ldr	r3, [r4, #4]
 8007b46:	1ad2      	subs	r2, r2, r3
 8007b48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007b4a:	b10b      	cbz	r3, 8007b50 <__sflush_r+0x44>
 8007b4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007b4e:	1ad2      	subs	r2, r2, r3
 8007b50:	2300      	movs	r3, #0
 8007b52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b54:	6a21      	ldr	r1, [r4, #32]
 8007b56:	4628      	mov	r0, r5
 8007b58:	47b0      	blx	r6
 8007b5a:	1c43      	adds	r3, r0, #1
 8007b5c:	89a3      	ldrh	r3, [r4, #12]
 8007b5e:	d106      	bne.n	8007b6e <__sflush_r+0x62>
 8007b60:	6829      	ldr	r1, [r5, #0]
 8007b62:	291d      	cmp	r1, #29
 8007b64:	d82b      	bhi.n	8007bbe <__sflush_r+0xb2>
 8007b66:	4a2a      	ldr	r2, [pc, #168]	@ (8007c10 <__sflush_r+0x104>)
 8007b68:	410a      	asrs	r2, r1
 8007b6a:	07d6      	lsls	r6, r2, #31
 8007b6c:	d427      	bmi.n	8007bbe <__sflush_r+0xb2>
 8007b6e:	2200      	movs	r2, #0
 8007b70:	6062      	str	r2, [r4, #4]
 8007b72:	04d9      	lsls	r1, r3, #19
 8007b74:	6922      	ldr	r2, [r4, #16]
 8007b76:	6022      	str	r2, [r4, #0]
 8007b78:	d504      	bpl.n	8007b84 <__sflush_r+0x78>
 8007b7a:	1c42      	adds	r2, r0, #1
 8007b7c:	d101      	bne.n	8007b82 <__sflush_r+0x76>
 8007b7e:	682b      	ldr	r3, [r5, #0]
 8007b80:	b903      	cbnz	r3, 8007b84 <__sflush_r+0x78>
 8007b82:	6560      	str	r0, [r4, #84]	@ 0x54
 8007b84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b86:	602f      	str	r7, [r5, #0]
 8007b88:	b1b9      	cbz	r1, 8007bba <__sflush_r+0xae>
 8007b8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b8e:	4299      	cmp	r1, r3
 8007b90:	d002      	beq.n	8007b98 <__sflush_r+0x8c>
 8007b92:	4628      	mov	r0, r5
 8007b94:	f7fe fa2c 	bl	8005ff0 <_free_r>
 8007b98:	2300      	movs	r3, #0
 8007b9a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b9c:	e00d      	b.n	8007bba <__sflush_r+0xae>
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	4628      	mov	r0, r5
 8007ba2:	47b0      	blx	r6
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	1c50      	adds	r0, r2, #1
 8007ba8:	d1c9      	bne.n	8007b3e <__sflush_r+0x32>
 8007baa:	682b      	ldr	r3, [r5, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d0c6      	beq.n	8007b3e <__sflush_r+0x32>
 8007bb0:	2b1d      	cmp	r3, #29
 8007bb2:	d001      	beq.n	8007bb8 <__sflush_r+0xac>
 8007bb4:	2b16      	cmp	r3, #22
 8007bb6:	d11e      	bne.n	8007bf6 <__sflush_r+0xea>
 8007bb8:	602f      	str	r7, [r5, #0]
 8007bba:	2000      	movs	r0, #0
 8007bbc:	e022      	b.n	8007c04 <__sflush_r+0xf8>
 8007bbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bc2:	b21b      	sxth	r3, r3
 8007bc4:	e01b      	b.n	8007bfe <__sflush_r+0xf2>
 8007bc6:	690f      	ldr	r7, [r1, #16]
 8007bc8:	2f00      	cmp	r7, #0
 8007bca:	d0f6      	beq.n	8007bba <__sflush_r+0xae>
 8007bcc:	0793      	lsls	r3, r2, #30
 8007bce:	680e      	ldr	r6, [r1, #0]
 8007bd0:	bf08      	it	eq
 8007bd2:	694b      	ldreq	r3, [r1, #20]
 8007bd4:	600f      	str	r7, [r1, #0]
 8007bd6:	bf18      	it	ne
 8007bd8:	2300      	movne	r3, #0
 8007bda:	eba6 0807 	sub.w	r8, r6, r7
 8007bde:	608b      	str	r3, [r1, #8]
 8007be0:	f1b8 0f00 	cmp.w	r8, #0
 8007be4:	dde9      	ble.n	8007bba <__sflush_r+0xae>
 8007be6:	6a21      	ldr	r1, [r4, #32]
 8007be8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007bea:	4643      	mov	r3, r8
 8007bec:	463a      	mov	r2, r7
 8007bee:	4628      	mov	r0, r5
 8007bf0:	47b0      	blx	r6
 8007bf2:	2800      	cmp	r0, #0
 8007bf4:	dc08      	bgt.n	8007c08 <__sflush_r+0xfc>
 8007bf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bfe:	81a3      	strh	r3, [r4, #12]
 8007c00:	f04f 30ff 	mov.w	r0, #4294967295
 8007c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c08:	4407      	add	r7, r0
 8007c0a:	eba8 0800 	sub.w	r8, r8, r0
 8007c0e:	e7e7      	b.n	8007be0 <__sflush_r+0xd4>
 8007c10:	dfbffffe 	.word	0xdfbffffe

08007c14 <_fflush_r>:
 8007c14:	b538      	push	{r3, r4, r5, lr}
 8007c16:	690b      	ldr	r3, [r1, #16]
 8007c18:	4605      	mov	r5, r0
 8007c1a:	460c      	mov	r4, r1
 8007c1c:	b913      	cbnz	r3, 8007c24 <_fflush_r+0x10>
 8007c1e:	2500      	movs	r5, #0
 8007c20:	4628      	mov	r0, r5
 8007c22:	bd38      	pop	{r3, r4, r5, pc}
 8007c24:	b118      	cbz	r0, 8007c2e <_fflush_r+0x1a>
 8007c26:	6a03      	ldr	r3, [r0, #32]
 8007c28:	b90b      	cbnz	r3, 8007c2e <_fflush_r+0x1a>
 8007c2a:	f7fd fa55 	bl	80050d8 <__sinit>
 8007c2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d0f3      	beq.n	8007c1e <_fflush_r+0xa>
 8007c36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007c38:	07d0      	lsls	r0, r2, #31
 8007c3a:	d404      	bmi.n	8007c46 <_fflush_r+0x32>
 8007c3c:	0599      	lsls	r1, r3, #22
 8007c3e:	d402      	bmi.n	8007c46 <_fflush_r+0x32>
 8007c40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c42:	f7fd fb60 	bl	8005306 <__retarget_lock_acquire_recursive>
 8007c46:	4628      	mov	r0, r5
 8007c48:	4621      	mov	r1, r4
 8007c4a:	f7ff ff5f 	bl	8007b0c <__sflush_r>
 8007c4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007c50:	07da      	lsls	r2, r3, #31
 8007c52:	4605      	mov	r5, r0
 8007c54:	d4e4      	bmi.n	8007c20 <_fflush_r+0xc>
 8007c56:	89a3      	ldrh	r3, [r4, #12]
 8007c58:	059b      	lsls	r3, r3, #22
 8007c5a:	d4e1      	bmi.n	8007c20 <_fflush_r+0xc>
 8007c5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c5e:	f7fd fb53 	bl	8005308 <__retarget_lock_release_recursive>
 8007c62:	e7dd      	b.n	8007c20 <_fflush_r+0xc>

08007c64 <fiprintf>:
 8007c64:	b40e      	push	{r1, r2, r3}
 8007c66:	b503      	push	{r0, r1, lr}
 8007c68:	4601      	mov	r1, r0
 8007c6a:	ab03      	add	r3, sp, #12
 8007c6c:	4805      	ldr	r0, [pc, #20]	@ (8007c84 <fiprintf+0x20>)
 8007c6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c72:	6800      	ldr	r0, [r0, #0]
 8007c74:	9301      	str	r3, [sp, #4]
 8007c76:	f000 fc25 	bl	80084c4 <_vfiprintf_r>
 8007c7a:	b002      	add	sp, #8
 8007c7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c80:	b003      	add	sp, #12
 8007c82:	4770      	bx	lr
 8007c84:	20000018 	.word	0x20000018

08007c88 <memmove>:
 8007c88:	4288      	cmp	r0, r1
 8007c8a:	b510      	push	{r4, lr}
 8007c8c:	eb01 0402 	add.w	r4, r1, r2
 8007c90:	d902      	bls.n	8007c98 <memmove+0x10>
 8007c92:	4284      	cmp	r4, r0
 8007c94:	4623      	mov	r3, r4
 8007c96:	d807      	bhi.n	8007ca8 <memmove+0x20>
 8007c98:	1e43      	subs	r3, r0, #1
 8007c9a:	42a1      	cmp	r1, r4
 8007c9c:	d008      	beq.n	8007cb0 <memmove+0x28>
 8007c9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ca2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ca6:	e7f8      	b.n	8007c9a <memmove+0x12>
 8007ca8:	4402      	add	r2, r0
 8007caa:	4601      	mov	r1, r0
 8007cac:	428a      	cmp	r2, r1
 8007cae:	d100      	bne.n	8007cb2 <memmove+0x2a>
 8007cb0:	bd10      	pop	{r4, pc}
 8007cb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007cb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007cba:	e7f7      	b.n	8007cac <memmove+0x24>

08007cbc <strncmp>:
 8007cbc:	b510      	push	{r4, lr}
 8007cbe:	b16a      	cbz	r2, 8007cdc <strncmp+0x20>
 8007cc0:	3901      	subs	r1, #1
 8007cc2:	1884      	adds	r4, r0, r2
 8007cc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cc8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d103      	bne.n	8007cd8 <strncmp+0x1c>
 8007cd0:	42a0      	cmp	r0, r4
 8007cd2:	d001      	beq.n	8007cd8 <strncmp+0x1c>
 8007cd4:	2a00      	cmp	r2, #0
 8007cd6:	d1f5      	bne.n	8007cc4 <strncmp+0x8>
 8007cd8:	1ad0      	subs	r0, r2, r3
 8007cda:	bd10      	pop	{r4, pc}
 8007cdc:	4610      	mov	r0, r2
 8007cde:	e7fc      	b.n	8007cda <strncmp+0x1e>

08007ce0 <_sbrk_r>:
 8007ce0:	b538      	push	{r3, r4, r5, lr}
 8007ce2:	4d06      	ldr	r5, [pc, #24]	@ (8007cfc <_sbrk_r+0x1c>)
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	4604      	mov	r4, r0
 8007ce8:	4608      	mov	r0, r1
 8007cea:	602b      	str	r3, [r5, #0]
 8007cec:	f7f9 fbca 	bl	8001484 <_sbrk>
 8007cf0:	1c43      	adds	r3, r0, #1
 8007cf2:	d102      	bne.n	8007cfa <_sbrk_r+0x1a>
 8007cf4:	682b      	ldr	r3, [r5, #0]
 8007cf6:	b103      	cbz	r3, 8007cfa <_sbrk_r+0x1a>
 8007cf8:	6023      	str	r3, [r4, #0]
 8007cfa:	bd38      	pop	{r3, r4, r5, pc}
 8007cfc:	20000464 	.word	0x20000464

08007d00 <memcpy>:
 8007d00:	440a      	add	r2, r1
 8007d02:	4291      	cmp	r1, r2
 8007d04:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d08:	d100      	bne.n	8007d0c <memcpy+0xc>
 8007d0a:	4770      	bx	lr
 8007d0c:	b510      	push	{r4, lr}
 8007d0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d16:	4291      	cmp	r1, r2
 8007d18:	d1f9      	bne.n	8007d0e <memcpy+0xe>
 8007d1a:	bd10      	pop	{r4, pc}
 8007d1c:	0000      	movs	r0, r0
	...

08007d20 <nan>:
 8007d20:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007d28 <nan+0x8>
 8007d24:	4770      	bx	lr
 8007d26:	bf00      	nop
 8007d28:	00000000 	.word	0x00000000
 8007d2c:	7ff80000 	.word	0x7ff80000

08007d30 <abort>:
 8007d30:	b508      	push	{r3, lr}
 8007d32:	2006      	movs	r0, #6
 8007d34:	f000 fd9a 	bl	800886c <raise>
 8007d38:	2001      	movs	r0, #1
 8007d3a:	f7f9 fb2b 	bl	8001394 <_exit>

08007d3e <_calloc_r>:
 8007d3e:	b570      	push	{r4, r5, r6, lr}
 8007d40:	fba1 5402 	umull	r5, r4, r1, r2
 8007d44:	b93c      	cbnz	r4, 8007d56 <_calloc_r+0x18>
 8007d46:	4629      	mov	r1, r5
 8007d48:	f7fe f9c6 	bl	80060d8 <_malloc_r>
 8007d4c:	4606      	mov	r6, r0
 8007d4e:	b928      	cbnz	r0, 8007d5c <_calloc_r+0x1e>
 8007d50:	2600      	movs	r6, #0
 8007d52:	4630      	mov	r0, r6
 8007d54:	bd70      	pop	{r4, r5, r6, pc}
 8007d56:	220c      	movs	r2, #12
 8007d58:	6002      	str	r2, [r0, #0]
 8007d5a:	e7f9      	b.n	8007d50 <_calloc_r+0x12>
 8007d5c:	462a      	mov	r2, r5
 8007d5e:	4621      	mov	r1, r4
 8007d60:	f7fd fa53 	bl	800520a <memset>
 8007d64:	e7f5      	b.n	8007d52 <_calloc_r+0x14>

08007d66 <rshift>:
 8007d66:	6903      	ldr	r3, [r0, #16]
 8007d68:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007d6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007d70:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007d74:	f100 0414 	add.w	r4, r0, #20
 8007d78:	dd45      	ble.n	8007e06 <rshift+0xa0>
 8007d7a:	f011 011f 	ands.w	r1, r1, #31
 8007d7e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007d82:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007d86:	d10c      	bne.n	8007da2 <rshift+0x3c>
 8007d88:	f100 0710 	add.w	r7, r0, #16
 8007d8c:	4629      	mov	r1, r5
 8007d8e:	42b1      	cmp	r1, r6
 8007d90:	d334      	bcc.n	8007dfc <rshift+0x96>
 8007d92:	1a9b      	subs	r3, r3, r2
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	1eea      	subs	r2, r5, #3
 8007d98:	4296      	cmp	r6, r2
 8007d9a:	bf38      	it	cc
 8007d9c:	2300      	movcc	r3, #0
 8007d9e:	4423      	add	r3, r4
 8007da0:	e015      	b.n	8007dce <rshift+0x68>
 8007da2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007da6:	f1c1 0820 	rsb	r8, r1, #32
 8007daa:	40cf      	lsrs	r7, r1
 8007dac:	f105 0e04 	add.w	lr, r5, #4
 8007db0:	46a1      	mov	r9, r4
 8007db2:	4576      	cmp	r6, lr
 8007db4:	46f4      	mov	ip, lr
 8007db6:	d815      	bhi.n	8007de4 <rshift+0x7e>
 8007db8:	1a9a      	subs	r2, r3, r2
 8007dba:	0092      	lsls	r2, r2, #2
 8007dbc:	3a04      	subs	r2, #4
 8007dbe:	3501      	adds	r5, #1
 8007dc0:	42ae      	cmp	r6, r5
 8007dc2:	bf38      	it	cc
 8007dc4:	2200      	movcc	r2, #0
 8007dc6:	18a3      	adds	r3, r4, r2
 8007dc8:	50a7      	str	r7, [r4, r2]
 8007dca:	b107      	cbz	r7, 8007dce <rshift+0x68>
 8007dcc:	3304      	adds	r3, #4
 8007dce:	1b1a      	subs	r2, r3, r4
 8007dd0:	42a3      	cmp	r3, r4
 8007dd2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007dd6:	bf08      	it	eq
 8007dd8:	2300      	moveq	r3, #0
 8007dda:	6102      	str	r2, [r0, #16]
 8007ddc:	bf08      	it	eq
 8007dde:	6143      	streq	r3, [r0, #20]
 8007de0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007de4:	f8dc c000 	ldr.w	ip, [ip]
 8007de8:	fa0c fc08 	lsl.w	ip, ip, r8
 8007dec:	ea4c 0707 	orr.w	r7, ip, r7
 8007df0:	f849 7b04 	str.w	r7, [r9], #4
 8007df4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007df8:	40cf      	lsrs	r7, r1
 8007dfa:	e7da      	b.n	8007db2 <rshift+0x4c>
 8007dfc:	f851 cb04 	ldr.w	ip, [r1], #4
 8007e00:	f847 cf04 	str.w	ip, [r7, #4]!
 8007e04:	e7c3      	b.n	8007d8e <rshift+0x28>
 8007e06:	4623      	mov	r3, r4
 8007e08:	e7e1      	b.n	8007dce <rshift+0x68>

08007e0a <__hexdig_fun>:
 8007e0a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007e0e:	2b09      	cmp	r3, #9
 8007e10:	d802      	bhi.n	8007e18 <__hexdig_fun+0xe>
 8007e12:	3820      	subs	r0, #32
 8007e14:	b2c0      	uxtb	r0, r0
 8007e16:	4770      	bx	lr
 8007e18:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007e1c:	2b05      	cmp	r3, #5
 8007e1e:	d801      	bhi.n	8007e24 <__hexdig_fun+0x1a>
 8007e20:	3847      	subs	r0, #71	@ 0x47
 8007e22:	e7f7      	b.n	8007e14 <__hexdig_fun+0xa>
 8007e24:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007e28:	2b05      	cmp	r3, #5
 8007e2a:	d801      	bhi.n	8007e30 <__hexdig_fun+0x26>
 8007e2c:	3827      	subs	r0, #39	@ 0x27
 8007e2e:	e7f1      	b.n	8007e14 <__hexdig_fun+0xa>
 8007e30:	2000      	movs	r0, #0
 8007e32:	4770      	bx	lr

08007e34 <__gethex>:
 8007e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e38:	b085      	sub	sp, #20
 8007e3a:	468a      	mov	sl, r1
 8007e3c:	9302      	str	r3, [sp, #8]
 8007e3e:	680b      	ldr	r3, [r1, #0]
 8007e40:	9001      	str	r0, [sp, #4]
 8007e42:	4690      	mov	r8, r2
 8007e44:	1c9c      	adds	r4, r3, #2
 8007e46:	46a1      	mov	r9, r4
 8007e48:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007e4c:	2830      	cmp	r0, #48	@ 0x30
 8007e4e:	d0fa      	beq.n	8007e46 <__gethex+0x12>
 8007e50:	eba9 0303 	sub.w	r3, r9, r3
 8007e54:	f1a3 0b02 	sub.w	fp, r3, #2
 8007e58:	f7ff ffd7 	bl	8007e0a <__hexdig_fun>
 8007e5c:	4605      	mov	r5, r0
 8007e5e:	2800      	cmp	r0, #0
 8007e60:	d168      	bne.n	8007f34 <__gethex+0x100>
 8007e62:	49a0      	ldr	r1, [pc, #640]	@ (80080e4 <__gethex+0x2b0>)
 8007e64:	2201      	movs	r2, #1
 8007e66:	4648      	mov	r0, r9
 8007e68:	f7ff ff28 	bl	8007cbc <strncmp>
 8007e6c:	4607      	mov	r7, r0
 8007e6e:	2800      	cmp	r0, #0
 8007e70:	d167      	bne.n	8007f42 <__gethex+0x10e>
 8007e72:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007e76:	4626      	mov	r6, r4
 8007e78:	f7ff ffc7 	bl	8007e0a <__hexdig_fun>
 8007e7c:	2800      	cmp	r0, #0
 8007e7e:	d062      	beq.n	8007f46 <__gethex+0x112>
 8007e80:	4623      	mov	r3, r4
 8007e82:	7818      	ldrb	r0, [r3, #0]
 8007e84:	2830      	cmp	r0, #48	@ 0x30
 8007e86:	4699      	mov	r9, r3
 8007e88:	f103 0301 	add.w	r3, r3, #1
 8007e8c:	d0f9      	beq.n	8007e82 <__gethex+0x4e>
 8007e8e:	f7ff ffbc 	bl	8007e0a <__hexdig_fun>
 8007e92:	fab0 f580 	clz	r5, r0
 8007e96:	096d      	lsrs	r5, r5, #5
 8007e98:	f04f 0b01 	mov.w	fp, #1
 8007e9c:	464a      	mov	r2, r9
 8007e9e:	4616      	mov	r6, r2
 8007ea0:	3201      	adds	r2, #1
 8007ea2:	7830      	ldrb	r0, [r6, #0]
 8007ea4:	f7ff ffb1 	bl	8007e0a <__hexdig_fun>
 8007ea8:	2800      	cmp	r0, #0
 8007eaa:	d1f8      	bne.n	8007e9e <__gethex+0x6a>
 8007eac:	498d      	ldr	r1, [pc, #564]	@ (80080e4 <__gethex+0x2b0>)
 8007eae:	2201      	movs	r2, #1
 8007eb0:	4630      	mov	r0, r6
 8007eb2:	f7ff ff03 	bl	8007cbc <strncmp>
 8007eb6:	2800      	cmp	r0, #0
 8007eb8:	d13f      	bne.n	8007f3a <__gethex+0x106>
 8007eba:	b944      	cbnz	r4, 8007ece <__gethex+0x9a>
 8007ebc:	1c74      	adds	r4, r6, #1
 8007ebe:	4622      	mov	r2, r4
 8007ec0:	4616      	mov	r6, r2
 8007ec2:	3201      	adds	r2, #1
 8007ec4:	7830      	ldrb	r0, [r6, #0]
 8007ec6:	f7ff ffa0 	bl	8007e0a <__hexdig_fun>
 8007eca:	2800      	cmp	r0, #0
 8007ecc:	d1f8      	bne.n	8007ec0 <__gethex+0x8c>
 8007ece:	1ba4      	subs	r4, r4, r6
 8007ed0:	00a7      	lsls	r7, r4, #2
 8007ed2:	7833      	ldrb	r3, [r6, #0]
 8007ed4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007ed8:	2b50      	cmp	r3, #80	@ 0x50
 8007eda:	d13e      	bne.n	8007f5a <__gethex+0x126>
 8007edc:	7873      	ldrb	r3, [r6, #1]
 8007ede:	2b2b      	cmp	r3, #43	@ 0x2b
 8007ee0:	d033      	beq.n	8007f4a <__gethex+0x116>
 8007ee2:	2b2d      	cmp	r3, #45	@ 0x2d
 8007ee4:	d034      	beq.n	8007f50 <__gethex+0x11c>
 8007ee6:	1c71      	adds	r1, r6, #1
 8007ee8:	2400      	movs	r4, #0
 8007eea:	7808      	ldrb	r0, [r1, #0]
 8007eec:	f7ff ff8d 	bl	8007e0a <__hexdig_fun>
 8007ef0:	1e43      	subs	r3, r0, #1
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	2b18      	cmp	r3, #24
 8007ef6:	d830      	bhi.n	8007f5a <__gethex+0x126>
 8007ef8:	f1a0 0210 	sub.w	r2, r0, #16
 8007efc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007f00:	f7ff ff83 	bl	8007e0a <__hexdig_fun>
 8007f04:	f100 3cff 	add.w	ip, r0, #4294967295
 8007f08:	fa5f fc8c 	uxtb.w	ip, ip
 8007f0c:	f1bc 0f18 	cmp.w	ip, #24
 8007f10:	f04f 030a 	mov.w	r3, #10
 8007f14:	d91e      	bls.n	8007f54 <__gethex+0x120>
 8007f16:	b104      	cbz	r4, 8007f1a <__gethex+0xe6>
 8007f18:	4252      	negs	r2, r2
 8007f1a:	4417      	add	r7, r2
 8007f1c:	f8ca 1000 	str.w	r1, [sl]
 8007f20:	b1ed      	cbz	r5, 8007f5e <__gethex+0x12a>
 8007f22:	f1bb 0f00 	cmp.w	fp, #0
 8007f26:	bf0c      	ite	eq
 8007f28:	2506      	moveq	r5, #6
 8007f2a:	2500      	movne	r5, #0
 8007f2c:	4628      	mov	r0, r5
 8007f2e:	b005      	add	sp, #20
 8007f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f34:	2500      	movs	r5, #0
 8007f36:	462c      	mov	r4, r5
 8007f38:	e7b0      	b.n	8007e9c <__gethex+0x68>
 8007f3a:	2c00      	cmp	r4, #0
 8007f3c:	d1c7      	bne.n	8007ece <__gethex+0x9a>
 8007f3e:	4627      	mov	r7, r4
 8007f40:	e7c7      	b.n	8007ed2 <__gethex+0x9e>
 8007f42:	464e      	mov	r6, r9
 8007f44:	462f      	mov	r7, r5
 8007f46:	2501      	movs	r5, #1
 8007f48:	e7c3      	b.n	8007ed2 <__gethex+0x9e>
 8007f4a:	2400      	movs	r4, #0
 8007f4c:	1cb1      	adds	r1, r6, #2
 8007f4e:	e7cc      	b.n	8007eea <__gethex+0xb6>
 8007f50:	2401      	movs	r4, #1
 8007f52:	e7fb      	b.n	8007f4c <__gethex+0x118>
 8007f54:	fb03 0002 	mla	r0, r3, r2, r0
 8007f58:	e7ce      	b.n	8007ef8 <__gethex+0xc4>
 8007f5a:	4631      	mov	r1, r6
 8007f5c:	e7de      	b.n	8007f1c <__gethex+0xe8>
 8007f5e:	eba6 0309 	sub.w	r3, r6, r9
 8007f62:	3b01      	subs	r3, #1
 8007f64:	4629      	mov	r1, r5
 8007f66:	2b07      	cmp	r3, #7
 8007f68:	dc0a      	bgt.n	8007f80 <__gethex+0x14c>
 8007f6a:	9801      	ldr	r0, [sp, #4]
 8007f6c:	f7fe f940 	bl	80061f0 <_Balloc>
 8007f70:	4604      	mov	r4, r0
 8007f72:	b940      	cbnz	r0, 8007f86 <__gethex+0x152>
 8007f74:	4b5c      	ldr	r3, [pc, #368]	@ (80080e8 <__gethex+0x2b4>)
 8007f76:	4602      	mov	r2, r0
 8007f78:	21e4      	movs	r1, #228	@ 0xe4
 8007f7a:	485c      	ldr	r0, [pc, #368]	@ (80080ec <__gethex+0x2b8>)
 8007f7c:	f7fd f9cc 	bl	8005318 <__assert_func>
 8007f80:	3101      	adds	r1, #1
 8007f82:	105b      	asrs	r3, r3, #1
 8007f84:	e7ef      	b.n	8007f66 <__gethex+0x132>
 8007f86:	f100 0a14 	add.w	sl, r0, #20
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	4655      	mov	r5, sl
 8007f8e:	469b      	mov	fp, r3
 8007f90:	45b1      	cmp	r9, r6
 8007f92:	d337      	bcc.n	8008004 <__gethex+0x1d0>
 8007f94:	f845 bb04 	str.w	fp, [r5], #4
 8007f98:	eba5 050a 	sub.w	r5, r5, sl
 8007f9c:	10ad      	asrs	r5, r5, #2
 8007f9e:	6125      	str	r5, [r4, #16]
 8007fa0:	4658      	mov	r0, fp
 8007fa2:	f7fe fa17 	bl	80063d4 <__hi0bits>
 8007fa6:	016d      	lsls	r5, r5, #5
 8007fa8:	f8d8 6000 	ldr.w	r6, [r8]
 8007fac:	1a2d      	subs	r5, r5, r0
 8007fae:	42b5      	cmp	r5, r6
 8007fb0:	dd54      	ble.n	800805c <__gethex+0x228>
 8007fb2:	1bad      	subs	r5, r5, r6
 8007fb4:	4629      	mov	r1, r5
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	f7fe fdab 	bl	8006b12 <__any_on>
 8007fbc:	4681      	mov	r9, r0
 8007fbe:	b178      	cbz	r0, 8007fe0 <__gethex+0x1ac>
 8007fc0:	1e6b      	subs	r3, r5, #1
 8007fc2:	1159      	asrs	r1, r3, #5
 8007fc4:	f003 021f 	and.w	r2, r3, #31
 8007fc8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007fcc:	f04f 0901 	mov.w	r9, #1
 8007fd0:	fa09 f202 	lsl.w	r2, r9, r2
 8007fd4:	420a      	tst	r2, r1
 8007fd6:	d003      	beq.n	8007fe0 <__gethex+0x1ac>
 8007fd8:	454b      	cmp	r3, r9
 8007fda:	dc36      	bgt.n	800804a <__gethex+0x216>
 8007fdc:	f04f 0902 	mov.w	r9, #2
 8007fe0:	4629      	mov	r1, r5
 8007fe2:	4620      	mov	r0, r4
 8007fe4:	f7ff febf 	bl	8007d66 <rshift>
 8007fe8:	442f      	add	r7, r5
 8007fea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007fee:	42bb      	cmp	r3, r7
 8007ff0:	da42      	bge.n	8008078 <__gethex+0x244>
 8007ff2:	9801      	ldr	r0, [sp, #4]
 8007ff4:	4621      	mov	r1, r4
 8007ff6:	f7fe f93b 	bl	8006270 <_Bfree>
 8007ffa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	6013      	str	r3, [r2, #0]
 8008000:	25a3      	movs	r5, #163	@ 0xa3
 8008002:	e793      	b.n	8007f2c <__gethex+0xf8>
 8008004:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008008:	2a2e      	cmp	r2, #46	@ 0x2e
 800800a:	d012      	beq.n	8008032 <__gethex+0x1fe>
 800800c:	2b20      	cmp	r3, #32
 800800e:	d104      	bne.n	800801a <__gethex+0x1e6>
 8008010:	f845 bb04 	str.w	fp, [r5], #4
 8008014:	f04f 0b00 	mov.w	fp, #0
 8008018:	465b      	mov	r3, fp
 800801a:	7830      	ldrb	r0, [r6, #0]
 800801c:	9303      	str	r3, [sp, #12]
 800801e:	f7ff fef4 	bl	8007e0a <__hexdig_fun>
 8008022:	9b03      	ldr	r3, [sp, #12]
 8008024:	f000 000f 	and.w	r0, r0, #15
 8008028:	4098      	lsls	r0, r3
 800802a:	ea4b 0b00 	orr.w	fp, fp, r0
 800802e:	3304      	adds	r3, #4
 8008030:	e7ae      	b.n	8007f90 <__gethex+0x15c>
 8008032:	45b1      	cmp	r9, r6
 8008034:	d8ea      	bhi.n	800800c <__gethex+0x1d8>
 8008036:	492b      	ldr	r1, [pc, #172]	@ (80080e4 <__gethex+0x2b0>)
 8008038:	9303      	str	r3, [sp, #12]
 800803a:	2201      	movs	r2, #1
 800803c:	4630      	mov	r0, r6
 800803e:	f7ff fe3d 	bl	8007cbc <strncmp>
 8008042:	9b03      	ldr	r3, [sp, #12]
 8008044:	2800      	cmp	r0, #0
 8008046:	d1e1      	bne.n	800800c <__gethex+0x1d8>
 8008048:	e7a2      	b.n	8007f90 <__gethex+0x15c>
 800804a:	1ea9      	subs	r1, r5, #2
 800804c:	4620      	mov	r0, r4
 800804e:	f7fe fd60 	bl	8006b12 <__any_on>
 8008052:	2800      	cmp	r0, #0
 8008054:	d0c2      	beq.n	8007fdc <__gethex+0x1a8>
 8008056:	f04f 0903 	mov.w	r9, #3
 800805a:	e7c1      	b.n	8007fe0 <__gethex+0x1ac>
 800805c:	da09      	bge.n	8008072 <__gethex+0x23e>
 800805e:	1b75      	subs	r5, r6, r5
 8008060:	4621      	mov	r1, r4
 8008062:	9801      	ldr	r0, [sp, #4]
 8008064:	462a      	mov	r2, r5
 8008066:	f7fe fb1b 	bl	80066a0 <__lshift>
 800806a:	1b7f      	subs	r7, r7, r5
 800806c:	4604      	mov	r4, r0
 800806e:	f100 0a14 	add.w	sl, r0, #20
 8008072:	f04f 0900 	mov.w	r9, #0
 8008076:	e7b8      	b.n	8007fea <__gethex+0x1b6>
 8008078:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800807c:	42bd      	cmp	r5, r7
 800807e:	dd6f      	ble.n	8008160 <__gethex+0x32c>
 8008080:	1bed      	subs	r5, r5, r7
 8008082:	42ae      	cmp	r6, r5
 8008084:	dc34      	bgt.n	80080f0 <__gethex+0x2bc>
 8008086:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800808a:	2b02      	cmp	r3, #2
 800808c:	d022      	beq.n	80080d4 <__gethex+0x2a0>
 800808e:	2b03      	cmp	r3, #3
 8008090:	d024      	beq.n	80080dc <__gethex+0x2a8>
 8008092:	2b01      	cmp	r3, #1
 8008094:	d115      	bne.n	80080c2 <__gethex+0x28e>
 8008096:	42ae      	cmp	r6, r5
 8008098:	d113      	bne.n	80080c2 <__gethex+0x28e>
 800809a:	2e01      	cmp	r6, #1
 800809c:	d10b      	bne.n	80080b6 <__gethex+0x282>
 800809e:	9a02      	ldr	r2, [sp, #8]
 80080a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80080a4:	6013      	str	r3, [r2, #0]
 80080a6:	2301      	movs	r3, #1
 80080a8:	6123      	str	r3, [r4, #16]
 80080aa:	f8ca 3000 	str.w	r3, [sl]
 80080ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80080b0:	2562      	movs	r5, #98	@ 0x62
 80080b2:	601c      	str	r4, [r3, #0]
 80080b4:	e73a      	b.n	8007f2c <__gethex+0xf8>
 80080b6:	1e71      	subs	r1, r6, #1
 80080b8:	4620      	mov	r0, r4
 80080ba:	f7fe fd2a 	bl	8006b12 <__any_on>
 80080be:	2800      	cmp	r0, #0
 80080c0:	d1ed      	bne.n	800809e <__gethex+0x26a>
 80080c2:	9801      	ldr	r0, [sp, #4]
 80080c4:	4621      	mov	r1, r4
 80080c6:	f7fe f8d3 	bl	8006270 <_Bfree>
 80080ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80080cc:	2300      	movs	r3, #0
 80080ce:	6013      	str	r3, [r2, #0]
 80080d0:	2550      	movs	r5, #80	@ 0x50
 80080d2:	e72b      	b.n	8007f2c <__gethex+0xf8>
 80080d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d1f3      	bne.n	80080c2 <__gethex+0x28e>
 80080da:	e7e0      	b.n	800809e <__gethex+0x26a>
 80080dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d1dd      	bne.n	800809e <__gethex+0x26a>
 80080e2:	e7ee      	b.n	80080c2 <__gethex+0x28e>
 80080e4:	08008cc8 	.word	0x08008cc8
 80080e8:	08008b61 	.word	0x08008b61
 80080ec:	08008e3a 	.word	0x08008e3a
 80080f0:	1e6f      	subs	r7, r5, #1
 80080f2:	f1b9 0f00 	cmp.w	r9, #0
 80080f6:	d130      	bne.n	800815a <__gethex+0x326>
 80080f8:	b127      	cbz	r7, 8008104 <__gethex+0x2d0>
 80080fa:	4639      	mov	r1, r7
 80080fc:	4620      	mov	r0, r4
 80080fe:	f7fe fd08 	bl	8006b12 <__any_on>
 8008102:	4681      	mov	r9, r0
 8008104:	117a      	asrs	r2, r7, #5
 8008106:	2301      	movs	r3, #1
 8008108:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800810c:	f007 071f 	and.w	r7, r7, #31
 8008110:	40bb      	lsls	r3, r7
 8008112:	4213      	tst	r3, r2
 8008114:	4629      	mov	r1, r5
 8008116:	4620      	mov	r0, r4
 8008118:	bf18      	it	ne
 800811a:	f049 0902 	orrne.w	r9, r9, #2
 800811e:	f7ff fe22 	bl	8007d66 <rshift>
 8008122:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008126:	1b76      	subs	r6, r6, r5
 8008128:	2502      	movs	r5, #2
 800812a:	f1b9 0f00 	cmp.w	r9, #0
 800812e:	d047      	beq.n	80081c0 <__gethex+0x38c>
 8008130:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008134:	2b02      	cmp	r3, #2
 8008136:	d015      	beq.n	8008164 <__gethex+0x330>
 8008138:	2b03      	cmp	r3, #3
 800813a:	d017      	beq.n	800816c <__gethex+0x338>
 800813c:	2b01      	cmp	r3, #1
 800813e:	d109      	bne.n	8008154 <__gethex+0x320>
 8008140:	f019 0f02 	tst.w	r9, #2
 8008144:	d006      	beq.n	8008154 <__gethex+0x320>
 8008146:	f8da 3000 	ldr.w	r3, [sl]
 800814a:	ea49 0903 	orr.w	r9, r9, r3
 800814e:	f019 0f01 	tst.w	r9, #1
 8008152:	d10e      	bne.n	8008172 <__gethex+0x33e>
 8008154:	f045 0510 	orr.w	r5, r5, #16
 8008158:	e032      	b.n	80081c0 <__gethex+0x38c>
 800815a:	f04f 0901 	mov.w	r9, #1
 800815e:	e7d1      	b.n	8008104 <__gethex+0x2d0>
 8008160:	2501      	movs	r5, #1
 8008162:	e7e2      	b.n	800812a <__gethex+0x2f6>
 8008164:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008166:	f1c3 0301 	rsb	r3, r3, #1
 800816a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800816c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800816e:	2b00      	cmp	r3, #0
 8008170:	d0f0      	beq.n	8008154 <__gethex+0x320>
 8008172:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008176:	f104 0314 	add.w	r3, r4, #20
 800817a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800817e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008182:	f04f 0c00 	mov.w	ip, #0
 8008186:	4618      	mov	r0, r3
 8008188:	f853 2b04 	ldr.w	r2, [r3], #4
 800818c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008190:	d01b      	beq.n	80081ca <__gethex+0x396>
 8008192:	3201      	adds	r2, #1
 8008194:	6002      	str	r2, [r0, #0]
 8008196:	2d02      	cmp	r5, #2
 8008198:	f104 0314 	add.w	r3, r4, #20
 800819c:	d13c      	bne.n	8008218 <__gethex+0x3e4>
 800819e:	f8d8 2000 	ldr.w	r2, [r8]
 80081a2:	3a01      	subs	r2, #1
 80081a4:	42b2      	cmp	r2, r6
 80081a6:	d109      	bne.n	80081bc <__gethex+0x388>
 80081a8:	1171      	asrs	r1, r6, #5
 80081aa:	2201      	movs	r2, #1
 80081ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80081b0:	f006 061f 	and.w	r6, r6, #31
 80081b4:	fa02 f606 	lsl.w	r6, r2, r6
 80081b8:	421e      	tst	r6, r3
 80081ba:	d13a      	bne.n	8008232 <__gethex+0x3fe>
 80081bc:	f045 0520 	orr.w	r5, r5, #32
 80081c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081c2:	601c      	str	r4, [r3, #0]
 80081c4:	9b02      	ldr	r3, [sp, #8]
 80081c6:	601f      	str	r7, [r3, #0]
 80081c8:	e6b0      	b.n	8007f2c <__gethex+0xf8>
 80081ca:	4299      	cmp	r1, r3
 80081cc:	f843 cc04 	str.w	ip, [r3, #-4]
 80081d0:	d8d9      	bhi.n	8008186 <__gethex+0x352>
 80081d2:	68a3      	ldr	r3, [r4, #8]
 80081d4:	459b      	cmp	fp, r3
 80081d6:	db17      	blt.n	8008208 <__gethex+0x3d4>
 80081d8:	6861      	ldr	r1, [r4, #4]
 80081da:	9801      	ldr	r0, [sp, #4]
 80081dc:	3101      	adds	r1, #1
 80081de:	f7fe f807 	bl	80061f0 <_Balloc>
 80081e2:	4681      	mov	r9, r0
 80081e4:	b918      	cbnz	r0, 80081ee <__gethex+0x3ba>
 80081e6:	4b1a      	ldr	r3, [pc, #104]	@ (8008250 <__gethex+0x41c>)
 80081e8:	4602      	mov	r2, r0
 80081ea:	2184      	movs	r1, #132	@ 0x84
 80081ec:	e6c5      	b.n	8007f7a <__gethex+0x146>
 80081ee:	6922      	ldr	r2, [r4, #16]
 80081f0:	3202      	adds	r2, #2
 80081f2:	f104 010c 	add.w	r1, r4, #12
 80081f6:	0092      	lsls	r2, r2, #2
 80081f8:	300c      	adds	r0, #12
 80081fa:	f7ff fd81 	bl	8007d00 <memcpy>
 80081fe:	4621      	mov	r1, r4
 8008200:	9801      	ldr	r0, [sp, #4]
 8008202:	f7fe f835 	bl	8006270 <_Bfree>
 8008206:	464c      	mov	r4, r9
 8008208:	6923      	ldr	r3, [r4, #16]
 800820a:	1c5a      	adds	r2, r3, #1
 800820c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008210:	6122      	str	r2, [r4, #16]
 8008212:	2201      	movs	r2, #1
 8008214:	615a      	str	r2, [r3, #20]
 8008216:	e7be      	b.n	8008196 <__gethex+0x362>
 8008218:	6922      	ldr	r2, [r4, #16]
 800821a:	455a      	cmp	r2, fp
 800821c:	dd0b      	ble.n	8008236 <__gethex+0x402>
 800821e:	2101      	movs	r1, #1
 8008220:	4620      	mov	r0, r4
 8008222:	f7ff fda0 	bl	8007d66 <rshift>
 8008226:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800822a:	3701      	adds	r7, #1
 800822c:	42bb      	cmp	r3, r7
 800822e:	f6ff aee0 	blt.w	8007ff2 <__gethex+0x1be>
 8008232:	2501      	movs	r5, #1
 8008234:	e7c2      	b.n	80081bc <__gethex+0x388>
 8008236:	f016 061f 	ands.w	r6, r6, #31
 800823a:	d0fa      	beq.n	8008232 <__gethex+0x3fe>
 800823c:	4453      	add	r3, sl
 800823e:	f1c6 0620 	rsb	r6, r6, #32
 8008242:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008246:	f7fe f8c5 	bl	80063d4 <__hi0bits>
 800824a:	42b0      	cmp	r0, r6
 800824c:	dbe7      	blt.n	800821e <__gethex+0x3ea>
 800824e:	e7f0      	b.n	8008232 <__gethex+0x3fe>
 8008250:	08008b61 	.word	0x08008b61

08008254 <L_shift>:
 8008254:	f1c2 0208 	rsb	r2, r2, #8
 8008258:	0092      	lsls	r2, r2, #2
 800825a:	b570      	push	{r4, r5, r6, lr}
 800825c:	f1c2 0620 	rsb	r6, r2, #32
 8008260:	6843      	ldr	r3, [r0, #4]
 8008262:	6804      	ldr	r4, [r0, #0]
 8008264:	fa03 f506 	lsl.w	r5, r3, r6
 8008268:	432c      	orrs	r4, r5
 800826a:	40d3      	lsrs	r3, r2
 800826c:	6004      	str	r4, [r0, #0]
 800826e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008272:	4288      	cmp	r0, r1
 8008274:	d3f4      	bcc.n	8008260 <L_shift+0xc>
 8008276:	bd70      	pop	{r4, r5, r6, pc}

08008278 <__match>:
 8008278:	b530      	push	{r4, r5, lr}
 800827a:	6803      	ldr	r3, [r0, #0]
 800827c:	3301      	adds	r3, #1
 800827e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008282:	b914      	cbnz	r4, 800828a <__match+0x12>
 8008284:	6003      	str	r3, [r0, #0]
 8008286:	2001      	movs	r0, #1
 8008288:	bd30      	pop	{r4, r5, pc}
 800828a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800828e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008292:	2d19      	cmp	r5, #25
 8008294:	bf98      	it	ls
 8008296:	3220      	addls	r2, #32
 8008298:	42a2      	cmp	r2, r4
 800829a:	d0f0      	beq.n	800827e <__match+0x6>
 800829c:	2000      	movs	r0, #0
 800829e:	e7f3      	b.n	8008288 <__match+0x10>

080082a0 <__hexnan>:
 80082a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082a4:	680b      	ldr	r3, [r1, #0]
 80082a6:	6801      	ldr	r1, [r0, #0]
 80082a8:	115e      	asrs	r6, r3, #5
 80082aa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80082ae:	f013 031f 	ands.w	r3, r3, #31
 80082b2:	b087      	sub	sp, #28
 80082b4:	bf18      	it	ne
 80082b6:	3604      	addne	r6, #4
 80082b8:	2500      	movs	r5, #0
 80082ba:	1f37      	subs	r7, r6, #4
 80082bc:	4682      	mov	sl, r0
 80082be:	4690      	mov	r8, r2
 80082c0:	9301      	str	r3, [sp, #4]
 80082c2:	f846 5c04 	str.w	r5, [r6, #-4]
 80082c6:	46b9      	mov	r9, r7
 80082c8:	463c      	mov	r4, r7
 80082ca:	9502      	str	r5, [sp, #8]
 80082cc:	46ab      	mov	fp, r5
 80082ce:	784a      	ldrb	r2, [r1, #1]
 80082d0:	1c4b      	adds	r3, r1, #1
 80082d2:	9303      	str	r3, [sp, #12]
 80082d4:	b342      	cbz	r2, 8008328 <__hexnan+0x88>
 80082d6:	4610      	mov	r0, r2
 80082d8:	9105      	str	r1, [sp, #20]
 80082da:	9204      	str	r2, [sp, #16]
 80082dc:	f7ff fd95 	bl	8007e0a <__hexdig_fun>
 80082e0:	2800      	cmp	r0, #0
 80082e2:	d151      	bne.n	8008388 <__hexnan+0xe8>
 80082e4:	9a04      	ldr	r2, [sp, #16]
 80082e6:	9905      	ldr	r1, [sp, #20]
 80082e8:	2a20      	cmp	r2, #32
 80082ea:	d818      	bhi.n	800831e <__hexnan+0x7e>
 80082ec:	9b02      	ldr	r3, [sp, #8]
 80082ee:	459b      	cmp	fp, r3
 80082f0:	dd13      	ble.n	800831a <__hexnan+0x7a>
 80082f2:	454c      	cmp	r4, r9
 80082f4:	d206      	bcs.n	8008304 <__hexnan+0x64>
 80082f6:	2d07      	cmp	r5, #7
 80082f8:	dc04      	bgt.n	8008304 <__hexnan+0x64>
 80082fa:	462a      	mov	r2, r5
 80082fc:	4649      	mov	r1, r9
 80082fe:	4620      	mov	r0, r4
 8008300:	f7ff ffa8 	bl	8008254 <L_shift>
 8008304:	4544      	cmp	r4, r8
 8008306:	d952      	bls.n	80083ae <__hexnan+0x10e>
 8008308:	2300      	movs	r3, #0
 800830a:	f1a4 0904 	sub.w	r9, r4, #4
 800830e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008312:	f8cd b008 	str.w	fp, [sp, #8]
 8008316:	464c      	mov	r4, r9
 8008318:	461d      	mov	r5, r3
 800831a:	9903      	ldr	r1, [sp, #12]
 800831c:	e7d7      	b.n	80082ce <__hexnan+0x2e>
 800831e:	2a29      	cmp	r2, #41	@ 0x29
 8008320:	d157      	bne.n	80083d2 <__hexnan+0x132>
 8008322:	3102      	adds	r1, #2
 8008324:	f8ca 1000 	str.w	r1, [sl]
 8008328:	f1bb 0f00 	cmp.w	fp, #0
 800832c:	d051      	beq.n	80083d2 <__hexnan+0x132>
 800832e:	454c      	cmp	r4, r9
 8008330:	d206      	bcs.n	8008340 <__hexnan+0xa0>
 8008332:	2d07      	cmp	r5, #7
 8008334:	dc04      	bgt.n	8008340 <__hexnan+0xa0>
 8008336:	462a      	mov	r2, r5
 8008338:	4649      	mov	r1, r9
 800833a:	4620      	mov	r0, r4
 800833c:	f7ff ff8a 	bl	8008254 <L_shift>
 8008340:	4544      	cmp	r4, r8
 8008342:	d936      	bls.n	80083b2 <__hexnan+0x112>
 8008344:	f1a8 0204 	sub.w	r2, r8, #4
 8008348:	4623      	mov	r3, r4
 800834a:	f853 1b04 	ldr.w	r1, [r3], #4
 800834e:	f842 1f04 	str.w	r1, [r2, #4]!
 8008352:	429f      	cmp	r7, r3
 8008354:	d2f9      	bcs.n	800834a <__hexnan+0xaa>
 8008356:	1b3b      	subs	r3, r7, r4
 8008358:	f023 0303 	bic.w	r3, r3, #3
 800835c:	3304      	adds	r3, #4
 800835e:	3401      	adds	r4, #1
 8008360:	3e03      	subs	r6, #3
 8008362:	42b4      	cmp	r4, r6
 8008364:	bf88      	it	hi
 8008366:	2304      	movhi	r3, #4
 8008368:	4443      	add	r3, r8
 800836a:	2200      	movs	r2, #0
 800836c:	f843 2b04 	str.w	r2, [r3], #4
 8008370:	429f      	cmp	r7, r3
 8008372:	d2fb      	bcs.n	800836c <__hexnan+0xcc>
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	b91b      	cbnz	r3, 8008380 <__hexnan+0xe0>
 8008378:	4547      	cmp	r7, r8
 800837a:	d128      	bne.n	80083ce <__hexnan+0x12e>
 800837c:	2301      	movs	r3, #1
 800837e:	603b      	str	r3, [r7, #0]
 8008380:	2005      	movs	r0, #5
 8008382:	b007      	add	sp, #28
 8008384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008388:	3501      	adds	r5, #1
 800838a:	2d08      	cmp	r5, #8
 800838c:	f10b 0b01 	add.w	fp, fp, #1
 8008390:	dd06      	ble.n	80083a0 <__hexnan+0x100>
 8008392:	4544      	cmp	r4, r8
 8008394:	d9c1      	bls.n	800831a <__hexnan+0x7a>
 8008396:	2300      	movs	r3, #0
 8008398:	f844 3c04 	str.w	r3, [r4, #-4]
 800839c:	2501      	movs	r5, #1
 800839e:	3c04      	subs	r4, #4
 80083a0:	6822      	ldr	r2, [r4, #0]
 80083a2:	f000 000f 	and.w	r0, r0, #15
 80083a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80083aa:	6020      	str	r0, [r4, #0]
 80083ac:	e7b5      	b.n	800831a <__hexnan+0x7a>
 80083ae:	2508      	movs	r5, #8
 80083b0:	e7b3      	b.n	800831a <__hexnan+0x7a>
 80083b2:	9b01      	ldr	r3, [sp, #4]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d0dd      	beq.n	8008374 <__hexnan+0xd4>
 80083b8:	f1c3 0320 	rsb	r3, r3, #32
 80083bc:	f04f 32ff 	mov.w	r2, #4294967295
 80083c0:	40da      	lsrs	r2, r3
 80083c2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80083c6:	4013      	ands	r3, r2
 80083c8:	f846 3c04 	str.w	r3, [r6, #-4]
 80083cc:	e7d2      	b.n	8008374 <__hexnan+0xd4>
 80083ce:	3f04      	subs	r7, #4
 80083d0:	e7d0      	b.n	8008374 <__hexnan+0xd4>
 80083d2:	2004      	movs	r0, #4
 80083d4:	e7d5      	b.n	8008382 <__hexnan+0xe2>

080083d6 <__ascii_mbtowc>:
 80083d6:	b082      	sub	sp, #8
 80083d8:	b901      	cbnz	r1, 80083dc <__ascii_mbtowc+0x6>
 80083da:	a901      	add	r1, sp, #4
 80083dc:	b142      	cbz	r2, 80083f0 <__ascii_mbtowc+0x1a>
 80083de:	b14b      	cbz	r3, 80083f4 <__ascii_mbtowc+0x1e>
 80083e0:	7813      	ldrb	r3, [r2, #0]
 80083e2:	600b      	str	r3, [r1, #0]
 80083e4:	7812      	ldrb	r2, [r2, #0]
 80083e6:	1e10      	subs	r0, r2, #0
 80083e8:	bf18      	it	ne
 80083ea:	2001      	movne	r0, #1
 80083ec:	b002      	add	sp, #8
 80083ee:	4770      	bx	lr
 80083f0:	4610      	mov	r0, r2
 80083f2:	e7fb      	b.n	80083ec <__ascii_mbtowc+0x16>
 80083f4:	f06f 0001 	mvn.w	r0, #1
 80083f8:	e7f8      	b.n	80083ec <__ascii_mbtowc+0x16>

080083fa <_realloc_r>:
 80083fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083fe:	4680      	mov	r8, r0
 8008400:	4615      	mov	r5, r2
 8008402:	460c      	mov	r4, r1
 8008404:	b921      	cbnz	r1, 8008410 <_realloc_r+0x16>
 8008406:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800840a:	4611      	mov	r1, r2
 800840c:	f7fd be64 	b.w	80060d8 <_malloc_r>
 8008410:	b92a      	cbnz	r2, 800841e <_realloc_r+0x24>
 8008412:	f7fd fded 	bl	8005ff0 <_free_r>
 8008416:	2400      	movs	r4, #0
 8008418:	4620      	mov	r0, r4
 800841a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800841e:	f000 fa41 	bl	80088a4 <_malloc_usable_size_r>
 8008422:	4285      	cmp	r5, r0
 8008424:	4606      	mov	r6, r0
 8008426:	d802      	bhi.n	800842e <_realloc_r+0x34>
 8008428:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800842c:	d8f4      	bhi.n	8008418 <_realloc_r+0x1e>
 800842e:	4629      	mov	r1, r5
 8008430:	4640      	mov	r0, r8
 8008432:	f7fd fe51 	bl	80060d8 <_malloc_r>
 8008436:	4607      	mov	r7, r0
 8008438:	2800      	cmp	r0, #0
 800843a:	d0ec      	beq.n	8008416 <_realloc_r+0x1c>
 800843c:	42b5      	cmp	r5, r6
 800843e:	462a      	mov	r2, r5
 8008440:	4621      	mov	r1, r4
 8008442:	bf28      	it	cs
 8008444:	4632      	movcs	r2, r6
 8008446:	f7ff fc5b 	bl	8007d00 <memcpy>
 800844a:	4621      	mov	r1, r4
 800844c:	4640      	mov	r0, r8
 800844e:	f7fd fdcf 	bl	8005ff0 <_free_r>
 8008452:	463c      	mov	r4, r7
 8008454:	e7e0      	b.n	8008418 <_realloc_r+0x1e>

08008456 <__ascii_wctomb>:
 8008456:	4603      	mov	r3, r0
 8008458:	4608      	mov	r0, r1
 800845a:	b141      	cbz	r1, 800846e <__ascii_wctomb+0x18>
 800845c:	2aff      	cmp	r2, #255	@ 0xff
 800845e:	d904      	bls.n	800846a <__ascii_wctomb+0x14>
 8008460:	228a      	movs	r2, #138	@ 0x8a
 8008462:	601a      	str	r2, [r3, #0]
 8008464:	f04f 30ff 	mov.w	r0, #4294967295
 8008468:	4770      	bx	lr
 800846a:	700a      	strb	r2, [r1, #0]
 800846c:	2001      	movs	r0, #1
 800846e:	4770      	bx	lr

08008470 <__sfputc_r>:
 8008470:	6893      	ldr	r3, [r2, #8]
 8008472:	3b01      	subs	r3, #1
 8008474:	2b00      	cmp	r3, #0
 8008476:	b410      	push	{r4}
 8008478:	6093      	str	r3, [r2, #8]
 800847a:	da08      	bge.n	800848e <__sfputc_r+0x1e>
 800847c:	6994      	ldr	r4, [r2, #24]
 800847e:	42a3      	cmp	r3, r4
 8008480:	db01      	blt.n	8008486 <__sfputc_r+0x16>
 8008482:	290a      	cmp	r1, #10
 8008484:	d103      	bne.n	800848e <__sfputc_r+0x1e>
 8008486:	f85d 4b04 	ldr.w	r4, [sp], #4
 800848a:	f000 b933 	b.w	80086f4 <__swbuf_r>
 800848e:	6813      	ldr	r3, [r2, #0]
 8008490:	1c58      	adds	r0, r3, #1
 8008492:	6010      	str	r0, [r2, #0]
 8008494:	7019      	strb	r1, [r3, #0]
 8008496:	4608      	mov	r0, r1
 8008498:	f85d 4b04 	ldr.w	r4, [sp], #4
 800849c:	4770      	bx	lr

0800849e <__sfputs_r>:
 800849e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084a0:	4606      	mov	r6, r0
 80084a2:	460f      	mov	r7, r1
 80084a4:	4614      	mov	r4, r2
 80084a6:	18d5      	adds	r5, r2, r3
 80084a8:	42ac      	cmp	r4, r5
 80084aa:	d101      	bne.n	80084b0 <__sfputs_r+0x12>
 80084ac:	2000      	movs	r0, #0
 80084ae:	e007      	b.n	80084c0 <__sfputs_r+0x22>
 80084b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084b4:	463a      	mov	r2, r7
 80084b6:	4630      	mov	r0, r6
 80084b8:	f7ff ffda 	bl	8008470 <__sfputc_r>
 80084bc:	1c43      	adds	r3, r0, #1
 80084be:	d1f3      	bne.n	80084a8 <__sfputs_r+0xa>
 80084c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080084c4 <_vfiprintf_r>:
 80084c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084c8:	460d      	mov	r5, r1
 80084ca:	b09d      	sub	sp, #116	@ 0x74
 80084cc:	4614      	mov	r4, r2
 80084ce:	4698      	mov	r8, r3
 80084d0:	4606      	mov	r6, r0
 80084d2:	b118      	cbz	r0, 80084dc <_vfiprintf_r+0x18>
 80084d4:	6a03      	ldr	r3, [r0, #32]
 80084d6:	b90b      	cbnz	r3, 80084dc <_vfiprintf_r+0x18>
 80084d8:	f7fc fdfe 	bl	80050d8 <__sinit>
 80084dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80084de:	07d9      	lsls	r1, r3, #31
 80084e0:	d405      	bmi.n	80084ee <_vfiprintf_r+0x2a>
 80084e2:	89ab      	ldrh	r3, [r5, #12]
 80084e4:	059a      	lsls	r2, r3, #22
 80084e6:	d402      	bmi.n	80084ee <_vfiprintf_r+0x2a>
 80084e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80084ea:	f7fc ff0c 	bl	8005306 <__retarget_lock_acquire_recursive>
 80084ee:	89ab      	ldrh	r3, [r5, #12]
 80084f0:	071b      	lsls	r3, r3, #28
 80084f2:	d501      	bpl.n	80084f8 <_vfiprintf_r+0x34>
 80084f4:	692b      	ldr	r3, [r5, #16]
 80084f6:	b99b      	cbnz	r3, 8008520 <_vfiprintf_r+0x5c>
 80084f8:	4629      	mov	r1, r5
 80084fa:	4630      	mov	r0, r6
 80084fc:	f000 f938 	bl	8008770 <__swsetup_r>
 8008500:	b170      	cbz	r0, 8008520 <_vfiprintf_r+0x5c>
 8008502:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008504:	07dc      	lsls	r4, r3, #31
 8008506:	d504      	bpl.n	8008512 <_vfiprintf_r+0x4e>
 8008508:	f04f 30ff 	mov.w	r0, #4294967295
 800850c:	b01d      	add	sp, #116	@ 0x74
 800850e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008512:	89ab      	ldrh	r3, [r5, #12]
 8008514:	0598      	lsls	r0, r3, #22
 8008516:	d4f7      	bmi.n	8008508 <_vfiprintf_r+0x44>
 8008518:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800851a:	f7fc fef5 	bl	8005308 <__retarget_lock_release_recursive>
 800851e:	e7f3      	b.n	8008508 <_vfiprintf_r+0x44>
 8008520:	2300      	movs	r3, #0
 8008522:	9309      	str	r3, [sp, #36]	@ 0x24
 8008524:	2320      	movs	r3, #32
 8008526:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800852a:	f8cd 800c 	str.w	r8, [sp, #12]
 800852e:	2330      	movs	r3, #48	@ 0x30
 8008530:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80086e0 <_vfiprintf_r+0x21c>
 8008534:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008538:	f04f 0901 	mov.w	r9, #1
 800853c:	4623      	mov	r3, r4
 800853e:	469a      	mov	sl, r3
 8008540:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008544:	b10a      	cbz	r2, 800854a <_vfiprintf_r+0x86>
 8008546:	2a25      	cmp	r2, #37	@ 0x25
 8008548:	d1f9      	bne.n	800853e <_vfiprintf_r+0x7a>
 800854a:	ebba 0b04 	subs.w	fp, sl, r4
 800854e:	d00b      	beq.n	8008568 <_vfiprintf_r+0xa4>
 8008550:	465b      	mov	r3, fp
 8008552:	4622      	mov	r2, r4
 8008554:	4629      	mov	r1, r5
 8008556:	4630      	mov	r0, r6
 8008558:	f7ff ffa1 	bl	800849e <__sfputs_r>
 800855c:	3001      	adds	r0, #1
 800855e:	f000 80a7 	beq.w	80086b0 <_vfiprintf_r+0x1ec>
 8008562:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008564:	445a      	add	r2, fp
 8008566:	9209      	str	r2, [sp, #36]	@ 0x24
 8008568:	f89a 3000 	ldrb.w	r3, [sl]
 800856c:	2b00      	cmp	r3, #0
 800856e:	f000 809f 	beq.w	80086b0 <_vfiprintf_r+0x1ec>
 8008572:	2300      	movs	r3, #0
 8008574:	f04f 32ff 	mov.w	r2, #4294967295
 8008578:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800857c:	f10a 0a01 	add.w	sl, sl, #1
 8008580:	9304      	str	r3, [sp, #16]
 8008582:	9307      	str	r3, [sp, #28]
 8008584:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008588:	931a      	str	r3, [sp, #104]	@ 0x68
 800858a:	4654      	mov	r4, sl
 800858c:	2205      	movs	r2, #5
 800858e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008592:	4853      	ldr	r0, [pc, #332]	@ (80086e0 <_vfiprintf_r+0x21c>)
 8008594:	f7f7 fe1c 	bl	80001d0 <memchr>
 8008598:	9a04      	ldr	r2, [sp, #16]
 800859a:	b9d8      	cbnz	r0, 80085d4 <_vfiprintf_r+0x110>
 800859c:	06d1      	lsls	r1, r2, #27
 800859e:	bf44      	itt	mi
 80085a0:	2320      	movmi	r3, #32
 80085a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085a6:	0713      	lsls	r3, r2, #28
 80085a8:	bf44      	itt	mi
 80085aa:	232b      	movmi	r3, #43	@ 0x2b
 80085ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085b0:	f89a 3000 	ldrb.w	r3, [sl]
 80085b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80085b6:	d015      	beq.n	80085e4 <_vfiprintf_r+0x120>
 80085b8:	9a07      	ldr	r2, [sp, #28]
 80085ba:	4654      	mov	r4, sl
 80085bc:	2000      	movs	r0, #0
 80085be:	f04f 0c0a 	mov.w	ip, #10
 80085c2:	4621      	mov	r1, r4
 80085c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085c8:	3b30      	subs	r3, #48	@ 0x30
 80085ca:	2b09      	cmp	r3, #9
 80085cc:	d94b      	bls.n	8008666 <_vfiprintf_r+0x1a2>
 80085ce:	b1b0      	cbz	r0, 80085fe <_vfiprintf_r+0x13a>
 80085d0:	9207      	str	r2, [sp, #28]
 80085d2:	e014      	b.n	80085fe <_vfiprintf_r+0x13a>
 80085d4:	eba0 0308 	sub.w	r3, r0, r8
 80085d8:	fa09 f303 	lsl.w	r3, r9, r3
 80085dc:	4313      	orrs	r3, r2
 80085de:	9304      	str	r3, [sp, #16]
 80085e0:	46a2      	mov	sl, r4
 80085e2:	e7d2      	b.n	800858a <_vfiprintf_r+0xc6>
 80085e4:	9b03      	ldr	r3, [sp, #12]
 80085e6:	1d19      	adds	r1, r3, #4
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	9103      	str	r1, [sp, #12]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	bfbb      	ittet	lt
 80085f0:	425b      	neglt	r3, r3
 80085f2:	f042 0202 	orrlt.w	r2, r2, #2
 80085f6:	9307      	strge	r3, [sp, #28]
 80085f8:	9307      	strlt	r3, [sp, #28]
 80085fa:	bfb8      	it	lt
 80085fc:	9204      	strlt	r2, [sp, #16]
 80085fe:	7823      	ldrb	r3, [r4, #0]
 8008600:	2b2e      	cmp	r3, #46	@ 0x2e
 8008602:	d10a      	bne.n	800861a <_vfiprintf_r+0x156>
 8008604:	7863      	ldrb	r3, [r4, #1]
 8008606:	2b2a      	cmp	r3, #42	@ 0x2a
 8008608:	d132      	bne.n	8008670 <_vfiprintf_r+0x1ac>
 800860a:	9b03      	ldr	r3, [sp, #12]
 800860c:	1d1a      	adds	r2, r3, #4
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	9203      	str	r2, [sp, #12]
 8008612:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008616:	3402      	adds	r4, #2
 8008618:	9305      	str	r3, [sp, #20]
 800861a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80086f0 <_vfiprintf_r+0x22c>
 800861e:	7821      	ldrb	r1, [r4, #0]
 8008620:	2203      	movs	r2, #3
 8008622:	4650      	mov	r0, sl
 8008624:	f7f7 fdd4 	bl	80001d0 <memchr>
 8008628:	b138      	cbz	r0, 800863a <_vfiprintf_r+0x176>
 800862a:	9b04      	ldr	r3, [sp, #16]
 800862c:	eba0 000a 	sub.w	r0, r0, sl
 8008630:	2240      	movs	r2, #64	@ 0x40
 8008632:	4082      	lsls	r2, r0
 8008634:	4313      	orrs	r3, r2
 8008636:	3401      	adds	r4, #1
 8008638:	9304      	str	r3, [sp, #16]
 800863a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800863e:	4829      	ldr	r0, [pc, #164]	@ (80086e4 <_vfiprintf_r+0x220>)
 8008640:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008644:	2206      	movs	r2, #6
 8008646:	f7f7 fdc3 	bl	80001d0 <memchr>
 800864a:	2800      	cmp	r0, #0
 800864c:	d03f      	beq.n	80086ce <_vfiprintf_r+0x20a>
 800864e:	4b26      	ldr	r3, [pc, #152]	@ (80086e8 <_vfiprintf_r+0x224>)
 8008650:	bb1b      	cbnz	r3, 800869a <_vfiprintf_r+0x1d6>
 8008652:	9b03      	ldr	r3, [sp, #12]
 8008654:	3307      	adds	r3, #7
 8008656:	f023 0307 	bic.w	r3, r3, #7
 800865a:	3308      	adds	r3, #8
 800865c:	9303      	str	r3, [sp, #12]
 800865e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008660:	443b      	add	r3, r7
 8008662:	9309      	str	r3, [sp, #36]	@ 0x24
 8008664:	e76a      	b.n	800853c <_vfiprintf_r+0x78>
 8008666:	fb0c 3202 	mla	r2, ip, r2, r3
 800866a:	460c      	mov	r4, r1
 800866c:	2001      	movs	r0, #1
 800866e:	e7a8      	b.n	80085c2 <_vfiprintf_r+0xfe>
 8008670:	2300      	movs	r3, #0
 8008672:	3401      	adds	r4, #1
 8008674:	9305      	str	r3, [sp, #20]
 8008676:	4619      	mov	r1, r3
 8008678:	f04f 0c0a 	mov.w	ip, #10
 800867c:	4620      	mov	r0, r4
 800867e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008682:	3a30      	subs	r2, #48	@ 0x30
 8008684:	2a09      	cmp	r2, #9
 8008686:	d903      	bls.n	8008690 <_vfiprintf_r+0x1cc>
 8008688:	2b00      	cmp	r3, #0
 800868a:	d0c6      	beq.n	800861a <_vfiprintf_r+0x156>
 800868c:	9105      	str	r1, [sp, #20]
 800868e:	e7c4      	b.n	800861a <_vfiprintf_r+0x156>
 8008690:	fb0c 2101 	mla	r1, ip, r1, r2
 8008694:	4604      	mov	r4, r0
 8008696:	2301      	movs	r3, #1
 8008698:	e7f0      	b.n	800867c <_vfiprintf_r+0x1b8>
 800869a:	ab03      	add	r3, sp, #12
 800869c:	9300      	str	r3, [sp, #0]
 800869e:	462a      	mov	r2, r5
 80086a0:	4b12      	ldr	r3, [pc, #72]	@ (80086ec <_vfiprintf_r+0x228>)
 80086a2:	a904      	add	r1, sp, #16
 80086a4:	4630      	mov	r0, r6
 80086a6:	f7fb febf 	bl	8004428 <_printf_float>
 80086aa:	4607      	mov	r7, r0
 80086ac:	1c78      	adds	r0, r7, #1
 80086ae:	d1d6      	bne.n	800865e <_vfiprintf_r+0x19a>
 80086b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80086b2:	07d9      	lsls	r1, r3, #31
 80086b4:	d405      	bmi.n	80086c2 <_vfiprintf_r+0x1fe>
 80086b6:	89ab      	ldrh	r3, [r5, #12]
 80086b8:	059a      	lsls	r2, r3, #22
 80086ba:	d402      	bmi.n	80086c2 <_vfiprintf_r+0x1fe>
 80086bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80086be:	f7fc fe23 	bl	8005308 <__retarget_lock_release_recursive>
 80086c2:	89ab      	ldrh	r3, [r5, #12]
 80086c4:	065b      	lsls	r3, r3, #25
 80086c6:	f53f af1f 	bmi.w	8008508 <_vfiprintf_r+0x44>
 80086ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80086cc:	e71e      	b.n	800850c <_vfiprintf_r+0x48>
 80086ce:	ab03      	add	r3, sp, #12
 80086d0:	9300      	str	r3, [sp, #0]
 80086d2:	462a      	mov	r2, r5
 80086d4:	4b05      	ldr	r3, [pc, #20]	@ (80086ec <_vfiprintf_r+0x228>)
 80086d6:	a904      	add	r1, sp, #16
 80086d8:	4630      	mov	r0, r6
 80086da:	f7fc f93d 	bl	8004958 <_printf_i>
 80086de:	e7e4      	b.n	80086aa <_vfiprintf_r+0x1e6>
 80086e0:	08008e21 	.word	0x08008e21
 80086e4:	08008e2b 	.word	0x08008e2b
 80086e8:	08004429 	.word	0x08004429
 80086ec:	0800849f 	.word	0x0800849f
 80086f0:	08008e27 	.word	0x08008e27

080086f4 <__swbuf_r>:
 80086f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086f6:	460e      	mov	r6, r1
 80086f8:	4614      	mov	r4, r2
 80086fa:	4605      	mov	r5, r0
 80086fc:	b118      	cbz	r0, 8008706 <__swbuf_r+0x12>
 80086fe:	6a03      	ldr	r3, [r0, #32]
 8008700:	b90b      	cbnz	r3, 8008706 <__swbuf_r+0x12>
 8008702:	f7fc fce9 	bl	80050d8 <__sinit>
 8008706:	69a3      	ldr	r3, [r4, #24]
 8008708:	60a3      	str	r3, [r4, #8]
 800870a:	89a3      	ldrh	r3, [r4, #12]
 800870c:	071a      	lsls	r2, r3, #28
 800870e:	d501      	bpl.n	8008714 <__swbuf_r+0x20>
 8008710:	6923      	ldr	r3, [r4, #16]
 8008712:	b943      	cbnz	r3, 8008726 <__swbuf_r+0x32>
 8008714:	4621      	mov	r1, r4
 8008716:	4628      	mov	r0, r5
 8008718:	f000 f82a 	bl	8008770 <__swsetup_r>
 800871c:	b118      	cbz	r0, 8008726 <__swbuf_r+0x32>
 800871e:	f04f 37ff 	mov.w	r7, #4294967295
 8008722:	4638      	mov	r0, r7
 8008724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008726:	6823      	ldr	r3, [r4, #0]
 8008728:	6922      	ldr	r2, [r4, #16]
 800872a:	1a98      	subs	r0, r3, r2
 800872c:	6963      	ldr	r3, [r4, #20]
 800872e:	b2f6      	uxtb	r6, r6
 8008730:	4283      	cmp	r3, r0
 8008732:	4637      	mov	r7, r6
 8008734:	dc05      	bgt.n	8008742 <__swbuf_r+0x4e>
 8008736:	4621      	mov	r1, r4
 8008738:	4628      	mov	r0, r5
 800873a:	f7ff fa6b 	bl	8007c14 <_fflush_r>
 800873e:	2800      	cmp	r0, #0
 8008740:	d1ed      	bne.n	800871e <__swbuf_r+0x2a>
 8008742:	68a3      	ldr	r3, [r4, #8]
 8008744:	3b01      	subs	r3, #1
 8008746:	60a3      	str	r3, [r4, #8]
 8008748:	6823      	ldr	r3, [r4, #0]
 800874a:	1c5a      	adds	r2, r3, #1
 800874c:	6022      	str	r2, [r4, #0]
 800874e:	701e      	strb	r6, [r3, #0]
 8008750:	6962      	ldr	r2, [r4, #20]
 8008752:	1c43      	adds	r3, r0, #1
 8008754:	429a      	cmp	r2, r3
 8008756:	d004      	beq.n	8008762 <__swbuf_r+0x6e>
 8008758:	89a3      	ldrh	r3, [r4, #12]
 800875a:	07db      	lsls	r3, r3, #31
 800875c:	d5e1      	bpl.n	8008722 <__swbuf_r+0x2e>
 800875e:	2e0a      	cmp	r6, #10
 8008760:	d1df      	bne.n	8008722 <__swbuf_r+0x2e>
 8008762:	4621      	mov	r1, r4
 8008764:	4628      	mov	r0, r5
 8008766:	f7ff fa55 	bl	8007c14 <_fflush_r>
 800876a:	2800      	cmp	r0, #0
 800876c:	d0d9      	beq.n	8008722 <__swbuf_r+0x2e>
 800876e:	e7d6      	b.n	800871e <__swbuf_r+0x2a>

08008770 <__swsetup_r>:
 8008770:	b538      	push	{r3, r4, r5, lr}
 8008772:	4b29      	ldr	r3, [pc, #164]	@ (8008818 <__swsetup_r+0xa8>)
 8008774:	4605      	mov	r5, r0
 8008776:	6818      	ldr	r0, [r3, #0]
 8008778:	460c      	mov	r4, r1
 800877a:	b118      	cbz	r0, 8008784 <__swsetup_r+0x14>
 800877c:	6a03      	ldr	r3, [r0, #32]
 800877e:	b90b      	cbnz	r3, 8008784 <__swsetup_r+0x14>
 8008780:	f7fc fcaa 	bl	80050d8 <__sinit>
 8008784:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008788:	0719      	lsls	r1, r3, #28
 800878a:	d422      	bmi.n	80087d2 <__swsetup_r+0x62>
 800878c:	06da      	lsls	r2, r3, #27
 800878e:	d407      	bmi.n	80087a0 <__swsetup_r+0x30>
 8008790:	2209      	movs	r2, #9
 8008792:	602a      	str	r2, [r5, #0]
 8008794:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008798:	81a3      	strh	r3, [r4, #12]
 800879a:	f04f 30ff 	mov.w	r0, #4294967295
 800879e:	e033      	b.n	8008808 <__swsetup_r+0x98>
 80087a0:	0758      	lsls	r0, r3, #29
 80087a2:	d512      	bpl.n	80087ca <__swsetup_r+0x5a>
 80087a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80087a6:	b141      	cbz	r1, 80087ba <__swsetup_r+0x4a>
 80087a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80087ac:	4299      	cmp	r1, r3
 80087ae:	d002      	beq.n	80087b6 <__swsetup_r+0x46>
 80087b0:	4628      	mov	r0, r5
 80087b2:	f7fd fc1d 	bl	8005ff0 <_free_r>
 80087b6:	2300      	movs	r3, #0
 80087b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80087ba:	89a3      	ldrh	r3, [r4, #12]
 80087bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80087c0:	81a3      	strh	r3, [r4, #12]
 80087c2:	2300      	movs	r3, #0
 80087c4:	6063      	str	r3, [r4, #4]
 80087c6:	6923      	ldr	r3, [r4, #16]
 80087c8:	6023      	str	r3, [r4, #0]
 80087ca:	89a3      	ldrh	r3, [r4, #12]
 80087cc:	f043 0308 	orr.w	r3, r3, #8
 80087d0:	81a3      	strh	r3, [r4, #12]
 80087d2:	6923      	ldr	r3, [r4, #16]
 80087d4:	b94b      	cbnz	r3, 80087ea <__swsetup_r+0x7a>
 80087d6:	89a3      	ldrh	r3, [r4, #12]
 80087d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80087dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087e0:	d003      	beq.n	80087ea <__swsetup_r+0x7a>
 80087e2:	4621      	mov	r1, r4
 80087e4:	4628      	mov	r0, r5
 80087e6:	f000 f88b 	bl	8008900 <__smakebuf_r>
 80087ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087ee:	f013 0201 	ands.w	r2, r3, #1
 80087f2:	d00a      	beq.n	800880a <__swsetup_r+0x9a>
 80087f4:	2200      	movs	r2, #0
 80087f6:	60a2      	str	r2, [r4, #8]
 80087f8:	6962      	ldr	r2, [r4, #20]
 80087fa:	4252      	negs	r2, r2
 80087fc:	61a2      	str	r2, [r4, #24]
 80087fe:	6922      	ldr	r2, [r4, #16]
 8008800:	b942      	cbnz	r2, 8008814 <__swsetup_r+0xa4>
 8008802:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008806:	d1c5      	bne.n	8008794 <__swsetup_r+0x24>
 8008808:	bd38      	pop	{r3, r4, r5, pc}
 800880a:	0799      	lsls	r1, r3, #30
 800880c:	bf58      	it	pl
 800880e:	6962      	ldrpl	r2, [r4, #20]
 8008810:	60a2      	str	r2, [r4, #8]
 8008812:	e7f4      	b.n	80087fe <__swsetup_r+0x8e>
 8008814:	2000      	movs	r0, #0
 8008816:	e7f7      	b.n	8008808 <__swsetup_r+0x98>
 8008818:	20000018 	.word	0x20000018

0800881c <_raise_r>:
 800881c:	291f      	cmp	r1, #31
 800881e:	b538      	push	{r3, r4, r5, lr}
 8008820:	4605      	mov	r5, r0
 8008822:	460c      	mov	r4, r1
 8008824:	d904      	bls.n	8008830 <_raise_r+0x14>
 8008826:	2316      	movs	r3, #22
 8008828:	6003      	str	r3, [r0, #0]
 800882a:	f04f 30ff 	mov.w	r0, #4294967295
 800882e:	bd38      	pop	{r3, r4, r5, pc}
 8008830:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008832:	b112      	cbz	r2, 800883a <_raise_r+0x1e>
 8008834:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008838:	b94b      	cbnz	r3, 800884e <_raise_r+0x32>
 800883a:	4628      	mov	r0, r5
 800883c:	f000 f830 	bl	80088a0 <_getpid_r>
 8008840:	4622      	mov	r2, r4
 8008842:	4601      	mov	r1, r0
 8008844:	4628      	mov	r0, r5
 8008846:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800884a:	f000 b817 	b.w	800887c <_kill_r>
 800884e:	2b01      	cmp	r3, #1
 8008850:	d00a      	beq.n	8008868 <_raise_r+0x4c>
 8008852:	1c59      	adds	r1, r3, #1
 8008854:	d103      	bne.n	800885e <_raise_r+0x42>
 8008856:	2316      	movs	r3, #22
 8008858:	6003      	str	r3, [r0, #0]
 800885a:	2001      	movs	r0, #1
 800885c:	e7e7      	b.n	800882e <_raise_r+0x12>
 800885e:	2100      	movs	r1, #0
 8008860:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008864:	4620      	mov	r0, r4
 8008866:	4798      	blx	r3
 8008868:	2000      	movs	r0, #0
 800886a:	e7e0      	b.n	800882e <_raise_r+0x12>

0800886c <raise>:
 800886c:	4b02      	ldr	r3, [pc, #8]	@ (8008878 <raise+0xc>)
 800886e:	4601      	mov	r1, r0
 8008870:	6818      	ldr	r0, [r3, #0]
 8008872:	f7ff bfd3 	b.w	800881c <_raise_r>
 8008876:	bf00      	nop
 8008878:	20000018 	.word	0x20000018

0800887c <_kill_r>:
 800887c:	b538      	push	{r3, r4, r5, lr}
 800887e:	4d07      	ldr	r5, [pc, #28]	@ (800889c <_kill_r+0x20>)
 8008880:	2300      	movs	r3, #0
 8008882:	4604      	mov	r4, r0
 8008884:	4608      	mov	r0, r1
 8008886:	4611      	mov	r1, r2
 8008888:	602b      	str	r3, [r5, #0]
 800888a:	f7f8 fd73 	bl	8001374 <_kill>
 800888e:	1c43      	adds	r3, r0, #1
 8008890:	d102      	bne.n	8008898 <_kill_r+0x1c>
 8008892:	682b      	ldr	r3, [r5, #0]
 8008894:	b103      	cbz	r3, 8008898 <_kill_r+0x1c>
 8008896:	6023      	str	r3, [r4, #0]
 8008898:	bd38      	pop	{r3, r4, r5, pc}
 800889a:	bf00      	nop
 800889c:	20000464 	.word	0x20000464

080088a0 <_getpid_r>:
 80088a0:	f7f8 bd60 	b.w	8001364 <_getpid>

080088a4 <_malloc_usable_size_r>:
 80088a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088a8:	1f18      	subs	r0, r3, #4
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	bfbc      	itt	lt
 80088ae:	580b      	ldrlt	r3, [r1, r0]
 80088b0:	18c0      	addlt	r0, r0, r3
 80088b2:	4770      	bx	lr

080088b4 <__swhatbuf_r>:
 80088b4:	b570      	push	{r4, r5, r6, lr}
 80088b6:	460c      	mov	r4, r1
 80088b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088bc:	2900      	cmp	r1, #0
 80088be:	b096      	sub	sp, #88	@ 0x58
 80088c0:	4615      	mov	r5, r2
 80088c2:	461e      	mov	r6, r3
 80088c4:	da0d      	bge.n	80088e2 <__swhatbuf_r+0x2e>
 80088c6:	89a3      	ldrh	r3, [r4, #12]
 80088c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80088cc:	f04f 0100 	mov.w	r1, #0
 80088d0:	bf14      	ite	ne
 80088d2:	2340      	movne	r3, #64	@ 0x40
 80088d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80088d8:	2000      	movs	r0, #0
 80088da:	6031      	str	r1, [r6, #0]
 80088dc:	602b      	str	r3, [r5, #0]
 80088de:	b016      	add	sp, #88	@ 0x58
 80088e0:	bd70      	pop	{r4, r5, r6, pc}
 80088e2:	466a      	mov	r2, sp
 80088e4:	f000 f848 	bl	8008978 <_fstat_r>
 80088e8:	2800      	cmp	r0, #0
 80088ea:	dbec      	blt.n	80088c6 <__swhatbuf_r+0x12>
 80088ec:	9901      	ldr	r1, [sp, #4]
 80088ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80088f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80088f6:	4259      	negs	r1, r3
 80088f8:	4159      	adcs	r1, r3
 80088fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80088fe:	e7eb      	b.n	80088d8 <__swhatbuf_r+0x24>

08008900 <__smakebuf_r>:
 8008900:	898b      	ldrh	r3, [r1, #12]
 8008902:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008904:	079d      	lsls	r5, r3, #30
 8008906:	4606      	mov	r6, r0
 8008908:	460c      	mov	r4, r1
 800890a:	d507      	bpl.n	800891c <__smakebuf_r+0x1c>
 800890c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008910:	6023      	str	r3, [r4, #0]
 8008912:	6123      	str	r3, [r4, #16]
 8008914:	2301      	movs	r3, #1
 8008916:	6163      	str	r3, [r4, #20]
 8008918:	b003      	add	sp, #12
 800891a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800891c:	ab01      	add	r3, sp, #4
 800891e:	466a      	mov	r2, sp
 8008920:	f7ff ffc8 	bl	80088b4 <__swhatbuf_r>
 8008924:	9f00      	ldr	r7, [sp, #0]
 8008926:	4605      	mov	r5, r0
 8008928:	4639      	mov	r1, r7
 800892a:	4630      	mov	r0, r6
 800892c:	f7fd fbd4 	bl	80060d8 <_malloc_r>
 8008930:	b948      	cbnz	r0, 8008946 <__smakebuf_r+0x46>
 8008932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008936:	059a      	lsls	r2, r3, #22
 8008938:	d4ee      	bmi.n	8008918 <__smakebuf_r+0x18>
 800893a:	f023 0303 	bic.w	r3, r3, #3
 800893e:	f043 0302 	orr.w	r3, r3, #2
 8008942:	81a3      	strh	r3, [r4, #12]
 8008944:	e7e2      	b.n	800890c <__smakebuf_r+0xc>
 8008946:	89a3      	ldrh	r3, [r4, #12]
 8008948:	6020      	str	r0, [r4, #0]
 800894a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800894e:	81a3      	strh	r3, [r4, #12]
 8008950:	9b01      	ldr	r3, [sp, #4]
 8008952:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008956:	b15b      	cbz	r3, 8008970 <__smakebuf_r+0x70>
 8008958:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800895c:	4630      	mov	r0, r6
 800895e:	f000 f81d 	bl	800899c <_isatty_r>
 8008962:	b128      	cbz	r0, 8008970 <__smakebuf_r+0x70>
 8008964:	89a3      	ldrh	r3, [r4, #12]
 8008966:	f023 0303 	bic.w	r3, r3, #3
 800896a:	f043 0301 	orr.w	r3, r3, #1
 800896e:	81a3      	strh	r3, [r4, #12]
 8008970:	89a3      	ldrh	r3, [r4, #12]
 8008972:	431d      	orrs	r5, r3
 8008974:	81a5      	strh	r5, [r4, #12]
 8008976:	e7cf      	b.n	8008918 <__smakebuf_r+0x18>

08008978 <_fstat_r>:
 8008978:	b538      	push	{r3, r4, r5, lr}
 800897a:	4d07      	ldr	r5, [pc, #28]	@ (8008998 <_fstat_r+0x20>)
 800897c:	2300      	movs	r3, #0
 800897e:	4604      	mov	r4, r0
 8008980:	4608      	mov	r0, r1
 8008982:	4611      	mov	r1, r2
 8008984:	602b      	str	r3, [r5, #0]
 8008986:	f7f8 fd55 	bl	8001434 <_fstat>
 800898a:	1c43      	adds	r3, r0, #1
 800898c:	d102      	bne.n	8008994 <_fstat_r+0x1c>
 800898e:	682b      	ldr	r3, [r5, #0]
 8008990:	b103      	cbz	r3, 8008994 <_fstat_r+0x1c>
 8008992:	6023      	str	r3, [r4, #0]
 8008994:	bd38      	pop	{r3, r4, r5, pc}
 8008996:	bf00      	nop
 8008998:	20000464 	.word	0x20000464

0800899c <_isatty_r>:
 800899c:	b538      	push	{r3, r4, r5, lr}
 800899e:	4d06      	ldr	r5, [pc, #24]	@ (80089b8 <_isatty_r+0x1c>)
 80089a0:	2300      	movs	r3, #0
 80089a2:	4604      	mov	r4, r0
 80089a4:	4608      	mov	r0, r1
 80089a6:	602b      	str	r3, [r5, #0]
 80089a8:	f7f8 fd54 	bl	8001454 <_isatty>
 80089ac:	1c43      	adds	r3, r0, #1
 80089ae:	d102      	bne.n	80089b6 <_isatty_r+0x1a>
 80089b0:	682b      	ldr	r3, [r5, #0]
 80089b2:	b103      	cbz	r3, 80089b6 <_isatty_r+0x1a>
 80089b4:	6023      	str	r3, [r4, #0]
 80089b6:	bd38      	pop	{r3, r4, r5, pc}
 80089b8:	20000464 	.word	0x20000464

080089bc <_init>:
 80089bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089be:	bf00      	nop
 80089c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089c2:	bc08      	pop	{r3}
 80089c4:	469e      	mov	lr, r3
 80089c6:	4770      	bx	lr

080089c8 <_fini>:
 80089c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ca:	bf00      	nop
 80089cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ce:	bc08      	pop	{r3}
 80089d0:	469e      	mov	lr, r3
 80089d2:	4770      	bx	lr
