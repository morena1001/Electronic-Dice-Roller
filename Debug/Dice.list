
Dice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d54  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  08007ee8  08007ee8  00008ee8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083ac  080083ac  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  080083ac  080083ac  000093ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083b4  080083b4  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083b4  080083b4  000093b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080083b8  080083b8  000093b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080083bc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  200001d8  08008590  0000a1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003f4  08008590  0000a3f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000897d  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000153c  00000000  00000000  00012b81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000700  00000000  00000000  000140c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000550  00000000  00000000  000147c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b8f6  00000000  00000000  00014d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009657  00000000  00000000  00030606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009db6f  00000000  00000000  00039c5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d77cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030e4  00000000  00000000  000d7810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000da8f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007ecc 	.word	0x08007ecc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08007ecc 	.word	0x08007ecc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cfa:	f000 fb65 	bl	80013c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cfe:	f000 f86d 	bl	8000ddc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d02:	f000 f8d7 	bl	8000eb4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d06:	f000 f8a5 	bl	8000e54 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  srand((unsigned) time(&timeSeed));
 8000d0a:	482e      	ldr	r0, [pc, #184]	@ (8000dc4 <main+0xd0>)
 8000d0c:	f003 fcd8 	bl	80046c0 <time>
 8000d10:	4602      	mov	r2, r0
 8000d12:	460b      	mov	r3, r1
 8000d14:	4613      	mov	r3, r2
 8000d16:	4618      	mov	r0, r3
 8000d18:	f002 fccc 	bl	80036b4 <srand>
//		  }
//	  } else {
//		  toggle = 0;
//	  }

	  if (HAL_GPIO_ReadPin(Roll_GPIO_Port, Roll_Pin)) {
 8000d1c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d24:	f000 fe0e 	bl	8001944 <HAL_GPIO_ReadPin>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d046      	beq.n	8000dbc <main+0xc8>
		  if (!toggle) {
 8000d2e:	4b26      	ldr	r3, [pc, #152]	@ (8000dc8 <main+0xd4>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d1f2      	bne.n	8000d1c <main+0x28>
			  int generatedNumber = (rand() % 6) + 1;
 8000d36:	f002 fceb 	bl	8003710 <rand>
 8000d3a:	4601      	mov	r1, r0
 8000d3c:	4b23      	ldr	r3, [pc, #140]	@ (8000dcc <main+0xd8>)
 8000d3e:	fb83 3201 	smull	r3, r2, r3, r1
 8000d42:	17cb      	asrs	r3, r1, #31
 8000d44:	1ad2      	subs	r2, r2, r3
 8000d46:	4613      	mov	r3, r2
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	4413      	add	r3, r2
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	1aca      	subs	r2, r1, r3
 8000d50:	1c53      	adds	r3, r2, #1
 8000d52:	607b      	str	r3, [r7, #4]
			  sprintf(msg, "%d\r\n", generatedNumber);
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	491e      	ldr	r1, [pc, #120]	@ (8000dd0 <main+0xdc>)
 8000d58:	481e      	ldr	r0, [pc, #120]	@ (8000dd4 <main+0xe0>)
 8000d5a:	f003 fc45 	bl	80045e8 <siprintf>
			  HAL_UART_Transmit(&huart2, (uint8_t*) msg, 10, 100);
 8000d5e:	2364      	movs	r3, #100	@ 0x64
 8000d60:	220a      	movs	r2, #10
 8000d62:	491c      	ldr	r1, [pc, #112]	@ (8000dd4 <main+0xe0>)
 8000d64:	481c      	ldr	r0, [pc, #112]	@ (8000dd8 <main+0xe4>)
 8000d66:	f002 f8c9 	bl	8002efc <HAL_UART_Transmit>

			  switch(generatedNumber) {
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	3b01      	subs	r3, #1
 8000d6e:	2b05      	cmp	r3, #5
 8000d70:	d820      	bhi.n	8000db4 <main+0xc0>
 8000d72:	a201      	add	r2, pc, #4	@ (adr r2, 8000d78 <main+0x84>)
 8000d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d78:	08000d91 	.word	0x08000d91
 8000d7c:	08000d97 	.word	0x08000d97
 8000d80:	08000d9d 	.word	0x08000d9d
 8000d84:	08000da3 	.word	0x08000da3
 8000d88:	08000da9 	.word	0x08000da9
 8000d8c:	08000daf 	.word	0x08000daf
			  case 1:
				  NumberOne();
 8000d90:	f000 f912 	bl	8000fb8 <NumberOne>
				  break;
 8000d94:	e00e      	b.n	8000db4 <main+0xc0>
			  case 2:
				  NumberTwo();
 8000d96:	f000 f920 	bl	8000fda <NumberTwo>
				  break;
 8000d9a:	e00b      	b.n	8000db4 <main+0xc0>
			  case 3:
				  NumberThree();
 8000d9c:	f000 f92f 	bl	8000ffe <NumberThree>
				  break;
 8000da0:	e008      	b.n	8000db4 <main+0xc0>
			  case 4:
				  NumberFour();
 8000da2:	f000 f93e 	bl	8001022 <NumberFour>
				  break;
 8000da6:	e005      	b.n	8000db4 <main+0xc0>
			  case 5:
				  NumberFive();
 8000da8:	f000 f94d 	bl	8001046 <NumberFive>
				  break;
 8000dac:	e002      	b.n	8000db4 <main+0xc0>
			  case 6:
				  NumberSix();
 8000dae:	f000 f95c 	bl	800106a <NumberSix>
				  break;
 8000db2:	bf00      	nop
			  }
			  toggle = 1;
 8000db4:	4b04      	ldr	r3, [pc, #16]	@ (8000dc8 <main+0xd4>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	701a      	strb	r2, [r3, #0]
 8000dba:	e7af      	b.n	8000d1c <main+0x28>
		  }
	  } else {
		  toggle = 0;
 8000dbc:	4b02      	ldr	r3, [pc, #8]	@ (8000dc8 <main+0xd4>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	701a      	strb	r2, [r3, #0]
	  if (HAL_GPIO_ReadPin(Roll_GPIO_Port, Roll_Pin)) {
 8000dc2:	e7ab      	b.n	8000d1c <main+0x28>
 8000dc4:	20000298 	.word	0x20000298
 8000dc8:	20000290 	.word	0x20000290
 8000dcc:	2aaaaaab 	.word	0x2aaaaaab
 8000dd0:	08007ee8 	.word	0x08007ee8
 8000dd4:	2000027c 	.word	0x2000027c
 8000dd8:	200001f4 	.word	0x200001f4

08000ddc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b090      	sub	sp, #64	@ 0x40
 8000de0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de2:	f107 0318 	add.w	r3, r7, #24
 8000de6:	2228      	movs	r2, #40	@ 0x28
 8000de8:	2100      	movs	r1, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f003 fc5f 	bl	80046ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df0:	1d3b      	adds	r3, r7, #4
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
 8000dfc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e02:	2301      	movs	r3, #1
 8000e04:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e06:	2310      	movs	r3, #16
 8000e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e0e:	f107 0318 	add.w	r3, r7, #24
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 fdc6 	bl	80019a4 <HAL_RCC_OscConfig>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000e1e:	f000 f935 	bl	800108c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e22:	230f      	movs	r3, #15
 8000e24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e26:	2300      	movs	r3, #0
 8000e28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f001 fdf0 	bl	8002a20 <HAL_RCC_ClockConfig>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e46:	f000 f921 	bl	800108c <Error_Handler>
  }
}
 8000e4a:	bf00      	nop
 8000e4c:	3740      	adds	r7, #64	@ 0x40
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e58:	4b14      	ldr	r3, [pc, #80]	@ (8000eac <MX_USART2_UART_Init+0x58>)
 8000e5a:	4a15      	ldr	r2, [pc, #84]	@ (8000eb0 <MX_USART2_UART_Init+0x5c>)
 8000e5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000e5e:	4b13      	ldr	r3, [pc, #76]	@ (8000eac <MX_USART2_UART_Init+0x58>)
 8000e60:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000e64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e66:	4b11      	ldr	r3, [pc, #68]	@ (8000eac <MX_USART2_UART_Init+0x58>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000eac <MX_USART2_UART_Init+0x58>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e72:	4b0e      	ldr	r3, [pc, #56]	@ (8000eac <MX_USART2_UART_Init+0x58>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e78:	4b0c      	ldr	r3, [pc, #48]	@ (8000eac <MX_USART2_UART_Init+0x58>)
 8000e7a:	220c      	movs	r2, #12
 8000e7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000eac <MX_USART2_UART_Init+0x58>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e84:	4b09      	ldr	r3, [pc, #36]	@ (8000eac <MX_USART2_UART_Init+0x58>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e8a:	4b08      	ldr	r3, [pc, #32]	@ (8000eac <MX_USART2_UART_Init+0x58>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e90:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <MX_USART2_UART_Init+0x58>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e96:	4805      	ldr	r0, [pc, #20]	@ (8000eac <MX_USART2_UART_Init+0x58>)
 8000e98:	f001 ffe2 	bl	8002e60 <HAL_UART_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ea2:	f000 f8f3 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	200001f4 	.word	0x200001f4
 8000eb0:	40004400 	.word	0x40004400

08000eb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b088      	sub	sp, #32
 8000eb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eba:	f107 030c 	add.w	r3, r7, #12
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
 8000ec8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eca:	4b38      	ldr	r3, [pc, #224]	@ (8000fac <MX_GPIO_Init+0xf8>)
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	4a37      	ldr	r2, [pc, #220]	@ (8000fac <MX_GPIO_Init+0xf8>)
 8000ed0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000ed4:	6153      	str	r3, [r2, #20]
 8000ed6:	4b35      	ldr	r3, [pc, #212]	@ (8000fac <MX_GPIO_Init+0xf8>)
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	4b32      	ldr	r3, [pc, #200]	@ (8000fac <MX_GPIO_Init+0xf8>)
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	4a31      	ldr	r2, [pc, #196]	@ (8000fac <MX_GPIO_Init+0xf8>)
 8000ee8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eec:	6153      	str	r3, [r2, #20]
 8000eee:	4b2f      	ldr	r3, [pc, #188]	@ (8000fac <MX_GPIO_Init+0xf8>)
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efa:	4b2c      	ldr	r3, [pc, #176]	@ (8000fac <MX_GPIO_Init+0xf8>)
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	4a2b      	ldr	r2, [pc, #172]	@ (8000fac <MX_GPIO_Init+0xf8>)
 8000f00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f04:	6153      	str	r3, [r2, #20]
 8000f06:	4b29      	ldr	r3, [pc, #164]	@ (8000fac <MX_GPIO_Init+0xf8>)
 8000f08:	695b      	ldr	r3, [r3, #20]
 8000f0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f0e:	603b      	str	r3, [r7, #0]
 8000f10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TL_Pin|ML_Pin|BL_Pin|MC_Pin
 8000f12:	2200      	movs	r2, #0
 8000f14:	f240 31f2 	movw	r1, #1010	@ 0x3f2
 8000f18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f1c:	f000 fd2a 	bl	8001974 <HAL_GPIO_WritePin>
                          |BR_Pin|MR_Pin|TR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f26:	4822      	ldr	r0, [pc, #136]	@ (8000fb0 <MX_GPIO_Init+0xfc>)
 8000f28:	f000 fd24 	bl	8001974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f32:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	4619      	mov	r1, r3
 8000f42:	481c      	ldr	r0, [pc, #112]	@ (8000fb4 <MX_GPIO_Init+0x100>)
 8000f44:	f000 fb8c 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pins : TL_Pin ML_Pin BL_Pin MC_Pin
                           BR_Pin MR_Pin TR_Pin */
  GPIO_InitStruct.Pin = TL_Pin|ML_Pin|BL_Pin|MC_Pin
 8000f48:	f240 33f2 	movw	r3, #1010	@ 0x3f2
 8000f4c:	60fb      	str	r3, [r7, #12]
                          |BR_Pin|MR_Pin|TR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5a:	f107 030c 	add.w	r3, r7, #12
 8000f5e:	4619      	mov	r1, r3
 8000f60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f64:	f000 fb7c 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f7a:	f107 030c 	add.w	r3, r7, #12
 8000f7e:	4619      	mov	r1, r3
 8000f80:	480b      	ldr	r0, [pc, #44]	@ (8000fb0 <MX_GPIO_Init+0xfc>)
 8000f82:	f000 fb6d 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pin : Roll_Pin */
  GPIO_InitStruct.Pin = Roll_Pin;
 8000f86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f8c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f92:	2301      	movs	r3, #1
 8000f94:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Roll_GPIO_Port, &GPIO_InitStruct);
 8000f96:	f107 030c 	add.w	r3, r7, #12
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fa0:	f000 fb5e 	bl	8001660 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fa4:	bf00      	nop
 8000fa6:	3720      	adds	r7, #32
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	48000400 	.word	0x48000400
 8000fb4:	48000800 	.word	0x48000800

08000fb8 <NumberOne>:

/* USER CODE BEGIN 4 */
static void NumberOne(void) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, TL_Pin | ML_Pin | BL_Pin | TR_Pin | MR_Pin | BR_Pin, GPIO_PIN_RESET);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f240 31b2 	movw	r1, #946	@ 0x3b2
 8000fc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fc6:	f000 fcd5 	bl	8001974 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, MC_Pin, GPIO_PIN_SET);
 8000fca:	2201      	movs	r2, #1
 8000fcc:	2140      	movs	r1, #64	@ 0x40
 8000fce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fd2:	f000 fccf 	bl	8001974 <HAL_GPIO_WritePin>
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <NumberTwo>:

static void NumberTwo(void) {
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, TL_Pin | ML_Pin | MC_Pin | MR_Pin | BR_Pin, GPIO_PIN_RESET);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f44f 71e9 	mov.w	r1, #466	@ 0x1d2
 8000fe4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fe8:	f000 fcc4 	bl	8001974 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BL_Pin | TR_Pin, GPIO_PIN_SET);
 8000fec:	2201      	movs	r2, #1
 8000fee:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8000ff2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ff6:	f000 fcbd 	bl	8001974 <HAL_GPIO_WritePin>
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <NumberThree>:

static void NumberThree(void) {
 8000ffe:	b580      	push	{r7, lr}
 8001000:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, TL_Pin | ML_Pin | MR_Pin | BR_Pin, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	f44f 71c9 	mov.w	r1, #402	@ 0x192
 8001008:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800100c:	f000 fcb2 	bl	8001974 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BL_Pin | MC_Pin | TR_Pin, GPIO_PIN_SET);
 8001010:	2201      	movs	r2, #1
 8001012:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8001016:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800101a:	f000 fcab 	bl	8001974 <HAL_GPIO_WritePin>
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}

08001022 <NumberFour>:

static void NumberFour(void) {
 8001022:	b580      	push	{r7, lr}
 8001024:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, ML_Pin | MC_Pin | MR_Pin, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 800102c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001030:	f000 fca0 	bl	8001974 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, TL_Pin | BL_Pin | TR_Pin | BR_Pin, GPIO_PIN_SET);
 8001034:	2201      	movs	r2, #1
 8001036:	f240 21a2 	movw	r1, #674	@ 0x2a2
 800103a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800103e:	f000 fc99 	bl	8001974 <HAL_GPIO_WritePin>
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}

08001046 <NumberFive>:

static void NumberFive(void) {
 8001046:	b580      	push	{r7, lr}
 8001048:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, ML_Pin | MR_Pin, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8001050:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001054:	f000 fc8e 	bl	8001974 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, TL_Pin | BL_Pin | MC_Pin | TR_Pin | BR_Pin, GPIO_PIN_SET);
 8001058:	2201      	movs	r2, #1
 800105a:	f240 21e2 	movw	r1, #738	@ 0x2e2
 800105e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001062:	f000 fc87 	bl	8001974 <HAL_GPIO_WritePin>
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}

0800106a <NumberSix>:

static void NumberSix(void) {
 800106a:	b580      	push	{r7, lr}
 800106c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, MC_Pin, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	2140      	movs	r1, #64	@ 0x40
 8001072:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001076:	f000 fc7d 	bl	8001974 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, TL_Pin | ML_Pin | BL_Pin | TR_Pin | MR_Pin | BR_Pin, GPIO_PIN_SET);
 800107a:	2201      	movs	r2, #1
 800107c:	f240 31b2 	movw	r1, #946	@ 0x3b2
 8001080:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001084:	f000 fc76 	bl	8001974 <HAL_GPIO_WritePin>
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}

0800108c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001090:	b672      	cpsid	i
}
 8001092:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001094:	bf00      	nop
 8001096:	e7fd      	b.n	8001094 <Error_Handler+0x8>

08001098 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109e:	4b0f      	ldr	r3, [pc, #60]	@ (80010dc <HAL_MspInit+0x44>)
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	4a0e      	ldr	r2, [pc, #56]	@ (80010dc <HAL_MspInit+0x44>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	6193      	str	r3, [r2, #24]
 80010aa:	4b0c      	ldr	r3, [pc, #48]	@ (80010dc <HAL_MspInit+0x44>)
 80010ac:	699b      	ldr	r3, [r3, #24]
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b6:	4b09      	ldr	r3, [pc, #36]	@ (80010dc <HAL_MspInit+0x44>)
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	4a08      	ldr	r2, [pc, #32]	@ (80010dc <HAL_MspInit+0x44>)
 80010bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010c0:	61d3      	str	r3, [r2, #28]
 80010c2:	4b06      	ldr	r3, [pc, #24]	@ (80010dc <HAL_MspInit+0x44>)
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ca:	603b      	str	r3, [r7, #0]
 80010cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	40021000 	.word	0x40021000

080010e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	@ 0x28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a17      	ldr	r2, [pc, #92]	@ (800115c <HAL_UART_MspInit+0x7c>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d128      	bne.n	8001154 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001102:	4b17      	ldr	r3, [pc, #92]	@ (8001160 <HAL_UART_MspInit+0x80>)
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	4a16      	ldr	r2, [pc, #88]	@ (8001160 <HAL_UART_MspInit+0x80>)
 8001108:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800110c:	61d3      	str	r3, [r2, #28]
 800110e:	4b14      	ldr	r3, [pc, #80]	@ (8001160 <HAL_UART_MspInit+0x80>)
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111a:	4b11      	ldr	r3, [pc, #68]	@ (8001160 <HAL_UART_MspInit+0x80>)
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	4a10      	ldr	r2, [pc, #64]	@ (8001160 <HAL_UART_MspInit+0x80>)
 8001120:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001124:	6153      	str	r3, [r2, #20]
 8001126:	4b0e      	ldr	r3, [pc, #56]	@ (8001160 <HAL_UART_MspInit+0x80>)
 8001128:	695b      	ldr	r3, [r3, #20]
 800112a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001132:	230c      	movs	r3, #12
 8001134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001136:	2302      	movs	r3, #2
 8001138:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800113e:	2303      	movs	r3, #3
 8001140:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001142:	2307      	movs	r3, #7
 8001144:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	4619      	mov	r1, r3
 800114c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001150:	f000 fa86 	bl	8001660 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001154:	bf00      	nop
 8001156:	3728      	adds	r7, #40	@ 0x28
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40004400 	.word	0x40004400
 8001160:	40021000 	.word	0x40021000

08001164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001168:	bf00      	nop
 800116a:	e7fd      	b.n	8001168 <NMI_Handler+0x4>

0800116c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001170:	bf00      	nop
 8001172:	e7fd      	b.n	8001170 <HardFault_Handler+0x4>

08001174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001178:	bf00      	nop
 800117a:	e7fd      	b.n	8001178 <MemManage_Handler+0x4>

0800117c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001180:	bf00      	nop
 8001182:	e7fd      	b.n	8001180 <BusFault_Handler+0x4>

08001184 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <UsageFault_Handler+0x4>

0800118c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ba:	f000 f94b 	bl	8001454 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0
  return 1;
 80011c6:	2301      	movs	r3, #1
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <_kill>:

int _kill(int pid, int sig)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
 80011da:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80011dc:	f003 fae8 	bl	80047b0 <__errno>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2216      	movs	r2, #22
 80011e4:	601a      	str	r2, [r3, #0]
  return -1;
 80011e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <_exit>:

void _exit (int status)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80011fa:	f04f 31ff 	mov.w	r1, #4294967295
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff ffe7 	bl	80011d2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <_exit+0x12>

08001208 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
 8001218:	e00a      	b.n	8001230 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800121a:	f3af 8000 	nop.w
 800121e:	4601      	mov	r1, r0
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	1c5a      	adds	r2, r3, #1
 8001224:	60ba      	str	r2, [r7, #8]
 8001226:	b2ca      	uxtb	r2, r1
 8001228:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	3301      	adds	r3, #1
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	697a      	ldr	r2, [r7, #20]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	429a      	cmp	r2, r3
 8001236:	dbf0      	blt.n	800121a <_read+0x12>
  }

  return len;
 8001238:	687b      	ldr	r3, [r7, #4]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b086      	sub	sp, #24
 8001246:	af00      	add	r7, sp, #0
 8001248:	60f8      	str	r0, [r7, #12]
 800124a:	60b9      	str	r1, [r7, #8]
 800124c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]
 8001252:	e009      	b.n	8001268 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	1c5a      	adds	r2, r3, #1
 8001258:	60ba      	str	r2, [r7, #8]
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	3301      	adds	r3, #1
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	697a      	ldr	r2, [r7, #20]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	429a      	cmp	r2, r3
 800126e:	dbf1      	blt.n	8001254 <_write+0x12>
  }
  return len;
 8001270:	687b      	ldr	r3, [r7, #4]
}
 8001272:	4618      	mov	r0, r3
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <_close>:

int _close(int file)
{
 800127a:	b480      	push	{r7}
 800127c:	b083      	sub	sp, #12
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001286:	4618      	mov	r0, r3
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001292:	b480      	push	{r7}
 8001294:	b083      	sub	sp, #12
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
 800129a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012a2:	605a      	str	r2, [r3, #4]
  return 0;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <_isatty>:

int _isatty(int file)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b083      	sub	sp, #12
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012ba:	2301      	movs	r3, #1
}
 80012bc:	4618      	mov	r0, r3
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3714      	adds	r7, #20
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
	...

080012e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012ec:	4a14      	ldr	r2, [pc, #80]	@ (8001340 <_sbrk+0x5c>)
 80012ee:	4b15      	ldr	r3, [pc, #84]	@ (8001344 <_sbrk+0x60>)
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012f8:	4b13      	ldr	r3, [pc, #76]	@ (8001348 <_sbrk+0x64>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d102      	bne.n	8001306 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001300:	4b11      	ldr	r3, [pc, #68]	@ (8001348 <_sbrk+0x64>)
 8001302:	4a12      	ldr	r2, [pc, #72]	@ (800134c <_sbrk+0x68>)
 8001304:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001306:	4b10      	ldr	r3, [pc, #64]	@ (8001348 <_sbrk+0x64>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	429a      	cmp	r2, r3
 8001312:	d207      	bcs.n	8001324 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001314:	f003 fa4c 	bl	80047b0 <__errno>
 8001318:	4603      	mov	r3, r0
 800131a:	220c      	movs	r2, #12
 800131c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800131e:	f04f 33ff 	mov.w	r3, #4294967295
 8001322:	e009      	b.n	8001338 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001324:	4b08      	ldr	r3, [pc, #32]	@ (8001348 <_sbrk+0x64>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800132a:	4b07      	ldr	r3, [pc, #28]	@ (8001348 <_sbrk+0x64>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4413      	add	r3, r2
 8001332:	4a05      	ldr	r2, [pc, #20]	@ (8001348 <_sbrk+0x64>)
 8001334:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001336:	68fb      	ldr	r3, [r7, #12]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20004000 	.word	0x20004000
 8001344:	00000400 	.word	0x00000400
 8001348:	200002a0 	.word	0x200002a0
 800134c:	200003f8 	.word	0x200003f8

08001350 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001354:	4b06      	ldr	r3, [pc, #24]	@ (8001370 <SystemInit+0x20>)
 8001356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800135a:	4a05      	ldr	r2, [pc, #20]	@ (8001370 <SystemInit+0x20>)
 800135c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001360:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001374:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013ac <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001378:	f7ff ffea 	bl	8001350 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800137c:	480c      	ldr	r0, [pc, #48]	@ (80013b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800137e:	490d      	ldr	r1, [pc, #52]	@ (80013b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001380:	4a0d      	ldr	r2, [pc, #52]	@ (80013b8 <LoopForever+0xe>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001384:	e002      	b.n	800138c <LoopCopyDataInit>

08001386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800138a:	3304      	adds	r3, #4

0800138c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800138c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800138e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001390:	d3f9      	bcc.n	8001386 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001392:	4a0a      	ldr	r2, [pc, #40]	@ (80013bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001394:	4c0a      	ldr	r4, [pc, #40]	@ (80013c0 <LoopForever+0x16>)
  movs r3, #0
 8001396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001398:	e001      	b.n	800139e <LoopFillZerobss>

0800139a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800139a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800139c:	3204      	adds	r2, #4

0800139e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800139e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a0:	d3fb      	bcc.n	800139a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013a2:	f003 fa0b 	bl	80047bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013a6:	f7ff fca5 	bl	8000cf4 <main>

080013aa <LoopForever>:

LoopForever:
    b LoopForever
 80013aa:	e7fe      	b.n	80013aa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013ac:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80013b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80013b8:	080083bc 	.word	0x080083bc
  ldr r2, =_sbss
 80013bc:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80013c0:	200003f4 	.word	0x200003f4

080013c4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013c4:	e7fe      	b.n	80013c4 <ADC1_IRQHandler>
	...

080013c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013cc:	4b08      	ldr	r3, [pc, #32]	@ (80013f0 <HAL_Init+0x28>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a07      	ldr	r2, [pc, #28]	@ (80013f0 <HAL_Init+0x28>)
 80013d2:	f043 0310 	orr.w	r3, r3, #16
 80013d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d8:	2003      	movs	r0, #3
 80013da:	f000 f90d 	bl	80015f8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013de:	200f      	movs	r0, #15
 80013e0:	f000 f808 	bl	80013f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e4:	f7ff fe58 	bl	8001098 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40022000 	.word	0x40022000

080013f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013fc:	4b12      	ldr	r3, [pc, #72]	@ (8001448 <HAL_InitTick+0x54>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b12      	ldr	r3, [pc, #72]	@ (800144c <HAL_InitTick+0x58>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	4619      	mov	r1, r3
 8001406:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800140a:	fbb3 f3f1 	udiv	r3, r3, r1
 800140e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001412:	4618      	mov	r0, r3
 8001414:	f000 f917 	bl	8001646 <HAL_SYSTICK_Config>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e00e      	b.n	8001440 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b0f      	cmp	r3, #15
 8001426:	d80a      	bhi.n	800143e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001428:	2200      	movs	r2, #0
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	f04f 30ff 	mov.w	r0, #4294967295
 8001430:	f000 f8ed 	bl	800160e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001434:	4a06      	ldr	r2, [pc, #24]	@ (8001450 <HAL_InitTick+0x5c>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800143a:	2300      	movs	r3, #0
 800143c:	e000      	b.n	8001440 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
}
 8001440:	4618      	mov	r0, r3
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000000 	.word	0x20000000
 800144c:	20000008 	.word	0x20000008
 8001450:	20000004 	.word	0x20000004

08001454 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001458:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <HAL_IncTick+0x20>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	461a      	mov	r2, r3
 800145e:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <HAL_IncTick+0x24>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4413      	add	r3, r2
 8001464:	4a04      	ldr	r2, [pc, #16]	@ (8001478 <HAL_IncTick+0x24>)
 8001466:	6013      	str	r3, [r2, #0]
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	20000008 	.word	0x20000008
 8001478:	200002a4 	.word	0x200002a4

0800147c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001480:	4b03      	ldr	r3, [pc, #12]	@ (8001490 <HAL_GetTick+0x14>)
 8001482:	681b      	ldr	r3, [r3, #0]
}
 8001484:	4618      	mov	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	200002a4 	.word	0x200002a4

08001494 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a4:	4b0c      	ldr	r3, [pc, #48]	@ (80014d8 <__NVIC_SetPriorityGrouping+0x44>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014b0:	4013      	ands	r3, r2
 80014b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014c6:	4a04      	ldr	r2, [pc, #16]	@ (80014d8 <__NVIC_SetPriorityGrouping+0x44>)
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	60d3      	str	r3, [r2, #12]
}
 80014cc:	bf00      	nop
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e0:	4b04      	ldr	r3, [pc, #16]	@ (80014f4 <__NVIC_GetPriorityGrouping+0x18>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	0a1b      	lsrs	r3, r3, #8
 80014e6:	f003 0307 	and.w	r3, r3, #7
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	6039      	str	r1, [r7, #0]
 8001502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001508:	2b00      	cmp	r3, #0
 800150a:	db0a      	blt.n	8001522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	b2da      	uxtb	r2, r3
 8001510:	490c      	ldr	r1, [pc, #48]	@ (8001544 <__NVIC_SetPriority+0x4c>)
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	0112      	lsls	r2, r2, #4
 8001518:	b2d2      	uxtb	r2, r2
 800151a:	440b      	add	r3, r1
 800151c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001520:	e00a      	b.n	8001538 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	b2da      	uxtb	r2, r3
 8001526:	4908      	ldr	r1, [pc, #32]	@ (8001548 <__NVIC_SetPriority+0x50>)
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	f003 030f 	and.w	r3, r3, #15
 800152e:	3b04      	subs	r3, #4
 8001530:	0112      	lsls	r2, r2, #4
 8001532:	b2d2      	uxtb	r2, r2
 8001534:	440b      	add	r3, r1
 8001536:	761a      	strb	r2, [r3, #24]
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000e100 	.word	0xe000e100
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800154c:	b480      	push	{r7}
 800154e:	b089      	sub	sp, #36	@ 0x24
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	f1c3 0307 	rsb	r3, r3, #7
 8001566:	2b04      	cmp	r3, #4
 8001568:	bf28      	it	cs
 800156a:	2304      	movcs	r3, #4
 800156c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	3304      	adds	r3, #4
 8001572:	2b06      	cmp	r3, #6
 8001574:	d902      	bls.n	800157c <NVIC_EncodePriority+0x30>
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	3b03      	subs	r3, #3
 800157a:	e000      	b.n	800157e <NVIC_EncodePriority+0x32>
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001580:	f04f 32ff 	mov.w	r2, #4294967295
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43da      	mvns	r2, r3
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	401a      	ands	r2, r3
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001594:	f04f 31ff 	mov.w	r1, #4294967295
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	fa01 f303 	lsl.w	r3, r1, r3
 800159e:	43d9      	mvns	r1, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a4:	4313      	orrs	r3, r2
         );
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3724      	adds	r7, #36	@ 0x24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
	...

080015b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3b01      	subs	r3, #1
 80015c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015c4:	d301      	bcc.n	80015ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015c6:	2301      	movs	r3, #1
 80015c8:	e00f      	b.n	80015ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ca:	4a0a      	ldr	r2, [pc, #40]	@ (80015f4 <SysTick_Config+0x40>)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015d2:	210f      	movs	r1, #15
 80015d4:	f04f 30ff 	mov.w	r0, #4294967295
 80015d8:	f7ff ff8e 	bl	80014f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015dc:	4b05      	ldr	r3, [pc, #20]	@ (80015f4 <SysTick_Config+0x40>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015e2:	4b04      	ldr	r3, [pc, #16]	@ (80015f4 <SysTick_Config+0x40>)
 80015e4:	2207      	movs	r2, #7
 80015e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	e000e010 	.word	0xe000e010

080015f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff ff47 	bl	8001494 <__NVIC_SetPriorityGrouping>
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b086      	sub	sp, #24
 8001612:	af00      	add	r7, sp, #0
 8001614:	4603      	mov	r3, r0
 8001616:	60b9      	str	r1, [r7, #8]
 8001618:	607a      	str	r2, [r7, #4]
 800161a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001620:	f7ff ff5c 	bl	80014dc <__NVIC_GetPriorityGrouping>
 8001624:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	68b9      	ldr	r1, [r7, #8]
 800162a:	6978      	ldr	r0, [r7, #20]
 800162c:	f7ff ff8e 	bl	800154c <NVIC_EncodePriority>
 8001630:	4602      	mov	r2, r0
 8001632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001636:	4611      	mov	r1, r2
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff ff5d 	bl	80014f8 <__NVIC_SetPriority>
}
 800163e:	bf00      	nop
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff ffb0 	bl	80015b4 <SysTick_Config>
 8001654:	4603      	mov	r3, r0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001660:	b480      	push	{r7}
 8001662:	b087      	sub	sp, #28
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800166e:	e14e      	b.n	800190e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	2101      	movs	r1, #1
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	fa01 f303 	lsl.w	r3, r1, r3
 800167c:	4013      	ands	r3, r2
 800167e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2b00      	cmp	r3, #0
 8001684:	f000 8140 	beq.w	8001908 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 0303 	and.w	r3, r3, #3
 8001690:	2b01      	cmp	r3, #1
 8001692:	d005      	beq.n	80016a0 <HAL_GPIO_Init+0x40>
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d130      	bne.n	8001702 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	2203      	movs	r2, #3
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	4013      	ands	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	68da      	ldr	r2, [r3, #12]
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016d6:	2201      	movs	r2, #1
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43db      	mvns	r3, r3
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	4013      	ands	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	091b      	lsrs	r3, r3, #4
 80016ec:	f003 0201 	and.w	r2, r3, #1
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f003 0303 	and.w	r3, r3, #3
 800170a:	2b03      	cmp	r3, #3
 800170c:	d017      	beq.n	800173e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	2203      	movs	r2, #3
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43db      	mvns	r3, r3
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	4013      	ands	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	689a      	ldr	r2, [r3, #8]
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	4313      	orrs	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f003 0303 	and.w	r3, r3, #3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d123      	bne.n	8001792 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	08da      	lsrs	r2, r3, #3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	3208      	adds	r2, #8
 8001752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001756:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	220f      	movs	r2, #15
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43db      	mvns	r3, r3
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4013      	ands	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	691a      	ldr	r2, [r3, #16]
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	f003 0307 	and.w	r3, r3, #7
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	4313      	orrs	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	08da      	lsrs	r2, r3, #3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3208      	adds	r2, #8
 800178c:	6939      	ldr	r1, [r7, #16]
 800178e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	2203      	movs	r2, #3
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43db      	mvns	r3, r3
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	4013      	ands	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f003 0203 	and.w	r2, r3, #3
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	4313      	orrs	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f000 809a 	beq.w	8001908 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d4:	4b55      	ldr	r3, [pc, #340]	@ (800192c <HAL_GPIO_Init+0x2cc>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	4a54      	ldr	r2, [pc, #336]	@ (800192c <HAL_GPIO_Init+0x2cc>)
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	6193      	str	r3, [r2, #24]
 80017e0:	4b52      	ldr	r3, [pc, #328]	@ (800192c <HAL_GPIO_Init+0x2cc>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017ec:	4a50      	ldr	r2, [pc, #320]	@ (8001930 <HAL_GPIO_Init+0x2d0>)
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	089b      	lsrs	r3, r3, #2
 80017f2:	3302      	adds	r3, #2
 80017f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	f003 0303 	and.w	r3, r3, #3
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	220f      	movs	r2, #15
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	43db      	mvns	r3, r3
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	4013      	ands	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001816:	d013      	beq.n	8001840 <HAL_GPIO_Init+0x1e0>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a46      	ldr	r2, [pc, #280]	@ (8001934 <HAL_GPIO_Init+0x2d4>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d00d      	beq.n	800183c <HAL_GPIO_Init+0x1dc>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a45      	ldr	r2, [pc, #276]	@ (8001938 <HAL_GPIO_Init+0x2d8>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d007      	beq.n	8001838 <HAL_GPIO_Init+0x1d8>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4a44      	ldr	r2, [pc, #272]	@ (800193c <HAL_GPIO_Init+0x2dc>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d101      	bne.n	8001834 <HAL_GPIO_Init+0x1d4>
 8001830:	2303      	movs	r3, #3
 8001832:	e006      	b.n	8001842 <HAL_GPIO_Init+0x1e2>
 8001834:	2305      	movs	r3, #5
 8001836:	e004      	b.n	8001842 <HAL_GPIO_Init+0x1e2>
 8001838:	2302      	movs	r3, #2
 800183a:	e002      	b.n	8001842 <HAL_GPIO_Init+0x1e2>
 800183c:	2301      	movs	r3, #1
 800183e:	e000      	b.n	8001842 <HAL_GPIO_Init+0x1e2>
 8001840:	2300      	movs	r3, #0
 8001842:	697a      	ldr	r2, [r7, #20]
 8001844:	f002 0203 	and.w	r2, r2, #3
 8001848:	0092      	lsls	r2, r2, #2
 800184a:	4093      	lsls	r3, r2
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	4313      	orrs	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001852:	4937      	ldr	r1, [pc, #220]	@ (8001930 <HAL_GPIO_Init+0x2d0>)
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	089b      	lsrs	r3, r3, #2
 8001858:	3302      	adds	r3, #2
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001860:	4b37      	ldr	r3, [pc, #220]	@ (8001940 <HAL_GPIO_Init+0x2e0>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	43db      	mvns	r3, r3
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4013      	ands	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d003      	beq.n	8001884 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	4313      	orrs	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001884:	4a2e      	ldr	r2, [pc, #184]	@ (8001940 <HAL_GPIO_Init+0x2e0>)
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800188a:	4b2d      	ldr	r3, [pc, #180]	@ (8001940 <HAL_GPIO_Init+0x2e0>)
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	43db      	mvns	r3, r3
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	4013      	ands	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80018ae:	4a24      	ldr	r2, [pc, #144]	@ (8001940 <HAL_GPIO_Init+0x2e0>)
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018b4:	4b22      	ldr	r3, [pc, #136]	@ (8001940 <HAL_GPIO_Init+0x2e0>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	43db      	mvns	r3, r3
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	4013      	ands	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d003      	beq.n	80018d8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018d8:	4a19      	ldr	r2, [pc, #100]	@ (8001940 <HAL_GPIO_Init+0x2e0>)
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018de:	4b18      	ldr	r3, [pc, #96]	@ (8001940 <HAL_GPIO_Init+0x2e0>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	43db      	mvns	r3, r3
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	4013      	ands	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d003      	beq.n	8001902 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4313      	orrs	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001902:	4a0f      	ldr	r2, [pc, #60]	@ (8001940 <HAL_GPIO_Init+0x2e0>)
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	3301      	adds	r3, #1
 800190c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	fa22 f303 	lsr.w	r3, r2, r3
 8001918:	2b00      	cmp	r3, #0
 800191a:	f47f aea9 	bne.w	8001670 <HAL_GPIO_Init+0x10>
  }
}
 800191e:	bf00      	nop
 8001920:	bf00      	nop
 8001922:	371c      	adds	r7, #28
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	40021000 	.word	0x40021000
 8001930:	40010000 	.word	0x40010000
 8001934:	48000400 	.word	0x48000400
 8001938:	48000800 	.word	0x48000800
 800193c:	48000c00 	.word	0x48000c00
 8001940:	40010400 	.word	0x40010400

08001944 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	460b      	mov	r3, r1
 800194e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	691a      	ldr	r2, [r3, #16]
 8001954:	887b      	ldrh	r3, [r7, #2]
 8001956:	4013      	ands	r3, r2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d002      	beq.n	8001962 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800195c:	2301      	movs	r3, #1
 800195e:	73fb      	strb	r3, [r7, #15]
 8001960:	e001      	b.n	8001966 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001962:	2300      	movs	r3, #0
 8001964:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001966:	7bfb      	ldrb	r3, [r7, #15]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	807b      	strh	r3, [r7, #2]
 8001980:	4613      	mov	r3, r2
 8001982:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001984:	787b      	ldrb	r3, [r7, #1]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800198a:	887a      	ldrh	r2, [r7, #2]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001990:	e002      	b.n	8001998 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001992:	887a      	ldrh	r2, [r7, #2]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019b0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019b4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d102      	bne.n	80019ca <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	f001 b823 	b.w	8002a10 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 817d 	beq.w	8001cda <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80019e0:	4bbc      	ldr	r3, [pc, #752]	@ (8001cd4 <HAL_RCC_OscConfig+0x330>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 030c 	and.w	r3, r3, #12
 80019e8:	2b04      	cmp	r3, #4
 80019ea:	d00c      	beq.n	8001a06 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019ec:	4bb9      	ldr	r3, [pc, #740]	@ (8001cd4 <HAL_RCC_OscConfig+0x330>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 030c 	and.w	r3, r3, #12
 80019f4:	2b08      	cmp	r3, #8
 80019f6:	d15c      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x10e>
 80019f8:	4bb6      	ldr	r3, [pc, #728]	@ (8001cd4 <HAL_RCC_OscConfig+0x330>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a04:	d155      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x10e>
 8001a06:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a0a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001a12:	fa93 f3a3 	rbit	r3, r3
 8001a16:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a1a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a1e:	fab3 f383 	clz	r3, r3
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	095b      	lsrs	r3, r3, #5
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d102      	bne.n	8001a38 <HAL_RCC_OscConfig+0x94>
 8001a32:	4ba8      	ldr	r3, [pc, #672]	@ (8001cd4 <HAL_RCC_OscConfig+0x330>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	e015      	b.n	8001a64 <HAL_RCC_OscConfig+0xc0>
 8001a38:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a3c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a40:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001a44:	fa93 f3a3 	rbit	r3, r3
 8001a48:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001a4c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a50:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001a54:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001a58:	fa93 f3a3 	rbit	r3, r3
 8001a5c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001a60:	4b9c      	ldr	r3, [pc, #624]	@ (8001cd4 <HAL_RCC_OscConfig+0x330>)
 8001a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a64:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a68:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001a6c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001a70:	fa92 f2a2 	rbit	r2, r2
 8001a74:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001a78:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001a7c:	fab2 f282 	clz	r2, r2
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	f042 0220 	orr.w	r2, r2, #32
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	f002 021f 	and.w	r2, r2, #31
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a92:	4013      	ands	r3, r2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f000 811f 	beq.w	8001cd8 <HAL_RCC_OscConfig+0x334>
 8001a9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a9e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f040 8116 	bne.w	8001cd8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	f000 bfaf 	b.w	8002a10 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ab2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ab6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ac2:	d106      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x12e>
 8001ac4:	4b83      	ldr	r3, [pc, #524]	@ (8001cd4 <HAL_RCC_OscConfig+0x330>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a82      	ldr	r2, [pc, #520]	@ (8001cd4 <HAL_RCC_OscConfig+0x330>)
 8001aca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ace:	6013      	str	r3, [r2, #0]
 8001ad0:	e036      	b.n	8001b40 <HAL_RCC_OscConfig+0x19c>
 8001ad2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ad6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10c      	bne.n	8001afc <HAL_RCC_OscConfig+0x158>
 8001ae2:	4b7c      	ldr	r3, [pc, #496]	@ (8001cd4 <HAL_RCC_OscConfig+0x330>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a7b      	ldr	r2, [pc, #492]	@ (8001cd4 <HAL_RCC_OscConfig+0x330>)
 8001ae8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	4b79      	ldr	r3, [pc, #484]	@ (8001cd4 <HAL_RCC_OscConfig+0x330>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a78      	ldr	r2, [pc, #480]	@ (8001cd4 <HAL_RCC_OscConfig+0x330>)
 8001af4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	e021      	b.n	8001b40 <HAL_RCC_OscConfig+0x19c>
 8001afc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b00:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b0c:	d10c      	bne.n	8001b28 <HAL_RCC_OscConfig+0x184>
 8001b0e:	4b71      	ldr	r3, [pc, #452]	@ (8001cd4 <HAL_RCC_OscConfig+0x330>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a70      	ldr	r2, [pc, #448]	@ (8001cd4 <HAL_RCC_OscConfig+0x330>)
 8001b14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	4b6e      	ldr	r3, [pc, #440]	@ (8001cd4 <HAL_RCC_OscConfig+0x330>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a6d      	ldr	r2, [pc, #436]	@ (8001cd4 <HAL_RCC_OscConfig+0x330>)
 8001b20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b24:	6013      	str	r3, [r2, #0]
 8001b26:	e00b      	b.n	8001b40 <HAL_RCC_OscConfig+0x19c>
 8001b28:	4b6a      	ldr	r3, [pc, #424]	@ (8001cd4 <HAL_RCC_OscConfig+0x330>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a69      	ldr	r2, [pc, #420]	@ (8001cd4 <HAL_RCC_OscConfig+0x330>)
 8001b2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b32:	6013      	str	r3, [r2, #0]
 8001b34:	4b67      	ldr	r3, [pc, #412]	@ (8001cd4 <HAL_RCC_OscConfig+0x330>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a66      	ldr	r2, [pc, #408]	@ (8001cd4 <HAL_RCC_OscConfig+0x330>)
 8001b3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b3e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b40:	4b64      	ldr	r3, [pc, #400]	@ (8001cd4 <HAL_RCC_OscConfig+0x330>)
 8001b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b44:	f023 020f 	bic.w	r2, r3, #15
 8001b48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b4c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	495f      	ldr	r1, [pc, #380]	@ (8001cd4 <HAL_RCC_OscConfig+0x330>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b5e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d059      	beq.n	8001c1e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6a:	f7ff fc87 	bl	800147c <HAL_GetTick>
 8001b6e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b72:	e00a      	b.n	8001b8a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b74:	f7ff fc82 	bl	800147c <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b64      	cmp	r3, #100	@ 0x64
 8001b82:	d902      	bls.n	8001b8a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	f000 bf43 	b.w	8002a10 <HAL_RCC_OscConfig+0x106c>
 8001b8a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b8e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b92:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001b96:	fa93 f3a3 	rbit	r3, r3
 8001b9a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001b9e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba2:	fab3 f383 	clz	r3, r3
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	095b      	lsrs	r3, r3, #5
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d102      	bne.n	8001bbc <HAL_RCC_OscConfig+0x218>
 8001bb6:	4b47      	ldr	r3, [pc, #284]	@ (8001cd4 <HAL_RCC_OscConfig+0x330>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	e015      	b.n	8001be8 <HAL_RCC_OscConfig+0x244>
 8001bbc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bc0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001bc8:	fa93 f3a3 	rbit	r3, r3
 8001bcc:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001bd0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bd4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001bd8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001bdc:	fa93 f3a3 	rbit	r3, r3
 8001be0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001be4:	4b3b      	ldr	r3, [pc, #236]	@ (8001cd4 <HAL_RCC_OscConfig+0x330>)
 8001be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001bec:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001bf0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001bf4:	fa92 f2a2 	rbit	r2, r2
 8001bf8:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001bfc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001c00:	fab2 f282 	clz	r2, r2
 8001c04:	b2d2      	uxtb	r2, r2
 8001c06:	f042 0220 	orr.w	r2, r2, #32
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	f002 021f 	and.w	r2, r2, #31
 8001c10:	2101      	movs	r1, #1
 8001c12:	fa01 f202 	lsl.w	r2, r1, r2
 8001c16:	4013      	ands	r3, r2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0ab      	beq.n	8001b74 <HAL_RCC_OscConfig+0x1d0>
 8001c1c:	e05d      	b.n	8001cda <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1e:	f7ff fc2d 	bl	800147c <HAL_GetTick>
 8001c22:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c26:	e00a      	b.n	8001c3e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c28:	f7ff fc28 	bl	800147c <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b64      	cmp	r3, #100	@ 0x64
 8001c36:	d902      	bls.n	8001c3e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	f000 bee9 	b.w	8002a10 <HAL_RCC_OscConfig+0x106c>
 8001c3e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c42:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c46:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001c4a:	fa93 f3a3 	rbit	r3, r3
 8001c4e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001c52:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c56:	fab3 f383 	clz	r3, r3
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	095b      	lsrs	r3, r3, #5
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d102      	bne.n	8001c70 <HAL_RCC_OscConfig+0x2cc>
 8001c6a:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd4 <HAL_RCC_OscConfig+0x330>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	e015      	b.n	8001c9c <HAL_RCC_OscConfig+0x2f8>
 8001c70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c74:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c78:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001c7c:	fa93 f3a3 	rbit	r3, r3
 8001c80:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001c84:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c88:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001c8c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001c90:	fa93 f3a3 	rbit	r3, r3
 8001c94:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001c98:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd4 <HAL_RCC_OscConfig+0x330>)
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c9c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ca0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001ca4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001ca8:	fa92 f2a2 	rbit	r2, r2
 8001cac:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001cb0:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001cb4:	fab2 f282 	clz	r2, r2
 8001cb8:	b2d2      	uxtb	r2, r2
 8001cba:	f042 0220 	orr.w	r2, r2, #32
 8001cbe:	b2d2      	uxtb	r2, r2
 8001cc0:	f002 021f 	and.w	r2, r2, #31
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cca:	4013      	ands	r3, r2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1ab      	bne.n	8001c28 <HAL_RCC_OscConfig+0x284>
 8001cd0:	e003      	b.n	8001cda <HAL_RCC_OscConfig+0x336>
 8001cd2:	bf00      	nop
 8001cd4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cde:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 817d 	beq.w	8001fea <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001cf0:	4ba6      	ldr	r3, [pc, #664]	@ (8001f8c <HAL_RCC_OscConfig+0x5e8>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 030c 	and.w	r3, r3, #12
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d00b      	beq.n	8001d14 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001cfc:	4ba3      	ldr	r3, [pc, #652]	@ (8001f8c <HAL_RCC_OscConfig+0x5e8>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 030c 	and.w	r3, r3, #12
 8001d04:	2b08      	cmp	r3, #8
 8001d06:	d172      	bne.n	8001dee <HAL_RCC_OscConfig+0x44a>
 8001d08:	4ba0      	ldr	r3, [pc, #640]	@ (8001f8c <HAL_RCC_OscConfig+0x5e8>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d16c      	bne.n	8001dee <HAL_RCC_OscConfig+0x44a>
 8001d14:	2302      	movs	r3, #2
 8001d16:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001d1e:	fa93 f3a3 	rbit	r3, r3
 8001d22:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001d26:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d2a:	fab3 f383 	clz	r3, r3
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	095b      	lsrs	r3, r3, #5
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d102      	bne.n	8001d44 <HAL_RCC_OscConfig+0x3a0>
 8001d3e:	4b93      	ldr	r3, [pc, #588]	@ (8001f8c <HAL_RCC_OscConfig+0x5e8>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	e013      	b.n	8001d6c <HAL_RCC_OscConfig+0x3c8>
 8001d44:	2302      	movs	r3, #2
 8001d46:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001d4e:	fa93 f3a3 	rbit	r3, r3
 8001d52:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001d56:	2302      	movs	r3, #2
 8001d58:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001d5c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001d60:	fa93 f3a3 	rbit	r3, r3
 8001d64:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001d68:	4b88      	ldr	r3, [pc, #544]	@ (8001f8c <HAL_RCC_OscConfig+0x5e8>)
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6c:	2202      	movs	r2, #2
 8001d6e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001d72:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001d76:	fa92 f2a2 	rbit	r2, r2
 8001d7a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001d7e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001d82:	fab2 f282 	clz	r2, r2
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	f042 0220 	orr.w	r2, r2, #32
 8001d8c:	b2d2      	uxtb	r2, r2
 8001d8e:	f002 021f 	and.w	r2, r2, #31
 8001d92:	2101      	movs	r1, #1
 8001d94:	fa01 f202 	lsl.w	r2, r1, r2
 8001d98:	4013      	ands	r3, r2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00a      	beq.n	8001db4 <HAL_RCC_OscConfig+0x410>
 8001d9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001da2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d002      	beq.n	8001db4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	f000 be2e 	b.w	8002a10 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db4:	4b75      	ldr	r3, [pc, #468]	@ (8001f8c <HAL_RCC_OscConfig+0x5e8>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dc0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	695b      	ldr	r3, [r3, #20]
 8001dc8:	21f8      	movs	r1, #248	@ 0xf8
 8001dca:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dce:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001dd2:	fa91 f1a1 	rbit	r1, r1
 8001dd6:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001dda:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001dde:	fab1 f181 	clz	r1, r1
 8001de2:	b2c9      	uxtb	r1, r1
 8001de4:	408b      	lsls	r3, r1
 8001de6:	4969      	ldr	r1, [pc, #420]	@ (8001f8c <HAL_RCC_OscConfig+0x5e8>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dec:	e0fd      	b.n	8001fea <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001df2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f000 8088 	beq.w	8001f10 <HAL_RCC_OscConfig+0x56c>
 8001e00:	2301      	movs	r3, #1
 8001e02:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e06:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001e0a:	fa93 f3a3 	rbit	r3, r3
 8001e0e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001e12:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e16:	fab3 f383 	clz	r3, r3
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001e20:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	461a      	mov	r2, r3
 8001e28:	2301      	movs	r3, #1
 8001e2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2c:	f7ff fb26 	bl	800147c <HAL_GetTick>
 8001e30:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e34:	e00a      	b.n	8001e4c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e36:	f7ff fb21 	bl	800147c <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d902      	bls.n	8001e4c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	f000 bde2 	b.w	8002a10 <HAL_RCC_OscConfig+0x106c>
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e52:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001e56:	fa93 f3a3 	rbit	r3, r3
 8001e5a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001e5e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e62:	fab3 f383 	clz	r3, r3
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	095b      	lsrs	r3, r3, #5
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d102      	bne.n	8001e7c <HAL_RCC_OscConfig+0x4d8>
 8001e76:	4b45      	ldr	r3, [pc, #276]	@ (8001f8c <HAL_RCC_OscConfig+0x5e8>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	e013      	b.n	8001ea4 <HAL_RCC_OscConfig+0x500>
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001e86:	fa93 f3a3 	rbit	r3, r3
 8001e8a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001e8e:	2302      	movs	r3, #2
 8001e90:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001e94:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001e98:	fa93 f3a3 	rbit	r3, r3
 8001e9c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001ea0:	4b3a      	ldr	r3, [pc, #232]	@ (8001f8c <HAL_RCC_OscConfig+0x5e8>)
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001eaa:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001eae:	fa92 f2a2 	rbit	r2, r2
 8001eb2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001eb6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001eba:	fab2 f282 	clz	r2, r2
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	f042 0220 	orr.w	r2, r2, #32
 8001ec4:	b2d2      	uxtb	r2, r2
 8001ec6:	f002 021f 	and.w	r2, r2, #31
 8001eca:	2101      	movs	r1, #1
 8001ecc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d0af      	beq.n	8001e36 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed6:	4b2d      	ldr	r3, [pc, #180]	@ (8001f8c <HAL_RCC_OscConfig+0x5e8>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ede:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ee2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	21f8      	movs	r1, #248	@ 0xf8
 8001eec:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef0:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001ef4:	fa91 f1a1 	rbit	r1, r1
 8001ef8:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001efc:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001f00:	fab1 f181 	clz	r1, r1
 8001f04:	b2c9      	uxtb	r1, r1
 8001f06:	408b      	lsls	r3, r1
 8001f08:	4920      	ldr	r1, [pc, #128]	@ (8001f8c <HAL_RCC_OscConfig+0x5e8>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	600b      	str	r3, [r1, #0]
 8001f0e:	e06c      	b.n	8001fea <HAL_RCC_OscConfig+0x646>
 8001f10:	2301      	movs	r3, #1
 8001f12:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f16:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001f1a:	fa93 f3a3 	rbit	r3, r3
 8001f1e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001f22:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f26:	fab3 f383 	clz	r3, r3
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001f30:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	461a      	mov	r2, r3
 8001f38:	2300      	movs	r3, #0
 8001f3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3c:	f7ff fa9e 	bl	800147c <HAL_GetTick>
 8001f40:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f44:	e00a      	b.n	8001f5c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f46:	f7ff fa99 	bl	800147c <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d902      	bls.n	8001f5c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	f000 bd5a 	b.w	8002a10 <HAL_RCC_OscConfig+0x106c>
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f62:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001f66:	fa93 f3a3 	rbit	r3, r3
 8001f6a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001f6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f72:	fab3 f383 	clz	r3, r3
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	095b      	lsrs	r3, r3, #5
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d104      	bne.n	8001f90 <HAL_RCC_OscConfig+0x5ec>
 8001f86:	4b01      	ldr	r3, [pc, #4]	@ (8001f8c <HAL_RCC_OscConfig+0x5e8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	e015      	b.n	8001fb8 <HAL_RCC_OscConfig+0x614>
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	2302      	movs	r3, #2
 8001f92:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f96:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001f9a:	fa93 f3a3 	rbit	r3, r3
 8001f9e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001fa8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001fac:	fa93 f3a3 	rbit	r3, r3
 8001fb0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001fb4:	4bc8      	ldr	r3, [pc, #800]	@ (80022d8 <HAL_RCC_OscConfig+0x934>)
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb8:	2202      	movs	r2, #2
 8001fba:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001fbe:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001fc2:	fa92 f2a2 	rbit	r2, r2
 8001fc6:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001fca:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001fce:	fab2 f282 	clz	r2, r2
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	f042 0220 	orr.w	r2, r2, #32
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	f002 021f 	and.w	r2, r2, #31
 8001fde:	2101      	movs	r1, #1
 8001fe0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1ad      	bne.n	8001f46 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 8110 	beq.w	8002220 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002000:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002004:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d079      	beq.n	8002104 <HAL_RCC_OscConfig+0x760>
 8002010:	2301      	movs	r3, #1
 8002012:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002016:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800201a:	fa93 f3a3 	rbit	r3, r3
 800201e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002022:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002026:	fab3 f383 	clz	r3, r3
 800202a:	b2db      	uxtb	r3, r3
 800202c:	461a      	mov	r2, r3
 800202e:	4bab      	ldr	r3, [pc, #684]	@ (80022dc <HAL_RCC_OscConfig+0x938>)
 8002030:	4413      	add	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	461a      	mov	r2, r3
 8002036:	2301      	movs	r3, #1
 8002038:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800203a:	f7ff fa1f 	bl	800147c <HAL_GetTick>
 800203e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002042:	e00a      	b.n	800205a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002044:	f7ff fa1a 	bl	800147c <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d902      	bls.n	800205a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	f000 bcdb 	b.w	8002a10 <HAL_RCC_OscConfig+0x106c>
 800205a:	2302      	movs	r3, #2
 800205c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002060:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002064:	fa93 f3a3 	rbit	r3, r3
 8002068:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800206c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002070:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002074:	2202      	movs	r2, #2
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800207c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	fa93 f2a3 	rbit	r2, r3
 8002086:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800208a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002094:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002098:	2202      	movs	r2, #2
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	fa93 f2a3 	rbit	r2, r3
 80020aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80020b2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020b4:	4b88      	ldr	r3, [pc, #544]	@ (80022d8 <HAL_RCC_OscConfig+0x934>)
 80020b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80020b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020bc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80020c0:	2102      	movs	r1, #2
 80020c2:	6019      	str	r1, [r3, #0]
 80020c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	fa93 f1a3 	rbit	r1, r3
 80020d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020d6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80020da:	6019      	str	r1, [r3, #0]
  return result;
 80020dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020e0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	fab3 f383 	clz	r3, r3
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	f003 031f 	and.w	r3, r3, #31
 80020f6:	2101      	movs	r1, #1
 80020f8:	fa01 f303 	lsl.w	r3, r1, r3
 80020fc:	4013      	ands	r3, r2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0a0      	beq.n	8002044 <HAL_RCC_OscConfig+0x6a0>
 8002102:	e08d      	b.n	8002220 <HAL_RCC_OscConfig+0x87c>
 8002104:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002108:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800210c:	2201      	movs	r2, #1
 800210e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002110:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002114:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	fa93 f2a3 	rbit	r2, r3
 800211e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002122:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002126:	601a      	str	r2, [r3, #0]
  return result;
 8002128:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800212c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002130:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002132:	fab3 f383 	clz	r3, r3
 8002136:	b2db      	uxtb	r3, r3
 8002138:	461a      	mov	r2, r3
 800213a:	4b68      	ldr	r3, [pc, #416]	@ (80022dc <HAL_RCC_OscConfig+0x938>)
 800213c:	4413      	add	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	461a      	mov	r2, r3
 8002142:	2300      	movs	r3, #0
 8002144:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002146:	f7ff f999 	bl	800147c <HAL_GetTick>
 800214a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800214e:	e00a      	b.n	8002166 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002150:	f7ff f994 	bl	800147c <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d902      	bls.n	8002166 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	f000 bc55 	b.w	8002a10 <HAL_RCC_OscConfig+0x106c>
 8002166:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800216a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800216e:	2202      	movs	r2, #2
 8002170:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002172:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002176:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	fa93 f2a3 	rbit	r2, r3
 8002180:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002184:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800218e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002192:	2202      	movs	r2, #2
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800219a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	fa93 f2a3 	rbit	r2, r3
 80021a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021b2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80021b6:	2202      	movs	r2, #2
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021be:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	fa93 f2a3 	rbit	r2, r3
 80021c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021cc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80021d0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021d2:	4b41      	ldr	r3, [pc, #260]	@ (80022d8 <HAL_RCC_OscConfig+0x934>)
 80021d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021da:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80021de:	2102      	movs	r1, #2
 80021e0:	6019      	str	r1, [r3, #0]
 80021e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	fa93 f1a3 	rbit	r1, r3
 80021f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021f4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80021f8:	6019      	str	r1, [r3, #0]
  return result;
 80021fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021fe:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	fab3 f383 	clz	r3, r3
 8002208:	b2db      	uxtb	r3, r3
 800220a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800220e:	b2db      	uxtb	r3, r3
 8002210:	f003 031f 	and.w	r3, r3, #31
 8002214:	2101      	movs	r1, #1
 8002216:	fa01 f303 	lsl.w	r3, r1, r3
 800221a:	4013      	ands	r3, r2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d197      	bne.n	8002150 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002220:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002224:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 81a1 	beq.w	8002578 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002236:	2300      	movs	r3, #0
 8002238:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800223c:	4b26      	ldr	r3, [pc, #152]	@ (80022d8 <HAL_RCC_OscConfig+0x934>)
 800223e:	69db      	ldr	r3, [r3, #28]
 8002240:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d116      	bne.n	8002276 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002248:	4b23      	ldr	r3, [pc, #140]	@ (80022d8 <HAL_RCC_OscConfig+0x934>)
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	4a22      	ldr	r2, [pc, #136]	@ (80022d8 <HAL_RCC_OscConfig+0x934>)
 800224e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002252:	61d3      	str	r3, [r2, #28]
 8002254:	4b20      	ldr	r3, [pc, #128]	@ (80022d8 <HAL_RCC_OscConfig+0x934>)
 8002256:	69db      	ldr	r3, [r3, #28]
 8002258:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800225c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002260:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800226a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800226e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002270:	2301      	movs	r3, #1
 8002272:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002276:	4b1a      	ldr	r3, [pc, #104]	@ (80022e0 <HAL_RCC_OscConfig+0x93c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800227e:	2b00      	cmp	r3, #0
 8002280:	d11a      	bne.n	80022b8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002282:	4b17      	ldr	r3, [pc, #92]	@ (80022e0 <HAL_RCC_OscConfig+0x93c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a16      	ldr	r2, [pc, #88]	@ (80022e0 <HAL_RCC_OscConfig+0x93c>)
 8002288:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800228c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800228e:	f7ff f8f5 	bl	800147c <HAL_GetTick>
 8002292:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002296:	e009      	b.n	80022ac <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002298:	f7ff f8f0 	bl	800147c <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b64      	cmp	r3, #100	@ 0x64
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e3b1      	b.n	8002a10 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ac:	4b0c      	ldr	r3, [pc, #48]	@ (80022e0 <HAL_RCC_OscConfig+0x93c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0ef      	beq.n	8002298 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d10d      	bne.n	80022e4 <HAL_RCC_OscConfig+0x940>
 80022c8:	4b03      	ldr	r3, [pc, #12]	@ (80022d8 <HAL_RCC_OscConfig+0x934>)
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	4a02      	ldr	r2, [pc, #8]	@ (80022d8 <HAL_RCC_OscConfig+0x934>)
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	6213      	str	r3, [r2, #32]
 80022d4:	e03c      	b.n	8002350 <HAL_RCC_OscConfig+0x9ac>
 80022d6:	bf00      	nop
 80022d8:	40021000 	.word	0x40021000
 80022dc:	10908120 	.word	0x10908120
 80022e0:	40007000 	.word	0x40007000
 80022e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d10c      	bne.n	800230e <HAL_RCC_OscConfig+0x96a>
 80022f4:	4bc1      	ldr	r3, [pc, #772]	@ (80025fc <HAL_RCC_OscConfig+0xc58>)
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	4ac0      	ldr	r2, [pc, #768]	@ (80025fc <HAL_RCC_OscConfig+0xc58>)
 80022fa:	f023 0301 	bic.w	r3, r3, #1
 80022fe:	6213      	str	r3, [r2, #32]
 8002300:	4bbe      	ldr	r3, [pc, #760]	@ (80025fc <HAL_RCC_OscConfig+0xc58>)
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	4abd      	ldr	r2, [pc, #756]	@ (80025fc <HAL_RCC_OscConfig+0xc58>)
 8002306:	f023 0304 	bic.w	r3, r3, #4
 800230a:	6213      	str	r3, [r2, #32]
 800230c:	e020      	b.n	8002350 <HAL_RCC_OscConfig+0x9ac>
 800230e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002312:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	2b05      	cmp	r3, #5
 800231c:	d10c      	bne.n	8002338 <HAL_RCC_OscConfig+0x994>
 800231e:	4bb7      	ldr	r3, [pc, #732]	@ (80025fc <HAL_RCC_OscConfig+0xc58>)
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	4ab6      	ldr	r2, [pc, #728]	@ (80025fc <HAL_RCC_OscConfig+0xc58>)
 8002324:	f043 0304 	orr.w	r3, r3, #4
 8002328:	6213      	str	r3, [r2, #32]
 800232a:	4bb4      	ldr	r3, [pc, #720]	@ (80025fc <HAL_RCC_OscConfig+0xc58>)
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	4ab3      	ldr	r2, [pc, #716]	@ (80025fc <HAL_RCC_OscConfig+0xc58>)
 8002330:	f043 0301 	orr.w	r3, r3, #1
 8002334:	6213      	str	r3, [r2, #32]
 8002336:	e00b      	b.n	8002350 <HAL_RCC_OscConfig+0x9ac>
 8002338:	4bb0      	ldr	r3, [pc, #704]	@ (80025fc <HAL_RCC_OscConfig+0xc58>)
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	4aaf      	ldr	r2, [pc, #700]	@ (80025fc <HAL_RCC_OscConfig+0xc58>)
 800233e:	f023 0301 	bic.w	r3, r3, #1
 8002342:	6213      	str	r3, [r2, #32]
 8002344:	4bad      	ldr	r3, [pc, #692]	@ (80025fc <HAL_RCC_OscConfig+0xc58>)
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	4aac      	ldr	r2, [pc, #688]	@ (80025fc <HAL_RCC_OscConfig+0xc58>)
 800234a:	f023 0304 	bic.w	r3, r3, #4
 800234e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002350:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002354:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 8081 	beq.w	8002464 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002362:	f7ff f88b 	bl	800147c <HAL_GetTick>
 8002366:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800236a:	e00b      	b.n	8002384 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800236c:	f7ff f886 	bl	800147c <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	f241 3288 	movw	r2, #5000	@ 0x1388
 800237c:	4293      	cmp	r3, r2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e345      	b.n	8002a10 <HAL_RCC_OscConfig+0x106c>
 8002384:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002388:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800238c:	2202      	movs	r2, #2
 800238e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002390:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002394:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	fa93 f2a3 	rbit	r2, r3
 800239e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023a2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ac:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80023b0:	2202      	movs	r2, #2
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	fa93 f2a3 	rbit	r2, r3
 80023c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023c6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80023ca:	601a      	str	r2, [r3, #0]
  return result;
 80023cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80023d4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d6:	fab3 f383 	clz	r3, r3
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	095b      	lsrs	r3, r3, #5
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	f043 0302 	orr.w	r3, r3, #2
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d102      	bne.n	80023f0 <HAL_RCC_OscConfig+0xa4c>
 80023ea:	4b84      	ldr	r3, [pc, #528]	@ (80025fc <HAL_RCC_OscConfig+0xc58>)
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	e013      	b.n	8002418 <HAL_RCC_OscConfig+0xa74>
 80023f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023f4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80023f8:	2202      	movs	r2, #2
 80023fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002400:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	fa93 f2a3 	rbit	r2, r3
 800240a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800240e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	4b79      	ldr	r3, [pc, #484]	@ (80025fc <HAL_RCC_OscConfig+0xc58>)
 8002416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002418:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800241c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002420:	2102      	movs	r1, #2
 8002422:	6011      	str	r1, [r2, #0]
 8002424:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002428:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800242c:	6812      	ldr	r2, [r2, #0]
 800242e:	fa92 f1a2 	rbit	r1, r2
 8002432:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002436:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800243a:	6011      	str	r1, [r2, #0]
  return result;
 800243c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002440:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002444:	6812      	ldr	r2, [r2, #0]
 8002446:	fab2 f282 	clz	r2, r2
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002450:	b2d2      	uxtb	r2, r2
 8002452:	f002 021f 	and.w	r2, r2, #31
 8002456:	2101      	movs	r1, #1
 8002458:	fa01 f202 	lsl.w	r2, r1, r2
 800245c:	4013      	ands	r3, r2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d084      	beq.n	800236c <HAL_RCC_OscConfig+0x9c8>
 8002462:	e07f      	b.n	8002564 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002464:	f7ff f80a 	bl	800147c <HAL_GetTick>
 8002468:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800246c:	e00b      	b.n	8002486 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800246e:	f7ff f805 	bl	800147c <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800247e:	4293      	cmp	r3, r2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e2c4      	b.n	8002a10 <HAL_RCC_OscConfig+0x106c>
 8002486:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800248a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800248e:	2202      	movs	r2, #2
 8002490:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002492:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002496:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	fa93 f2a3 	rbit	r2, r3
 80024a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ae:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80024b2:	2202      	movs	r2, #2
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ba:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	fa93 f2a3 	rbit	r2, r3
 80024c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80024cc:	601a      	str	r2, [r3, #0]
  return result;
 80024ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024d2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80024d6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d8:	fab3 f383 	clz	r3, r3
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	095b      	lsrs	r3, r3, #5
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	f043 0302 	orr.w	r3, r3, #2
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d102      	bne.n	80024f2 <HAL_RCC_OscConfig+0xb4e>
 80024ec:	4b43      	ldr	r3, [pc, #268]	@ (80025fc <HAL_RCC_OscConfig+0xc58>)
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	e013      	b.n	800251a <HAL_RCC_OscConfig+0xb76>
 80024f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024f6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80024fa:	2202      	movs	r2, #2
 80024fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002502:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	fa93 f2a3 	rbit	r2, r3
 800250c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002510:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	4b39      	ldr	r3, [pc, #228]	@ (80025fc <HAL_RCC_OscConfig+0xc58>)
 8002518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800251e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002522:	2102      	movs	r1, #2
 8002524:	6011      	str	r1, [r2, #0]
 8002526:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800252a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800252e:	6812      	ldr	r2, [r2, #0]
 8002530:	fa92 f1a2 	rbit	r1, r2
 8002534:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002538:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800253c:	6011      	str	r1, [r2, #0]
  return result;
 800253e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002542:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002546:	6812      	ldr	r2, [r2, #0]
 8002548:	fab2 f282 	clz	r2, r2
 800254c:	b2d2      	uxtb	r2, r2
 800254e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	f002 021f 	and.w	r2, r2, #31
 8002558:	2101      	movs	r1, #1
 800255a:	fa01 f202 	lsl.w	r2, r1, r2
 800255e:	4013      	ands	r3, r2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d184      	bne.n	800246e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002564:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002568:	2b01      	cmp	r3, #1
 800256a:	d105      	bne.n	8002578 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800256c:	4b23      	ldr	r3, [pc, #140]	@ (80025fc <HAL_RCC_OscConfig+0xc58>)
 800256e:	69db      	ldr	r3, [r3, #28]
 8002570:	4a22      	ldr	r2, [pc, #136]	@ (80025fc <HAL_RCC_OscConfig+0xc58>)
 8002572:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002576:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002578:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800257c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	69db      	ldr	r3, [r3, #28]
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 8242 	beq.w	8002a0e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800258a:	4b1c      	ldr	r3, [pc, #112]	@ (80025fc <HAL_RCC_OscConfig+0xc58>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f003 030c 	and.w	r3, r3, #12
 8002592:	2b08      	cmp	r3, #8
 8002594:	f000 8213 	beq.w	80029be <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002598:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800259c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	69db      	ldr	r3, [r3, #28]
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	f040 8162 	bne.w	800286e <HAL_RCC_OscConfig+0xeca>
 80025aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ae:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80025b2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80025b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025bc:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	fa93 f2a3 	rbit	r2, r3
 80025c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ca:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80025ce:	601a      	str	r2, [r3, #0]
  return result;
 80025d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80025d8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025da:	fab3 f383 	clz	r3, r3
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80025e4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	461a      	mov	r2, r3
 80025ec:	2300      	movs	r3, #0
 80025ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f0:	f7fe ff44 	bl	800147c <HAL_GetTick>
 80025f4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f8:	e00c      	b.n	8002614 <HAL_RCC_OscConfig+0xc70>
 80025fa:	bf00      	nop
 80025fc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002600:	f7fe ff3c 	bl	800147c <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e1fd      	b.n	8002a10 <HAL_RCC_OscConfig+0x106c>
 8002614:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002618:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800261c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002620:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002622:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002626:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	fa93 f2a3 	rbit	r2, r3
 8002630:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002634:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002638:	601a      	str	r2, [r3, #0]
  return result;
 800263a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800263e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002642:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002644:	fab3 f383 	clz	r3, r3
 8002648:	b2db      	uxtb	r3, r3
 800264a:	095b      	lsrs	r3, r3, #5
 800264c:	b2db      	uxtb	r3, r3
 800264e:	f043 0301 	orr.w	r3, r3, #1
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b01      	cmp	r3, #1
 8002656:	d102      	bne.n	800265e <HAL_RCC_OscConfig+0xcba>
 8002658:	4bb0      	ldr	r3, [pc, #704]	@ (800291c <HAL_RCC_OscConfig+0xf78>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	e027      	b.n	80026ae <HAL_RCC_OscConfig+0xd0a>
 800265e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002662:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002666:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800266a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002670:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	fa93 f2a3 	rbit	r2, r3
 800267a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800267e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002688:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800268c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002696:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	fa93 f2a3 	rbit	r2, r3
 80026a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	4b9c      	ldr	r3, [pc, #624]	@ (800291c <HAL_RCC_OscConfig+0xf78>)
 80026ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026b2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80026b6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80026ba:	6011      	str	r1, [r2, #0]
 80026bc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026c0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80026c4:	6812      	ldr	r2, [r2, #0]
 80026c6:	fa92 f1a2 	rbit	r1, r2
 80026ca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026ce:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80026d2:	6011      	str	r1, [r2, #0]
  return result;
 80026d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026d8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80026dc:	6812      	ldr	r2, [r2, #0]
 80026de:	fab2 f282 	clz	r2, r2
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	f042 0220 	orr.w	r2, r2, #32
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	f002 021f 	and.w	r2, r2, #31
 80026ee:	2101      	movs	r1, #1
 80026f0:	fa01 f202 	lsl.w	r2, r1, r2
 80026f4:	4013      	ands	r3, r2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d182      	bne.n	8002600 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026fa:	4b88      	ldr	r3, [pc, #544]	@ (800291c <HAL_RCC_OscConfig+0xf78>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002702:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002706:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800270e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002712:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	430b      	orrs	r3, r1
 800271c:	497f      	ldr	r1, [pc, #508]	@ (800291c <HAL_RCC_OscConfig+0xf78>)
 800271e:	4313      	orrs	r3, r2
 8002720:	604b      	str	r3, [r1, #4]
 8002722:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002726:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800272a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800272e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002730:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002734:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	fa93 f2a3 	rbit	r2, r3
 800273e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002742:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002746:	601a      	str	r2, [r3, #0]
  return result;
 8002748:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800274c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002750:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002752:	fab3 f383 	clz	r3, r3
 8002756:	b2db      	uxtb	r3, r3
 8002758:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800275c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	461a      	mov	r2, r3
 8002764:	2301      	movs	r3, #1
 8002766:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002768:	f7fe fe88 	bl	800147c <HAL_GetTick>
 800276c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002770:	e009      	b.n	8002786 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002772:	f7fe fe83 	bl	800147c <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e144      	b.n	8002a10 <HAL_RCC_OscConfig+0x106c>
 8002786:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800278a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800278e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002792:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002794:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002798:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	fa93 f2a3 	rbit	r2, r3
 80027a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80027aa:	601a      	str	r2, [r3, #0]
  return result;
 80027ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027b0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80027b4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027b6:	fab3 f383 	clz	r3, r3
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	095b      	lsrs	r3, r3, #5
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	f043 0301 	orr.w	r3, r3, #1
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d102      	bne.n	80027d0 <HAL_RCC_OscConfig+0xe2c>
 80027ca:	4b54      	ldr	r3, [pc, #336]	@ (800291c <HAL_RCC_OscConfig+0xf78>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	e027      	b.n	8002820 <HAL_RCC_OscConfig+0xe7c>
 80027d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80027d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	fa93 f2a3 	rbit	r2, r3
 80027ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027f0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027fa:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80027fe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002808:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	fa93 f2a3 	rbit	r2, r3
 8002812:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002816:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	4b3f      	ldr	r3, [pc, #252]	@ (800291c <HAL_RCC_OscConfig+0xf78>)
 800281e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002820:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002824:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002828:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800282c:	6011      	str	r1, [r2, #0]
 800282e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002832:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	fa92 f1a2 	rbit	r1, r2
 800283c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002840:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002844:	6011      	str	r1, [r2, #0]
  return result;
 8002846:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800284a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800284e:	6812      	ldr	r2, [r2, #0]
 8002850:	fab2 f282 	clz	r2, r2
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	f042 0220 	orr.w	r2, r2, #32
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	f002 021f 	and.w	r2, r2, #31
 8002860:	2101      	movs	r1, #1
 8002862:	fa01 f202 	lsl.w	r2, r1, r2
 8002866:	4013      	ands	r3, r2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d082      	beq.n	8002772 <HAL_RCC_OscConfig+0xdce>
 800286c:	e0cf      	b.n	8002a0e <HAL_RCC_OscConfig+0x106a>
 800286e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002872:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002876:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800287a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002880:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	fa93 f2a3 	rbit	r2, r3
 800288a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800288e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002892:	601a      	str	r2, [r3, #0]
  return result;
 8002894:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002898:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800289c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289e:	fab3 f383 	clz	r3, r3
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80028a8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	461a      	mov	r2, r3
 80028b0:	2300      	movs	r3, #0
 80028b2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b4:	f7fe fde2 	bl	800147c <HAL_GetTick>
 80028b8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028bc:	e009      	b.n	80028d2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028be:	f7fe fddd 	bl	800147c <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e09e      	b.n	8002a10 <HAL_RCC_OscConfig+0x106c>
 80028d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80028da:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	fa93 f2a3 	rbit	r2, r3
 80028ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80028f6:	601a      	str	r2, [r3, #0]
  return result;
 80028f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028fc:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002900:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002902:	fab3 f383 	clz	r3, r3
 8002906:	b2db      	uxtb	r3, r3
 8002908:	095b      	lsrs	r3, r3, #5
 800290a:	b2db      	uxtb	r3, r3
 800290c:	f043 0301 	orr.w	r3, r3, #1
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b01      	cmp	r3, #1
 8002914:	d104      	bne.n	8002920 <HAL_RCC_OscConfig+0xf7c>
 8002916:	4b01      	ldr	r3, [pc, #4]	@ (800291c <HAL_RCC_OscConfig+0xf78>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	e029      	b.n	8002970 <HAL_RCC_OscConfig+0xfcc>
 800291c:	40021000 	.word	0x40021000
 8002920:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002924:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002928:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800292c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002932:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	fa93 f2a3 	rbit	r2, r3
 800293c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002940:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800294a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800294e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002958:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	fa93 f2a3 	rbit	r2, r3
 8002962:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002966:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	4b2b      	ldr	r3, [pc, #172]	@ (8002a1c <HAL_RCC_OscConfig+0x1078>)
 800296e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002970:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002974:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002978:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800297c:	6011      	str	r1, [r2, #0]
 800297e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002982:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002986:	6812      	ldr	r2, [r2, #0]
 8002988:	fa92 f1a2 	rbit	r1, r2
 800298c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002990:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002994:	6011      	str	r1, [r2, #0]
  return result;
 8002996:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800299a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800299e:	6812      	ldr	r2, [r2, #0]
 80029a0:	fab2 f282 	clz	r2, r2
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	f042 0220 	orr.w	r2, r2, #32
 80029aa:	b2d2      	uxtb	r2, r2
 80029ac:	f002 021f 	and.w	r2, r2, #31
 80029b0:	2101      	movs	r1, #1
 80029b2:	fa01 f202 	lsl.w	r2, r1, r2
 80029b6:	4013      	ands	r3, r2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d180      	bne.n	80028be <HAL_RCC_OscConfig+0xf1a>
 80029bc:	e027      	b.n	8002a0e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d101      	bne.n	80029d2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e01e      	b.n	8002a10 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029d2:	4b12      	ldr	r3, [pc, #72]	@ (8002a1c <HAL_RCC_OscConfig+0x1078>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80029da:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80029de:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80029e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d10b      	bne.n	8002a0a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80029f2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80029f6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80029fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d001      	beq.n	8002a0e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e000      	b.n	8002a10 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40021000 	.word	0x40021000

08002a20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b09e      	sub	sp, #120	@ 0x78
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e162      	b.n	8002cfe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a38:	4b90      	ldr	r3, [pc, #576]	@ (8002c7c <HAL_RCC_ClockConfig+0x25c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d910      	bls.n	8002a68 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a46:	4b8d      	ldr	r3, [pc, #564]	@ (8002c7c <HAL_RCC_ClockConfig+0x25c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f023 0207 	bic.w	r2, r3, #7
 8002a4e:	498b      	ldr	r1, [pc, #556]	@ (8002c7c <HAL_RCC_ClockConfig+0x25c>)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a56:	4b89      	ldr	r3, [pc, #548]	@ (8002c7c <HAL_RCC_ClockConfig+0x25c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d001      	beq.n	8002a68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e14a      	b.n	8002cfe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d008      	beq.n	8002a86 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a74:	4b82      	ldr	r3, [pc, #520]	@ (8002c80 <HAL_RCC_ClockConfig+0x260>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	497f      	ldr	r1, [pc, #508]	@ (8002c80 <HAL_RCC_ClockConfig+0x260>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 80dc 	beq.w	8002c4c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d13c      	bne.n	8002b16 <HAL_RCC_ClockConfig+0xf6>
 8002a9c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002aa0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002aa4:	fa93 f3a3 	rbit	r3, r3
 8002aa8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002aaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aac:	fab3 f383 	clz	r3, r3
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	095b      	lsrs	r3, r3, #5
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	f043 0301 	orr.w	r3, r3, #1
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d102      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xa6>
 8002ac0:	4b6f      	ldr	r3, [pc, #444]	@ (8002c80 <HAL_RCC_ClockConfig+0x260>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	e00f      	b.n	8002ae6 <HAL_RCC_ClockConfig+0xc6>
 8002ac6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002aca:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002acc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ace:	fa93 f3a3 	rbit	r3, r3
 8002ad2:	667b      	str	r3, [r7, #100]	@ 0x64
 8002ad4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ad8:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ada:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002adc:	fa93 f3a3 	rbit	r3, r3
 8002ae0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ae2:	4b67      	ldr	r3, [pc, #412]	@ (8002c80 <HAL_RCC_ClockConfig+0x260>)
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002aea:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002aec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002aee:	fa92 f2a2 	rbit	r2, r2
 8002af2:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002af4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002af6:	fab2 f282 	clz	r2, r2
 8002afa:	b2d2      	uxtb	r2, r2
 8002afc:	f042 0220 	orr.w	r2, r2, #32
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	f002 021f 	and.w	r2, r2, #31
 8002b06:	2101      	movs	r1, #1
 8002b08:	fa01 f202 	lsl.w	r2, r1, r2
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d17b      	bne.n	8002c0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e0f3      	b.n	8002cfe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d13c      	bne.n	8002b98 <HAL_RCC_ClockConfig+0x178>
 8002b1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b22:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b26:	fa93 f3a3 	rbit	r3, r3
 8002b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002b2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b2e:	fab3 f383 	clz	r3, r3
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	095b      	lsrs	r3, r3, #5
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d102      	bne.n	8002b48 <HAL_RCC_ClockConfig+0x128>
 8002b42:	4b4f      	ldr	r3, [pc, #316]	@ (8002c80 <HAL_RCC_ClockConfig+0x260>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	e00f      	b.n	8002b68 <HAL_RCC_ClockConfig+0x148>
 8002b48:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b4c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b50:	fa93 f3a3 	rbit	r3, r3
 8002b54:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b56:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b5e:	fa93 f3a3 	rbit	r3, r3
 8002b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b64:	4b46      	ldr	r3, [pc, #280]	@ (8002c80 <HAL_RCC_ClockConfig+0x260>)
 8002b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b68:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b6c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002b6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002b70:	fa92 f2a2 	rbit	r2, r2
 8002b74:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002b76:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b78:	fab2 f282 	clz	r2, r2
 8002b7c:	b2d2      	uxtb	r2, r2
 8002b7e:	f042 0220 	orr.w	r2, r2, #32
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	f002 021f 	and.w	r2, r2, #31
 8002b88:	2101      	movs	r1, #1
 8002b8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b8e:	4013      	ands	r3, r2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d13a      	bne.n	8002c0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e0b2      	b.n	8002cfe <HAL_RCC_ClockConfig+0x2de>
 8002b98:	2302      	movs	r3, #2
 8002b9a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b9e:	fa93 f3a3 	rbit	r3, r3
 8002ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba6:	fab3 f383 	clz	r3, r3
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	095b      	lsrs	r3, r3, #5
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	f043 0301 	orr.w	r3, r3, #1
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d102      	bne.n	8002bc0 <HAL_RCC_ClockConfig+0x1a0>
 8002bba:	4b31      	ldr	r3, [pc, #196]	@ (8002c80 <HAL_RCC_ClockConfig+0x260>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	e00d      	b.n	8002bdc <HAL_RCC_ClockConfig+0x1bc>
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bc6:	fa93 f3a3 	rbit	r3, r3
 8002bca:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bcc:	2302      	movs	r3, #2
 8002bce:	623b      	str	r3, [r7, #32]
 8002bd0:	6a3b      	ldr	r3, [r7, #32]
 8002bd2:	fa93 f3a3 	rbit	r3, r3
 8002bd6:	61fb      	str	r3, [r7, #28]
 8002bd8:	4b29      	ldr	r3, [pc, #164]	@ (8002c80 <HAL_RCC_ClockConfig+0x260>)
 8002bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bdc:	2202      	movs	r2, #2
 8002bde:	61ba      	str	r2, [r7, #24]
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	fa92 f2a2 	rbit	r2, r2
 8002be6:	617a      	str	r2, [r7, #20]
  return result;
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	fab2 f282 	clz	r2, r2
 8002bee:	b2d2      	uxtb	r2, r2
 8002bf0:	f042 0220 	orr.w	r2, r2, #32
 8002bf4:	b2d2      	uxtb	r2, r2
 8002bf6:	f002 021f 	and.w	r2, r2, #31
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8002c00:	4013      	ands	r3, r2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e079      	b.n	8002cfe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c0a:	4b1d      	ldr	r3, [pc, #116]	@ (8002c80 <HAL_RCC_ClockConfig+0x260>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f023 0203 	bic.w	r2, r3, #3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	491a      	ldr	r1, [pc, #104]	@ (8002c80 <HAL_RCC_ClockConfig+0x260>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c1c:	f7fe fc2e 	bl	800147c <HAL_GetTick>
 8002c20:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c22:	e00a      	b.n	8002c3a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c24:	f7fe fc2a 	bl	800147c <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e061      	b.n	8002cfe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c3a:	4b11      	ldr	r3, [pc, #68]	@ (8002c80 <HAL_RCC_ClockConfig+0x260>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f003 020c 	and.w	r2, r3, #12
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d1eb      	bne.n	8002c24 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c7c <HAL_RCC_ClockConfig+0x25c>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d214      	bcs.n	8002c84 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5a:	4b08      	ldr	r3, [pc, #32]	@ (8002c7c <HAL_RCC_ClockConfig+0x25c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f023 0207 	bic.w	r2, r3, #7
 8002c62:	4906      	ldr	r1, [pc, #24]	@ (8002c7c <HAL_RCC_ClockConfig+0x25c>)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c6a:	4b04      	ldr	r3, [pc, #16]	@ (8002c7c <HAL_RCC_ClockConfig+0x25c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d005      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e040      	b.n	8002cfe <HAL_RCC_ClockConfig+0x2de>
 8002c7c:	40022000 	.word	0x40022000
 8002c80:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d008      	beq.n	8002ca2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c90:	4b1d      	ldr	r3, [pc, #116]	@ (8002d08 <HAL_RCC_ClockConfig+0x2e8>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	491a      	ldr	r1, [pc, #104]	@ (8002d08 <HAL_RCC_ClockConfig+0x2e8>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0308 	and.w	r3, r3, #8
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d009      	beq.n	8002cc2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cae:	4b16      	ldr	r3, [pc, #88]	@ (8002d08 <HAL_RCC_ClockConfig+0x2e8>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	4912      	ldr	r1, [pc, #72]	@ (8002d08 <HAL_RCC_ClockConfig+0x2e8>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002cc2:	f000 f829 	bl	8002d18 <HAL_RCC_GetSysClockFreq>
 8002cc6:	4601      	mov	r1, r0
 8002cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8002d08 <HAL_RCC_ClockConfig+0x2e8>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cd0:	22f0      	movs	r2, #240	@ 0xf0
 8002cd2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	fa92 f2a2 	rbit	r2, r2
 8002cda:	60fa      	str	r2, [r7, #12]
  return result;
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	fab2 f282 	clz	r2, r2
 8002ce2:	b2d2      	uxtb	r2, r2
 8002ce4:	40d3      	lsrs	r3, r2
 8002ce6:	4a09      	ldr	r2, [pc, #36]	@ (8002d0c <HAL_RCC_ClockConfig+0x2ec>)
 8002ce8:	5cd3      	ldrb	r3, [r2, r3]
 8002cea:	fa21 f303 	lsr.w	r3, r1, r3
 8002cee:	4a08      	ldr	r2, [pc, #32]	@ (8002d10 <HAL_RCC_ClockConfig+0x2f0>)
 8002cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002cf2:	4b08      	ldr	r3, [pc, #32]	@ (8002d14 <HAL_RCC_ClockConfig+0x2f4>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fe fb7c 	bl	80013f4 <HAL_InitTick>
  
  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3778      	adds	r7, #120	@ 0x78
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	08007ef0 	.word	0x08007ef0
 8002d10:	20000000 	.word	0x20000000
 8002d14:	20000004 	.word	0x20000004

08002d18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b087      	sub	sp, #28
 8002d1c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	60fb      	str	r3, [r7, #12]
 8002d22:	2300      	movs	r3, #0
 8002d24:	60bb      	str	r3, [r7, #8]
 8002d26:	2300      	movs	r3, #0
 8002d28:	617b      	str	r3, [r7, #20]
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002d32:	4b1e      	ldr	r3, [pc, #120]	@ (8002dac <HAL_RCC_GetSysClockFreq+0x94>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f003 030c 	and.w	r3, r3, #12
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d002      	beq.n	8002d48 <HAL_RCC_GetSysClockFreq+0x30>
 8002d42:	2b08      	cmp	r3, #8
 8002d44:	d003      	beq.n	8002d4e <HAL_RCC_GetSysClockFreq+0x36>
 8002d46:	e026      	b.n	8002d96 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d48:	4b19      	ldr	r3, [pc, #100]	@ (8002db0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d4a:	613b      	str	r3, [r7, #16]
      break;
 8002d4c:	e026      	b.n	8002d9c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	0c9b      	lsrs	r3, r3, #18
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	4a17      	ldr	r2, [pc, #92]	@ (8002db4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d58:	5cd3      	ldrb	r3, [r2, r3]
 8002d5a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002d5c:	4b13      	ldr	r3, [pc, #76]	@ (8002dac <HAL_RCC_GetSysClockFreq+0x94>)
 8002d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d60:	f003 030f 	and.w	r3, r3, #15
 8002d64:	4a14      	ldr	r2, [pc, #80]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d66:	5cd3      	ldrb	r3, [r2, r3]
 8002d68:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d008      	beq.n	8002d86 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d74:	4a0e      	ldr	r2, [pc, #56]	@ (8002db0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	fb02 f303 	mul.w	r3, r2, r3
 8002d82:	617b      	str	r3, [r7, #20]
 8002d84:	e004      	b.n	8002d90 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a0c      	ldr	r2, [pc, #48]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d8a:	fb02 f303 	mul.w	r3, r2, r3
 8002d8e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	613b      	str	r3, [r7, #16]
      break;
 8002d94:	e002      	b.n	8002d9c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d96:	4b06      	ldr	r3, [pc, #24]	@ (8002db0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d98:	613b      	str	r3, [r7, #16]
      break;
 8002d9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d9c:	693b      	ldr	r3, [r7, #16]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	371c      	adds	r7, #28
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	40021000 	.word	0x40021000
 8002db0:	007a1200 	.word	0x007a1200
 8002db4:	08007f08 	.word	0x08007f08
 8002db8:	08007f18 	.word	0x08007f18
 8002dbc:	003d0900 	.word	0x003d0900

08002dc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dc4:	4b03      	ldr	r3, [pc, #12]	@ (8002dd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	20000000 	.word	0x20000000

08002dd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002dde:	f7ff ffef 	bl	8002dc0 <HAL_RCC_GetHCLKFreq>
 8002de2:	4601      	mov	r1, r0
 8002de4:	4b0b      	ldr	r3, [pc, #44]	@ (8002e14 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002dec:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002df0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	fa92 f2a2 	rbit	r2, r2
 8002df8:	603a      	str	r2, [r7, #0]
  return result;
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	fab2 f282 	clz	r2, r2
 8002e00:	b2d2      	uxtb	r2, r2
 8002e02:	40d3      	lsrs	r3, r2
 8002e04:	4a04      	ldr	r2, [pc, #16]	@ (8002e18 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002e06:	5cd3      	ldrb	r3, [r2, r3]
 8002e08:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40021000 	.word	0x40021000
 8002e18:	08007f00 	.word	0x08007f00

08002e1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002e22:	f7ff ffcd 	bl	8002dc0 <HAL_RCC_GetHCLKFreq>
 8002e26:	4601      	mov	r1, r0
 8002e28:	4b0b      	ldr	r3, [pc, #44]	@ (8002e58 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002e30:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002e34:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	fa92 f2a2 	rbit	r2, r2
 8002e3c:	603a      	str	r2, [r7, #0]
  return result;
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	fab2 f282 	clz	r2, r2
 8002e44:	b2d2      	uxtb	r2, r2
 8002e46:	40d3      	lsrs	r3, r2
 8002e48:	4a04      	ldr	r2, [pc, #16]	@ (8002e5c <HAL_RCC_GetPCLK2Freq+0x40>)
 8002e4a:	5cd3      	ldrb	r3, [r2, r3]
 8002e4c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002e50:	4618      	mov	r0, r3
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	08007f00 	.word	0x08007f00

08002e60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e040      	b.n	8002ef4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d106      	bne.n	8002e88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7fe f92c 	bl	80010e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2224      	movs	r2, #36	@ 0x24
 8002e8c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 0201 	bic.w	r2, r2, #1
 8002e9c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d002      	beq.n	8002eac <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f9e8 	bl	800327c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 f8af 	bl	8003010 <UART_SetConfig>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e01b      	b.n	8002ef4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002eca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689a      	ldr	r2, [r3, #8]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002eda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0201 	orr.w	r2, r2, #1
 8002eea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 fa67 	bl	80033c0 <UART_CheckIdleState>
 8002ef2:	4603      	mov	r3, r0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3708      	adds	r7, #8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b08a      	sub	sp, #40	@ 0x28
 8002f00:	af02      	add	r7, sp, #8
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	603b      	str	r3, [r7, #0]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f10:	2b20      	cmp	r3, #32
 8002f12:	d177      	bne.n	8003004 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d002      	beq.n	8002f20 <HAL_UART_Transmit+0x24>
 8002f1a:	88fb      	ldrh	r3, [r7, #6]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e070      	b.n	8003006 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2221      	movs	r2, #33	@ 0x21
 8002f30:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f32:	f7fe faa3 	bl	800147c <HAL_GetTick>
 8002f36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	88fa      	ldrh	r2, [r7, #6]
 8002f3c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	88fa      	ldrh	r2, [r7, #6]
 8002f44:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f50:	d108      	bne.n	8002f64 <HAL_UART_Transmit+0x68>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d104      	bne.n	8002f64 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	61bb      	str	r3, [r7, #24]
 8002f62:	e003      	b.n	8002f6c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f6c:	e02f      	b.n	8002fce <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	2200      	movs	r2, #0
 8002f76:	2180      	movs	r1, #128	@ 0x80
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f000 fac9 	bl	8003510 <UART_WaitOnFlagUntilTimeout>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d004      	beq.n	8002f8e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2220      	movs	r2, #32
 8002f88:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e03b      	b.n	8003006 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10b      	bne.n	8002fac <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	881a      	ldrh	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fa0:	b292      	uxth	r2, r2
 8002fa2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	3302      	adds	r3, #2
 8002fa8:	61bb      	str	r3, [r7, #24]
 8002faa:	e007      	b.n	8002fbc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	781a      	ldrb	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1c9      	bne.n	8002f6e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	9300      	str	r3, [sp, #0]
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	2140      	movs	r1, #64	@ 0x40
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f000 fa93 	bl	8003510 <UART_WaitOnFlagUntilTimeout>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d004      	beq.n	8002ffa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e005      	b.n	8003006 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2220      	movs	r2, #32
 8002ffe:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003000:	2300      	movs	r3, #0
 8003002:	e000      	b.n	8003006 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003004:	2302      	movs	r3, #2
  }
}
 8003006:	4618      	mov	r0, r3
 8003008:	3720      	adds	r7, #32
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
	...

08003010 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b088      	sub	sp, #32
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003018:	2300      	movs	r3, #0
 800301a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	431a      	orrs	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	431a      	orrs	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	4313      	orrs	r3, r2
 8003032:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	4b8a      	ldr	r3, [pc, #552]	@ (8003264 <UART_SetConfig+0x254>)
 800303c:	4013      	ands	r3, r2
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	6812      	ldr	r2, [r2, #0]
 8003042:	6979      	ldr	r1, [r7, #20]
 8003044:	430b      	orrs	r3, r1
 8003046:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68da      	ldr	r2, [r3, #12]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	4313      	orrs	r3, r2
 800306c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	430a      	orrs	r2, r1
 8003080:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a78      	ldr	r2, [pc, #480]	@ (8003268 <UART_SetConfig+0x258>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d120      	bne.n	80030ce <UART_SetConfig+0xbe>
 800308c:	4b77      	ldr	r3, [pc, #476]	@ (800326c <UART_SetConfig+0x25c>)
 800308e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003090:	f003 0303 	and.w	r3, r3, #3
 8003094:	2b03      	cmp	r3, #3
 8003096:	d817      	bhi.n	80030c8 <UART_SetConfig+0xb8>
 8003098:	a201      	add	r2, pc, #4	@ (adr r2, 80030a0 <UART_SetConfig+0x90>)
 800309a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800309e:	bf00      	nop
 80030a0:	080030b1 	.word	0x080030b1
 80030a4:	080030bd 	.word	0x080030bd
 80030a8:	080030c3 	.word	0x080030c3
 80030ac:	080030b7 	.word	0x080030b7
 80030b0:	2300      	movs	r3, #0
 80030b2:	77fb      	strb	r3, [r7, #31]
 80030b4:	e01d      	b.n	80030f2 <UART_SetConfig+0xe2>
 80030b6:	2302      	movs	r3, #2
 80030b8:	77fb      	strb	r3, [r7, #31]
 80030ba:	e01a      	b.n	80030f2 <UART_SetConfig+0xe2>
 80030bc:	2304      	movs	r3, #4
 80030be:	77fb      	strb	r3, [r7, #31]
 80030c0:	e017      	b.n	80030f2 <UART_SetConfig+0xe2>
 80030c2:	2308      	movs	r3, #8
 80030c4:	77fb      	strb	r3, [r7, #31]
 80030c6:	e014      	b.n	80030f2 <UART_SetConfig+0xe2>
 80030c8:	2310      	movs	r3, #16
 80030ca:	77fb      	strb	r3, [r7, #31]
 80030cc:	e011      	b.n	80030f2 <UART_SetConfig+0xe2>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a67      	ldr	r2, [pc, #412]	@ (8003270 <UART_SetConfig+0x260>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d102      	bne.n	80030de <UART_SetConfig+0xce>
 80030d8:	2300      	movs	r3, #0
 80030da:	77fb      	strb	r3, [r7, #31]
 80030dc:	e009      	b.n	80030f2 <UART_SetConfig+0xe2>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a64      	ldr	r2, [pc, #400]	@ (8003274 <UART_SetConfig+0x264>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d102      	bne.n	80030ee <UART_SetConfig+0xde>
 80030e8:	2300      	movs	r3, #0
 80030ea:	77fb      	strb	r3, [r7, #31]
 80030ec:	e001      	b.n	80030f2 <UART_SetConfig+0xe2>
 80030ee:	2310      	movs	r3, #16
 80030f0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030fa:	d15a      	bne.n	80031b2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80030fc:	7ffb      	ldrb	r3, [r7, #31]
 80030fe:	2b08      	cmp	r3, #8
 8003100:	d827      	bhi.n	8003152 <UART_SetConfig+0x142>
 8003102:	a201      	add	r2, pc, #4	@ (adr r2, 8003108 <UART_SetConfig+0xf8>)
 8003104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003108:	0800312d 	.word	0x0800312d
 800310c:	08003135 	.word	0x08003135
 8003110:	0800313d 	.word	0x0800313d
 8003114:	08003153 	.word	0x08003153
 8003118:	08003143 	.word	0x08003143
 800311c:	08003153 	.word	0x08003153
 8003120:	08003153 	.word	0x08003153
 8003124:	08003153 	.word	0x08003153
 8003128:	0800314b 	.word	0x0800314b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800312c:	f7ff fe54 	bl	8002dd8 <HAL_RCC_GetPCLK1Freq>
 8003130:	61b8      	str	r0, [r7, #24]
        break;
 8003132:	e013      	b.n	800315c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003134:	f7ff fe72 	bl	8002e1c <HAL_RCC_GetPCLK2Freq>
 8003138:	61b8      	str	r0, [r7, #24]
        break;
 800313a:	e00f      	b.n	800315c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800313c:	4b4e      	ldr	r3, [pc, #312]	@ (8003278 <UART_SetConfig+0x268>)
 800313e:	61bb      	str	r3, [r7, #24]
        break;
 8003140:	e00c      	b.n	800315c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003142:	f7ff fde9 	bl	8002d18 <HAL_RCC_GetSysClockFreq>
 8003146:	61b8      	str	r0, [r7, #24]
        break;
 8003148:	e008      	b.n	800315c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800314a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800314e:	61bb      	str	r3, [r7, #24]
        break;
 8003150:	e004      	b.n	800315c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003152:	2300      	movs	r3, #0
 8003154:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	77bb      	strb	r3, [r7, #30]
        break;
 800315a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d074      	beq.n	800324c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	005a      	lsls	r2, r3, #1
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	085b      	lsrs	r3, r3, #1
 800316c:	441a      	add	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	fbb2 f3f3 	udiv	r3, r2, r3
 8003176:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	2b0f      	cmp	r3, #15
 800317c:	d916      	bls.n	80031ac <UART_SetConfig+0x19c>
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003184:	d212      	bcs.n	80031ac <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	b29b      	uxth	r3, r3
 800318a:	f023 030f 	bic.w	r3, r3, #15
 800318e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	085b      	lsrs	r3, r3, #1
 8003194:	b29b      	uxth	r3, r3
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	b29a      	uxth	r2, r3
 800319c:	89fb      	ldrh	r3, [r7, #14]
 800319e:	4313      	orrs	r3, r2
 80031a0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	89fa      	ldrh	r2, [r7, #14]
 80031a8:	60da      	str	r2, [r3, #12]
 80031aa:	e04f      	b.n	800324c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	77bb      	strb	r3, [r7, #30]
 80031b0:	e04c      	b.n	800324c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031b2:	7ffb      	ldrb	r3, [r7, #31]
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	d828      	bhi.n	800320a <UART_SetConfig+0x1fa>
 80031b8:	a201      	add	r2, pc, #4	@ (adr r2, 80031c0 <UART_SetConfig+0x1b0>)
 80031ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031be:	bf00      	nop
 80031c0:	080031e5 	.word	0x080031e5
 80031c4:	080031ed 	.word	0x080031ed
 80031c8:	080031f5 	.word	0x080031f5
 80031cc:	0800320b 	.word	0x0800320b
 80031d0:	080031fb 	.word	0x080031fb
 80031d4:	0800320b 	.word	0x0800320b
 80031d8:	0800320b 	.word	0x0800320b
 80031dc:	0800320b 	.word	0x0800320b
 80031e0:	08003203 	.word	0x08003203
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031e4:	f7ff fdf8 	bl	8002dd8 <HAL_RCC_GetPCLK1Freq>
 80031e8:	61b8      	str	r0, [r7, #24]
        break;
 80031ea:	e013      	b.n	8003214 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031ec:	f7ff fe16 	bl	8002e1c <HAL_RCC_GetPCLK2Freq>
 80031f0:	61b8      	str	r0, [r7, #24]
        break;
 80031f2:	e00f      	b.n	8003214 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031f4:	4b20      	ldr	r3, [pc, #128]	@ (8003278 <UART_SetConfig+0x268>)
 80031f6:	61bb      	str	r3, [r7, #24]
        break;
 80031f8:	e00c      	b.n	8003214 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031fa:	f7ff fd8d 	bl	8002d18 <HAL_RCC_GetSysClockFreq>
 80031fe:	61b8      	str	r0, [r7, #24]
        break;
 8003200:	e008      	b.n	8003214 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003202:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003206:	61bb      	str	r3, [r7, #24]
        break;
 8003208:	e004      	b.n	8003214 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800320a:	2300      	movs	r3, #0
 800320c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	77bb      	strb	r3, [r7, #30]
        break;
 8003212:	bf00      	nop
    }

    if (pclk != 0U)
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d018      	beq.n	800324c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	085a      	lsrs	r2, r3, #1
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	441a      	add	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	fbb2 f3f3 	udiv	r3, r2, r3
 800322c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	2b0f      	cmp	r3, #15
 8003232:	d909      	bls.n	8003248 <UART_SetConfig+0x238>
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800323a:	d205      	bcs.n	8003248 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	b29a      	uxth	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	60da      	str	r2, [r3, #12]
 8003246:	e001      	b.n	800324c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003258:	7fbb      	ldrb	r3, [r7, #30]
}
 800325a:	4618      	mov	r0, r3
 800325c:	3720      	adds	r7, #32
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	efff69f3 	.word	0xefff69f3
 8003268:	40013800 	.word	0x40013800
 800326c:	40021000 	.word	0x40021000
 8003270:	40004400 	.word	0x40004400
 8003274:	40004800 	.word	0x40004800
 8003278:	007a1200 	.word	0x007a1200

0800327c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003288:	f003 0308 	and.w	r3, r3, #8
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00a      	beq.n	80032a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00a      	beq.n	80032c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00a      	beq.n	80032ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ee:	f003 0304 	and.w	r3, r3, #4
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00a      	beq.n	800330c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003310:	f003 0310 	and.w	r3, r3, #16
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00a      	beq.n	800332e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003332:	f003 0320 	and.w	r3, r3, #32
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00a      	beq.n	8003350 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003358:	2b00      	cmp	r3, #0
 800335a:	d01a      	beq.n	8003392 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003376:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800337a:	d10a      	bne.n	8003392 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00a      	beq.n	80033b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	605a      	str	r2, [r3, #4]
  }
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b098      	sub	sp, #96	@ 0x60
 80033c4:	af02      	add	r7, sp, #8
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033d0:	f7fe f854 	bl	800147c <HAL_GetTick>
 80033d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0308 	and.w	r3, r3, #8
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d12e      	bne.n	8003442 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033ec:	2200      	movs	r2, #0
 80033ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f88c 	bl	8003510 <UART_WaitOnFlagUntilTimeout>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d021      	beq.n	8003442 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003406:	e853 3f00 	ldrex	r3, [r3]
 800340a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800340c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800340e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003412:	653b      	str	r3, [r7, #80]	@ 0x50
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	461a      	mov	r2, r3
 800341a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800341c:	647b      	str	r3, [r7, #68]	@ 0x44
 800341e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003420:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003422:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003424:	e841 2300 	strex	r3, r2, [r1]
 8003428:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800342a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1e6      	bne.n	80033fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2220      	movs	r2, #32
 8003434:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e062      	b.n	8003508 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b04      	cmp	r3, #4
 800344e:	d149      	bne.n	80034e4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003450:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003458:	2200      	movs	r2, #0
 800345a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f856 	bl	8003510 <UART_WaitOnFlagUntilTimeout>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d03c      	beq.n	80034e4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003472:	e853 3f00 	ldrex	r3, [r3]
 8003476:	623b      	str	r3, [r7, #32]
   return(result);
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800347e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	461a      	mov	r2, r3
 8003486:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003488:	633b      	str	r3, [r7, #48]	@ 0x30
 800348a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800348e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003490:	e841 2300 	strex	r3, r2, [r1]
 8003494:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1e6      	bne.n	800346a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	3308      	adds	r3, #8
 80034a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	e853 3f00 	ldrex	r3, [r3]
 80034aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f023 0301 	bic.w	r3, r3, #1
 80034b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	3308      	adds	r3, #8
 80034ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034bc:	61fa      	str	r2, [r7, #28]
 80034be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c0:	69b9      	ldr	r1, [r7, #24]
 80034c2:	69fa      	ldr	r2, [r7, #28]
 80034c4:	e841 2300 	strex	r3, r2, [r1]
 80034c8:	617b      	str	r3, [r7, #20]
   return(result);
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1e5      	bne.n	800349c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2220      	movs	r2, #32
 80034d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e011      	b.n	8003508 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2220      	movs	r2, #32
 80034e8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2220      	movs	r2, #32
 80034ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3758      	adds	r7, #88	@ 0x58
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	603b      	str	r3, [r7, #0]
 800351c:	4613      	mov	r3, r2
 800351e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003520:	e04f      	b.n	80035c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003528:	d04b      	beq.n	80035c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800352a:	f7fd ffa7 	bl	800147c <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	429a      	cmp	r2, r3
 8003538:	d302      	bcc.n	8003540 <UART_WaitOnFlagUntilTimeout+0x30>
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d101      	bne.n	8003544 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e04e      	b.n	80035e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0304 	and.w	r3, r3, #4
 800354e:	2b00      	cmp	r3, #0
 8003550:	d037      	beq.n	80035c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	2b80      	cmp	r3, #128	@ 0x80
 8003556:	d034      	beq.n	80035c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	2b40      	cmp	r3, #64	@ 0x40
 800355c:	d031      	beq.n	80035c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	69db      	ldr	r3, [r3, #28]
 8003564:	f003 0308 	and.w	r3, r3, #8
 8003568:	2b08      	cmp	r3, #8
 800356a:	d110      	bne.n	800358e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2208      	movs	r2, #8
 8003572:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f000 f838 	bl	80035ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2208      	movs	r2, #8
 800357e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e029      	b.n	80035e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003598:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800359c:	d111      	bne.n	80035c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80035a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f000 f81e 	bl	80035ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2220      	movs	r2, #32
 80035b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e00f      	b.n	80035e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	69da      	ldr	r2, [r3, #28]
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	4013      	ands	r3, r2
 80035cc:	68ba      	ldr	r2, [r7, #8]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	bf0c      	ite	eq
 80035d2:	2301      	moveq	r3, #1
 80035d4:	2300      	movne	r3, #0
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	461a      	mov	r2, r3
 80035da:	79fb      	ldrb	r3, [r7, #7]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d0a0      	beq.n	8003522 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b095      	sub	sp, #84	@ 0x54
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035fa:	e853 3f00 	ldrex	r3, [r3]
 80035fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003602:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003606:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	461a      	mov	r2, r3
 800360e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003610:	643b      	str	r3, [r7, #64]	@ 0x40
 8003612:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003614:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003616:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003618:	e841 2300 	strex	r3, r2, [r1]
 800361c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800361e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1e6      	bne.n	80035f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	3308      	adds	r3, #8
 800362a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	e853 3f00 	ldrex	r3, [r3]
 8003632:	61fb      	str	r3, [r7, #28]
   return(result);
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	f023 0301 	bic.w	r3, r3, #1
 800363a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	3308      	adds	r3, #8
 8003642:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003644:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003646:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003648:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800364a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800364c:	e841 2300 	strex	r3, r2, [r1]
 8003650:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1e5      	bne.n	8003624 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800365c:	2b01      	cmp	r3, #1
 800365e:	d118      	bne.n	8003692 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	e853 3f00 	ldrex	r3, [r3]
 800366c:	60bb      	str	r3, [r7, #8]
   return(result);
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	f023 0310 	bic.w	r3, r3, #16
 8003674:	647b      	str	r3, [r7, #68]	@ 0x44
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	461a      	mov	r2, r3
 800367c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800367e:	61bb      	str	r3, [r7, #24]
 8003680:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003682:	6979      	ldr	r1, [r7, #20]
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	e841 2300 	strex	r3, r2, [r1]
 800368a:	613b      	str	r3, [r7, #16]
   return(result);
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1e6      	bne.n	8003660 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2220      	movs	r2, #32
 8003696:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80036a6:	bf00      	nop
 80036a8:	3754      	adds	r7, #84	@ 0x54
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
	...

080036b4 <srand>:
 80036b4:	b538      	push	{r3, r4, r5, lr}
 80036b6:	4b10      	ldr	r3, [pc, #64]	@ (80036f8 <srand+0x44>)
 80036b8:	681d      	ldr	r5, [r3, #0]
 80036ba:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80036bc:	4604      	mov	r4, r0
 80036be:	b9b3      	cbnz	r3, 80036ee <srand+0x3a>
 80036c0:	2018      	movs	r0, #24
 80036c2:	f001 ff5f 	bl	8005584 <malloc>
 80036c6:	4602      	mov	r2, r0
 80036c8:	6328      	str	r0, [r5, #48]	@ 0x30
 80036ca:	b920      	cbnz	r0, 80036d6 <srand+0x22>
 80036cc:	4b0b      	ldr	r3, [pc, #44]	@ (80036fc <srand+0x48>)
 80036ce:	480c      	ldr	r0, [pc, #48]	@ (8003700 <srand+0x4c>)
 80036d0:	2146      	movs	r1, #70	@ 0x46
 80036d2:	f001 f8a1 	bl	8004818 <__assert_func>
 80036d6:	490b      	ldr	r1, [pc, #44]	@ (8003704 <srand+0x50>)
 80036d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003708 <srand+0x54>)
 80036da:	e9c0 1300 	strd	r1, r3, [r0]
 80036de:	4b0b      	ldr	r3, [pc, #44]	@ (800370c <srand+0x58>)
 80036e0:	6083      	str	r3, [r0, #8]
 80036e2:	230b      	movs	r3, #11
 80036e4:	8183      	strh	r3, [r0, #12]
 80036e6:	2100      	movs	r1, #0
 80036e8:	2001      	movs	r0, #1
 80036ea:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80036ee:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80036f0:	2200      	movs	r2, #0
 80036f2:	611c      	str	r4, [r3, #16]
 80036f4:	615a      	str	r2, [r3, #20]
 80036f6:	bd38      	pop	{r3, r4, r5, pc}
 80036f8:	20000018 	.word	0x20000018
 80036fc:	08007f28 	.word	0x08007f28
 8003700:	08007f3f 	.word	0x08007f3f
 8003704:	abcd330e 	.word	0xabcd330e
 8003708:	e66d1234 	.word	0xe66d1234
 800370c:	0005deec 	.word	0x0005deec

08003710 <rand>:
 8003710:	4b16      	ldr	r3, [pc, #88]	@ (800376c <rand+0x5c>)
 8003712:	b510      	push	{r4, lr}
 8003714:	681c      	ldr	r4, [r3, #0]
 8003716:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003718:	b9b3      	cbnz	r3, 8003748 <rand+0x38>
 800371a:	2018      	movs	r0, #24
 800371c:	f001 ff32 	bl	8005584 <malloc>
 8003720:	4602      	mov	r2, r0
 8003722:	6320      	str	r0, [r4, #48]	@ 0x30
 8003724:	b920      	cbnz	r0, 8003730 <rand+0x20>
 8003726:	4b12      	ldr	r3, [pc, #72]	@ (8003770 <rand+0x60>)
 8003728:	4812      	ldr	r0, [pc, #72]	@ (8003774 <rand+0x64>)
 800372a:	2152      	movs	r1, #82	@ 0x52
 800372c:	f001 f874 	bl	8004818 <__assert_func>
 8003730:	4911      	ldr	r1, [pc, #68]	@ (8003778 <rand+0x68>)
 8003732:	4b12      	ldr	r3, [pc, #72]	@ (800377c <rand+0x6c>)
 8003734:	e9c0 1300 	strd	r1, r3, [r0]
 8003738:	4b11      	ldr	r3, [pc, #68]	@ (8003780 <rand+0x70>)
 800373a:	6083      	str	r3, [r0, #8]
 800373c:	230b      	movs	r3, #11
 800373e:	8183      	strh	r3, [r0, #12]
 8003740:	2100      	movs	r1, #0
 8003742:	2001      	movs	r0, #1
 8003744:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003748:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800374a:	480e      	ldr	r0, [pc, #56]	@ (8003784 <rand+0x74>)
 800374c:	690b      	ldr	r3, [r1, #16]
 800374e:	694c      	ldr	r4, [r1, #20]
 8003750:	4a0d      	ldr	r2, [pc, #52]	@ (8003788 <rand+0x78>)
 8003752:	4358      	muls	r0, r3
 8003754:	fb02 0004 	mla	r0, r2, r4, r0
 8003758:	fba3 3202 	umull	r3, r2, r3, r2
 800375c:	3301      	adds	r3, #1
 800375e:	eb40 0002 	adc.w	r0, r0, r2
 8003762:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8003766:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800376a:	bd10      	pop	{r4, pc}
 800376c:	20000018 	.word	0x20000018
 8003770:	08007f28 	.word	0x08007f28
 8003774:	08007f3f 	.word	0x08007f3f
 8003778:	abcd330e 	.word	0xabcd330e
 800377c:	e66d1234 	.word	0xe66d1234
 8003780:	0005deec 	.word	0x0005deec
 8003784:	5851f42d 	.word	0x5851f42d
 8003788:	4c957f2d 	.word	0x4c957f2d

0800378c <__cvt>:
 800378c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003790:	ec57 6b10 	vmov	r6, r7, d0
 8003794:	2f00      	cmp	r7, #0
 8003796:	460c      	mov	r4, r1
 8003798:	4619      	mov	r1, r3
 800379a:	463b      	mov	r3, r7
 800379c:	bfbb      	ittet	lt
 800379e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80037a2:	461f      	movlt	r7, r3
 80037a4:	2300      	movge	r3, #0
 80037a6:	232d      	movlt	r3, #45	@ 0x2d
 80037a8:	700b      	strb	r3, [r1, #0]
 80037aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80037ac:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80037b0:	4691      	mov	r9, r2
 80037b2:	f023 0820 	bic.w	r8, r3, #32
 80037b6:	bfbc      	itt	lt
 80037b8:	4632      	movlt	r2, r6
 80037ba:	4616      	movlt	r6, r2
 80037bc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80037c0:	d005      	beq.n	80037ce <__cvt+0x42>
 80037c2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80037c6:	d100      	bne.n	80037ca <__cvt+0x3e>
 80037c8:	3401      	adds	r4, #1
 80037ca:	2102      	movs	r1, #2
 80037cc:	e000      	b.n	80037d0 <__cvt+0x44>
 80037ce:	2103      	movs	r1, #3
 80037d0:	ab03      	add	r3, sp, #12
 80037d2:	9301      	str	r3, [sp, #4]
 80037d4:	ab02      	add	r3, sp, #8
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	ec47 6b10 	vmov	d0, r6, r7
 80037dc:	4653      	mov	r3, sl
 80037de:	4622      	mov	r2, r4
 80037e0:	f001 f8c2 	bl	8004968 <_dtoa_r>
 80037e4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80037e8:	4605      	mov	r5, r0
 80037ea:	d119      	bne.n	8003820 <__cvt+0x94>
 80037ec:	f019 0f01 	tst.w	r9, #1
 80037f0:	d00e      	beq.n	8003810 <__cvt+0x84>
 80037f2:	eb00 0904 	add.w	r9, r0, r4
 80037f6:	2200      	movs	r2, #0
 80037f8:	2300      	movs	r3, #0
 80037fa:	4630      	mov	r0, r6
 80037fc:	4639      	mov	r1, r7
 80037fe:	f7fd f963 	bl	8000ac8 <__aeabi_dcmpeq>
 8003802:	b108      	cbz	r0, 8003808 <__cvt+0x7c>
 8003804:	f8cd 900c 	str.w	r9, [sp, #12]
 8003808:	2230      	movs	r2, #48	@ 0x30
 800380a:	9b03      	ldr	r3, [sp, #12]
 800380c:	454b      	cmp	r3, r9
 800380e:	d31e      	bcc.n	800384e <__cvt+0xc2>
 8003810:	9b03      	ldr	r3, [sp, #12]
 8003812:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003814:	1b5b      	subs	r3, r3, r5
 8003816:	4628      	mov	r0, r5
 8003818:	6013      	str	r3, [r2, #0]
 800381a:	b004      	add	sp, #16
 800381c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003820:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003824:	eb00 0904 	add.w	r9, r0, r4
 8003828:	d1e5      	bne.n	80037f6 <__cvt+0x6a>
 800382a:	7803      	ldrb	r3, [r0, #0]
 800382c:	2b30      	cmp	r3, #48	@ 0x30
 800382e:	d10a      	bne.n	8003846 <__cvt+0xba>
 8003830:	2200      	movs	r2, #0
 8003832:	2300      	movs	r3, #0
 8003834:	4630      	mov	r0, r6
 8003836:	4639      	mov	r1, r7
 8003838:	f7fd f946 	bl	8000ac8 <__aeabi_dcmpeq>
 800383c:	b918      	cbnz	r0, 8003846 <__cvt+0xba>
 800383e:	f1c4 0401 	rsb	r4, r4, #1
 8003842:	f8ca 4000 	str.w	r4, [sl]
 8003846:	f8da 3000 	ldr.w	r3, [sl]
 800384a:	4499      	add	r9, r3
 800384c:	e7d3      	b.n	80037f6 <__cvt+0x6a>
 800384e:	1c59      	adds	r1, r3, #1
 8003850:	9103      	str	r1, [sp, #12]
 8003852:	701a      	strb	r2, [r3, #0]
 8003854:	e7d9      	b.n	800380a <__cvt+0x7e>

08003856 <__exponent>:
 8003856:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003858:	2900      	cmp	r1, #0
 800385a:	bfba      	itte	lt
 800385c:	4249      	neglt	r1, r1
 800385e:	232d      	movlt	r3, #45	@ 0x2d
 8003860:	232b      	movge	r3, #43	@ 0x2b
 8003862:	2909      	cmp	r1, #9
 8003864:	7002      	strb	r2, [r0, #0]
 8003866:	7043      	strb	r3, [r0, #1]
 8003868:	dd29      	ble.n	80038be <__exponent+0x68>
 800386a:	f10d 0307 	add.w	r3, sp, #7
 800386e:	461d      	mov	r5, r3
 8003870:	270a      	movs	r7, #10
 8003872:	461a      	mov	r2, r3
 8003874:	fbb1 f6f7 	udiv	r6, r1, r7
 8003878:	fb07 1416 	mls	r4, r7, r6, r1
 800387c:	3430      	adds	r4, #48	@ 0x30
 800387e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003882:	460c      	mov	r4, r1
 8003884:	2c63      	cmp	r4, #99	@ 0x63
 8003886:	f103 33ff 	add.w	r3, r3, #4294967295
 800388a:	4631      	mov	r1, r6
 800388c:	dcf1      	bgt.n	8003872 <__exponent+0x1c>
 800388e:	3130      	adds	r1, #48	@ 0x30
 8003890:	1e94      	subs	r4, r2, #2
 8003892:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003896:	1c41      	adds	r1, r0, #1
 8003898:	4623      	mov	r3, r4
 800389a:	42ab      	cmp	r3, r5
 800389c:	d30a      	bcc.n	80038b4 <__exponent+0x5e>
 800389e:	f10d 0309 	add.w	r3, sp, #9
 80038a2:	1a9b      	subs	r3, r3, r2
 80038a4:	42ac      	cmp	r4, r5
 80038a6:	bf88      	it	hi
 80038a8:	2300      	movhi	r3, #0
 80038aa:	3302      	adds	r3, #2
 80038ac:	4403      	add	r3, r0
 80038ae:	1a18      	subs	r0, r3, r0
 80038b0:	b003      	add	sp, #12
 80038b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038b4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80038b8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80038bc:	e7ed      	b.n	800389a <__exponent+0x44>
 80038be:	2330      	movs	r3, #48	@ 0x30
 80038c0:	3130      	adds	r1, #48	@ 0x30
 80038c2:	7083      	strb	r3, [r0, #2]
 80038c4:	70c1      	strb	r1, [r0, #3]
 80038c6:	1d03      	adds	r3, r0, #4
 80038c8:	e7f1      	b.n	80038ae <__exponent+0x58>
	...

080038cc <_printf_float>:
 80038cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038d0:	b08d      	sub	sp, #52	@ 0x34
 80038d2:	460c      	mov	r4, r1
 80038d4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80038d8:	4616      	mov	r6, r2
 80038da:	461f      	mov	r7, r3
 80038dc:	4605      	mov	r5, r0
 80038de:	f000 ff0b 	bl	80046f8 <_localeconv_r>
 80038e2:	6803      	ldr	r3, [r0, #0]
 80038e4:	9304      	str	r3, [sp, #16]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fc fcc2 	bl	8000270 <strlen>
 80038ec:	2300      	movs	r3, #0
 80038ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80038f0:	f8d8 3000 	ldr.w	r3, [r8]
 80038f4:	9005      	str	r0, [sp, #20]
 80038f6:	3307      	adds	r3, #7
 80038f8:	f023 0307 	bic.w	r3, r3, #7
 80038fc:	f103 0208 	add.w	r2, r3, #8
 8003900:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003904:	f8d4 b000 	ldr.w	fp, [r4]
 8003908:	f8c8 2000 	str.w	r2, [r8]
 800390c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003910:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003914:	9307      	str	r3, [sp, #28]
 8003916:	f8cd 8018 	str.w	r8, [sp, #24]
 800391a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800391e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003922:	4b9c      	ldr	r3, [pc, #624]	@ (8003b94 <_printf_float+0x2c8>)
 8003924:	f04f 32ff 	mov.w	r2, #4294967295
 8003928:	f7fd f900 	bl	8000b2c <__aeabi_dcmpun>
 800392c:	bb70      	cbnz	r0, 800398c <_printf_float+0xc0>
 800392e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003932:	4b98      	ldr	r3, [pc, #608]	@ (8003b94 <_printf_float+0x2c8>)
 8003934:	f04f 32ff 	mov.w	r2, #4294967295
 8003938:	f7fd f8da 	bl	8000af0 <__aeabi_dcmple>
 800393c:	bb30      	cbnz	r0, 800398c <_printf_float+0xc0>
 800393e:	2200      	movs	r2, #0
 8003940:	2300      	movs	r3, #0
 8003942:	4640      	mov	r0, r8
 8003944:	4649      	mov	r1, r9
 8003946:	f7fd f8c9 	bl	8000adc <__aeabi_dcmplt>
 800394a:	b110      	cbz	r0, 8003952 <_printf_float+0x86>
 800394c:	232d      	movs	r3, #45	@ 0x2d
 800394e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003952:	4a91      	ldr	r2, [pc, #580]	@ (8003b98 <_printf_float+0x2cc>)
 8003954:	4b91      	ldr	r3, [pc, #580]	@ (8003b9c <_printf_float+0x2d0>)
 8003956:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800395a:	bf94      	ite	ls
 800395c:	4690      	movls	r8, r2
 800395e:	4698      	movhi	r8, r3
 8003960:	2303      	movs	r3, #3
 8003962:	6123      	str	r3, [r4, #16]
 8003964:	f02b 0304 	bic.w	r3, fp, #4
 8003968:	6023      	str	r3, [r4, #0]
 800396a:	f04f 0900 	mov.w	r9, #0
 800396e:	9700      	str	r7, [sp, #0]
 8003970:	4633      	mov	r3, r6
 8003972:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003974:	4621      	mov	r1, r4
 8003976:	4628      	mov	r0, r5
 8003978:	f000 f9d2 	bl	8003d20 <_printf_common>
 800397c:	3001      	adds	r0, #1
 800397e:	f040 808d 	bne.w	8003a9c <_printf_float+0x1d0>
 8003982:	f04f 30ff 	mov.w	r0, #4294967295
 8003986:	b00d      	add	sp, #52	@ 0x34
 8003988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800398c:	4642      	mov	r2, r8
 800398e:	464b      	mov	r3, r9
 8003990:	4640      	mov	r0, r8
 8003992:	4649      	mov	r1, r9
 8003994:	f7fd f8ca 	bl	8000b2c <__aeabi_dcmpun>
 8003998:	b140      	cbz	r0, 80039ac <_printf_float+0xe0>
 800399a:	464b      	mov	r3, r9
 800399c:	2b00      	cmp	r3, #0
 800399e:	bfbc      	itt	lt
 80039a0:	232d      	movlt	r3, #45	@ 0x2d
 80039a2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80039a6:	4a7e      	ldr	r2, [pc, #504]	@ (8003ba0 <_printf_float+0x2d4>)
 80039a8:	4b7e      	ldr	r3, [pc, #504]	@ (8003ba4 <_printf_float+0x2d8>)
 80039aa:	e7d4      	b.n	8003956 <_printf_float+0x8a>
 80039ac:	6863      	ldr	r3, [r4, #4]
 80039ae:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80039b2:	9206      	str	r2, [sp, #24]
 80039b4:	1c5a      	adds	r2, r3, #1
 80039b6:	d13b      	bne.n	8003a30 <_printf_float+0x164>
 80039b8:	2306      	movs	r3, #6
 80039ba:	6063      	str	r3, [r4, #4]
 80039bc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80039c0:	2300      	movs	r3, #0
 80039c2:	6022      	str	r2, [r4, #0]
 80039c4:	9303      	str	r3, [sp, #12]
 80039c6:	ab0a      	add	r3, sp, #40	@ 0x28
 80039c8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80039cc:	ab09      	add	r3, sp, #36	@ 0x24
 80039ce:	9300      	str	r3, [sp, #0]
 80039d0:	6861      	ldr	r1, [r4, #4]
 80039d2:	ec49 8b10 	vmov	d0, r8, r9
 80039d6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80039da:	4628      	mov	r0, r5
 80039dc:	f7ff fed6 	bl	800378c <__cvt>
 80039e0:	9b06      	ldr	r3, [sp, #24]
 80039e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80039e4:	2b47      	cmp	r3, #71	@ 0x47
 80039e6:	4680      	mov	r8, r0
 80039e8:	d129      	bne.n	8003a3e <_printf_float+0x172>
 80039ea:	1cc8      	adds	r0, r1, #3
 80039ec:	db02      	blt.n	80039f4 <_printf_float+0x128>
 80039ee:	6863      	ldr	r3, [r4, #4]
 80039f0:	4299      	cmp	r1, r3
 80039f2:	dd41      	ble.n	8003a78 <_printf_float+0x1ac>
 80039f4:	f1aa 0a02 	sub.w	sl, sl, #2
 80039f8:	fa5f fa8a 	uxtb.w	sl, sl
 80039fc:	3901      	subs	r1, #1
 80039fe:	4652      	mov	r2, sl
 8003a00:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003a04:	9109      	str	r1, [sp, #36]	@ 0x24
 8003a06:	f7ff ff26 	bl	8003856 <__exponent>
 8003a0a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003a0c:	1813      	adds	r3, r2, r0
 8003a0e:	2a01      	cmp	r2, #1
 8003a10:	4681      	mov	r9, r0
 8003a12:	6123      	str	r3, [r4, #16]
 8003a14:	dc02      	bgt.n	8003a1c <_printf_float+0x150>
 8003a16:	6822      	ldr	r2, [r4, #0]
 8003a18:	07d2      	lsls	r2, r2, #31
 8003a1a:	d501      	bpl.n	8003a20 <_printf_float+0x154>
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	6123      	str	r3, [r4, #16]
 8003a20:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d0a2      	beq.n	800396e <_printf_float+0xa2>
 8003a28:	232d      	movs	r3, #45	@ 0x2d
 8003a2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a2e:	e79e      	b.n	800396e <_printf_float+0xa2>
 8003a30:	9a06      	ldr	r2, [sp, #24]
 8003a32:	2a47      	cmp	r2, #71	@ 0x47
 8003a34:	d1c2      	bne.n	80039bc <_printf_float+0xf0>
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1c0      	bne.n	80039bc <_printf_float+0xf0>
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e7bd      	b.n	80039ba <_printf_float+0xee>
 8003a3e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003a42:	d9db      	bls.n	80039fc <_printf_float+0x130>
 8003a44:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003a48:	d118      	bne.n	8003a7c <_printf_float+0x1b0>
 8003a4a:	2900      	cmp	r1, #0
 8003a4c:	6863      	ldr	r3, [r4, #4]
 8003a4e:	dd0b      	ble.n	8003a68 <_printf_float+0x19c>
 8003a50:	6121      	str	r1, [r4, #16]
 8003a52:	b913      	cbnz	r3, 8003a5a <_printf_float+0x18e>
 8003a54:	6822      	ldr	r2, [r4, #0]
 8003a56:	07d0      	lsls	r0, r2, #31
 8003a58:	d502      	bpl.n	8003a60 <_printf_float+0x194>
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	440b      	add	r3, r1
 8003a5e:	6123      	str	r3, [r4, #16]
 8003a60:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003a62:	f04f 0900 	mov.w	r9, #0
 8003a66:	e7db      	b.n	8003a20 <_printf_float+0x154>
 8003a68:	b913      	cbnz	r3, 8003a70 <_printf_float+0x1a4>
 8003a6a:	6822      	ldr	r2, [r4, #0]
 8003a6c:	07d2      	lsls	r2, r2, #31
 8003a6e:	d501      	bpl.n	8003a74 <_printf_float+0x1a8>
 8003a70:	3302      	adds	r3, #2
 8003a72:	e7f4      	b.n	8003a5e <_printf_float+0x192>
 8003a74:	2301      	movs	r3, #1
 8003a76:	e7f2      	b.n	8003a5e <_printf_float+0x192>
 8003a78:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003a7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003a7e:	4299      	cmp	r1, r3
 8003a80:	db05      	blt.n	8003a8e <_printf_float+0x1c2>
 8003a82:	6823      	ldr	r3, [r4, #0]
 8003a84:	6121      	str	r1, [r4, #16]
 8003a86:	07d8      	lsls	r0, r3, #31
 8003a88:	d5ea      	bpl.n	8003a60 <_printf_float+0x194>
 8003a8a:	1c4b      	adds	r3, r1, #1
 8003a8c:	e7e7      	b.n	8003a5e <_printf_float+0x192>
 8003a8e:	2900      	cmp	r1, #0
 8003a90:	bfd4      	ite	le
 8003a92:	f1c1 0202 	rsble	r2, r1, #2
 8003a96:	2201      	movgt	r2, #1
 8003a98:	4413      	add	r3, r2
 8003a9a:	e7e0      	b.n	8003a5e <_printf_float+0x192>
 8003a9c:	6823      	ldr	r3, [r4, #0]
 8003a9e:	055a      	lsls	r2, r3, #21
 8003aa0:	d407      	bmi.n	8003ab2 <_printf_float+0x1e6>
 8003aa2:	6923      	ldr	r3, [r4, #16]
 8003aa4:	4642      	mov	r2, r8
 8003aa6:	4631      	mov	r1, r6
 8003aa8:	4628      	mov	r0, r5
 8003aaa:	47b8      	blx	r7
 8003aac:	3001      	adds	r0, #1
 8003aae:	d12b      	bne.n	8003b08 <_printf_float+0x23c>
 8003ab0:	e767      	b.n	8003982 <_printf_float+0xb6>
 8003ab2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003ab6:	f240 80dd 	bls.w	8003c74 <_printf_float+0x3a8>
 8003aba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003abe:	2200      	movs	r2, #0
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	f7fd f801 	bl	8000ac8 <__aeabi_dcmpeq>
 8003ac6:	2800      	cmp	r0, #0
 8003ac8:	d033      	beq.n	8003b32 <_printf_float+0x266>
 8003aca:	4a37      	ldr	r2, [pc, #220]	@ (8003ba8 <_printf_float+0x2dc>)
 8003acc:	2301      	movs	r3, #1
 8003ace:	4631      	mov	r1, r6
 8003ad0:	4628      	mov	r0, r5
 8003ad2:	47b8      	blx	r7
 8003ad4:	3001      	adds	r0, #1
 8003ad6:	f43f af54 	beq.w	8003982 <_printf_float+0xb6>
 8003ada:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003ade:	4543      	cmp	r3, r8
 8003ae0:	db02      	blt.n	8003ae8 <_printf_float+0x21c>
 8003ae2:	6823      	ldr	r3, [r4, #0]
 8003ae4:	07d8      	lsls	r0, r3, #31
 8003ae6:	d50f      	bpl.n	8003b08 <_printf_float+0x23c>
 8003ae8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003aec:	4631      	mov	r1, r6
 8003aee:	4628      	mov	r0, r5
 8003af0:	47b8      	blx	r7
 8003af2:	3001      	adds	r0, #1
 8003af4:	f43f af45 	beq.w	8003982 <_printf_float+0xb6>
 8003af8:	f04f 0900 	mov.w	r9, #0
 8003afc:	f108 38ff 	add.w	r8, r8, #4294967295
 8003b00:	f104 0a1a 	add.w	sl, r4, #26
 8003b04:	45c8      	cmp	r8, r9
 8003b06:	dc09      	bgt.n	8003b1c <_printf_float+0x250>
 8003b08:	6823      	ldr	r3, [r4, #0]
 8003b0a:	079b      	lsls	r3, r3, #30
 8003b0c:	f100 8103 	bmi.w	8003d16 <_printf_float+0x44a>
 8003b10:	68e0      	ldr	r0, [r4, #12]
 8003b12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003b14:	4298      	cmp	r0, r3
 8003b16:	bfb8      	it	lt
 8003b18:	4618      	movlt	r0, r3
 8003b1a:	e734      	b.n	8003986 <_printf_float+0xba>
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	4652      	mov	r2, sl
 8003b20:	4631      	mov	r1, r6
 8003b22:	4628      	mov	r0, r5
 8003b24:	47b8      	blx	r7
 8003b26:	3001      	adds	r0, #1
 8003b28:	f43f af2b 	beq.w	8003982 <_printf_float+0xb6>
 8003b2c:	f109 0901 	add.w	r9, r9, #1
 8003b30:	e7e8      	b.n	8003b04 <_printf_float+0x238>
 8003b32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	dc39      	bgt.n	8003bac <_printf_float+0x2e0>
 8003b38:	4a1b      	ldr	r2, [pc, #108]	@ (8003ba8 <_printf_float+0x2dc>)
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	4631      	mov	r1, r6
 8003b3e:	4628      	mov	r0, r5
 8003b40:	47b8      	blx	r7
 8003b42:	3001      	adds	r0, #1
 8003b44:	f43f af1d 	beq.w	8003982 <_printf_float+0xb6>
 8003b48:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003b4c:	ea59 0303 	orrs.w	r3, r9, r3
 8003b50:	d102      	bne.n	8003b58 <_printf_float+0x28c>
 8003b52:	6823      	ldr	r3, [r4, #0]
 8003b54:	07d9      	lsls	r1, r3, #31
 8003b56:	d5d7      	bpl.n	8003b08 <_printf_float+0x23c>
 8003b58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b5c:	4631      	mov	r1, r6
 8003b5e:	4628      	mov	r0, r5
 8003b60:	47b8      	blx	r7
 8003b62:	3001      	adds	r0, #1
 8003b64:	f43f af0d 	beq.w	8003982 <_printf_float+0xb6>
 8003b68:	f04f 0a00 	mov.w	sl, #0
 8003b6c:	f104 0b1a 	add.w	fp, r4, #26
 8003b70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b72:	425b      	negs	r3, r3
 8003b74:	4553      	cmp	r3, sl
 8003b76:	dc01      	bgt.n	8003b7c <_printf_float+0x2b0>
 8003b78:	464b      	mov	r3, r9
 8003b7a:	e793      	b.n	8003aa4 <_printf_float+0x1d8>
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	465a      	mov	r2, fp
 8003b80:	4631      	mov	r1, r6
 8003b82:	4628      	mov	r0, r5
 8003b84:	47b8      	blx	r7
 8003b86:	3001      	adds	r0, #1
 8003b88:	f43f aefb 	beq.w	8003982 <_printf_float+0xb6>
 8003b8c:	f10a 0a01 	add.w	sl, sl, #1
 8003b90:	e7ee      	b.n	8003b70 <_printf_float+0x2a4>
 8003b92:	bf00      	nop
 8003b94:	7fefffff 	.word	0x7fefffff
 8003b98:	08007f97 	.word	0x08007f97
 8003b9c:	08007f9b 	.word	0x08007f9b
 8003ba0:	08007f9f 	.word	0x08007f9f
 8003ba4:	08007fa3 	.word	0x08007fa3
 8003ba8:	08007fa7 	.word	0x08007fa7
 8003bac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003bae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003bb2:	4553      	cmp	r3, sl
 8003bb4:	bfa8      	it	ge
 8003bb6:	4653      	movge	r3, sl
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	4699      	mov	r9, r3
 8003bbc:	dc36      	bgt.n	8003c2c <_printf_float+0x360>
 8003bbe:	f04f 0b00 	mov.w	fp, #0
 8003bc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003bc6:	f104 021a 	add.w	r2, r4, #26
 8003bca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003bcc:	9306      	str	r3, [sp, #24]
 8003bce:	eba3 0309 	sub.w	r3, r3, r9
 8003bd2:	455b      	cmp	r3, fp
 8003bd4:	dc31      	bgt.n	8003c3a <_printf_float+0x36e>
 8003bd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003bd8:	459a      	cmp	sl, r3
 8003bda:	dc3a      	bgt.n	8003c52 <_printf_float+0x386>
 8003bdc:	6823      	ldr	r3, [r4, #0]
 8003bde:	07da      	lsls	r2, r3, #31
 8003be0:	d437      	bmi.n	8003c52 <_printf_float+0x386>
 8003be2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003be4:	ebaa 0903 	sub.w	r9, sl, r3
 8003be8:	9b06      	ldr	r3, [sp, #24]
 8003bea:	ebaa 0303 	sub.w	r3, sl, r3
 8003bee:	4599      	cmp	r9, r3
 8003bf0:	bfa8      	it	ge
 8003bf2:	4699      	movge	r9, r3
 8003bf4:	f1b9 0f00 	cmp.w	r9, #0
 8003bf8:	dc33      	bgt.n	8003c62 <_printf_float+0x396>
 8003bfa:	f04f 0800 	mov.w	r8, #0
 8003bfe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c02:	f104 0b1a 	add.w	fp, r4, #26
 8003c06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c08:	ebaa 0303 	sub.w	r3, sl, r3
 8003c0c:	eba3 0309 	sub.w	r3, r3, r9
 8003c10:	4543      	cmp	r3, r8
 8003c12:	f77f af79 	ble.w	8003b08 <_printf_float+0x23c>
 8003c16:	2301      	movs	r3, #1
 8003c18:	465a      	mov	r2, fp
 8003c1a:	4631      	mov	r1, r6
 8003c1c:	4628      	mov	r0, r5
 8003c1e:	47b8      	blx	r7
 8003c20:	3001      	adds	r0, #1
 8003c22:	f43f aeae 	beq.w	8003982 <_printf_float+0xb6>
 8003c26:	f108 0801 	add.w	r8, r8, #1
 8003c2a:	e7ec      	b.n	8003c06 <_printf_float+0x33a>
 8003c2c:	4642      	mov	r2, r8
 8003c2e:	4631      	mov	r1, r6
 8003c30:	4628      	mov	r0, r5
 8003c32:	47b8      	blx	r7
 8003c34:	3001      	adds	r0, #1
 8003c36:	d1c2      	bne.n	8003bbe <_printf_float+0x2f2>
 8003c38:	e6a3      	b.n	8003982 <_printf_float+0xb6>
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	4631      	mov	r1, r6
 8003c3e:	4628      	mov	r0, r5
 8003c40:	9206      	str	r2, [sp, #24]
 8003c42:	47b8      	blx	r7
 8003c44:	3001      	adds	r0, #1
 8003c46:	f43f ae9c 	beq.w	8003982 <_printf_float+0xb6>
 8003c4a:	9a06      	ldr	r2, [sp, #24]
 8003c4c:	f10b 0b01 	add.w	fp, fp, #1
 8003c50:	e7bb      	b.n	8003bca <_printf_float+0x2fe>
 8003c52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003c56:	4631      	mov	r1, r6
 8003c58:	4628      	mov	r0, r5
 8003c5a:	47b8      	blx	r7
 8003c5c:	3001      	adds	r0, #1
 8003c5e:	d1c0      	bne.n	8003be2 <_printf_float+0x316>
 8003c60:	e68f      	b.n	8003982 <_printf_float+0xb6>
 8003c62:	9a06      	ldr	r2, [sp, #24]
 8003c64:	464b      	mov	r3, r9
 8003c66:	4442      	add	r2, r8
 8003c68:	4631      	mov	r1, r6
 8003c6a:	4628      	mov	r0, r5
 8003c6c:	47b8      	blx	r7
 8003c6e:	3001      	adds	r0, #1
 8003c70:	d1c3      	bne.n	8003bfa <_printf_float+0x32e>
 8003c72:	e686      	b.n	8003982 <_printf_float+0xb6>
 8003c74:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003c78:	f1ba 0f01 	cmp.w	sl, #1
 8003c7c:	dc01      	bgt.n	8003c82 <_printf_float+0x3b6>
 8003c7e:	07db      	lsls	r3, r3, #31
 8003c80:	d536      	bpl.n	8003cf0 <_printf_float+0x424>
 8003c82:	2301      	movs	r3, #1
 8003c84:	4642      	mov	r2, r8
 8003c86:	4631      	mov	r1, r6
 8003c88:	4628      	mov	r0, r5
 8003c8a:	47b8      	blx	r7
 8003c8c:	3001      	adds	r0, #1
 8003c8e:	f43f ae78 	beq.w	8003982 <_printf_float+0xb6>
 8003c92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003c96:	4631      	mov	r1, r6
 8003c98:	4628      	mov	r0, r5
 8003c9a:	47b8      	blx	r7
 8003c9c:	3001      	adds	r0, #1
 8003c9e:	f43f ae70 	beq.w	8003982 <_printf_float+0xb6>
 8003ca2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	2300      	movs	r3, #0
 8003caa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003cae:	f7fc ff0b 	bl	8000ac8 <__aeabi_dcmpeq>
 8003cb2:	b9c0      	cbnz	r0, 8003ce6 <_printf_float+0x41a>
 8003cb4:	4653      	mov	r3, sl
 8003cb6:	f108 0201 	add.w	r2, r8, #1
 8003cba:	4631      	mov	r1, r6
 8003cbc:	4628      	mov	r0, r5
 8003cbe:	47b8      	blx	r7
 8003cc0:	3001      	adds	r0, #1
 8003cc2:	d10c      	bne.n	8003cde <_printf_float+0x412>
 8003cc4:	e65d      	b.n	8003982 <_printf_float+0xb6>
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	465a      	mov	r2, fp
 8003cca:	4631      	mov	r1, r6
 8003ccc:	4628      	mov	r0, r5
 8003cce:	47b8      	blx	r7
 8003cd0:	3001      	adds	r0, #1
 8003cd2:	f43f ae56 	beq.w	8003982 <_printf_float+0xb6>
 8003cd6:	f108 0801 	add.w	r8, r8, #1
 8003cda:	45d0      	cmp	r8, sl
 8003cdc:	dbf3      	blt.n	8003cc6 <_printf_float+0x3fa>
 8003cde:	464b      	mov	r3, r9
 8003ce0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003ce4:	e6df      	b.n	8003aa6 <_printf_float+0x1da>
 8003ce6:	f04f 0800 	mov.w	r8, #0
 8003cea:	f104 0b1a 	add.w	fp, r4, #26
 8003cee:	e7f4      	b.n	8003cda <_printf_float+0x40e>
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	4642      	mov	r2, r8
 8003cf4:	e7e1      	b.n	8003cba <_printf_float+0x3ee>
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	464a      	mov	r2, r9
 8003cfa:	4631      	mov	r1, r6
 8003cfc:	4628      	mov	r0, r5
 8003cfe:	47b8      	blx	r7
 8003d00:	3001      	adds	r0, #1
 8003d02:	f43f ae3e 	beq.w	8003982 <_printf_float+0xb6>
 8003d06:	f108 0801 	add.w	r8, r8, #1
 8003d0a:	68e3      	ldr	r3, [r4, #12]
 8003d0c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003d0e:	1a5b      	subs	r3, r3, r1
 8003d10:	4543      	cmp	r3, r8
 8003d12:	dcf0      	bgt.n	8003cf6 <_printf_float+0x42a>
 8003d14:	e6fc      	b.n	8003b10 <_printf_float+0x244>
 8003d16:	f04f 0800 	mov.w	r8, #0
 8003d1a:	f104 0919 	add.w	r9, r4, #25
 8003d1e:	e7f4      	b.n	8003d0a <_printf_float+0x43e>

08003d20 <_printf_common>:
 8003d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d24:	4616      	mov	r6, r2
 8003d26:	4698      	mov	r8, r3
 8003d28:	688a      	ldr	r2, [r1, #8]
 8003d2a:	690b      	ldr	r3, [r1, #16]
 8003d2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003d30:	4293      	cmp	r3, r2
 8003d32:	bfb8      	it	lt
 8003d34:	4613      	movlt	r3, r2
 8003d36:	6033      	str	r3, [r6, #0]
 8003d38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003d3c:	4607      	mov	r7, r0
 8003d3e:	460c      	mov	r4, r1
 8003d40:	b10a      	cbz	r2, 8003d46 <_printf_common+0x26>
 8003d42:	3301      	adds	r3, #1
 8003d44:	6033      	str	r3, [r6, #0]
 8003d46:	6823      	ldr	r3, [r4, #0]
 8003d48:	0699      	lsls	r1, r3, #26
 8003d4a:	bf42      	ittt	mi
 8003d4c:	6833      	ldrmi	r3, [r6, #0]
 8003d4e:	3302      	addmi	r3, #2
 8003d50:	6033      	strmi	r3, [r6, #0]
 8003d52:	6825      	ldr	r5, [r4, #0]
 8003d54:	f015 0506 	ands.w	r5, r5, #6
 8003d58:	d106      	bne.n	8003d68 <_printf_common+0x48>
 8003d5a:	f104 0a19 	add.w	sl, r4, #25
 8003d5e:	68e3      	ldr	r3, [r4, #12]
 8003d60:	6832      	ldr	r2, [r6, #0]
 8003d62:	1a9b      	subs	r3, r3, r2
 8003d64:	42ab      	cmp	r3, r5
 8003d66:	dc26      	bgt.n	8003db6 <_printf_common+0x96>
 8003d68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003d6c:	6822      	ldr	r2, [r4, #0]
 8003d6e:	3b00      	subs	r3, #0
 8003d70:	bf18      	it	ne
 8003d72:	2301      	movne	r3, #1
 8003d74:	0692      	lsls	r2, r2, #26
 8003d76:	d42b      	bmi.n	8003dd0 <_printf_common+0xb0>
 8003d78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003d7c:	4641      	mov	r1, r8
 8003d7e:	4638      	mov	r0, r7
 8003d80:	47c8      	blx	r9
 8003d82:	3001      	adds	r0, #1
 8003d84:	d01e      	beq.n	8003dc4 <_printf_common+0xa4>
 8003d86:	6823      	ldr	r3, [r4, #0]
 8003d88:	6922      	ldr	r2, [r4, #16]
 8003d8a:	f003 0306 	and.w	r3, r3, #6
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	bf02      	ittt	eq
 8003d92:	68e5      	ldreq	r5, [r4, #12]
 8003d94:	6833      	ldreq	r3, [r6, #0]
 8003d96:	1aed      	subeq	r5, r5, r3
 8003d98:	68a3      	ldr	r3, [r4, #8]
 8003d9a:	bf0c      	ite	eq
 8003d9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003da0:	2500      	movne	r5, #0
 8003da2:	4293      	cmp	r3, r2
 8003da4:	bfc4      	itt	gt
 8003da6:	1a9b      	subgt	r3, r3, r2
 8003da8:	18ed      	addgt	r5, r5, r3
 8003daa:	2600      	movs	r6, #0
 8003dac:	341a      	adds	r4, #26
 8003dae:	42b5      	cmp	r5, r6
 8003db0:	d11a      	bne.n	8003de8 <_printf_common+0xc8>
 8003db2:	2000      	movs	r0, #0
 8003db4:	e008      	b.n	8003dc8 <_printf_common+0xa8>
 8003db6:	2301      	movs	r3, #1
 8003db8:	4652      	mov	r2, sl
 8003dba:	4641      	mov	r1, r8
 8003dbc:	4638      	mov	r0, r7
 8003dbe:	47c8      	blx	r9
 8003dc0:	3001      	adds	r0, #1
 8003dc2:	d103      	bne.n	8003dcc <_printf_common+0xac>
 8003dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dcc:	3501      	adds	r5, #1
 8003dce:	e7c6      	b.n	8003d5e <_printf_common+0x3e>
 8003dd0:	18e1      	adds	r1, r4, r3
 8003dd2:	1c5a      	adds	r2, r3, #1
 8003dd4:	2030      	movs	r0, #48	@ 0x30
 8003dd6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003dda:	4422      	add	r2, r4
 8003ddc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003de0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003de4:	3302      	adds	r3, #2
 8003de6:	e7c7      	b.n	8003d78 <_printf_common+0x58>
 8003de8:	2301      	movs	r3, #1
 8003dea:	4622      	mov	r2, r4
 8003dec:	4641      	mov	r1, r8
 8003dee:	4638      	mov	r0, r7
 8003df0:	47c8      	blx	r9
 8003df2:	3001      	adds	r0, #1
 8003df4:	d0e6      	beq.n	8003dc4 <_printf_common+0xa4>
 8003df6:	3601      	adds	r6, #1
 8003df8:	e7d9      	b.n	8003dae <_printf_common+0x8e>
	...

08003dfc <_printf_i>:
 8003dfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e00:	7e0f      	ldrb	r7, [r1, #24]
 8003e02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003e04:	2f78      	cmp	r7, #120	@ 0x78
 8003e06:	4691      	mov	r9, r2
 8003e08:	4680      	mov	r8, r0
 8003e0a:	460c      	mov	r4, r1
 8003e0c:	469a      	mov	sl, r3
 8003e0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003e12:	d807      	bhi.n	8003e24 <_printf_i+0x28>
 8003e14:	2f62      	cmp	r7, #98	@ 0x62
 8003e16:	d80a      	bhi.n	8003e2e <_printf_i+0x32>
 8003e18:	2f00      	cmp	r7, #0
 8003e1a:	f000 80d2 	beq.w	8003fc2 <_printf_i+0x1c6>
 8003e1e:	2f58      	cmp	r7, #88	@ 0x58
 8003e20:	f000 80b9 	beq.w	8003f96 <_printf_i+0x19a>
 8003e24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003e2c:	e03a      	b.n	8003ea4 <_printf_i+0xa8>
 8003e2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003e32:	2b15      	cmp	r3, #21
 8003e34:	d8f6      	bhi.n	8003e24 <_printf_i+0x28>
 8003e36:	a101      	add	r1, pc, #4	@ (adr r1, 8003e3c <_printf_i+0x40>)
 8003e38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e3c:	08003e95 	.word	0x08003e95
 8003e40:	08003ea9 	.word	0x08003ea9
 8003e44:	08003e25 	.word	0x08003e25
 8003e48:	08003e25 	.word	0x08003e25
 8003e4c:	08003e25 	.word	0x08003e25
 8003e50:	08003e25 	.word	0x08003e25
 8003e54:	08003ea9 	.word	0x08003ea9
 8003e58:	08003e25 	.word	0x08003e25
 8003e5c:	08003e25 	.word	0x08003e25
 8003e60:	08003e25 	.word	0x08003e25
 8003e64:	08003e25 	.word	0x08003e25
 8003e68:	08003fa9 	.word	0x08003fa9
 8003e6c:	08003ed3 	.word	0x08003ed3
 8003e70:	08003f63 	.word	0x08003f63
 8003e74:	08003e25 	.word	0x08003e25
 8003e78:	08003e25 	.word	0x08003e25
 8003e7c:	08003fcb 	.word	0x08003fcb
 8003e80:	08003e25 	.word	0x08003e25
 8003e84:	08003ed3 	.word	0x08003ed3
 8003e88:	08003e25 	.word	0x08003e25
 8003e8c:	08003e25 	.word	0x08003e25
 8003e90:	08003f6b 	.word	0x08003f6b
 8003e94:	6833      	ldr	r3, [r6, #0]
 8003e96:	1d1a      	adds	r2, r3, #4
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	6032      	str	r2, [r6, #0]
 8003e9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ea0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e09d      	b.n	8003fe4 <_printf_i+0x1e8>
 8003ea8:	6833      	ldr	r3, [r6, #0]
 8003eaa:	6820      	ldr	r0, [r4, #0]
 8003eac:	1d19      	adds	r1, r3, #4
 8003eae:	6031      	str	r1, [r6, #0]
 8003eb0:	0606      	lsls	r6, r0, #24
 8003eb2:	d501      	bpl.n	8003eb8 <_printf_i+0xbc>
 8003eb4:	681d      	ldr	r5, [r3, #0]
 8003eb6:	e003      	b.n	8003ec0 <_printf_i+0xc4>
 8003eb8:	0645      	lsls	r5, r0, #25
 8003eba:	d5fb      	bpl.n	8003eb4 <_printf_i+0xb8>
 8003ebc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003ec0:	2d00      	cmp	r5, #0
 8003ec2:	da03      	bge.n	8003ecc <_printf_i+0xd0>
 8003ec4:	232d      	movs	r3, #45	@ 0x2d
 8003ec6:	426d      	negs	r5, r5
 8003ec8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ecc:	4859      	ldr	r0, [pc, #356]	@ (8004034 <_printf_i+0x238>)
 8003ece:	230a      	movs	r3, #10
 8003ed0:	e011      	b.n	8003ef6 <_printf_i+0xfa>
 8003ed2:	6821      	ldr	r1, [r4, #0]
 8003ed4:	6833      	ldr	r3, [r6, #0]
 8003ed6:	0608      	lsls	r0, r1, #24
 8003ed8:	f853 5b04 	ldr.w	r5, [r3], #4
 8003edc:	d402      	bmi.n	8003ee4 <_printf_i+0xe8>
 8003ede:	0649      	lsls	r1, r1, #25
 8003ee0:	bf48      	it	mi
 8003ee2:	b2ad      	uxthmi	r5, r5
 8003ee4:	2f6f      	cmp	r7, #111	@ 0x6f
 8003ee6:	4853      	ldr	r0, [pc, #332]	@ (8004034 <_printf_i+0x238>)
 8003ee8:	6033      	str	r3, [r6, #0]
 8003eea:	bf14      	ite	ne
 8003eec:	230a      	movne	r3, #10
 8003eee:	2308      	moveq	r3, #8
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003ef6:	6866      	ldr	r6, [r4, #4]
 8003ef8:	60a6      	str	r6, [r4, #8]
 8003efa:	2e00      	cmp	r6, #0
 8003efc:	bfa2      	ittt	ge
 8003efe:	6821      	ldrge	r1, [r4, #0]
 8003f00:	f021 0104 	bicge.w	r1, r1, #4
 8003f04:	6021      	strge	r1, [r4, #0]
 8003f06:	b90d      	cbnz	r5, 8003f0c <_printf_i+0x110>
 8003f08:	2e00      	cmp	r6, #0
 8003f0a:	d04b      	beq.n	8003fa4 <_printf_i+0x1a8>
 8003f0c:	4616      	mov	r6, r2
 8003f0e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003f12:	fb03 5711 	mls	r7, r3, r1, r5
 8003f16:	5dc7      	ldrb	r7, [r0, r7]
 8003f18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f1c:	462f      	mov	r7, r5
 8003f1e:	42bb      	cmp	r3, r7
 8003f20:	460d      	mov	r5, r1
 8003f22:	d9f4      	bls.n	8003f0e <_printf_i+0x112>
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	d10b      	bne.n	8003f40 <_printf_i+0x144>
 8003f28:	6823      	ldr	r3, [r4, #0]
 8003f2a:	07df      	lsls	r7, r3, #31
 8003f2c:	d508      	bpl.n	8003f40 <_printf_i+0x144>
 8003f2e:	6923      	ldr	r3, [r4, #16]
 8003f30:	6861      	ldr	r1, [r4, #4]
 8003f32:	4299      	cmp	r1, r3
 8003f34:	bfde      	ittt	le
 8003f36:	2330      	movle	r3, #48	@ 0x30
 8003f38:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003f3c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003f40:	1b92      	subs	r2, r2, r6
 8003f42:	6122      	str	r2, [r4, #16]
 8003f44:	f8cd a000 	str.w	sl, [sp]
 8003f48:	464b      	mov	r3, r9
 8003f4a:	aa03      	add	r2, sp, #12
 8003f4c:	4621      	mov	r1, r4
 8003f4e:	4640      	mov	r0, r8
 8003f50:	f7ff fee6 	bl	8003d20 <_printf_common>
 8003f54:	3001      	adds	r0, #1
 8003f56:	d14a      	bne.n	8003fee <_printf_i+0x1f2>
 8003f58:	f04f 30ff 	mov.w	r0, #4294967295
 8003f5c:	b004      	add	sp, #16
 8003f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f62:	6823      	ldr	r3, [r4, #0]
 8003f64:	f043 0320 	orr.w	r3, r3, #32
 8003f68:	6023      	str	r3, [r4, #0]
 8003f6a:	4833      	ldr	r0, [pc, #204]	@ (8004038 <_printf_i+0x23c>)
 8003f6c:	2778      	movs	r7, #120	@ 0x78
 8003f6e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003f72:	6823      	ldr	r3, [r4, #0]
 8003f74:	6831      	ldr	r1, [r6, #0]
 8003f76:	061f      	lsls	r7, r3, #24
 8003f78:	f851 5b04 	ldr.w	r5, [r1], #4
 8003f7c:	d402      	bmi.n	8003f84 <_printf_i+0x188>
 8003f7e:	065f      	lsls	r7, r3, #25
 8003f80:	bf48      	it	mi
 8003f82:	b2ad      	uxthmi	r5, r5
 8003f84:	6031      	str	r1, [r6, #0]
 8003f86:	07d9      	lsls	r1, r3, #31
 8003f88:	bf44      	itt	mi
 8003f8a:	f043 0320 	orrmi.w	r3, r3, #32
 8003f8e:	6023      	strmi	r3, [r4, #0]
 8003f90:	b11d      	cbz	r5, 8003f9a <_printf_i+0x19e>
 8003f92:	2310      	movs	r3, #16
 8003f94:	e7ac      	b.n	8003ef0 <_printf_i+0xf4>
 8003f96:	4827      	ldr	r0, [pc, #156]	@ (8004034 <_printf_i+0x238>)
 8003f98:	e7e9      	b.n	8003f6e <_printf_i+0x172>
 8003f9a:	6823      	ldr	r3, [r4, #0]
 8003f9c:	f023 0320 	bic.w	r3, r3, #32
 8003fa0:	6023      	str	r3, [r4, #0]
 8003fa2:	e7f6      	b.n	8003f92 <_printf_i+0x196>
 8003fa4:	4616      	mov	r6, r2
 8003fa6:	e7bd      	b.n	8003f24 <_printf_i+0x128>
 8003fa8:	6833      	ldr	r3, [r6, #0]
 8003faa:	6825      	ldr	r5, [r4, #0]
 8003fac:	6961      	ldr	r1, [r4, #20]
 8003fae:	1d18      	adds	r0, r3, #4
 8003fb0:	6030      	str	r0, [r6, #0]
 8003fb2:	062e      	lsls	r6, r5, #24
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	d501      	bpl.n	8003fbc <_printf_i+0x1c0>
 8003fb8:	6019      	str	r1, [r3, #0]
 8003fba:	e002      	b.n	8003fc2 <_printf_i+0x1c6>
 8003fbc:	0668      	lsls	r0, r5, #25
 8003fbe:	d5fb      	bpl.n	8003fb8 <_printf_i+0x1bc>
 8003fc0:	8019      	strh	r1, [r3, #0]
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	6123      	str	r3, [r4, #16]
 8003fc6:	4616      	mov	r6, r2
 8003fc8:	e7bc      	b.n	8003f44 <_printf_i+0x148>
 8003fca:	6833      	ldr	r3, [r6, #0]
 8003fcc:	1d1a      	adds	r2, r3, #4
 8003fce:	6032      	str	r2, [r6, #0]
 8003fd0:	681e      	ldr	r6, [r3, #0]
 8003fd2:	6862      	ldr	r2, [r4, #4]
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	4630      	mov	r0, r6
 8003fd8:	f7fc f8fa 	bl	80001d0 <memchr>
 8003fdc:	b108      	cbz	r0, 8003fe2 <_printf_i+0x1e6>
 8003fde:	1b80      	subs	r0, r0, r6
 8003fe0:	6060      	str	r0, [r4, #4]
 8003fe2:	6863      	ldr	r3, [r4, #4]
 8003fe4:	6123      	str	r3, [r4, #16]
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fec:	e7aa      	b.n	8003f44 <_printf_i+0x148>
 8003fee:	6923      	ldr	r3, [r4, #16]
 8003ff0:	4632      	mov	r2, r6
 8003ff2:	4649      	mov	r1, r9
 8003ff4:	4640      	mov	r0, r8
 8003ff6:	47d0      	blx	sl
 8003ff8:	3001      	adds	r0, #1
 8003ffa:	d0ad      	beq.n	8003f58 <_printf_i+0x15c>
 8003ffc:	6823      	ldr	r3, [r4, #0]
 8003ffe:	079b      	lsls	r3, r3, #30
 8004000:	d413      	bmi.n	800402a <_printf_i+0x22e>
 8004002:	68e0      	ldr	r0, [r4, #12]
 8004004:	9b03      	ldr	r3, [sp, #12]
 8004006:	4298      	cmp	r0, r3
 8004008:	bfb8      	it	lt
 800400a:	4618      	movlt	r0, r3
 800400c:	e7a6      	b.n	8003f5c <_printf_i+0x160>
 800400e:	2301      	movs	r3, #1
 8004010:	4632      	mov	r2, r6
 8004012:	4649      	mov	r1, r9
 8004014:	4640      	mov	r0, r8
 8004016:	47d0      	blx	sl
 8004018:	3001      	adds	r0, #1
 800401a:	d09d      	beq.n	8003f58 <_printf_i+0x15c>
 800401c:	3501      	adds	r5, #1
 800401e:	68e3      	ldr	r3, [r4, #12]
 8004020:	9903      	ldr	r1, [sp, #12]
 8004022:	1a5b      	subs	r3, r3, r1
 8004024:	42ab      	cmp	r3, r5
 8004026:	dcf2      	bgt.n	800400e <_printf_i+0x212>
 8004028:	e7eb      	b.n	8004002 <_printf_i+0x206>
 800402a:	2500      	movs	r5, #0
 800402c:	f104 0619 	add.w	r6, r4, #25
 8004030:	e7f5      	b.n	800401e <_printf_i+0x222>
 8004032:	bf00      	nop
 8004034:	08007fa9 	.word	0x08007fa9
 8004038:	08007fba 	.word	0x08007fba

0800403c <_scanf_float>:
 800403c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004040:	b087      	sub	sp, #28
 8004042:	4617      	mov	r7, r2
 8004044:	9303      	str	r3, [sp, #12]
 8004046:	688b      	ldr	r3, [r1, #8]
 8004048:	1e5a      	subs	r2, r3, #1
 800404a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800404e:	bf81      	itttt	hi
 8004050:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004054:	eb03 0b05 	addhi.w	fp, r3, r5
 8004058:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800405c:	608b      	strhi	r3, [r1, #8]
 800405e:	680b      	ldr	r3, [r1, #0]
 8004060:	460a      	mov	r2, r1
 8004062:	f04f 0500 	mov.w	r5, #0
 8004066:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800406a:	f842 3b1c 	str.w	r3, [r2], #28
 800406e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004072:	4680      	mov	r8, r0
 8004074:	460c      	mov	r4, r1
 8004076:	bf98      	it	ls
 8004078:	f04f 0b00 	movls.w	fp, #0
 800407c:	9201      	str	r2, [sp, #4]
 800407e:	4616      	mov	r6, r2
 8004080:	46aa      	mov	sl, r5
 8004082:	46a9      	mov	r9, r5
 8004084:	9502      	str	r5, [sp, #8]
 8004086:	68a2      	ldr	r2, [r4, #8]
 8004088:	b152      	cbz	r2, 80040a0 <_scanf_float+0x64>
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	2b4e      	cmp	r3, #78	@ 0x4e
 8004090:	d864      	bhi.n	800415c <_scanf_float+0x120>
 8004092:	2b40      	cmp	r3, #64	@ 0x40
 8004094:	d83c      	bhi.n	8004110 <_scanf_float+0xd4>
 8004096:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800409a:	b2c8      	uxtb	r0, r1
 800409c:	280e      	cmp	r0, #14
 800409e:	d93a      	bls.n	8004116 <_scanf_float+0xda>
 80040a0:	f1b9 0f00 	cmp.w	r9, #0
 80040a4:	d003      	beq.n	80040ae <_scanf_float+0x72>
 80040a6:	6823      	ldr	r3, [r4, #0]
 80040a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040ac:	6023      	str	r3, [r4, #0]
 80040ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80040b2:	f1ba 0f01 	cmp.w	sl, #1
 80040b6:	f200 8117 	bhi.w	80042e8 <_scanf_float+0x2ac>
 80040ba:	9b01      	ldr	r3, [sp, #4]
 80040bc:	429e      	cmp	r6, r3
 80040be:	f200 8108 	bhi.w	80042d2 <_scanf_float+0x296>
 80040c2:	2001      	movs	r0, #1
 80040c4:	b007      	add	sp, #28
 80040c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040ca:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80040ce:	2a0d      	cmp	r2, #13
 80040d0:	d8e6      	bhi.n	80040a0 <_scanf_float+0x64>
 80040d2:	a101      	add	r1, pc, #4	@ (adr r1, 80040d8 <_scanf_float+0x9c>)
 80040d4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80040d8:	0800421f 	.word	0x0800421f
 80040dc:	080040a1 	.word	0x080040a1
 80040e0:	080040a1 	.word	0x080040a1
 80040e4:	080040a1 	.word	0x080040a1
 80040e8:	0800427f 	.word	0x0800427f
 80040ec:	08004257 	.word	0x08004257
 80040f0:	080040a1 	.word	0x080040a1
 80040f4:	080040a1 	.word	0x080040a1
 80040f8:	0800422d 	.word	0x0800422d
 80040fc:	080040a1 	.word	0x080040a1
 8004100:	080040a1 	.word	0x080040a1
 8004104:	080040a1 	.word	0x080040a1
 8004108:	080040a1 	.word	0x080040a1
 800410c:	080041e5 	.word	0x080041e5
 8004110:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004114:	e7db      	b.n	80040ce <_scanf_float+0x92>
 8004116:	290e      	cmp	r1, #14
 8004118:	d8c2      	bhi.n	80040a0 <_scanf_float+0x64>
 800411a:	a001      	add	r0, pc, #4	@ (adr r0, 8004120 <_scanf_float+0xe4>)
 800411c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004120:	080041d5 	.word	0x080041d5
 8004124:	080040a1 	.word	0x080040a1
 8004128:	080041d5 	.word	0x080041d5
 800412c:	0800426b 	.word	0x0800426b
 8004130:	080040a1 	.word	0x080040a1
 8004134:	0800417d 	.word	0x0800417d
 8004138:	080041bb 	.word	0x080041bb
 800413c:	080041bb 	.word	0x080041bb
 8004140:	080041bb 	.word	0x080041bb
 8004144:	080041bb 	.word	0x080041bb
 8004148:	080041bb 	.word	0x080041bb
 800414c:	080041bb 	.word	0x080041bb
 8004150:	080041bb 	.word	0x080041bb
 8004154:	080041bb 	.word	0x080041bb
 8004158:	080041bb 	.word	0x080041bb
 800415c:	2b6e      	cmp	r3, #110	@ 0x6e
 800415e:	d809      	bhi.n	8004174 <_scanf_float+0x138>
 8004160:	2b60      	cmp	r3, #96	@ 0x60
 8004162:	d8b2      	bhi.n	80040ca <_scanf_float+0x8e>
 8004164:	2b54      	cmp	r3, #84	@ 0x54
 8004166:	d07b      	beq.n	8004260 <_scanf_float+0x224>
 8004168:	2b59      	cmp	r3, #89	@ 0x59
 800416a:	d199      	bne.n	80040a0 <_scanf_float+0x64>
 800416c:	2d07      	cmp	r5, #7
 800416e:	d197      	bne.n	80040a0 <_scanf_float+0x64>
 8004170:	2508      	movs	r5, #8
 8004172:	e02c      	b.n	80041ce <_scanf_float+0x192>
 8004174:	2b74      	cmp	r3, #116	@ 0x74
 8004176:	d073      	beq.n	8004260 <_scanf_float+0x224>
 8004178:	2b79      	cmp	r3, #121	@ 0x79
 800417a:	e7f6      	b.n	800416a <_scanf_float+0x12e>
 800417c:	6821      	ldr	r1, [r4, #0]
 800417e:	05c8      	lsls	r0, r1, #23
 8004180:	d51b      	bpl.n	80041ba <_scanf_float+0x17e>
 8004182:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004186:	6021      	str	r1, [r4, #0]
 8004188:	f109 0901 	add.w	r9, r9, #1
 800418c:	f1bb 0f00 	cmp.w	fp, #0
 8004190:	d003      	beq.n	800419a <_scanf_float+0x15e>
 8004192:	3201      	adds	r2, #1
 8004194:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004198:	60a2      	str	r2, [r4, #8]
 800419a:	68a3      	ldr	r3, [r4, #8]
 800419c:	3b01      	subs	r3, #1
 800419e:	60a3      	str	r3, [r4, #8]
 80041a0:	6923      	ldr	r3, [r4, #16]
 80041a2:	3301      	adds	r3, #1
 80041a4:	6123      	str	r3, [r4, #16]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	3b01      	subs	r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	607b      	str	r3, [r7, #4]
 80041ae:	f340 8087 	ble.w	80042c0 <_scanf_float+0x284>
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	3301      	adds	r3, #1
 80041b6:	603b      	str	r3, [r7, #0]
 80041b8:	e765      	b.n	8004086 <_scanf_float+0x4a>
 80041ba:	eb1a 0105 	adds.w	r1, sl, r5
 80041be:	f47f af6f 	bne.w	80040a0 <_scanf_float+0x64>
 80041c2:	6822      	ldr	r2, [r4, #0]
 80041c4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80041c8:	6022      	str	r2, [r4, #0]
 80041ca:	460d      	mov	r5, r1
 80041cc:	468a      	mov	sl, r1
 80041ce:	f806 3b01 	strb.w	r3, [r6], #1
 80041d2:	e7e2      	b.n	800419a <_scanf_float+0x15e>
 80041d4:	6822      	ldr	r2, [r4, #0]
 80041d6:	0610      	lsls	r0, r2, #24
 80041d8:	f57f af62 	bpl.w	80040a0 <_scanf_float+0x64>
 80041dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80041e0:	6022      	str	r2, [r4, #0]
 80041e2:	e7f4      	b.n	80041ce <_scanf_float+0x192>
 80041e4:	f1ba 0f00 	cmp.w	sl, #0
 80041e8:	d10e      	bne.n	8004208 <_scanf_float+0x1cc>
 80041ea:	f1b9 0f00 	cmp.w	r9, #0
 80041ee:	d10e      	bne.n	800420e <_scanf_float+0x1d2>
 80041f0:	6822      	ldr	r2, [r4, #0]
 80041f2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80041f6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80041fa:	d108      	bne.n	800420e <_scanf_float+0x1d2>
 80041fc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004200:	6022      	str	r2, [r4, #0]
 8004202:	f04f 0a01 	mov.w	sl, #1
 8004206:	e7e2      	b.n	80041ce <_scanf_float+0x192>
 8004208:	f1ba 0f02 	cmp.w	sl, #2
 800420c:	d055      	beq.n	80042ba <_scanf_float+0x27e>
 800420e:	2d01      	cmp	r5, #1
 8004210:	d002      	beq.n	8004218 <_scanf_float+0x1dc>
 8004212:	2d04      	cmp	r5, #4
 8004214:	f47f af44 	bne.w	80040a0 <_scanf_float+0x64>
 8004218:	3501      	adds	r5, #1
 800421a:	b2ed      	uxtb	r5, r5
 800421c:	e7d7      	b.n	80041ce <_scanf_float+0x192>
 800421e:	f1ba 0f01 	cmp.w	sl, #1
 8004222:	f47f af3d 	bne.w	80040a0 <_scanf_float+0x64>
 8004226:	f04f 0a02 	mov.w	sl, #2
 800422a:	e7d0      	b.n	80041ce <_scanf_float+0x192>
 800422c:	b97d      	cbnz	r5, 800424e <_scanf_float+0x212>
 800422e:	f1b9 0f00 	cmp.w	r9, #0
 8004232:	f47f af38 	bne.w	80040a6 <_scanf_float+0x6a>
 8004236:	6822      	ldr	r2, [r4, #0]
 8004238:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800423c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004240:	f040 8108 	bne.w	8004454 <_scanf_float+0x418>
 8004244:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004248:	6022      	str	r2, [r4, #0]
 800424a:	2501      	movs	r5, #1
 800424c:	e7bf      	b.n	80041ce <_scanf_float+0x192>
 800424e:	2d03      	cmp	r5, #3
 8004250:	d0e2      	beq.n	8004218 <_scanf_float+0x1dc>
 8004252:	2d05      	cmp	r5, #5
 8004254:	e7de      	b.n	8004214 <_scanf_float+0x1d8>
 8004256:	2d02      	cmp	r5, #2
 8004258:	f47f af22 	bne.w	80040a0 <_scanf_float+0x64>
 800425c:	2503      	movs	r5, #3
 800425e:	e7b6      	b.n	80041ce <_scanf_float+0x192>
 8004260:	2d06      	cmp	r5, #6
 8004262:	f47f af1d 	bne.w	80040a0 <_scanf_float+0x64>
 8004266:	2507      	movs	r5, #7
 8004268:	e7b1      	b.n	80041ce <_scanf_float+0x192>
 800426a:	6822      	ldr	r2, [r4, #0]
 800426c:	0591      	lsls	r1, r2, #22
 800426e:	f57f af17 	bpl.w	80040a0 <_scanf_float+0x64>
 8004272:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8004276:	6022      	str	r2, [r4, #0]
 8004278:	f8cd 9008 	str.w	r9, [sp, #8]
 800427c:	e7a7      	b.n	80041ce <_scanf_float+0x192>
 800427e:	6822      	ldr	r2, [r4, #0]
 8004280:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8004284:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004288:	d006      	beq.n	8004298 <_scanf_float+0x25c>
 800428a:	0550      	lsls	r0, r2, #21
 800428c:	f57f af08 	bpl.w	80040a0 <_scanf_float+0x64>
 8004290:	f1b9 0f00 	cmp.w	r9, #0
 8004294:	f000 80de 	beq.w	8004454 <_scanf_float+0x418>
 8004298:	0591      	lsls	r1, r2, #22
 800429a:	bf58      	it	pl
 800429c:	9902      	ldrpl	r1, [sp, #8]
 800429e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80042a2:	bf58      	it	pl
 80042a4:	eba9 0101 	subpl.w	r1, r9, r1
 80042a8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80042ac:	bf58      	it	pl
 80042ae:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80042b2:	6022      	str	r2, [r4, #0]
 80042b4:	f04f 0900 	mov.w	r9, #0
 80042b8:	e789      	b.n	80041ce <_scanf_float+0x192>
 80042ba:	f04f 0a03 	mov.w	sl, #3
 80042be:	e786      	b.n	80041ce <_scanf_float+0x192>
 80042c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80042c4:	4639      	mov	r1, r7
 80042c6:	4640      	mov	r0, r8
 80042c8:	4798      	blx	r3
 80042ca:	2800      	cmp	r0, #0
 80042cc:	f43f aedb 	beq.w	8004086 <_scanf_float+0x4a>
 80042d0:	e6e6      	b.n	80040a0 <_scanf_float+0x64>
 80042d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80042d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80042da:	463a      	mov	r2, r7
 80042dc:	4640      	mov	r0, r8
 80042de:	4798      	blx	r3
 80042e0:	6923      	ldr	r3, [r4, #16]
 80042e2:	3b01      	subs	r3, #1
 80042e4:	6123      	str	r3, [r4, #16]
 80042e6:	e6e8      	b.n	80040ba <_scanf_float+0x7e>
 80042e8:	1e6b      	subs	r3, r5, #1
 80042ea:	2b06      	cmp	r3, #6
 80042ec:	d824      	bhi.n	8004338 <_scanf_float+0x2fc>
 80042ee:	2d02      	cmp	r5, #2
 80042f0:	d836      	bhi.n	8004360 <_scanf_float+0x324>
 80042f2:	9b01      	ldr	r3, [sp, #4]
 80042f4:	429e      	cmp	r6, r3
 80042f6:	f67f aee4 	bls.w	80040c2 <_scanf_float+0x86>
 80042fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80042fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004302:	463a      	mov	r2, r7
 8004304:	4640      	mov	r0, r8
 8004306:	4798      	blx	r3
 8004308:	6923      	ldr	r3, [r4, #16]
 800430a:	3b01      	subs	r3, #1
 800430c:	6123      	str	r3, [r4, #16]
 800430e:	e7f0      	b.n	80042f2 <_scanf_float+0x2b6>
 8004310:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004314:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8004318:	463a      	mov	r2, r7
 800431a:	4640      	mov	r0, r8
 800431c:	4798      	blx	r3
 800431e:	6923      	ldr	r3, [r4, #16]
 8004320:	3b01      	subs	r3, #1
 8004322:	6123      	str	r3, [r4, #16]
 8004324:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004328:	fa5f fa8a 	uxtb.w	sl, sl
 800432c:	f1ba 0f02 	cmp.w	sl, #2
 8004330:	d1ee      	bne.n	8004310 <_scanf_float+0x2d4>
 8004332:	3d03      	subs	r5, #3
 8004334:	b2ed      	uxtb	r5, r5
 8004336:	1b76      	subs	r6, r6, r5
 8004338:	6823      	ldr	r3, [r4, #0]
 800433a:	05da      	lsls	r2, r3, #23
 800433c:	d530      	bpl.n	80043a0 <_scanf_float+0x364>
 800433e:	055b      	lsls	r3, r3, #21
 8004340:	d511      	bpl.n	8004366 <_scanf_float+0x32a>
 8004342:	9b01      	ldr	r3, [sp, #4]
 8004344:	429e      	cmp	r6, r3
 8004346:	f67f aebc 	bls.w	80040c2 <_scanf_float+0x86>
 800434a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800434e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004352:	463a      	mov	r2, r7
 8004354:	4640      	mov	r0, r8
 8004356:	4798      	blx	r3
 8004358:	6923      	ldr	r3, [r4, #16]
 800435a:	3b01      	subs	r3, #1
 800435c:	6123      	str	r3, [r4, #16]
 800435e:	e7f0      	b.n	8004342 <_scanf_float+0x306>
 8004360:	46aa      	mov	sl, r5
 8004362:	46b3      	mov	fp, r6
 8004364:	e7de      	b.n	8004324 <_scanf_float+0x2e8>
 8004366:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800436a:	6923      	ldr	r3, [r4, #16]
 800436c:	2965      	cmp	r1, #101	@ 0x65
 800436e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004372:	f106 35ff 	add.w	r5, r6, #4294967295
 8004376:	6123      	str	r3, [r4, #16]
 8004378:	d00c      	beq.n	8004394 <_scanf_float+0x358>
 800437a:	2945      	cmp	r1, #69	@ 0x45
 800437c:	d00a      	beq.n	8004394 <_scanf_float+0x358>
 800437e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004382:	463a      	mov	r2, r7
 8004384:	4640      	mov	r0, r8
 8004386:	4798      	blx	r3
 8004388:	6923      	ldr	r3, [r4, #16]
 800438a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800438e:	3b01      	subs	r3, #1
 8004390:	1eb5      	subs	r5, r6, #2
 8004392:	6123      	str	r3, [r4, #16]
 8004394:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004398:	463a      	mov	r2, r7
 800439a:	4640      	mov	r0, r8
 800439c:	4798      	blx	r3
 800439e:	462e      	mov	r6, r5
 80043a0:	6822      	ldr	r2, [r4, #0]
 80043a2:	f012 0210 	ands.w	r2, r2, #16
 80043a6:	d001      	beq.n	80043ac <_scanf_float+0x370>
 80043a8:	2000      	movs	r0, #0
 80043aa:	e68b      	b.n	80040c4 <_scanf_float+0x88>
 80043ac:	7032      	strb	r2, [r6, #0]
 80043ae:	6823      	ldr	r3, [r4, #0]
 80043b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80043b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043b8:	d11c      	bne.n	80043f4 <_scanf_float+0x3b8>
 80043ba:	9b02      	ldr	r3, [sp, #8]
 80043bc:	454b      	cmp	r3, r9
 80043be:	eba3 0209 	sub.w	r2, r3, r9
 80043c2:	d123      	bne.n	800440c <_scanf_float+0x3d0>
 80043c4:	9901      	ldr	r1, [sp, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	4640      	mov	r0, r8
 80043ca:	f002 fc45 	bl	8006c58 <_strtod_r>
 80043ce:	9b03      	ldr	r3, [sp, #12]
 80043d0:	6821      	ldr	r1, [r4, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f011 0f02 	tst.w	r1, #2
 80043d8:	ec57 6b10 	vmov	r6, r7, d0
 80043dc:	f103 0204 	add.w	r2, r3, #4
 80043e0:	d01f      	beq.n	8004422 <_scanf_float+0x3e6>
 80043e2:	9903      	ldr	r1, [sp, #12]
 80043e4:	600a      	str	r2, [r1, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	e9c3 6700 	strd	r6, r7, [r3]
 80043ec:	68e3      	ldr	r3, [r4, #12]
 80043ee:	3301      	adds	r3, #1
 80043f0:	60e3      	str	r3, [r4, #12]
 80043f2:	e7d9      	b.n	80043a8 <_scanf_float+0x36c>
 80043f4:	9b04      	ldr	r3, [sp, #16]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d0e4      	beq.n	80043c4 <_scanf_float+0x388>
 80043fa:	9905      	ldr	r1, [sp, #20]
 80043fc:	230a      	movs	r3, #10
 80043fe:	3101      	adds	r1, #1
 8004400:	4640      	mov	r0, r8
 8004402:	f002 fca9 	bl	8006d58 <_strtol_r>
 8004406:	9b04      	ldr	r3, [sp, #16]
 8004408:	9e05      	ldr	r6, [sp, #20]
 800440a:	1ac2      	subs	r2, r0, r3
 800440c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8004410:	429e      	cmp	r6, r3
 8004412:	bf28      	it	cs
 8004414:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004418:	4910      	ldr	r1, [pc, #64]	@ (800445c <_scanf_float+0x420>)
 800441a:	4630      	mov	r0, r6
 800441c:	f000 f8e4 	bl	80045e8 <siprintf>
 8004420:	e7d0      	b.n	80043c4 <_scanf_float+0x388>
 8004422:	f011 0f04 	tst.w	r1, #4
 8004426:	9903      	ldr	r1, [sp, #12]
 8004428:	600a      	str	r2, [r1, #0]
 800442a:	d1dc      	bne.n	80043e6 <_scanf_float+0x3aa>
 800442c:	681d      	ldr	r5, [r3, #0]
 800442e:	4632      	mov	r2, r6
 8004430:	463b      	mov	r3, r7
 8004432:	4630      	mov	r0, r6
 8004434:	4639      	mov	r1, r7
 8004436:	f7fc fb79 	bl	8000b2c <__aeabi_dcmpun>
 800443a:	b128      	cbz	r0, 8004448 <_scanf_float+0x40c>
 800443c:	4808      	ldr	r0, [pc, #32]	@ (8004460 <_scanf_float+0x424>)
 800443e:	f000 f9e5 	bl	800480c <nanf>
 8004442:	ed85 0a00 	vstr	s0, [r5]
 8004446:	e7d1      	b.n	80043ec <_scanf_float+0x3b0>
 8004448:	4630      	mov	r0, r6
 800444a:	4639      	mov	r1, r7
 800444c:	f7fc fbcc 	bl	8000be8 <__aeabi_d2f>
 8004450:	6028      	str	r0, [r5, #0]
 8004452:	e7cb      	b.n	80043ec <_scanf_float+0x3b0>
 8004454:	f04f 0900 	mov.w	r9, #0
 8004458:	e629      	b.n	80040ae <_scanf_float+0x72>
 800445a:	bf00      	nop
 800445c:	08007fcb 	.word	0x08007fcb
 8004460:	0800800b 	.word	0x0800800b

08004464 <std>:
 8004464:	2300      	movs	r3, #0
 8004466:	b510      	push	{r4, lr}
 8004468:	4604      	mov	r4, r0
 800446a:	e9c0 3300 	strd	r3, r3, [r0]
 800446e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004472:	6083      	str	r3, [r0, #8]
 8004474:	8181      	strh	r1, [r0, #12]
 8004476:	6643      	str	r3, [r0, #100]	@ 0x64
 8004478:	81c2      	strh	r2, [r0, #14]
 800447a:	6183      	str	r3, [r0, #24]
 800447c:	4619      	mov	r1, r3
 800447e:	2208      	movs	r2, #8
 8004480:	305c      	adds	r0, #92	@ 0x5c
 8004482:	f000 f914 	bl	80046ae <memset>
 8004486:	4b0d      	ldr	r3, [pc, #52]	@ (80044bc <std+0x58>)
 8004488:	6263      	str	r3, [r4, #36]	@ 0x24
 800448a:	4b0d      	ldr	r3, [pc, #52]	@ (80044c0 <std+0x5c>)
 800448c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800448e:	4b0d      	ldr	r3, [pc, #52]	@ (80044c4 <std+0x60>)
 8004490:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004492:	4b0d      	ldr	r3, [pc, #52]	@ (80044c8 <std+0x64>)
 8004494:	6323      	str	r3, [r4, #48]	@ 0x30
 8004496:	4b0d      	ldr	r3, [pc, #52]	@ (80044cc <std+0x68>)
 8004498:	6224      	str	r4, [r4, #32]
 800449a:	429c      	cmp	r4, r3
 800449c:	d006      	beq.n	80044ac <std+0x48>
 800449e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80044a2:	4294      	cmp	r4, r2
 80044a4:	d002      	beq.n	80044ac <std+0x48>
 80044a6:	33d0      	adds	r3, #208	@ 0xd0
 80044a8:	429c      	cmp	r4, r3
 80044aa:	d105      	bne.n	80044b8 <std+0x54>
 80044ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80044b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044b4:	f000 b9a6 	b.w	8004804 <__retarget_lock_init_recursive>
 80044b8:	bd10      	pop	{r4, pc}
 80044ba:	bf00      	nop
 80044bc:	08004629 	.word	0x08004629
 80044c0:	0800464b 	.word	0x0800464b
 80044c4:	08004683 	.word	0x08004683
 80044c8:	080046a7 	.word	0x080046a7
 80044cc:	200002a8 	.word	0x200002a8

080044d0 <stdio_exit_handler>:
 80044d0:	4a02      	ldr	r2, [pc, #8]	@ (80044dc <stdio_exit_handler+0xc>)
 80044d2:	4903      	ldr	r1, [pc, #12]	@ (80044e0 <stdio_exit_handler+0x10>)
 80044d4:	4803      	ldr	r0, [pc, #12]	@ (80044e4 <stdio_exit_handler+0x14>)
 80044d6:	f000 b869 	b.w	80045ac <_fwalk_sglue>
 80044da:	bf00      	nop
 80044dc:	2000000c 	.word	0x2000000c
 80044e0:	08007115 	.word	0x08007115
 80044e4:	2000001c 	.word	0x2000001c

080044e8 <cleanup_stdio>:
 80044e8:	6841      	ldr	r1, [r0, #4]
 80044ea:	4b0c      	ldr	r3, [pc, #48]	@ (800451c <cleanup_stdio+0x34>)
 80044ec:	4299      	cmp	r1, r3
 80044ee:	b510      	push	{r4, lr}
 80044f0:	4604      	mov	r4, r0
 80044f2:	d001      	beq.n	80044f8 <cleanup_stdio+0x10>
 80044f4:	f002 fe0e 	bl	8007114 <_fflush_r>
 80044f8:	68a1      	ldr	r1, [r4, #8]
 80044fa:	4b09      	ldr	r3, [pc, #36]	@ (8004520 <cleanup_stdio+0x38>)
 80044fc:	4299      	cmp	r1, r3
 80044fe:	d002      	beq.n	8004506 <cleanup_stdio+0x1e>
 8004500:	4620      	mov	r0, r4
 8004502:	f002 fe07 	bl	8007114 <_fflush_r>
 8004506:	68e1      	ldr	r1, [r4, #12]
 8004508:	4b06      	ldr	r3, [pc, #24]	@ (8004524 <cleanup_stdio+0x3c>)
 800450a:	4299      	cmp	r1, r3
 800450c:	d004      	beq.n	8004518 <cleanup_stdio+0x30>
 800450e:	4620      	mov	r0, r4
 8004510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004514:	f002 bdfe 	b.w	8007114 <_fflush_r>
 8004518:	bd10      	pop	{r4, pc}
 800451a:	bf00      	nop
 800451c:	200002a8 	.word	0x200002a8
 8004520:	20000310 	.word	0x20000310
 8004524:	20000378 	.word	0x20000378

08004528 <global_stdio_init.part.0>:
 8004528:	b510      	push	{r4, lr}
 800452a:	4b0b      	ldr	r3, [pc, #44]	@ (8004558 <global_stdio_init.part.0+0x30>)
 800452c:	4c0b      	ldr	r4, [pc, #44]	@ (800455c <global_stdio_init.part.0+0x34>)
 800452e:	4a0c      	ldr	r2, [pc, #48]	@ (8004560 <global_stdio_init.part.0+0x38>)
 8004530:	601a      	str	r2, [r3, #0]
 8004532:	4620      	mov	r0, r4
 8004534:	2200      	movs	r2, #0
 8004536:	2104      	movs	r1, #4
 8004538:	f7ff ff94 	bl	8004464 <std>
 800453c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004540:	2201      	movs	r2, #1
 8004542:	2109      	movs	r1, #9
 8004544:	f7ff ff8e 	bl	8004464 <std>
 8004548:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800454c:	2202      	movs	r2, #2
 800454e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004552:	2112      	movs	r1, #18
 8004554:	f7ff bf86 	b.w	8004464 <std>
 8004558:	200003e0 	.word	0x200003e0
 800455c:	200002a8 	.word	0x200002a8
 8004560:	080044d1 	.word	0x080044d1

08004564 <__sfp_lock_acquire>:
 8004564:	4801      	ldr	r0, [pc, #4]	@ (800456c <__sfp_lock_acquire+0x8>)
 8004566:	f000 b94e 	b.w	8004806 <__retarget_lock_acquire_recursive>
 800456a:	bf00      	nop
 800456c:	200003e9 	.word	0x200003e9

08004570 <__sfp_lock_release>:
 8004570:	4801      	ldr	r0, [pc, #4]	@ (8004578 <__sfp_lock_release+0x8>)
 8004572:	f000 b949 	b.w	8004808 <__retarget_lock_release_recursive>
 8004576:	bf00      	nop
 8004578:	200003e9 	.word	0x200003e9

0800457c <__sinit>:
 800457c:	b510      	push	{r4, lr}
 800457e:	4604      	mov	r4, r0
 8004580:	f7ff fff0 	bl	8004564 <__sfp_lock_acquire>
 8004584:	6a23      	ldr	r3, [r4, #32]
 8004586:	b11b      	cbz	r3, 8004590 <__sinit+0x14>
 8004588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800458c:	f7ff bff0 	b.w	8004570 <__sfp_lock_release>
 8004590:	4b04      	ldr	r3, [pc, #16]	@ (80045a4 <__sinit+0x28>)
 8004592:	6223      	str	r3, [r4, #32]
 8004594:	4b04      	ldr	r3, [pc, #16]	@ (80045a8 <__sinit+0x2c>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1f5      	bne.n	8004588 <__sinit+0xc>
 800459c:	f7ff ffc4 	bl	8004528 <global_stdio_init.part.0>
 80045a0:	e7f2      	b.n	8004588 <__sinit+0xc>
 80045a2:	bf00      	nop
 80045a4:	080044e9 	.word	0x080044e9
 80045a8:	200003e0 	.word	0x200003e0

080045ac <_fwalk_sglue>:
 80045ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045b0:	4607      	mov	r7, r0
 80045b2:	4688      	mov	r8, r1
 80045b4:	4614      	mov	r4, r2
 80045b6:	2600      	movs	r6, #0
 80045b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80045bc:	f1b9 0901 	subs.w	r9, r9, #1
 80045c0:	d505      	bpl.n	80045ce <_fwalk_sglue+0x22>
 80045c2:	6824      	ldr	r4, [r4, #0]
 80045c4:	2c00      	cmp	r4, #0
 80045c6:	d1f7      	bne.n	80045b8 <_fwalk_sglue+0xc>
 80045c8:	4630      	mov	r0, r6
 80045ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045ce:	89ab      	ldrh	r3, [r5, #12]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d907      	bls.n	80045e4 <_fwalk_sglue+0x38>
 80045d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80045d8:	3301      	adds	r3, #1
 80045da:	d003      	beq.n	80045e4 <_fwalk_sglue+0x38>
 80045dc:	4629      	mov	r1, r5
 80045de:	4638      	mov	r0, r7
 80045e0:	47c0      	blx	r8
 80045e2:	4306      	orrs	r6, r0
 80045e4:	3568      	adds	r5, #104	@ 0x68
 80045e6:	e7e9      	b.n	80045bc <_fwalk_sglue+0x10>

080045e8 <siprintf>:
 80045e8:	b40e      	push	{r1, r2, r3}
 80045ea:	b500      	push	{lr}
 80045ec:	b09c      	sub	sp, #112	@ 0x70
 80045ee:	ab1d      	add	r3, sp, #116	@ 0x74
 80045f0:	9002      	str	r0, [sp, #8]
 80045f2:	9006      	str	r0, [sp, #24]
 80045f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80045f8:	4809      	ldr	r0, [pc, #36]	@ (8004620 <siprintf+0x38>)
 80045fa:	9107      	str	r1, [sp, #28]
 80045fc:	9104      	str	r1, [sp, #16]
 80045fe:	4909      	ldr	r1, [pc, #36]	@ (8004624 <siprintf+0x3c>)
 8004600:	f853 2b04 	ldr.w	r2, [r3], #4
 8004604:	9105      	str	r1, [sp, #20]
 8004606:	6800      	ldr	r0, [r0, #0]
 8004608:	9301      	str	r3, [sp, #4]
 800460a:	a902      	add	r1, sp, #8
 800460c:	f002 fc02 	bl	8006e14 <_svfiprintf_r>
 8004610:	9b02      	ldr	r3, [sp, #8]
 8004612:	2200      	movs	r2, #0
 8004614:	701a      	strb	r2, [r3, #0]
 8004616:	b01c      	add	sp, #112	@ 0x70
 8004618:	f85d eb04 	ldr.w	lr, [sp], #4
 800461c:	b003      	add	sp, #12
 800461e:	4770      	bx	lr
 8004620:	20000018 	.word	0x20000018
 8004624:	ffff0208 	.word	0xffff0208

08004628 <__sread>:
 8004628:	b510      	push	{r4, lr}
 800462a:	460c      	mov	r4, r1
 800462c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004630:	f000 f89a 	bl	8004768 <_read_r>
 8004634:	2800      	cmp	r0, #0
 8004636:	bfab      	itete	ge
 8004638:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800463a:	89a3      	ldrhlt	r3, [r4, #12]
 800463c:	181b      	addge	r3, r3, r0
 800463e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004642:	bfac      	ite	ge
 8004644:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004646:	81a3      	strhlt	r3, [r4, #12]
 8004648:	bd10      	pop	{r4, pc}

0800464a <__swrite>:
 800464a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800464e:	461f      	mov	r7, r3
 8004650:	898b      	ldrh	r3, [r1, #12]
 8004652:	05db      	lsls	r3, r3, #23
 8004654:	4605      	mov	r5, r0
 8004656:	460c      	mov	r4, r1
 8004658:	4616      	mov	r6, r2
 800465a:	d505      	bpl.n	8004668 <__swrite+0x1e>
 800465c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004660:	2302      	movs	r3, #2
 8004662:	2200      	movs	r2, #0
 8004664:	f000 f86e 	bl	8004744 <_lseek_r>
 8004668:	89a3      	ldrh	r3, [r4, #12]
 800466a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800466e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004672:	81a3      	strh	r3, [r4, #12]
 8004674:	4632      	mov	r2, r6
 8004676:	463b      	mov	r3, r7
 8004678:	4628      	mov	r0, r5
 800467a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800467e:	f000 b885 	b.w	800478c <_write_r>

08004682 <__sseek>:
 8004682:	b510      	push	{r4, lr}
 8004684:	460c      	mov	r4, r1
 8004686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800468a:	f000 f85b 	bl	8004744 <_lseek_r>
 800468e:	1c43      	adds	r3, r0, #1
 8004690:	89a3      	ldrh	r3, [r4, #12]
 8004692:	bf15      	itete	ne
 8004694:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004696:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800469a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800469e:	81a3      	strheq	r3, [r4, #12]
 80046a0:	bf18      	it	ne
 80046a2:	81a3      	strhne	r3, [r4, #12]
 80046a4:	bd10      	pop	{r4, pc}

080046a6 <__sclose>:
 80046a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046aa:	f000 b829 	b.w	8004700 <_close_r>

080046ae <memset>:
 80046ae:	4402      	add	r2, r0
 80046b0:	4603      	mov	r3, r0
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d100      	bne.n	80046b8 <memset+0xa>
 80046b6:	4770      	bx	lr
 80046b8:	f803 1b01 	strb.w	r1, [r3], #1
 80046bc:	e7f9      	b.n	80046b2 <memset+0x4>
	...

080046c0 <time>:
 80046c0:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 80046c2:	4b0c      	ldr	r3, [pc, #48]	@ (80046f4 <time+0x34>)
 80046c4:	f04f 36ff 	mov.w	r6, #4294967295
 80046c8:	f04f 37ff 	mov.w	r7, #4294967295
 80046cc:	4669      	mov	r1, sp
 80046ce:	4604      	mov	r4, r0
 80046d0:	2200      	movs	r2, #0
 80046d2:	6818      	ldr	r0, [r3, #0]
 80046d4:	e9cd 6700 	strd	r6, r7, [sp]
 80046d8:	f000 f822 	bl	8004720 <_gettimeofday_r>
 80046dc:	2800      	cmp	r0, #0
 80046de:	bfb8      	it	lt
 80046e0:	e9cd 6700 	strdlt	r6, r7, [sp]
 80046e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80046e8:	b10c      	cbz	r4, 80046ee <time+0x2e>
 80046ea:	e9c4 0100 	strd	r0, r1, [r4]
 80046ee:	b004      	add	sp, #16
 80046f0:	bdd0      	pop	{r4, r6, r7, pc}
 80046f2:	bf00      	nop
 80046f4:	20000018 	.word	0x20000018

080046f8 <_localeconv_r>:
 80046f8:	4800      	ldr	r0, [pc, #0]	@ (80046fc <_localeconv_r+0x4>)
 80046fa:	4770      	bx	lr
 80046fc:	20000158 	.word	0x20000158

08004700 <_close_r>:
 8004700:	b538      	push	{r3, r4, r5, lr}
 8004702:	4d06      	ldr	r5, [pc, #24]	@ (800471c <_close_r+0x1c>)
 8004704:	2300      	movs	r3, #0
 8004706:	4604      	mov	r4, r0
 8004708:	4608      	mov	r0, r1
 800470a:	602b      	str	r3, [r5, #0]
 800470c:	f7fc fdb5 	bl	800127a <_close>
 8004710:	1c43      	adds	r3, r0, #1
 8004712:	d102      	bne.n	800471a <_close_r+0x1a>
 8004714:	682b      	ldr	r3, [r5, #0]
 8004716:	b103      	cbz	r3, 800471a <_close_r+0x1a>
 8004718:	6023      	str	r3, [r4, #0]
 800471a:	bd38      	pop	{r3, r4, r5, pc}
 800471c:	200003e4 	.word	0x200003e4

08004720 <_gettimeofday_r>:
 8004720:	b538      	push	{r3, r4, r5, lr}
 8004722:	4d07      	ldr	r5, [pc, #28]	@ (8004740 <_gettimeofday_r+0x20>)
 8004724:	2300      	movs	r3, #0
 8004726:	4604      	mov	r4, r0
 8004728:	4608      	mov	r0, r1
 800472a:	4611      	mov	r1, r2
 800472c:	602b      	str	r3, [r5, #0]
 800472e:	f003 fbc5 	bl	8007ebc <_gettimeofday>
 8004732:	1c43      	adds	r3, r0, #1
 8004734:	d102      	bne.n	800473c <_gettimeofday_r+0x1c>
 8004736:	682b      	ldr	r3, [r5, #0]
 8004738:	b103      	cbz	r3, 800473c <_gettimeofday_r+0x1c>
 800473a:	6023      	str	r3, [r4, #0]
 800473c:	bd38      	pop	{r3, r4, r5, pc}
 800473e:	bf00      	nop
 8004740:	200003e4 	.word	0x200003e4

08004744 <_lseek_r>:
 8004744:	b538      	push	{r3, r4, r5, lr}
 8004746:	4d07      	ldr	r5, [pc, #28]	@ (8004764 <_lseek_r+0x20>)
 8004748:	4604      	mov	r4, r0
 800474a:	4608      	mov	r0, r1
 800474c:	4611      	mov	r1, r2
 800474e:	2200      	movs	r2, #0
 8004750:	602a      	str	r2, [r5, #0]
 8004752:	461a      	mov	r2, r3
 8004754:	f7fc fdb8 	bl	80012c8 <_lseek>
 8004758:	1c43      	adds	r3, r0, #1
 800475a:	d102      	bne.n	8004762 <_lseek_r+0x1e>
 800475c:	682b      	ldr	r3, [r5, #0]
 800475e:	b103      	cbz	r3, 8004762 <_lseek_r+0x1e>
 8004760:	6023      	str	r3, [r4, #0]
 8004762:	bd38      	pop	{r3, r4, r5, pc}
 8004764:	200003e4 	.word	0x200003e4

08004768 <_read_r>:
 8004768:	b538      	push	{r3, r4, r5, lr}
 800476a:	4d07      	ldr	r5, [pc, #28]	@ (8004788 <_read_r+0x20>)
 800476c:	4604      	mov	r4, r0
 800476e:	4608      	mov	r0, r1
 8004770:	4611      	mov	r1, r2
 8004772:	2200      	movs	r2, #0
 8004774:	602a      	str	r2, [r5, #0]
 8004776:	461a      	mov	r2, r3
 8004778:	f7fc fd46 	bl	8001208 <_read>
 800477c:	1c43      	adds	r3, r0, #1
 800477e:	d102      	bne.n	8004786 <_read_r+0x1e>
 8004780:	682b      	ldr	r3, [r5, #0]
 8004782:	b103      	cbz	r3, 8004786 <_read_r+0x1e>
 8004784:	6023      	str	r3, [r4, #0]
 8004786:	bd38      	pop	{r3, r4, r5, pc}
 8004788:	200003e4 	.word	0x200003e4

0800478c <_write_r>:
 800478c:	b538      	push	{r3, r4, r5, lr}
 800478e:	4d07      	ldr	r5, [pc, #28]	@ (80047ac <_write_r+0x20>)
 8004790:	4604      	mov	r4, r0
 8004792:	4608      	mov	r0, r1
 8004794:	4611      	mov	r1, r2
 8004796:	2200      	movs	r2, #0
 8004798:	602a      	str	r2, [r5, #0]
 800479a:	461a      	mov	r2, r3
 800479c:	f7fc fd51 	bl	8001242 <_write>
 80047a0:	1c43      	adds	r3, r0, #1
 80047a2:	d102      	bne.n	80047aa <_write_r+0x1e>
 80047a4:	682b      	ldr	r3, [r5, #0]
 80047a6:	b103      	cbz	r3, 80047aa <_write_r+0x1e>
 80047a8:	6023      	str	r3, [r4, #0]
 80047aa:	bd38      	pop	{r3, r4, r5, pc}
 80047ac:	200003e4 	.word	0x200003e4

080047b0 <__errno>:
 80047b0:	4b01      	ldr	r3, [pc, #4]	@ (80047b8 <__errno+0x8>)
 80047b2:	6818      	ldr	r0, [r3, #0]
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	20000018 	.word	0x20000018

080047bc <__libc_init_array>:
 80047bc:	b570      	push	{r4, r5, r6, lr}
 80047be:	4d0d      	ldr	r5, [pc, #52]	@ (80047f4 <__libc_init_array+0x38>)
 80047c0:	4c0d      	ldr	r4, [pc, #52]	@ (80047f8 <__libc_init_array+0x3c>)
 80047c2:	1b64      	subs	r4, r4, r5
 80047c4:	10a4      	asrs	r4, r4, #2
 80047c6:	2600      	movs	r6, #0
 80047c8:	42a6      	cmp	r6, r4
 80047ca:	d109      	bne.n	80047e0 <__libc_init_array+0x24>
 80047cc:	4d0b      	ldr	r5, [pc, #44]	@ (80047fc <__libc_init_array+0x40>)
 80047ce:	4c0c      	ldr	r4, [pc, #48]	@ (8004800 <__libc_init_array+0x44>)
 80047d0:	f003 fb7c 	bl	8007ecc <_init>
 80047d4:	1b64      	subs	r4, r4, r5
 80047d6:	10a4      	asrs	r4, r4, #2
 80047d8:	2600      	movs	r6, #0
 80047da:	42a6      	cmp	r6, r4
 80047dc:	d105      	bne.n	80047ea <__libc_init_array+0x2e>
 80047de:	bd70      	pop	{r4, r5, r6, pc}
 80047e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80047e4:	4798      	blx	r3
 80047e6:	3601      	adds	r6, #1
 80047e8:	e7ee      	b.n	80047c8 <__libc_init_array+0xc>
 80047ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80047ee:	4798      	blx	r3
 80047f0:	3601      	adds	r6, #1
 80047f2:	e7f2      	b.n	80047da <__libc_init_array+0x1e>
 80047f4:	080083b4 	.word	0x080083b4
 80047f8:	080083b4 	.word	0x080083b4
 80047fc:	080083b4 	.word	0x080083b4
 8004800:	080083b8 	.word	0x080083b8

08004804 <__retarget_lock_init_recursive>:
 8004804:	4770      	bx	lr

08004806 <__retarget_lock_acquire_recursive>:
 8004806:	4770      	bx	lr

08004808 <__retarget_lock_release_recursive>:
 8004808:	4770      	bx	lr
	...

0800480c <nanf>:
 800480c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8004814 <nanf+0x8>
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	7fc00000 	.word	0x7fc00000

08004818 <__assert_func>:
 8004818:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800481a:	4614      	mov	r4, r2
 800481c:	461a      	mov	r2, r3
 800481e:	4b09      	ldr	r3, [pc, #36]	@ (8004844 <__assert_func+0x2c>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4605      	mov	r5, r0
 8004824:	68d8      	ldr	r0, [r3, #12]
 8004826:	b954      	cbnz	r4, 800483e <__assert_func+0x26>
 8004828:	4b07      	ldr	r3, [pc, #28]	@ (8004848 <__assert_func+0x30>)
 800482a:	461c      	mov	r4, r3
 800482c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004830:	9100      	str	r1, [sp, #0]
 8004832:	462b      	mov	r3, r5
 8004834:	4905      	ldr	r1, [pc, #20]	@ (800484c <__assert_func+0x34>)
 8004836:	f002 fc95 	bl	8007164 <fiprintf>
 800483a:	f002 fcf9 	bl	8007230 <abort>
 800483e:	4b04      	ldr	r3, [pc, #16]	@ (8004850 <__assert_func+0x38>)
 8004840:	e7f4      	b.n	800482c <__assert_func+0x14>
 8004842:	bf00      	nop
 8004844:	20000018 	.word	0x20000018
 8004848:	0800800b 	.word	0x0800800b
 800484c:	08007fdd 	.word	0x08007fdd
 8004850:	08007fd0 	.word	0x08007fd0

08004854 <quorem>:
 8004854:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004858:	6903      	ldr	r3, [r0, #16]
 800485a:	690c      	ldr	r4, [r1, #16]
 800485c:	42a3      	cmp	r3, r4
 800485e:	4607      	mov	r7, r0
 8004860:	db7e      	blt.n	8004960 <quorem+0x10c>
 8004862:	3c01      	subs	r4, #1
 8004864:	f101 0814 	add.w	r8, r1, #20
 8004868:	00a3      	lsls	r3, r4, #2
 800486a:	f100 0514 	add.w	r5, r0, #20
 800486e:	9300      	str	r3, [sp, #0]
 8004870:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004874:	9301      	str	r3, [sp, #4]
 8004876:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800487a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800487e:	3301      	adds	r3, #1
 8004880:	429a      	cmp	r2, r3
 8004882:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004886:	fbb2 f6f3 	udiv	r6, r2, r3
 800488a:	d32e      	bcc.n	80048ea <quorem+0x96>
 800488c:	f04f 0a00 	mov.w	sl, #0
 8004890:	46c4      	mov	ip, r8
 8004892:	46ae      	mov	lr, r5
 8004894:	46d3      	mov	fp, sl
 8004896:	f85c 3b04 	ldr.w	r3, [ip], #4
 800489a:	b298      	uxth	r0, r3
 800489c:	fb06 a000 	mla	r0, r6, r0, sl
 80048a0:	0c02      	lsrs	r2, r0, #16
 80048a2:	0c1b      	lsrs	r3, r3, #16
 80048a4:	fb06 2303 	mla	r3, r6, r3, r2
 80048a8:	f8de 2000 	ldr.w	r2, [lr]
 80048ac:	b280      	uxth	r0, r0
 80048ae:	b292      	uxth	r2, r2
 80048b0:	1a12      	subs	r2, r2, r0
 80048b2:	445a      	add	r2, fp
 80048b4:	f8de 0000 	ldr.w	r0, [lr]
 80048b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80048bc:	b29b      	uxth	r3, r3
 80048be:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80048c2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80048c6:	b292      	uxth	r2, r2
 80048c8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80048cc:	45e1      	cmp	r9, ip
 80048ce:	f84e 2b04 	str.w	r2, [lr], #4
 80048d2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80048d6:	d2de      	bcs.n	8004896 <quorem+0x42>
 80048d8:	9b00      	ldr	r3, [sp, #0]
 80048da:	58eb      	ldr	r3, [r5, r3]
 80048dc:	b92b      	cbnz	r3, 80048ea <quorem+0x96>
 80048de:	9b01      	ldr	r3, [sp, #4]
 80048e0:	3b04      	subs	r3, #4
 80048e2:	429d      	cmp	r5, r3
 80048e4:	461a      	mov	r2, r3
 80048e6:	d32f      	bcc.n	8004948 <quorem+0xf4>
 80048e8:	613c      	str	r4, [r7, #16]
 80048ea:	4638      	mov	r0, r7
 80048ec:	f001 f9c4 	bl	8005c78 <__mcmp>
 80048f0:	2800      	cmp	r0, #0
 80048f2:	db25      	blt.n	8004940 <quorem+0xec>
 80048f4:	4629      	mov	r1, r5
 80048f6:	2000      	movs	r0, #0
 80048f8:	f858 2b04 	ldr.w	r2, [r8], #4
 80048fc:	f8d1 c000 	ldr.w	ip, [r1]
 8004900:	fa1f fe82 	uxth.w	lr, r2
 8004904:	fa1f f38c 	uxth.w	r3, ip
 8004908:	eba3 030e 	sub.w	r3, r3, lr
 800490c:	4403      	add	r3, r0
 800490e:	0c12      	lsrs	r2, r2, #16
 8004910:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004914:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004918:	b29b      	uxth	r3, r3
 800491a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800491e:	45c1      	cmp	r9, r8
 8004920:	f841 3b04 	str.w	r3, [r1], #4
 8004924:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004928:	d2e6      	bcs.n	80048f8 <quorem+0xa4>
 800492a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800492e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004932:	b922      	cbnz	r2, 800493e <quorem+0xea>
 8004934:	3b04      	subs	r3, #4
 8004936:	429d      	cmp	r5, r3
 8004938:	461a      	mov	r2, r3
 800493a:	d30b      	bcc.n	8004954 <quorem+0x100>
 800493c:	613c      	str	r4, [r7, #16]
 800493e:	3601      	adds	r6, #1
 8004940:	4630      	mov	r0, r6
 8004942:	b003      	add	sp, #12
 8004944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004948:	6812      	ldr	r2, [r2, #0]
 800494a:	3b04      	subs	r3, #4
 800494c:	2a00      	cmp	r2, #0
 800494e:	d1cb      	bne.n	80048e8 <quorem+0x94>
 8004950:	3c01      	subs	r4, #1
 8004952:	e7c6      	b.n	80048e2 <quorem+0x8e>
 8004954:	6812      	ldr	r2, [r2, #0]
 8004956:	3b04      	subs	r3, #4
 8004958:	2a00      	cmp	r2, #0
 800495a:	d1ef      	bne.n	800493c <quorem+0xe8>
 800495c:	3c01      	subs	r4, #1
 800495e:	e7ea      	b.n	8004936 <quorem+0xe2>
 8004960:	2000      	movs	r0, #0
 8004962:	e7ee      	b.n	8004942 <quorem+0xee>
 8004964:	0000      	movs	r0, r0
	...

08004968 <_dtoa_r>:
 8004968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800496c:	69c7      	ldr	r7, [r0, #28]
 800496e:	b099      	sub	sp, #100	@ 0x64
 8004970:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004974:	ec55 4b10 	vmov	r4, r5, d0
 8004978:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800497a:	9109      	str	r1, [sp, #36]	@ 0x24
 800497c:	4683      	mov	fp, r0
 800497e:	920e      	str	r2, [sp, #56]	@ 0x38
 8004980:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004982:	b97f      	cbnz	r7, 80049a4 <_dtoa_r+0x3c>
 8004984:	2010      	movs	r0, #16
 8004986:	f000 fdfd 	bl	8005584 <malloc>
 800498a:	4602      	mov	r2, r0
 800498c:	f8cb 001c 	str.w	r0, [fp, #28]
 8004990:	b920      	cbnz	r0, 800499c <_dtoa_r+0x34>
 8004992:	4ba7      	ldr	r3, [pc, #668]	@ (8004c30 <_dtoa_r+0x2c8>)
 8004994:	21ef      	movs	r1, #239	@ 0xef
 8004996:	48a7      	ldr	r0, [pc, #668]	@ (8004c34 <_dtoa_r+0x2cc>)
 8004998:	f7ff ff3e 	bl	8004818 <__assert_func>
 800499c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80049a0:	6007      	str	r7, [r0, #0]
 80049a2:	60c7      	str	r7, [r0, #12]
 80049a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80049a8:	6819      	ldr	r1, [r3, #0]
 80049aa:	b159      	cbz	r1, 80049c4 <_dtoa_r+0x5c>
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	604a      	str	r2, [r1, #4]
 80049b0:	2301      	movs	r3, #1
 80049b2:	4093      	lsls	r3, r2
 80049b4:	608b      	str	r3, [r1, #8]
 80049b6:	4658      	mov	r0, fp
 80049b8:	f000 feda 	bl	8005770 <_Bfree>
 80049bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80049c0:	2200      	movs	r2, #0
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	1e2b      	subs	r3, r5, #0
 80049c6:	bfb9      	ittee	lt
 80049c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80049cc:	9303      	strlt	r3, [sp, #12]
 80049ce:	2300      	movge	r3, #0
 80049d0:	6033      	strge	r3, [r6, #0]
 80049d2:	9f03      	ldr	r7, [sp, #12]
 80049d4:	4b98      	ldr	r3, [pc, #608]	@ (8004c38 <_dtoa_r+0x2d0>)
 80049d6:	bfbc      	itt	lt
 80049d8:	2201      	movlt	r2, #1
 80049da:	6032      	strlt	r2, [r6, #0]
 80049dc:	43bb      	bics	r3, r7
 80049de:	d112      	bne.n	8004a06 <_dtoa_r+0x9e>
 80049e0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80049e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80049e6:	6013      	str	r3, [r2, #0]
 80049e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80049ec:	4323      	orrs	r3, r4
 80049ee:	f000 854d 	beq.w	800548c <_dtoa_r+0xb24>
 80049f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80049f4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8004c4c <_dtoa_r+0x2e4>
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 854f 	beq.w	800549c <_dtoa_r+0xb34>
 80049fe:	f10a 0303 	add.w	r3, sl, #3
 8004a02:	f000 bd49 	b.w	8005498 <_dtoa_r+0xb30>
 8004a06:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	ec51 0b17 	vmov	r0, r1, d7
 8004a10:	2300      	movs	r3, #0
 8004a12:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8004a16:	f7fc f857 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a1a:	4680      	mov	r8, r0
 8004a1c:	b158      	cbz	r0, 8004a36 <_dtoa_r+0xce>
 8004a1e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004a20:	2301      	movs	r3, #1
 8004a22:	6013      	str	r3, [r2, #0]
 8004a24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004a26:	b113      	cbz	r3, 8004a2e <_dtoa_r+0xc6>
 8004a28:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004a2a:	4b84      	ldr	r3, [pc, #528]	@ (8004c3c <_dtoa_r+0x2d4>)
 8004a2c:	6013      	str	r3, [r2, #0]
 8004a2e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8004c50 <_dtoa_r+0x2e8>
 8004a32:	f000 bd33 	b.w	800549c <_dtoa_r+0xb34>
 8004a36:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8004a3a:	aa16      	add	r2, sp, #88	@ 0x58
 8004a3c:	a917      	add	r1, sp, #92	@ 0x5c
 8004a3e:	4658      	mov	r0, fp
 8004a40:	f001 fa3a 	bl	8005eb8 <__d2b>
 8004a44:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004a48:	4681      	mov	r9, r0
 8004a4a:	2e00      	cmp	r6, #0
 8004a4c:	d077      	beq.n	8004b3e <_dtoa_r+0x1d6>
 8004a4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004a50:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8004a54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004a5c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004a60:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004a64:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004a68:	4619      	mov	r1, r3
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	4b74      	ldr	r3, [pc, #464]	@ (8004c40 <_dtoa_r+0x2d8>)
 8004a6e:	f7fb fc0b 	bl	8000288 <__aeabi_dsub>
 8004a72:	a369      	add	r3, pc, #420	@ (adr r3, 8004c18 <_dtoa_r+0x2b0>)
 8004a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a78:	f7fb fdbe 	bl	80005f8 <__aeabi_dmul>
 8004a7c:	a368      	add	r3, pc, #416	@ (adr r3, 8004c20 <_dtoa_r+0x2b8>)
 8004a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a82:	f7fb fc03 	bl	800028c <__adddf3>
 8004a86:	4604      	mov	r4, r0
 8004a88:	4630      	mov	r0, r6
 8004a8a:	460d      	mov	r5, r1
 8004a8c:	f7fb fd4a 	bl	8000524 <__aeabi_i2d>
 8004a90:	a365      	add	r3, pc, #404	@ (adr r3, 8004c28 <_dtoa_r+0x2c0>)
 8004a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a96:	f7fb fdaf 	bl	80005f8 <__aeabi_dmul>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	4629      	mov	r1, r5
 8004aa2:	f7fb fbf3 	bl	800028c <__adddf3>
 8004aa6:	4604      	mov	r4, r0
 8004aa8:	460d      	mov	r5, r1
 8004aaa:	f7fc f855 	bl	8000b58 <__aeabi_d2iz>
 8004aae:	2200      	movs	r2, #0
 8004ab0:	4607      	mov	r7, r0
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	4620      	mov	r0, r4
 8004ab6:	4629      	mov	r1, r5
 8004ab8:	f7fc f810 	bl	8000adc <__aeabi_dcmplt>
 8004abc:	b140      	cbz	r0, 8004ad0 <_dtoa_r+0x168>
 8004abe:	4638      	mov	r0, r7
 8004ac0:	f7fb fd30 	bl	8000524 <__aeabi_i2d>
 8004ac4:	4622      	mov	r2, r4
 8004ac6:	462b      	mov	r3, r5
 8004ac8:	f7fb fffe 	bl	8000ac8 <__aeabi_dcmpeq>
 8004acc:	b900      	cbnz	r0, 8004ad0 <_dtoa_r+0x168>
 8004ace:	3f01      	subs	r7, #1
 8004ad0:	2f16      	cmp	r7, #22
 8004ad2:	d851      	bhi.n	8004b78 <_dtoa_r+0x210>
 8004ad4:	4b5b      	ldr	r3, [pc, #364]	@ (8004c44 <_dtoa_r+0x2dc>)
 8004ad6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ade:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004ae2:	f7fb fffb 	bl	8000adc <__aeabi_dcmplt>
 8004ae6:	2800      	cmp	r0, #0
 8004ae8:	d048      	beq.n	8004b7c <_dtoa_r+0x214>
 8004aea:	3f01      	subs	r7, #1
 8004aec:	2300      	movs	r3, #0
 8004aee:	9312      	str	r3, [sp, #72]	@ 0x48
 8004af0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004af2:	1b9b      	subs	r3, r3, r6
 8004af4:	1e5a      	subs	r2, r3, #1
 8004af6:	bf44      	itt	mi
 8004af8:	f1c3 0801 	rsbmi	r8, r3, #1
 8004afc:	2300      	movmi	r3, #0
 8004afe:	9208      	str	r2, [sp, #32]
 8004b00:	bf54      	ite	pl
 8004b02:	f04f 0800 	movpl.w	r8, #0
 8004b06:	9308      	strmi	r3, [sp, #32]
 8004b08:	2f00      	cmp	r7, #0
 8004b0a:	db39      	blt.n	8004b80 <_dtoa_r+0x218>
 8004b0c:	9b08      	ldr	r3, [sp, #32]
 8004b0e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8004b10:	443b      	add	r3, r7
 8004b12:	9308      	str	r3, [sp, #32]
 8004b14:	2300      	movs	r3, #0
 8004b16:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b1a:	2b09      	cmp	r3, #9
 8004b1c:	d864      	bhi.n	8004be8 <_dtoa_r+0x280>
 8004b1e:	2b05      	cmp	r3, #5
 8004b20:	bfc4      	itt	gt
 8004b22:	3b04      	subgt	r3, #4
 8004b24:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8004b26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b28:	f1a3 0302 	sub.w	r3, r3, #2
 8004b2c:	bfcc      	ite	gt
 8004b2e:	2400      	movgt	r4, #0
 8004b30:	2401      	movle	r4, #1
 8004b32:	2b03      	cmp	r3, #3
 8004b34:	d863      	bhi.n	8004bfe <_dtoa_r+0x296>
 8004b36:	e8df f003 	tbb	[pc, r3]
 8004b3a:	372a      	.short	0x372a
 8004b3c:	5535      	.short	0x5535
 8004b3e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8004b42:	441e      	add	r6, r3
 8004b44:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004b48:	2b20      	cmp	r3, #32
 8004b4a:	bfc1      	itttt	gt
 8004b4c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004b50:	409f      	lslgt	r7, r3
 8004b52:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004b56:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004b5a:	bfd6      	itet	le
 8004b5c:	f1c3 0320 	rsble	r3, r3, #32
 8004b60:	ea47 0003 	orrgt.w	r0, r7, r3
 8004b64:	fa04 f003 	lslle.w	r0, r4, r3
 8004b68:	f7fb fccc 	bl	8000504 <__aeabi_ui2d>
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004b72:	3e01      	subs	r6, #1
 8004b74:	9214      	str	r2, [sp, #80]	@ 0x50
 8004b76:	e777      	b.n	8004a68 <_dtoa_r+0x100>
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e7b8      	b.n	8004aee <_dtoa_r+0x186>
 8004b7c:	9012      	str	r0, [sp, #72]	@ 0x48
 8004b7e:	e7b7      	b.n	8004af0 <_dtoa_r+0x188>
 8004b80:	427b      	negs	r3, r7
 8004b82:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b84:	2300      	movs	r3, #0
 8004b86:	eba8 0807 	sub.w	r8, r8, r7
 8004b8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004b8c:	e7c4      	b.n	8004b18 <_dtoa_r+0x1b0>
 8004b8e:	2300      	movs	r3, #0
 8004b90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	dc35      	bgt.n	8004c04 <_dtoa_r+0x29c>
 8004b98:	2301      	movs	r3, #1
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	9307      	str	r3, [sp, #28]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	920e      	str	r2, [sp, #56]	@ 0x38
 8004ba2:	e00b      	b.n	8004bbc <_dtoa_r+0x254>
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e7f3      	b.n	8004b90 <_dtoa_r+0x228>
 8004ba8:	2300      	movs	r3, #0
 8004baa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004bac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004bae:	18fb      	adds	r3, r7, r3
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	9307      	str	r3, [sp, #28]
 8004bb8:	bfb8      	it	lt
 8004bba:	2301      	movlt	r3, #1
 8004bbc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	2204      	movs	r2, #4
 8004bc4:	f102 0514 	add.w	r5, r2, #20
 8004bc8:	429d      	cmp	r5, r3
 8004bca:	d91f      	bls.n	8004c0c <_dtoa_r+0x2a4>
 8004bcc:	6041      	str	r1, [r0, #4]
 8004bce:	4658      	mov	r0, fp
 8004bd0:	f000 fd8e 	bl	80056f0 <_Balloc>
 8004bd4:	4682      	mov	sl, r0
 8004bd6:	2800      	cmp	r0, #0
 8004bd8:	d13c      	bne.n	8004c54 <_dtoa_r+0x2ec>
 8004bda:	4b1b      	ldr	r3, [pc, #108]	@ (8004c48 <_dtoa_r+0x2e0>)
 8004bdc:	4602      	mov	r2, r0
 8004bde:	f240 11af 	movw	r1, #431	@ 0x1af
 8004be2:	e6d8      	b.n	8004996 <_dtoa_r+0x2e>
 8004be4:	2301      	movs	r3, #1
 8004be6:	e7e0      	b.n	8004baa <_dtoa_r+0x242>
 8004be8:	2401      	movs	r4, #1
 8004bea:	2300      	movs	r3, #0
 8004bec:	9309      	str	r3, [sp, #36]	@ 0x24
 8004bee:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8004bf4:	9300      	str	r3, [sp, #0]
 8004bf6:	9307      	str	r3, [sp, #28]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	2312      	movs	r3, #18
 8004bfc:	e7d0      	b.n	8004ba0 <_dtoa_r+0x238>
 8004bfe:	2301      	movs	r3, #1
 8004c00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004c02:	e7f5      	b.n	8004bf0 <_dtoa_r+0x288>
 8004c04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004c06:	9300      	str	r3, [sp, #0]
 8004c08:	9307      	str	r3, [sp, #28]
 8004c0a:	e7d7      	b.n	8004bbc <_dtoa_r+0x254>
 8004c0c:	3101      	adds	r1, #1
 8004c0e:	0052      	lsls	r2, r2, #1
 8004c10:	e7d8      	b.n	8004bc4 <_dtoa_r+0x25c>
 8004c12:	bf00      	nop
 8004c14:	f3af 8000 	nop.w
 8004c18:	636f4361 	.word	0x636f4361
 8004c1c:	3fd287a7 	.word	0x3fd287a7
 8004c20:	8b60c8b3 	.word	0x8b60c8b3
 8004c24:	3fc68a28 	.word	0x3fc68a28
 8004c28:	509f79fb 	.word	0x509f79fb
 8004c2c:	3fd34413 	.word	0x3fd34413
 8004c30:	08007f28 	.word	0x08007f28
 8004c34:	08008019 	.word	0x08008019
 8004c38:	7ff00000 	.word	0x7ff00000
 8004c3c:	08007fa8 	.word	0x08007fa8
 8004c40:	3ff80000 	.word	0x3ff80000
 8004c44:	08008110 	.word	0x08008110
 8004c48:	08008071 	.word	0x08008071
 8004c4c:	08008015 	.word	0x08008015
 8004c50:	08007fa7 	.word	0x08007fa7
 8004c54:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004c58:	6018      	str	r0, [r3, #0]
 8004c5a:	9b07      	ldr	r3, [sp, #28]
 8004c5c:	2b0e      	cmp	r3, #14
 8004c5e:	f200 80a4 	bhi.w	8004daa <_dtoa_r+0x442>
 8004c62:	2c00      	cmp	r4, #0
 8004c64:	f000 80a1 	beq.w	8004daa <_dtoa_r+0x442>
 8004c68:	2f00      	cmp	r7, #0
 8004c6a:	dd33      	ble.n	8004cd4 <_dtoa_r+0x36c>
 8004c6c:	4bad      	ldr	r3, [pc, #692]	@ (8004f24 <_dtoa_r+0x5bc>)
 8004c6e:	f007 020f 	and.w	r2, r7, #15
 8004c72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c76:	ed93 7b00 	vldr	d7, [r3]
 8004c7a:	05f8      	lsls	r0, r7, #23
 8004c7c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004c80:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004c84:	d516      	bpl.n	8004cb4 <_dtoa_r+0x34c>
 8004c86:	4ba8      	ldr	r3, [pc, #672]	@ (8004f28 <_dtoa_r+0x5c0>)
 8004c88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004c8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004c90:	f7fb fddc 	bl	800084c <__aeabi_ddiv>
 8004c94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c98:	f004 040f 	and.w	r4, r4, #15
 8004c9c:	2603      	movs	r6, #3
 8004c9e:	4da2      	ldr	r5, [pc, #648]	@ (8004f28 <_dtoa_r+0x5c0>)
 8004ca0:	b954      	cbnz	r4, 8004cb8 <_dtoa_r+0x350>
 8004ca2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ca6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004caa:	f7fb fdcf 	bl	800084c <__aeabi_ddiv>
 8004cae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004cb2:	e028      	b.n	8004d06 <_dtoa_r+0x39e>
 8004cb4:	2602      	movs	r6, #2
 8004cb6:	e7f2      	b.n	8004c9e <_dtoa_r+0x336>
 8004cb8:	07e1      	lsls	r1, r4, #31
 8004cba:	d508      	bpl.n	8004cce <_dtoa_r+0x366>
 8004cbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004cc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004cc4:	f7fb fc98 	bl	80005f8 <__aeabi_dmul>
 8004cc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ccc:	3601      	adds	r6, #1
 8004cce:	1064      	asrs	r4, r4, #1
 8004cd0:	3508      	adds	r5, #8
 8004cd2:	e7e5      	b.n	8004ca0 <_dtoa_r+0x338>
 8004cd4:	f000 80d2 	beq.w	8004e7c <_dtoa_r+0x514>
 8004cd8:	427c      	negs	r4, r7
 8004cda:	4b92      	ldr	r3, [pc, #584]	@ (8004f24 <_dtoa_r+0x5bc>)
 8004cdc:	4d92      	ldr	r5, [pc, #584]	@ (8004f28 <_dtoa_r+0x5c0>)
 8004cde:	f004 020f 	and.w	r2, r4, #15
 8004ce2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004cee:	f7fb fc83 	bl	80005f8 <__aeabi_dmul>
 8004cf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004cf6:	1124      	asrs	r4, r4, #4
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	2602      	movs	r6, #2
 8004cfc:	2c00      	cmp	r4, #0
 8004cfe:	f040 80b2 	bne.w	8004e66 <_dtoa_r+0x4fe>
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1d3      	bne.n	8004cae <_dtoa_r+0x346>
 8004d06:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004d08:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f000 80b7 	beq.w	8004e80 <_dtoa_r+0x518>
 8004d12:	4b86      	ldr	r3, [pc, #536]	@ (8004f2c <_dtoa_r+0x5c4>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	4620      	mov	r0, r4
 8004d18:	4629      	mov	r1, r5
 8004d1a:	f7fb fedf 	bl	8000adc <__aeabi_dcmplt>
 8004d1e:	2800      	cmp	r0, #0
 8004d20:	f000 80ae 	beq.w	8004e80 <_dtoa_r+0x518>
 8004d24:	9b07      	ldr	r3, [sp, #28]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f000 80aa 	beq.w	8004e80 <_dtoa_r+0x518>
 8004d2c:	9b00      	ldr	r3, [sp, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	dd37      	ble.n	8004da2 <_dtoa_r+0x43a>
 8004d32:	1e7b      	subs	r3, r7, #1
 8004d34:	9304      	str	r3, [sp, #16]
 8004d36:	4620      	mov	r0, r4
 8004d38:	4b7d      	ldr	r3, [pc, #500]	@ (8004f30 <_dtoa_r+0x5c8>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	4629      	mov	r1, r5
 8004d3e:	f7fb fc5b 	bl	80005f8 <__aeabi_dmul>
 8004d42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d46:	9c00      	ldr	r4, [sp, #0]
 8004d48:	3601      	adds	r6, #1
 8004d4a:	4630      	mov	r0, r6
 8004d4c:	f7fb fbea 	bl	8000524 <__aeabi_i2d>
 8004d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d54:	f7fb fc50 	bl	80005f8 <__aeabi_dmul>
 8004d58:	4b76      	ldr	r3, [pc, #472]	@ (8004f34 <_dtoa_r+0x5cc>)
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f7fb fa96 	bl	800028c <__adddf3>
 8004d60:	4605      	mov	r5, r0
 8004d62:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004d66:	2c00      	cmp	r4, #0
 8004d68:	f040 808d 	bne.w	8004e86 <_dtoa_r+0x51e>
 8004d6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d70:	4b71      	ldr	r3, [pc, #452]	@ (8004f38 <_dtoa_r+0x5d0>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	f7fb fa88 	bl	8000288 <__aeabi_dsub>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004d80:	462a      	mov	r2, r5
 8004d82:	4633      	mov	r3, r6
 8004d84:	f7fb fec8 	bl	8000b18 <__aeabi_dcmpgt>
 8004d88:	2800      	cmp	r0, #0
 8004d8a:	f040 828b 	bne.w	80052a4 <_dtoa_r+0x93c>
 8004d8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d92:	462a      	mov	r2, r5
 8004d94:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004d98:	f7fb fea0 	bl	8000adc <__aeabi_dcmplt>
 8004d9c:	2800      	cmp	r0, #0
 8004d9e:	f040 8128 	bne.w	8004ff2 <_dtoa_r+0x68a>
 8004da2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004da6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004daa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f2c0 815a 	blt.w	8005066 <_dtoa_r+0x6fe>
 8004db2:	2f0e      	cmp	r7, #14
 8004db4:	f300 8157 	bgt.w	8005066 <_dtoa_r+0x6fe>
 8004db8:	4b5a      	ldr	r3, [pc, #360]	@ (8004f24 <_dtoa_r+0x5bc>)
 8004dba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004dbe:	ed93 7b00 	vldr	d7, [r3]
 8004dc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	ed8d 7b00 	vstr	d7, [sp]
 8004dca:	da03      	bge.n	8004dd4 <_dtoa_r+0x46c>
 8004dcc:	9b07      	ldr	r3, [sp, #28]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f340 8101 	ble.w	8004fd6 <_dtoa_r+0x66e>
 8004dd4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004dd8:	4656      	mov	r6, sl
 8004dda:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004dde:	4620      	mov	r0, r4
 8004de0:	4629      	mov	r1, r5
 8004de2:	f7fb fd33 	bl	800084c <__aeabi_ddiv>
 8004de6:	f7fb feb7 	bl	8000b58 <__aeabi_d2iz>
 8004dea:	4680      	mov	r8, r0
 8004dec:	f7fb fb9a 	bl	8000524 <__aeabi_i2d>
 8004df0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004df4:	f7fb fc00 	bl	80005f8 <__aeabi_dmul>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	4620      	mov	r0, r4
 8004dfe:	4629      	mov	r1, r5
 8004e00:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004e04:	f7fb fa40 	bl	8000288 <__aeabi_dsub>
 8004e08:	f806 4b01 	strb.w	r4, [r6], #1
 8004e0c:	9d07      	ldr	r5, [sp, #28]
 8004e0e:	eba6 040a 	sub.w	r4, r6, sl
 8004e12:	42a5      	cmp	r5, r4
 8004e14:	4602      	mov	r2, r0
 8004e16:	460b      	mov	r3, r1
 8004e18:	f040 8117 	bne.w	800504a <_dtoa_r+0x6e2>
 8004e1c:	f7fb fa36 	bl	800028c <__adddf3>
 8004e20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e24:	4604      	mov	r4, r0
 8004e26:	460d      	mov	r5, r1
 8004e28:	f7fb fe76 	bl	8000b18 <__aeabi_dcmpgt>
 8004e2c:	2800      	cmp	r0, #0
 8004e2e:	f040 80f9 	bne.w	8005024 <_dtoa_r+0x6bc>
 8004e32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e36:	4620      	mov	r0, r4
 8004e38:	4629      	mov	r1, r5
 8004e3a:	f7fb fe45 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e3e:	b118      	cbz	r0, 8004e48 <_dtoa_r+0x4e0>
 8004e40:	f018 0f01 	tst.w	r8, #1
 8004e44:	f040 80ee 	bne.w	8005024 <_dtoa_r+0x6bc>
 8004e48:	4649      	mov	r1, r9
 8004e4a:	4658      	mov	r0, fp
 8004e4c:	f000 fc90 	bl	8005770 <_Bfree>
 8004e50:	2300      	movs	r3, #0
 8004e52:	7033      	strb	r3, [r6, #0]
 8004e54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004e56:	3701      	adds	r7, #1
 8004e58:	601f      	str	r7, [r3, #0]
 8004e5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f000 831d 	beq.w	800549c <_dtoa_r+0xb34>
 8004e62:	601e      	str	r6, [r3, #0]
 8004e64:	e31a      	b.n	800549c <_dtoa_r+0xb34>
 8004e66:	07e2      	lsls	r2, r4, #31
 8004e68:	d505      	bpl.n	8004e76 <_dtoa_r+0x50e>
 8004e6a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004e6e:	f7fb fbc3 	bl	80005f8 <__aeabi_dmul>
 8004e72:	3601      	adds	r6, #1
 8004e74:	2301      	movs	r3, #1
 8004e76:	1064      	asrs	r4, r4, #1
 8004e78:	3508      	adds	r5, #8
 8004e7a:	e73f      	b.n	8004cfc <_dtoa_r+0x394>
 8004e7c:	2602      	movs	r6, #2
 8004e7e:	e742      	b.n	8004d06 <_dtoa_r+0x39e>
 8004e80:	9c07      	ldr	r4, [sp, #28]
 8004e82:	9704      	str	r7, [sp, #16]
 8004e84:	e761      	b.n	8004d4a <_dtoa_r+0x3e2>
 8004e86:	4b27      	ldr	r3, [pc, #156]	@ (8004f24 <_dtoa_r+0x5bc>)
 8004e88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004e8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004e8e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004e92:	4454      	add	r4, sl
 8004e94:	2900      	cmp	r1, #0
 8004e96:	d053      	beq.n	8004f40 <_dtoa_r+0x5d8>
 8004e98:	4928      	ldr	r1, [pc, #160]	@ (8004f3c <_dtoa_r+0x5d4>)
 8004e9a:	2000      	movs	r0, #0
 8004e9c:	f7fb fcd6 	bl	800084c <__aeabi_ddiv>
 8004ea0:	4633      	mov	r3, r6
 8004ea2:	462a      	mov	r2, r5
 8004ea4:	f7fb f9f0 	bl	8000288 <__aeabi_dsub>
 8004ea8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004eac:	4656      	mov	r6, sl
 8004eae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004eb2:	f7fb fe51 	bl	8000b58 <__aeabi_d2iz>
 8004eb6:	4605      	mov	r5, r0
 8004eb8:	f7fb fb34 	bl	8000524 <__aeabi_i2d>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ec4:	f7fb f9e0 	bl	8000288 <__aeabi_dsub>
 8004ec8:	3530      	adds	r5, #48	@ 0x30
 8004eca:	4602      	mov	r2, r0
 8004ecc:	460b      	mov	r3, r1
 8004ece:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004ed2:	f806 5b01 	strb.w	r5, [r6], #1
 8004ed6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004eda:	f7fb fdff 	bl	8000adc <__aeabi_dcmplt>
 8004ede:	2800      	cmp	r0, #0
 8004ee0:	d171      	bne.n	8004fc6 <_dtoa_r+0x65e>
 8004ee2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ee6:	4911      	ldr	r1, [pc, #68]	@ (8004f2c <_dtoa_r+0x5c4>)
 8004ee8:	2000      	movs	r0, #0
 8004eea:	f7fb f9cd 	bl	8000288 <__aeabi_dsub>
 8004eee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004ef2:	f7fb fdf3 	bl	8000adc <__aeabi_dcmplt>
 8004ef6:	2800      	cmp	r0, #0
 8004ef8:	f040 8095 	bne.w	8005026 <_dtoa_r+0x6be>
 8004efc:	42a6      	cmp	r6, r4
 8004efe:	f43f af50 	beq.w	8004da2 <_dtoa_r+0x43a>
 8004f02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004f06:	4b0a      	ldr	r3, [pc, #40]	@ (8004f30 <_dtoa_r+0x5c8>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f7fb fb75 	bl	80005f8 <__aeabi_dmul>
 8004f0e:	4b08      	ldr	r3, [pc, #32]	@ (8004f30 <_dtoa_r+0x5c8>)
 8004f10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004f14:	2200      	movs	r2, #0
 8004f16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f1a:	f7fb fb6d 	bl	80005f8 <__aeabi_dmul>
 8004f1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f22:	e7c4      	b.n	8004eae <_dtoa_r+0x546>
 8004f24:	08008110 	.word	0x08008110
 8004f28:	080080e8 	.word	0x080080e8
 8004f2c:	3ff00000 	.word	0x3ff00000
 8004f30:	40240000 	.word	0x40240000
 8004f34:	401c0000 	.word	0x401c0000
 8004f38:	40140000 	.word	0x40140000
 8004f3c:	3fe00000 	.word	0x3fe00000
 8004f40:	4631      	mov	r1, r6
 8004f42:	4628      	mov	r0, r5
 8004f44:	f7fb fb58 	bl	80005f8 <__aeabi_dmul>
 8004f48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004f4c:	9415      	str	r4, [sp, #84]	@ 0x54
 8004f4e:	4656      	mov	r6, sl
 8004f50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f54:	f7fb fe00 	bl	8000b58 <__aeabi_d2iz>
 8004f58:	4605      	mov	r5, r0
 8004f5a:	f7fb fae3 	bl	8000524 <__aeabi_i2d>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	460b      	mov	r3, r1
 8004f62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f66:	f7fb f98f 	bl	8000288 <__aeabi_dsub>
 8004f6a:	3530      	adds	r5, #48	@ 0x30
 8004f6c:	f806 5b01 	strb.w	r5, [r6], #1
 8004f70:	4602      	mov	r2, r0
 8004f72:	460b      	mov	r3, r1
 8004f74:	42a6      	cmp	r6, r4
 8004f76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004f7a:	f04f 0200 	mov.w	r2, #0
 8004f7e:	d124      	bne.n	8004fca <_dtoa_r+0x662>
 8004f80:	4bac      	ldr	r3, [pc, #688]	@ (8005234 <_dtoa_r+0x8cc>)
 8004f82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004f86:	f7fb f981 	bl	800028c <__adddf3>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f92:	f7fb fdc1 	bl	8000b18 <__aeabi_dcmpgt>
 8004f96:	2800      	cmp	r0, #0
 8004f98:	d145      	bne.n	8005026 <_dtoa_r+0x6be>
 8004f9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004f9e:	49a5      	ldr	r1, [pc, #660]	@ (8005234 <_dtoa_r+0x8cc>)
 8004fa0:	2000      	movs	r0, #0
 8004fa2:	f7fb f971 	bl	8000288 <__aeabi_dsub>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	460b      	mov	r3, r1
 8004faa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fae:	f7fb fd95 	bl	8000adc <__aeabi_dcmplt>
 8004fb2:	2800      	cmp	r0, #0
 8004fb4:	f43f aef5 	beq.w	8004da2 <_dtoa_r+0x43a>
 8004fb8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8004fba:	1e73      	subs	r3, r6, #1
 8004fbc:	9315      	str	r3, [sp, #84]	@ 0x54
 8004fbe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004fc2:	2b30      	cmp	r3, #48	@ 0x30
 8004fc4:	d0f8      	beq.n	8004fb8 <_dtoa_r+0x650>
 8004fc6:	9f04      	ldr	r7, [sp, #16]
 8004fc8:	e73e      	b.n	8004e48 <_dtoa_r+0x4e0>
 8004fca:	4b9b      	ldr	r3, [pc, #620]	@ (8005238 <_dtoa_r+0x8d0>)
 8004fcc:	f7fb fb14 	bl	80005f8 <__aeabi_dmul>
 8004fd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fd4:	e7bc      	b.n	8004f50 <_dtoa_r+0x5e8>
 8004fd6:	d10c      	bne.n	8004ff2 <_dtoa_r+0x68a>
 8004fd8:	4b98      	ldr	r3, [pc, #608]	@ (800523c <_dtoa_r+0x8d4>)
 8004fda:	2200      	movs	r2, #0
 8004fdc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004fe0:	f7fb fb0a 	bl	80005f8 <__aeabi_dmul>
 8004fe4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fe8:	f7fb fd8c 	bl	8000b04 <__aeabi_dcmpge>
 8004fec:	2800      	cmp	r0, #0
 8004fee:	f000 8157 	beq.w	80052a0 <_dtoa_r+0x938>
 8004ff2:	2400      	movs	r4, #0
 8004ff4:	4625      	mov	r5, r4
 8004ff6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004ff8:	43db      	mvns	r3, r3
 8004ffa:	9304      	str	r3, [sp, #16]
 8004ffc:	4656      	mov	r6, sl
 8004ffe:	2700      	movs	r7, #0
 8005000:	4621      	mov	r1, r4
 8005002:	4658      	mov	r0, fp
 8005004:	f000 fbb4 	bl	8005770 <_Bfree>
 8005008:	2d00      	cmp	r5, #0
 800500a:	d0dc      	beq.n	8004fc6 <_dtoa_r+0x65e>
 800500c:	b12f      	cbz	r7, 800501a <_dtoa_r+0x6b2>
 800500e:	42af      	cmp	r7, r5
 8005010:	d003      	beq.n	800501a <_dtoa_r+0x6b2>
 8005012:	4639      	mov	r1, r7
 8005014:	4658      	mov	r0, fp
 8005016:	f000 fbab 	bl	8005770 <_Bfree>
 800501a:	4629      	mov	r1, r5
 800501c:	4658      	mov	r0, fp
 800501e:	f000 fba7 	bl	8005770 <_Bfree>
 8005022:	e7d0      	b.n	8004fc6 <_dtoa_r+0x65e>
 8005024:	9704      	str	r7, [sp, #16]
 8005026:	4633      	mov	r3, r6
 8005028:	461e      	mov	r6, r3
 800502a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800502e:	2a39      	cmp	r2, #57	@ 0x39
 8005030:	d107      	bne.n	8005042 <_dtoa_r+0x6da>
 8005032:	459a      	cmp	sl, r3
 8005034:	d1f8      	bne.n	8005028 <_dtoa_r+0x6c0>
 8005036:	9a04      	ldr	r2, [sp, #16]
 8005038:	3201      	adds	r2, #1
 800503a:	9204      	str	r2, [sp, #16]
 800503c:	2230      	movs	r2, #48	@ 0x30
 800503e:	f88a 2000 	strb.w	r2, [sl]
 8005042:	781a      	ldrb	r2, [r3, #0]
 8005044:	3201      	adds	r2, #1
 8005046:	701a      	strb	r2, [r3, #0]
 8005048:	e7bd      	b.n	8004fc6 <_dtoa_r+0x65e>
 800504a:	4b7b      	ldr	r3, [pc, #492]	@ (8005238 <_dtoa_r+0x8d0>)
 800504c:	2200      	movs	r2, #0
 800504e:	f7fb fad3 	bl	80005f8 <__aeabi_dmul>
 8005052:	2200      	movs	r2, #0
 8005054:	2300      	movs	r3, #0
 8005056:	4604      	mov	r4, r0
 8005058:	460d      	mov	r5, r1
 800505a:	f7fb fd35 	bl	8000ac8 <__aeabi_dcmpeq>
 800505e:	2800      	cmp	r0, #0
 8005060:	f43f aebb 	beq.w	8004dda <_dtoa_r+0x472>
 8005064:	e6f0      	b.n	8004e48 <_dtoa_r+0x4e0>
 8005066:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005068:	2a00      	cmp	r2, #0
 800506a:	f000 80db 	beq.w	8005224 <_dtoa_r+0x8bc>
 800506e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005070:	2a01      	cmp	r2, #1
 8005072:	f300 80bf 	bgt.w	80051f4 <_dtoa_r+0x88c>
 8005076:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005078:	2a00      	cmp	r2, #0
 800507a:	f000 80b7 	beq.w	80051ec <_dtoa_r+0x884>
 800507e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005082:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005084:	4646      	mov	r6, r8
 8005086:	9a08      	ldr	r2, [sp, #32]
 8005088:	2101      	movs	r1, #1
 800508a:	441a      	add	r2, r3
 800508c:	4658      	mov	r0, fp
 800508e:	4498      	add	r8, r3
 8005090:	9208      	str	r2, [sp, #32]
 8005092:	f000 fc6b 	bl	800596c <__i2b>
 8005096:	4605      	mov	r5, r0
 8005098:	b15e      	cbz	r6, 80050b2 <_dtoa_r+0x74a>
 800509a:	9b08      	ldr	r3, [sp, #32]
 800509c:	2b00      	cmp	r3, #0
 800509e:	dd08      	ble.n	80050b2 <_dtoa_r+0x74a>
 80050a0:	42b3      	cmp	r3, r6
 80050a2:	9a08      	ldr	r2, [sp, #32]
 80050a4:	bfa8      	it	ge
 80050a6:	4633      	movge	r3, r6
 80050a8:	eba8 0803 	sub.w	r8, r8, r3
 80050ac:	1af6      	subs	r6, r6, r3
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	9308      	str	r3, [sp, #32]
 80050b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80050b4:	b1f3      	cbz	r3, 80050f4 <_dtoa_r+0x78c>
 80050b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f000 80b7 	beq.w	800522c <_dtoa_r+0x8c4>
 80050be:	b18c      	cbz	r4, 80050e4 <_dtoa_r+0x77c>
 80050c0:	4629      	mov	r1, r5
 80050c2:	4622      	mov	r2, r4
 80050c4:	4658      	mov	r0, fp
 80050c6:	f000 fd11 	bl	8005aec <__pow5mult>
 80050ca:	464a      	mov	r2, r9
 80050cc:	4601      	mov	r1, r0
 80050ce:	4605      	mov	r5, r0
 80050d0:	4658      	mov	r0, fp
 80050d2:	f000 fc61 	bl	8005998 <__multiply>
 80050d6:	4649      	mov	r1, r9
 80050d8:	9004      	str	r0, [sp, #16]
 80050da:	4658      	mov	r0, fp
 80050dc:	f000 fb48 	bl	8005770 <_Bfree>
 80050e0:	9b04      	ldr	r3, [sp, #16]
 80050e2:	4699      	mov	r9, r3
 80050e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80050e6:	1b1a      	subs	r2, r3, r4
 80050e8:	d004      	beq.n	80050f4 <_dtoa_r+0x78c>
 80050ea:	4649      	mov	r1, r9
 80050ec:	4658      	mov	r0, fp
 80050ee:	f000 fcfd 	bl	8005aec <__pow5mult>
 80050f2:	4681      	mov	r9, r0
 80050f4:	2101      	movs	r1, #1
 80050f6:	4658      	mov	r0, fp
 80050f8:	f000 fc38 	bl	800596c <__i2b>
 80050fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80050fe:	4604      	mov	r4, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	f000 81cf 	beq.w	80054a4 <_dtoa_r+0xb3c>
 8005106:	461a      	mov	r2, r3
 8005108:	4601      	mov	r1, r0
 800510a:	4658      	mov	r0, fp
 800510c:	f000 fcee 	bl	8005aec <__pow5mult>
 8005110:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005112:	2b01      	cmp	r3, #1
 8005114:	4604      	mov	r4, r0
 8005116:	f300 8095 	bgt.w	8005244 <_dtoa_r+0x8dc>
 800511a:	9b02      	ldr	r3, [sp, #8]
 800511c:	2b00      	cmp	r3, #0
 800511e:	f040 8087 	bne.w	8005230 <_dtoa_r+0x8c8>
 8005122:	9b03      	ldr	r3, [sp, #12]
 8005124:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005128:	2b00      	cmp	r3, #0
 800512a:	f040 8089 	bne.w	8005240 <_dtoa_r+0x8d8>
 800512e:	9b03      	ldr	r3, [sp, #12]
 8005130:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005134:	0d1b      	lsrs	r3, r3, #20
 8005136:	051b      	lsls	r3, r3, #20
 8005138:	b12b      	cbz	r3, 8005146 <_dtoa_r+0x7de>
 800513a:	9b08      	ldr	r3, [sp, #32]
 800513c:	3301      	adds	r3, #1
 800513e:	9308      	str	r3, [sp, #32]
 8005140:	f108 0801 	add.w	r8, r8, #1
 8005144:	2301      	movs	r3, #1
 8005146:	930a      	str	r3, [sp, #40]	@ 0x28
 8005148:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800514a:	2b00      	cmp	r3, #0
 800514c:	f000 81b0 	beq.w	80054b0 <_dtoa_r+0xb48>
 8005150:	6923      	ldr	r3, [r4, #16]
 8005152:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005156:	6918      	ldr	r0, [r3, #16]
 8005158:	f000 fbbc 	bl	80058d4 <__hi0bits>
 800515c:	f1c0 0020 	rsb	r0, r0, #32
 8005160:	9b08      	ldr	r3, [sp, #32]
 8005162:	4418      	add	r0, r3
 8005164:	f010 001f 	ands.w	r0, r0, #31
 8005168:	d077      	beq.n	800525a <_dtoa_r+0x8f2>
 800516a:	f1c0 0320 	rsb	r3, r0, #32
 800516e:	2b04      	cmp	r3, #4
 8005170:	dd6b      	ble.n	800524a <_dtoa_r+0x8e2>
 8005172:	9b08      	ldr	r3, [sp, #32]
 8005174:	f1c0 001c 	rsb	r0, r0, #28
 8005178:	4403      	add	r3, r0
 800517a:	4480      	add	r8, r0
 800517c:	4406      	add	r6, r0
 800517e:	9308      	str	r3, [sp, #32]
 8005180:	f1b8 0f00 	cmp.w	r8, #0
 8005184:	dd05      	ble.n	8005192 <_dtoa_r+0x82a>
 8005186:	4649      	mov	r1, r9
 8005188:	4642      	mov	r2, r8
 800518a:	4658      	mov	r0, fp
 800518c:	f000 fd08 	bl	8005ba0 <__lshift>
 8005190:	4681      	mov	r9, r0
 8005192:	9b08      	ldr	r3, [sp, #32]
 8005194:	2b00      	cmp	r3, #0
 8005196:	dd05      	ble.n	80051a4 <_dtoa_r+0x83c>
 8005198:	4621      	mov	r1, r4
 800519a:	461a      	mov	r2, r3
 800519c:	4658      	mov	r0, fp
 800519e:	f000 fcff 	bl	8005ba0 <__lshift>
 80051a2:	4604      	mov	r4, r0
 80051a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d059      	beq.n	800525e <_dtoa_r+0x8f6>
 80051aa:	4621      	mov	r1, r4
 80051ac:	4648      	mov	r0, r9
 80051ae:	f000 fd63 	bl	8005c78 <__mcmp>
 80051b2:	2800      	cmp	r0, #0
 80051b4:	da53      	bge.n	800525e <_dtoa_r+0x8f6>
 80051b6:	1e7b      	subs	r3, r7, #1
 80051b8:	9304      	str	r3, [sp, #16]
 80051ba:	4649      	mov	r1, r9
 80051bc:	2300      	movs	r3, #0
 80051be:	220a      	movs	r2, #10
 80051c0:	4658      	mov	r0, fp
 80051c2:	f000 faf7 	bl	80057b4 <__multadd>
 80051c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80051c8:	4681      	mov	r9, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f000 8172 	beq.w	80054b4 <_dtoa_r+0xb4c>
 80051d0:	2300      	movs	r3, #0
 80051d2:	4629      	mov	r1, r5
 80051d4:	220a      	movs	r2, #10
 80051d6:	4658      	mov	r0, fp
 80051d8:	f000 faec 	bl	80057b4 <__multadd>
 80051dc:	9b00      	ldr	r3, [sp, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	4605      	mov	r5, r0
 80051e2:	dc67      	bgt.n	80052b4 <_dtoa_r+0x94c>
 80051e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	dc41      	bgt.n	800526e <_dtoa_r+0x906>
 80051ea:	e063      	b.n	80052b4 <_dtoa_r+0x94c>
 80051ec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80051ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80051f2:	e746      	b.n	8005082 <_dtoa_r+0x71a>
 80051f4:	9b07      	ldr	r3, [sp, #28]
 80051f6:	1e5c      	subs	r4, r3, #1
 80051f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051fa:	42a3      	cmp	r3, r4
 80051fc:	bfbf      	itttt	lt
 80051fe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005200:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005202:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005204:	1ae3      	sublt	r3, r4, r3
 8005206:	bfb4      	ite	lt
 8005208:	18d2      	addlt	r2, r2, r3
 800520a:	1b1c      	subge	r4, r3, r4
 800520c:	9b07      	ldr	r3, [sp, #28]
 800520e:	bfbc      	itt	lt
 8005210:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005212:	2400      	movlt	r4, #0
 8005214:	2b00      	cmp	r3, #0
 8005216:	bfb5      	itete	lt
 8005218:	eba8 0603 	sublt.w	r6, r8, r3
 800521c:	9b07      	ldrge	r3, [sp, #28]
 800521e:	2300      	movlt	r3, #0
 8005220:	4646      	movge	r6, r8
 8005222:	e730      	b.n	8005086 <_dtoa_r+0x71e>
 8005224:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005226:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005228:	4646      	mov	r6, r8
 800522a:	e735      	b.n	8005098 <_dtoa_r+0x730>
 800522c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800522e:	e75c      	b.n	80050ea <_dtoa_r+0x782>
 8005230:	2300      	movs	r3, #0
 8005232:	e788      	b.n	8005146 <_dtoa_r+0x7de>
 8005234:	3fe00000 	.word	0x3fe00000
 8005238:	40240000 	.word	0x40240000
 800523c:	40140000 	.word	0x40140000
 8005240:	9b02      	ldr	r3, [sp, #8]
 8005242:	e780      	b.n	8005146 <_dtoa_r+0x7de>
 8005244:	2300      	movs	r3, #0
 8005246:	930a      	str	r3, [sp, #40]	@ 0x28
 8005248:	e782      	b.n	8005150 <_dtoa_r+0x7e8>
 800524a:	d099      	beq.n	8005180 <_dtoa_r+0x818>
 800524c:	9a08      	ldr	r2, [sp, #32]
 800524e:	331c      	adds	r3, #28
 8005250:	441a      	add	r2, r3
 8005252:	4498      	add	r8, r3
 8005254:	441e      	add	r6, r3
 8005256:	9208      	str	r2, [sp, #32]
 8005258:	e792      	b.n	8005180 <_dtoa_r+0x818>
 800525a:	4603      	mov	r3, r0
 800525c:	e7f6      	b.n	800524c <_dtoa_r+0x8e4>
 800525e:	9b07      	ldr	r3, [sp, #28]
 8005260:	9704      	str	r7, [sp, #16]
 8005262:	2b00      	cmp	r3, #0
 8005264:	dc20      	bgt.n	80052a8 <_dtoa_r+0x940>
 8005266:	9300      	str	r3, [sp, #0]
 8005268:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800526a:	2b02      	cmp	r3, #2
 800526c:	dd1e      	ble.n	80052ac <_dtoa_r+0x944>
 800526e:	9b00      	ldr	r3, [sp, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	f47f aec0 	bne.w	8004ff6 <_dtoa_r+0x68e>
 8005276:	4621      	mov	r1, r4
 8005278:	2205      	movs	r2, #5
 800527a:	4658      	mov	r0, fp
 800527c:	f000 fa9a 	bl	80057b4 <__multadd>
 8005280:	4601      	mov	r1, r0
 8005282:	4604      	mov	r4, r0
 8005284:	4648      	mov	r0, r9
 8005286:	f000 fcf7 	bl	8005c78 <__mcmp>
 800528a:	2800      	cmp	r0, #0
 800528c:	f77f aeb3 	ble.w	8004ff6 <_dtoa_r+0x68e>
 8005290:	4656      	mov	r6, sl
 8005292:	2331      	movs	r3, #49	@ 0x31
 8005294:	f806 3b01 	strb.w	r3, [r6], #1
 8005298:	9b04      	ldr	r3, [sp, #16]
 800529a:	3301      	adds	r3, #1
 800529c:	9304      	str	r3, [sp, #16]
 800529e:	e6ae      	b.n	8004ffe <_dtoa_r+0x696>
 80052a0:	9c07      	ldr	r4, [sp, #28]
 80052a2:	9704      	str	r7, [sp, #16]
 80052a4:	4625      	mov	r5, r4
 80052a6:	e7f3      	b.n	8005290 <_dtoa_r+0x928>
 80052a8:	9b07      	ldr	r3, [sp, #28]
 80052aa:	9300      	str	r3, [sp, #0]
 80052ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f000 8104 	beq.w	80054bc <_dtoa_r+0xb54>
 80052b4:	2e00      	cmp	r6, #0
 80052b6:	dd05      	ble.n	80052c4 <_dtoa_r+0x95c>
 80052b8:	4629      	mov	r1, r5
 80052ba:	4632      	mov	r2, r6
 80052bc:	4658      	mov	r0, fp
 80052be:	f000 fc6f 	bl	8005ba0 <__lshift>
 80052c2:	4605      	mov	r5, r0
 80052c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d05a      	beq.n	8005380 <_dtoa_r+0xa18>
 80052ca:	6869      	ldr	r1, [r5, #4]
 80052cc:	4658      	mov	r0, fp
 80052ce:	f000 fa0f 	bl	80056f0 <_Balloc>
 80052d2:	4606      	mov	r6, r0
 80052d4:	b928      	cbnz	r0, 80052e2 <_dtoa_r+0x97a>
 80052d6:	4b84      	ldr	r3, [pc, #528]	@ (80054e8 <_dtoa_r+0xb80>)
 80052d8:	4602      	mov	r2, r0
 80052da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80052de:	f7ff bb5a 	b.w	8004996 <_dtoa_r+0x2e>
 80052e2:	692a      	ldr	r2, [r5, #16]
 80052e4:	3202      	adds	r2, #2
 80052e6:	0092      	lsls	r2, r2, #2
 80052e8:	f105 010c 	add.w	r1, r5, #12
 80052ec:	300c      	adds	r0, #12
 80052ee:	f001 ff87 	bl	8007200 <memcpy>
 80052f2:	2201      	movs	r2, #1
 80052f4:	4631      	mov	r1, r6
 80052f6:	4658      	mov	r0, fp
 80052f8:	f000 fc52 	bl	8005ba0 <__lshift>
 80052fc:	f10a 0301 	add.w	r3, sl, #1
 8005300:	9307      	str	r3, [sp, #28]
 8005302:	9b00      	ldr	r3, [sp, #0]
 8005304:	4453      	add	r3, sl
 8005306:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005308:	9b02      	ldr	r3, [sp, #8]
 800530a:	f003 0301 	and.w	r3, r3, #1
 800530e:	462f      	mov	r7, r5
 8005310:	930a      	str	r3, [sp, #40]	@ 0x28
 8005312:	4605      	mov	r5, r0
 8005314:	9b07      	ldr	r3, [sp, #28]
 8005316:	4621      	mov	r1, r4
 8005318:	3b01      	subs	r3, #1
 800531a:	4648      	mov	r0, r9
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	f7ff fa99 	bl	8004854 <quorem>
 8005322:	4639      	mov	r1, r7
 8005324:	9002      	str	r0, [sp, #8]
 8005326:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800532a:	4648      	mov	r0, r9
 800532c:	f000 fca4 	bl	8005c78 <__mcmp>
 8005330:	462a      	mov	r2, r5
 8005332:	9008      	str	r0, [sp, #32]
 8005334:	4621      	mov	r1, r4
 8005336:	4658      	mov	r0, fp
 8005338:	f000 fcba 	bl	8005cb0 <__mdiff>
 800533c:	68c2      	ldr	r2, [r0, #12]
 800533e:	4606      	mov	r6, r0
 8005340:	bb02      	cbnz	r2, 8005384 <_dtoa_r+0xa1c>
 8005342:	4601      	mov	r1, r0
 8005344:	4648      	mov	r0, r9
 8005346:	f000 fc97 	bl	8005c78 <__mcmp>
 800534a:	4602      	mov	r2, r0
 800534c:	4631      	mov	r1, r6
 800534e:	4658      	mov	r0, fp
 8005350:	920e      	str	r2, [sp, #56]	@ 0x38
 8005352:	f000 fa0d 	bl	8005770 <_Bfree>
 8005356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005358:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800535a:	9e07      	ldr	r6, [sp, #28]
 800535c:	ea43 0102 	orr.w	r1, r3, r2
 8005360:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005362:	4319      	orrs	r1, r3
 8005364:	d110      	bne.n	8005388 <_dtoa_r+0xa20>
 8005366:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800536a:	d029      	beq.n	80053c0 <_dtoa_r+0xa58>
 800536c:	9b08      	ldr	r3, [sp, #32]
 800536e:	2b00      	cmp	r3, #0
 8005370:	dd02      	ble.n	8005378 <_dtoa_r+0xa10>
 8005372:	9b02      	ldr	r3, [sp, #8]
 8005374:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005378:	9b00      	ldr	r3, [sp, #0]
 800537a:	f883 8000 	strb.w	r8, [r3]
 800537e:	e63f      	b.n	8005000 <_dtoa_r+0x698>
 8005380:	4628      	mov	r0, r5
 8005382:	e7bb      	b.n	80052fc <_dtoa_r+0x994>
 8005384:	2201      	movs	r2, #1
 8005386:	e7e1      	b.n	800534c <_dtoa_r+0x9e4>
 8005388:	9b08      	ldr	r3, [sp, #32]
 800538a:	2b00      	cmp	r3, #0
 800538c:	db04      	blt.n	8005398 <_dtoa_r+0xa30>
 800538e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005390:	430b      	orrs	r3, r1
 8005392:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005394:	430b      	orrs	r3, r1
 8005396:	d120      	bne.n	80053da <_dtoa_r+0xa72>
 8005398:	2a00      	cmp	r2, #0
 800539a:	dded      	ble.n	8005378 <_dtoa_r+0xa10>
 800539c:	4649      	mov	r1, r9
 800539e:	2201      	movs	r2, #1
 80053a0:	4658      	mov	r0, fp
 80053a2:	f000 fbfd 	bl	8005ba0 <__lshift>
 80053a6:	4621      	mov	r1, r4
 80053a8:	4681      	mov	r9, r0
 80053aa:	f000 fc65 	bl	8005c78 <__mcmp>
 80053ae:	2800      	cmp	r0, #0
 80053b0:	dc03      	bgt.n	80053ba <_dtoa_r+0xa52>
 80053b2:	d1e1      	bne.n	8005378 <_dtoa_r+0xa10>
 80053b4:	f018 0f01 	tst.w	r8, #1
 80053b8:	d0de      	beq.n	8005378 <_dtoa_r+0xa10>
 80053ba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80053be:	d1d8      	bne.n	8005372 <_dtoa_r+0xa0a>
 80053c0:	9a00      	ldr	r2, [sp, #0]
 80053c2:	2339      	movs	r3, #57	@ 0x39
 80053c4:	7013      	strb	r3, [r2, #0]
 80053c6:	4633      	mov	r3, r6
 80053c8:	461e      	mov	r6, r3
 80053ca:	3b01      	subs	r3, #1
 80053cc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80053d0:	2a39      	cmp	r2, #57	@ 0x39
 80053d2:	d052      	beq.n	800547a <_dtoa_r+0xb12>
 80053d4:	3201      	adds	r2, #1
 80053d6:	701a      	strb	r2, [r3, #0]
 80053d8:	e612      	b.n	8005000 <_dtoa_r+0x698>
 80053da:	2a00      	cmp	r2, #0
 80053dc:	dd07      	ble.n	80053ee <_dtoa_r+0xa86>
 80053de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80053e2:	d0ed      	beq.n	80053c0 <_dtoa_r+0xa58>
 80053e4:	9a00      	ldr	r2, [sp, #0]
 80053e6:	f108 0301 	add.w	r3, r8, #1
 80053ea:	7013      	strb	r3, [r2, #0]
 80053ec:	e608      	b.n	8005000 <_dtoa_r+0x698>
 80053ee:	9b07      	ldr	r3, [sp, #28]
 80053f0:	9a07      	ldr	r2, [sp, #28]
 80053f2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80053f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d028      	beq.n	800544e <_dtoa_r+0xae6>
 80053fc:	4649      	mov	r1, r9
 80053fe:	2300      	movs	r3, #0
 8005400:	220a      	movs	r2, #10
 8005402:	4658      	mov	r0, fp
 8005404:	f000 f9d6 	bl	80057b4 <__multadd>
 8005408:	42af      	cmp	r7, r5
 800540a:	4681      	mov	r9, r0
 800540c:	f04f 0300 	mov.w	r3, #0
 8005410:	f04f 020a 	mov.w	r2, #10
 8005414:	4639      	mov	r1, r7
 8005416:	4658      	mov	r0, fp
 8005418:	d107      	bne.n	800542a <_dtoa_r+0xac2>
 800541a:	f000 f9cb 	bl	80057b4 <__multadd>
 800541e:	4607      	mov	r7, r0
 8005420:	4605      	mov	r5, r0
 8005422:	9b07      	ldr	r3, [sp, #28]
 8005424:	3301      	adds	r3, #1
 8005426:	9307      	str	r3, [sp, #28]
 8005428:	e774      	b.n	8005314 <_dtoa_r+0x9ac>
 800542a:	f000 f9c3 	bl	80057b4 <__multadd>
 800542e:	4629      	mov	r1, r5
 8005430:	4607      	mov	r7, r0
 8005432:	2300      	movs	r3, #0
 8005434:	220a      	movs	r2, #10
 8005436:	4658      	mov	r0, fp
 8005438:	f000 f9bc 	bl	80057b4 <__multadd>
 800543c:	4605      	mov	r5, r0
 800543e:	e7f0      	b.n	8005422 <_dtoa_r+0xaba>
 8005440:	9b00      	ldr	r3, [sp, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	bfcc      	ite	gt
 8005446:	461e      	movgt	r6, r3
 8005448:	2601      	movle	r6, #1
 800544a:	4456      	add	r6, sl
 800544c:	2700      	movs	r7, #0
 800544e:	4649      	mov	r1, r9
 8005450:	2201      	movs	r2, #1
 8005452:	4658      	mov	r0, fp
 8005454:	f000 fba4 	bl	8005ba0 <__lshift>
 8005458:	4621      	mov	r1, r4
 800545a:	4681      	mov	r9, r0
 800545c:	f000 fc0c 	bl	8005c78 <__mcmp>
 8005460:	2800      	cmp	r0, #0
 8005462:	dcb0      	bgt.n	80053c6 <_dtoa_r+0xa5e>
 8005464:	d102      	bne.n	800546c <_dtoa_r+0xb04>
 8005466:	f018 0f01 	tst.w	r8, #1
 800546a:	d1ac      	bne.n	80053c6 <_dtoa_r+0xa5e>
 800546c:	4633      	mov	r3, r6
 800546e:	461e      	mov	r6, r3
 8005470:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005474:	2a30      	cmp	r2, #48	@ 0x30
 8005476:	d0fa      	beq.n	800546e <_dtoa_r+0xb06>
 8005478:	e5c2      	b.n	8005000 <_dtoa_r+0x698>
 800547a:	459a      	cmp	sl, r3
 800547c:	d1a4      	bne.n	80053c8 <_dtoa_r+0xa60>
 800547e:	9b04      	ldr	r3, [sp, #16]
 8005480:	3301      	adds	r3, #1
 8005482:	9304      	str	r3, [sp, #16]
 8005484:	2331      	movs	r3, #49	@ 0x31
 8005486:	f88a 3000 	strb.w	r3, [sl]
 800548a:	e5b9      	b.n	8005000 <_dtoa_r+0x698>
 800548c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800548e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80054ec <_dtoa_r+0xb84>
 8005492:	b11b      	cbz	r3, 800549c <_dtoa_r+0xb34>
 8005494:	f10a 0308 	add.w	r3, sl, #8
 8005498:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800549a:	6013      	str	r3, [r2, #0]
 800549c:	4650      	mov	r0, sl
 800549e:	b019      	add	sp, #100	@ 0x64
 80054a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	f77f ae37 	ble.w	800511a <_dtoa_r+0x7b2>
 80054ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80054ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80054b0:	2001      	movs	r0, #1
 80054b2:	e655      	b.n	8005160 <_dtoa_r+0x7f8>
 80054b4:	9b00      	ldr	r3, [sp, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f77f aed6 	ble.w	8005268 <_dtoa_r+0x900>
 80054bc:	4656      	mov	r6, sl
 80054be:	4621      	mov	r1, r4
 80054c0:	4648      	mov	r0, r9
 80054c2:	f7ff f9c7 	bl	8004854 <quorem>
 80054c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80054ca:	f806 8b01 	strb.w	r8, [r6], #1
 80054ce:	9b00      	ldr	r3, [sp, #0]
 80054d0:	eba6 020a 	sub.w	r2, r6, sl
 80054d4:	4293      	cmp	r3, r2
 80054d6:	ddb3      	ble.n	8005440 <_dtoa_r+0xad8>
 80054d8:	4649      	mov	r1, r9
 80054da:	2300      	movs	r3, #0
 80054dc:	220a      	movs	r2, #10
 80054de:	4658      	mov	r0, fp
 80054e0:	f000 f968 	bl	80057b4 <__multadd>
 80054e4:	4681      	mov	r9, r0
 80054e6:	e7ea      	b.n	80054be <_dtoa_r+0xb56>
 80054e8:	08008071 	.word	0x08008071
 80054ec:	0800800c 	.word	0x0800800c

080054f0 <_free_r>:
 80054f0:	b538      	push	{r3, r4, r5, lr}
 80054f2:	4605      	mov	r5, r0
 80054f4:	2900      	cmp	r1, #0
 80054f6:	d041      	beq.n	800557c <_free_r+0x8c>
 80054f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054fc:	1f0c      	subs	r4, r1, #4
 80054fe:	2b00      	cmp	r3, #0
 8005500:	bfb8      	it	lt
 8005502:	18e4      	addlt	r4, r4, r3
 8005504:	f000 f8e8 	bl	80056d8 <__malloc_lock>
 8005508:	4a1d      	ldr	r2, [pc, #116]	@ (8005580 <_free_r+0x90>)
 800550a:	6813      	ldr	r3, [r2, #0]
 800550c:	b933      	cbnz	r3, 800551c <_free_r+0x2c>
 800550e:	6063      	str	r3, [r4, #4]
 8005510:	6014      	str	r4, [r2, #0]
 8005512:	4628      	mov	r0, r5
 8005514:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005518:	f000 b8e4 	b.w	80056e4 <__malloc_unlock>
 800551c:	42a3      	cmp	r3, r4
 800551e:	d908      	bls.n	8005532 <_free_r+0x42>
 8005520:	6820      	ldr	r0, [r4, #0]
 8005522:	1821      	adds	r1, r4, r0
 8005524:	428b      	cmp	r3, r1
 8005526:	bf01      	itttt	eq
 8005528:	6819      	ldreq	r1, [r3, #0]
 800552a:	685b      	ldreq	r3, [r3, #4]
 800552c:	1809      	addeq	r1, r1, r0
 800552e:	6021      	streq	r1, [r4, #0]
 8005530:	e7ed      	b.n	800550e <_free_r+0x1e>
 8005532:	461a      	mov	r2, r3
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	b10b      	cbz	r3, 800553c <_free_r+0x4c>
 8005538:	42a3      	cmp	r3, r4
 800553a:	d9fa      	bls.n	8005532 <_free_r+0x42>
 800553c:	6811      	ldr	r1, [r2, #0]
 800553e:	1850      	adds	r0, r2, r1
 8005540:	42a0      	cmp	r0, r4
 8005542:	d10b      	bne.n	800555c <_free_r+0x6c>
 8005544:	6820      	ldr	r0, [r4, #0]
 8005546:	4401      	add	r1, r0
 8005548:	1850      	adds	r0, r2, r1
 800554a:	4283      	cmp	r3, r0
 800554c:	6011      	str	r1, [r2, #0]
 800554e:	d1e0      	bne.n	8005512 <_free_r+0x22>
 8005550:	6818      	ldr	r0, [r3, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	6053      	str	r3, [r2, #4]
 8005556:	4408      	add	r0, r1
 8005558:	6010      	str	r0, [r2, #0]
 800555a:	e7da      	b.n	8005512 <_free_r+0x22>
 800555c:	d902      	bls.n	8005564 <_free_r+0x74>
 800555e:	230c      	movs	r3, #12
 8005560:	602b      	str	r3, [r5, #0]
 8005562:	e7d6      	b.n	8005512 <_free_r+0x22>
 8005564:	6820      	ldr	r0, [r4, #0]
 8005566:	1821      	adds	r1, r4, r0
 8005568:	428b      	cmp	r3, r1
 800556a:	bf04      	itt	eq
 800556c:	6819      	ldreq	r1, [r3, #0]
 800556e:	685b      	ldreq	r3, [r3, #4]
 8005570:	6063      	str	r3, [r4, #4]
 8005572:	bf04      	itt	eq
 8005574:	1809      	addeq	r1, r1, r0
 8005576:	6021      	streq	r1, [r4, #0]
 8005578:	6054      	str	r4, [r2, #4]
 800557a:	e7ca      	b.n	8005512 <_free_r+0x22>
 800557c:	bd38      	pop	{r3, r4, r5, pc}
 800557e:	bf00      	nop
 8005580:	200003f0 	.word	0x200003f0

08005584 <malloc>:
 8005584:	4b02      	ldr	r3, [pc, #8]	@ (8005590 <malloc+0xc>)
 8005586:	4601      	mov	r1, r0
 8005588:	6818      	ldr	r0, [r3, #0]
 800558a:	f000 b825 	b.w	80055d8 <_malloc_r>
 800558e:	bf00      	nop
 8005590:	20000018 	.word	0x20000018

08005594 <sbrk_aligned>:
 8005594:	b570      	push	{r4, r5, r6, lr}
 8005596:	4e0f      	ldr	r6, [pc, #60]	@ (80055d4 <sbrk_aligned+0x40>)
 8005598:	460c      	mov	r4, r1
 800559a:	6831      	ldr	r1, [r6, #0]
 800559c:	4605      	mov	r5, r0
 800559e:	b911      	cbnz	r1, 80055a6 <sbrk_aligned+0x12>
 80055a0:	f001 fe1e 	bl	80071e0 <_sbrk_r>
 80055a4:	6030      	str	r0, [r6, #0]
 80055a6:	4621      	mov	r1, r4
 80055a8:	4628      	mov	r0, r5
 80055aa:	f001 fe19 	bl	80071e0 <_sbrk_r>
 80055ae:	1c43      	adds	r3, r0, #1
 80055b0:	d103      	bne.n	80055ba <sbrk_aligned+0x26>
 80055b2:	f04f 34ff 	mov.w	r4, #4294967295
 80055b6:	4620      	mov	r0, r4
 80055b8:	bd70      	pop	{r4, r5, r6, pc}
 80055ba:	1cc4      	adds	r4, r0, #3
 80055bc:	f024 0403 	bic.w	r4, r4, #3
 80055c0:	42a0      	cmp	r0, r4
 80055c2:	d0f8      	beq.n	80055b6 <sbrk_aligned+0x22>
 80055c4:	1a21      	subs	r1, r4, r0
 80055c6:	4628      	mov	r0, r5
 80055c8:	f001 fe0a 	bl	80071e0 <_sbrk_r>
 80055cc:	3001      	adds	r0, #1
 80055ce:	d1f2      	bne.n	80055b6 <sbrk_aligned+0x22>
 80055d0:	e7ef      	b.n	80055b2 <sbrk_aligned+0x1e>
 80055d2:	bf00      	nop
 80055d4:	200003ec 	.word	0x200003ec

080055d8 <_malloc_r>:
 80055d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055dc:	1ccd      	adds	r5, r1, #3
 80055de:	f025 0503 	bic.w	r5, r5, #3
 80055e2:	3508      	adds	r5, #8
 80055e4:	2d0c      	cmp	r5, #12
 80055e6:	bf38      	it	cc
 80055e8:	250c      	movcc	r5, #12
 80055ea:	2d00      	cmp	r5, #0
 80055ec:	4606      	mov	r6, r0
 80055ee:	db01      	blt.n	80055f4 <_malloc_r+0x1c>
 80055f0:	42a9      	cmp	r1, r5
 80055f2:	d904      	bls.n	80055fe <_malloc_r+0x26>
 80055f4:	230c      	movs	r3, #12
 80055f6:	6033      	str	r3, [r6, #0]
 80055f8:	2000      	movs	r0, #0
 80055fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80056d4 <_malloc_r+0xfc>
 8005602:	f000 f869 	bl	80056d8 <__malloc_lock>
 8005606:	f8d8 3000 	ldr.w	r3, [r8]
 800560a:	461c      	mov	r4, r3
 800560c:	bb44      	cbnz	r4, 8005660 <_malloc_r+0x88>
 800560e:	4629      	mov	r1, r5
 8005610:	4630      	mov	r0, r6
 8005612:	f7ff ffbf 	bl	8005594 <sbrk_aligned>
 8005616:	1c43      	adds	r3, r0, #1
 8005618:	4604      	mov	r4, r0
 800561a:	d158      	bne.n	80056ce <_malloc_r+0xf6>
 800561c:	f8d8 4000 	ldr.w	r4, [r8]
 8005620:	4627      	mov	r7, r4
 8005622:	2f00      	cmp	r7, #0
 8005624:	d143      	bne.n	80056ae <_malloc_r+0xd6>
 8005626:	2c00      	cmp	r4, #0
 8005628:	d04b      	beq.n	80056c2 <_malloc_r+0xea>
 800562a:	6823      	ldr	r3, [r4, #0]
 800562c:	4639      	mov	r1, r7
 800562e:	4630      	mov	r0, r6
 8005630:	eb04 0903 	add.w	r9, r4, r3
 8005634:	f001 fdd4 	bl	80071e0 <_sbrk_r>
 8005638:	4581      	cmp	r9, r0
 800563a:	d142      	bne.n	80056c2 <_malloc_r+0xea>
 800563c:	6821      	ldr	r1, [r4, #0]
 800563e:	1a6d      	subs	r5, r5, r1
 8005640:	4629      	mov	r1, r5
 8005642:	4630      	mov	r0, r6
 8005644:	f7ff ffa6 	bl	8005594 <sbrk_aligned>
 8005648:	3001      	adds	r0, #1
 800564a:	d03a      	beq.n	80056c2 <_malloc_r+0xea>
 800564c:	6823      	ldr	r3, [r4, #0]
 800564e:	442b      	add	r3, r5
 8005650:	6023      	str	r3, [r4, #0]
 8005652:	f8d8 3000 	ldr.w	r3, [r8]
 8005656:	685a      	ldr	r2, [r3, #4]
 8005658:	bb62      	cbnz	r2, 80056b4 <_malloc_r+0xdc>
 800565a:	f8c8 7000 	str.w	r7, [r8]
 800565e:	e00f      	b.n	8005680 <_malloc_r+0xa8>
 8005660:	6822      	ldr	r2, [r4, #0]
 8005662:	1b52      	subs	r2, r2, r5
 8005664:	d420      	bmi.n	80056a8 <_malloc_r+0xd0>
 8005666:	2a0b      	cmp	r2, #11
 8005668:	d917      	bls.n	800569a <_malloc_r+0xc2>
 800566a:	1961      	adds	r1, r4, r5
 800566c:	42a3      	cmp	r3, r4
 800566e:	6025      	str	r5, [r4, #0]
 8005670:	bf18      	it	ne
 8005672:	6059      	strne	r1, [r3, #4]
 8005674:	6863      	ldr	r3, [r4, #4]
 8005676:	bf08      	it	eq
 8005678:	f8c8 1000 	streq.w	r1, [r8]
 800567c:	5162      	str	r2, [r4, r5]
 800567e:	604b      	str	r3, [r1, #4]
 8005680:	4630      	mov	r0, r6
 8005682:	f000 f82f 	bl	80056e4 <__malloc_unlock>
 8005686:	f104 000b 	add.w	r0, r4, #11
 800568a:	1d23      	adds	r3, r4, #4
 800568c:	f020 0007 	bic.w	r0, r0, #7
 8005690:	1ac2      	subs	r2, r0, r3
 8005692:	bf1c      	itt	ne
 8005694:	1a1b      	subne	r3, r3, r0
 8005696:	50a3      	strne	r3, [r4, r2]
 8005698:	e7af      	b.n	80055fa <_malloc_r+0x22>
 800569a:	6862      	ldr	r2, [r4, #4]
 800569c:	42a3      	cmp	r3, r4
 800569e:	bf0c      	ite	eq
 80056a0:	f8c8 2000 	streq.w	r2, [r8]
 80056a4:	605a      	strne	r2, [r3, #4]
 80056a6:	e7eb      	b.n	8005680 <_malloc_r+0xa8>
 80056a8:	4623      	mov	r3, r4
 80056aa:	6864      	ldr	r4, [r4, #4]
 80056ac:	e7ae      	b.n	800560c <_malloc_r+0x34>
 80056ae:	463c      	mov	r4, r7
 80056b0:	687f      	ldr	r7, [r7, #4]
 80056b2:	e7b6      	b.n	8005622 <_malloc_r+0x4a>
 80056b4:	461a      	mov	r2, r3
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	42a3      	cmp	r3, r4
 80056ba:	d1fb      	bne.n	80056b4 <_malloc_r+0xdc>
 80056bc:	2300      	movs	r3, #0
 80056be:	6053      	str	r3, [r2, #4]
 80056c0:	e7de      	b.n	8005680 <_malloc_r+0xa8>
 80056c2:	230c      	movs	r3, #12
 80056c4:	6033      	str	r3, [r6, #0]
 80056c6:	4630      	mov	r0, r6
 80056c8:	f000 f80c 	bl	80056e4 <__malloc_unlock>
 80056cc:	e794      	b.n	80055f8 <_malloc_r+0x20>
 80056ce:	6005      	str	r5, [r0, #0]
 80056d0:	e7d6      	b.n	8005680 <_malloc_r+0xa8>
 80056d2:	bf00      	nop
 80056d4:	200003f0 	.word	0x200003f0

080056d8 <__malloc_lock>:
 80056d8:	4801      	ldr	r0, [pc, #4]	@ (80056e0 <__malloc_lock+0x8>)
 80056da:	f7ff b894 	b.w	8004806 <__retarget_lock_acquire_recursive>
 80056de:	bf00      	nop
 80056e0:	200003e8 	.word	0x200003e8

080056e4 <__malloc_unlock>:
 80056e4:	4801      	ldr	r0, [pc, #4]	@ (80056ec <__malloc_unlock+0x8>)
 80056e6:	f7ff b88f 	b.w	8004808 <__retarget_lock_release_recursive>
 80056ea:	bf00      	nop
 80056ec:	200003e8 	.word	0x200003e8

080056f0 <_Balloc>:
 80056f0:	b570      	push	{r4, r5, r6, lr}
 80056f2:	69c6      	ldr	r6, [r0, #28]
 80056f4:	4604      	mov	r4, r0
 80056f6:	460d      	mov	r5, r1
 80056f8:	b976      	cbnz	r6, 8005718 <_Balloc+0x28>
 80056fa:	2010      	movs	r0, #16
 80056fc:	f7ff ff42 	bl	8005584 <malloc>
 8005700:	4602      	mov	r2, r0
 8005702:	61e0      	str	r0, [r4, #28]
 8005704:	b920      	cbnz	r0, 8005710 <_Balloc+0x20>
 8005706:	4b18      	ldr	r3, [pc, #96]	@ (8005768 <_Balloc+0x78>)
 8005708:	4818      	ldr	r0, [pc, #96]	@ (800576c <_Balloc+0x7c>)
 800570a:	216b      	movs	r1, #107	@ 0x6b
 800570c:	f7ff f884 	bl	8004818 <__assert_func>
 8005710:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005714:	6006      	str	r6, [r0, #0]
 8005716:	60c6      	str	r6, [r0, #12]
 8005718:	69e6      	ldr	r6, [r4, #28]
 800571a:	68f3      	ldr	r3, [r6, #12]
 800571c:	b183      	cbz	r3, 8005740 <_Balloc+0x50>
 800571e:	69e3      	ldr	r3, [r4, #28]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005726:	b9b8      	cbnz	r0, 8005758 <_Balloc+0x68>
 8005728:	2101      	movs	r1, #1
 800572a:	fa01 f605 	lsl.w	r6, r1, r5
 800572e:	1d72      	adds	r2, r6, #5
 8005730:	0092      	lsls	r2, r2, #2
 8005732:	4620      	mov	r0, r4
 8005734:	f001 fd83 	bl	800723e <_calloc_r>
 8005738:	b160      	cbz	r0, 8005754 <_Balloc+0x64>
 800573a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800573e:	e00e      	b.n	800575e <_Balloc+0x6e>
 8005740:	2221      	movs	r2, #33	@ 0x21
 8005742:	2104      	movs	r1, #4
 8005744:	4620      	mov	r0, r4
 8005746:	f001 fd7a 	bl	800723e <_calloc_r>
 800574a:	69e3      	ldr	r3, [r4, #28]
 800574c:	60f0      	str	r0, [r6, #12]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1e4      	bne.n	800571e <_Balloc+0x2e>
 8005754:	2000      	movs	r0, #0
 8005756:	bd70      	pop	{r4, r5, r6, pc}
 8005758:	6802      	ldr	r2, [r0, #0]
 800575a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800575e:	2300      	movs	r3, #0
 8005760:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005764:	e7f7      	b.n	8005756 <_Balloc+0x66>
 8005766:	bf00      	nop
 8005768:	08007f28 	.word	0x08007f28
 800576c:	08008082 	.word	0x08008082

08005770 <_Bfree>:
 8005770:	b570      	push	{r4, r5, r6, lr}
 8005772:	69c6      	ldr	r6, [r0, #28]
 8005774:	4605      	mov	r5, r0
 8005776:	460c      	mov	r4, r1
 8005778:	b976      	cbnz	r6, 8005798 <_Bfree+0x28>
 800577a:	2010      	movs	r0, #16
 800577c:	f7ff ff02 	bl	8005584 <malloc>
 8005780:	4602      	mov	r2, r0
 8005782:	61e8      	str	r0, [r5, #28]
 8005784:	b920      	cbnz	r0, 8005790 <_Bfree+0x20>
 8005786:	4b09      	ldr	r3, [pc, #36]	@ (80057ac <_Bfree+0x3c>)
 8005788:	4809      	ldr	r0, [pc, #36]	@ (80057b0 <_Bfree+0x40>)
 800578a:	218f      	movs	r1, #143	@ 0x8f
 800578c:	f7ff f844 	bl	8004818 <__assert_func>
 8005790:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005794:	6006      	str	r6, [r0, #0]
 8005796:	60c6      	str	r6, [r0, #12]
 8005798:	b13c      	cbz	r4, 80057aa <_Bfree+0x3a>
 800579a:	69eb      	ldr	r3, [r5, #28]
 800579c:	6862      	ldr	r2, [r4, #4]
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80057a4:	6021      	str	r1, [r4, #0]
 80057a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80057aa:	bd70      	pop	{r4, r5, r6, pc}
 80057ac:	08007f28 	.word	0x08007f28
 80057b0:	08008082 	.word	0x08008082

080057b4 <__multadd>:
 80057b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057b8:	690d      	ldr	r5, [r1, #16]
 80057ba:	4607      	mov	r7, r0
 80057bc:	460c      	mov	r4, r1
 80057be:	461e      	mov	r6, r3
 80057c0:	f101 0c14 	add.w	ip, r1, #20
 80057c4:	2000      	movs	r0, #0
 80057c6:	f8dc 3000 	ldr.w	r3, [ip]
 80057ca:	b299      	uxth	r1, r3
 80057cc:	fb02 6101 	mla	r1, r2, r1, r6
 80057d0:	0c1e      	lsrs	r6, r3, #16
 80057d2:	0c0b      	lsrs	r3, r1, #16
 80057d4:	fb02 3306 	mla	r3, r2, r6, r3
 80057d8:	b289      	uxth	r1, r1
 80057da:	3001      	adds	r0, #1
 80057dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80057e0:	4285      	cmp	r5, r0
 80057e2:	f84c 1b04 	str.w	r1, [ip], #4
 80057e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80057ea:	dcec      	bgt.n	80057c6 <__multadd+0x12>
 80057ec:	b30e      	cbz	r6, 8005832 <__multadd+0x7e>
 80057ee:	68a3      	ldr	r3, [r4, #8]
 80057f0:	42ab      	cmp	r3, r5
 80057f2:	dc19      	bgt.n	8005828 <__multadd+0x74>
 80057f4:	6861      	ldr	r1, [r4, #4]
 80057f6:	4638      	mov	r0, r7
 80057f8:	3101      	adds	r1, #1
 80057fa:	f7ff ff79 	bl	80056f0 <_Balloc>
 80057fe:	4680      	mov	r8, r0
 8005800:	b928      	cbnz	r0, 800580e <__multadd+0x5a>
 8005802:	4602      	mov	r2, r0
 8005804:	4b0c      	ldr	r3, [pc, #48]	@ (8005838 <__multadd+0x84>)
 8005806:	480d      	ldr	r0, [pc, #52]	@ (800583c <__multadd+0x88>)
 8005808:	21ba      	movs	r1, #186	@ 0xba
 800580a:	f7ff f805 	bl	8004818 <__assert_func>
 800580e:	6922      	ldr	r2, [r4, #16]
 8005810:	3202      	adds	r2, #2
 8005812:	f104 010c 	add.w	r1, r4, #12
 8005816:	0092      	lsls	r2, r2, #2
 8005818:	300c      	adds	r0, #12
 800581a:	f001 fcf1 	bl	8007200 <memcpy>
 800581e:	4621      	mov	r1, r4
 8005820:	4638      	mov	r0, r7
 8005822:	f7ff ffa5 	bl	8005770 <_Bfree>
 8005826:	4644      	mov	r4, r8
 8005828:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800582c:	3501      	adds	r5, #1
 800582e:	615e      	str	r6, [r3, #20]
 8005830:	6125      	str	r5, [r4, #16]
 8005832:	4620      	mov	r0, r4
 8005834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005838:	08008071 	.word	0x08008071
 800583c:	08008082 	.word	0x08008082

08005840 <__s2b>:
 8005840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005844:	460c      	mov	r4, r1
 8005846:	4615      	mov	r5, r2
 8005848:	461f      	mov	r7, r3
 800584a:	2209      	movs	r2, #9
 800584c:	3308      	adds	r3, #8
 800584e:	4606      	mov	r6, r0
 8005850:	fb93 f3f2 	sdiv	r3, r3, r2
 8005854:	2100      	movs	r1, #0
 8005856:	2201      	movs	r2, #1
 8005858:	429a      	cmp	r2, r3
 800585a:	db09      	blt.n	8005870 <__s2b+0x30>
 800585c:	4630      	mov	r0, r6
 800585e:	f7ff ff47 	bl	80056f0 <_Balloc>
 8005862:	b940      	cbnz	r0, 8005876 <__s2b+0x36>
 8005864:	4602      	mov	r2, r0
 8005866:	4b19      	ldr	r3, [pc, #100]	@ (80058cc <__s2b+0x8c>)
 8005868:	4819      	ldr	r0, [pc, #100]	@ (80058d0 <__s2b+0x90>)
 800586a:	21d3      	movs	r1, #211	@ 0xd3
 800586c:	f7fe ffd4 	bl	8004818 <__assert_func>
 8005870:	0052      	lsls	r2, r2, #1
 8005872:	3101      	adds	r1, #1
 8005874:	e7f0      	b.n	8005858 <__s2b+0x18>
 8005876:	9b08      	ldr	r3, [sp, #32]
 8005878:	6143      	str	r3, [r0, #20]
 800587a:	2d09      	cmp	r5, #9
 800587c:	f04f 0301 	mov.w	r3, #1
 8005880:	6103      	str	r3, [r0, #16]
 8005882:	dd16      	ble.n	80058b2 <__s2b+0x72>
 8005884:	f104 0909 	add.w	r9, r4, #9
 8005888:	46c8      	mov	r8, r9
 800588a:	442c      	add	r4, r5
 800588c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005890:	4601      	mov	r1, r0
 8005892:	3b30      	subs	r3, #48	@ 0x30
 8005894:	220a      	movs	r2, #10
 8005896:	4630      	mov	r0, r6
 8005898:	f7ff ff8c 	bl	80057b4 <__multadd>
 800589c:	45a0      	cmp	r8, r4
 800589e:	d1f5      	bne.n	800588c <__s2b+0x4c>
 80058a0:	f1a5 0408 	sub.w	r4, r5, #8
 80058a4:	444c      	add	r4, r9
 80058a6:	1b2d      	subs	r5, r5, r4
 80058a8:	1963      	adds	r3, r4, r5
 80058aa:	42bb      	cmp	r3, r7
 80058ac:	db04      	blt.n	80058b8 <__s2b+0x78>
 80058ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058b2:	340a      	adds	r4, #10
 80058b4:	2509      	movs	r5, #9
 80058b6:	e7f6      	b.n	80058a6 <__s2b+0x66>
 80058b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80058bc:	4601      	mov	r1, r0
 80058be:	3b30      	subs	r3, #48	@ 0x30
 80058c0:	220a      	movs	r2, #10
 80058c2:	4630      	mov	r0, r6
 80058c4:	f7ff ff76 	bl	80057b4 <__multadd>
 80058c8:	e7ee      	b.n	80058a8 <__s2b+0x68>
 80058ca:	bf00      	nop
 80058cc:	08008071 	.word	0x08008071
 80058d0:	08008082 	.word	0x08008082

080058d4 <__hi0bits>:
 80058d4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80058d8:	4603      	mov	r3, r0
 80058da:	bf36      	itet	cc
 80058dc:	0403      	lslcc	r3, r0, #16
 80058de:	2000      	movcs	r0, #0
 80058e0:	2010      	movcc	r0, #16
 80058e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80058e6:	bf3c      	itt	cc
 80058e8:	021b      	lslcc	r3, r3, #8
 80058ea:	3008      	addcc	r0, #8
 80058ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80058f0:	bf3c      	itt	cc
 80058f2:	011b      	lslcc	r3, r3, #4
 80058f4:	3004      	addcc	r0, #4
 80058f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058fa:	bf3c      	itt	cc
 80058fc:	009b      	lslcc	r3, r3, #2
 80058fe:	3002      	addcc	r0, #2
 8005900:	2b00      	cmp	r3, #0
 8005902:	db05      	blt.n	8005910 <__hi0bits+0x3c>
 8005904:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005908:	f100 0001 	add.w	r0, r0, #1
 800590c:	bf08      	it	eq
 800590e:	2020      	moveq	r0, #32
 8005910:	4770      	bx	lr

08005912 <__lo0bits>:
 8005912:	6803      	ldr	r3, [r0, #0]
 8005914:	4602      	mov	r2, r0
 8005916:	f013 0007 	ands.w	r0, r3, #7
 800591a:	d00b      	beq.n	8005934 <__lo0bits+0x22>
 800591c:	07d9      	lsls	r1, r3, #31
 800591e:	d421      	bmi.n	8005964 <__lo0bits+0x52>
 8005920:	0798      	lsls	r0, r3, #30
 8005922:	bf49      	itett	mi
 8005924:	085b      	lsrmi	r3, r3, #1
 8005926:	089b      	lsrpl	r3, r3, #2
 8005928:	2001      	movmi	r0, #1
 800592a:	6013      	strmi	r3, [r2, #0]
 800592c:	bf5c      	itt	pl
 800592e:	6013      	strpl	r3, [r2, #0]
 8005930:	2002      	movpl	r0, #2
 8005932:	4770      	bx	lr
 8005934:	b299      	uxth	r1, r3
 8005936:	b909      	cbnz	r1, 800593c <__lo0bits+0x2a>
 8005938:	0c1b      	lsrs	r3, r3, #16
 800593a:	2010      	movs	r0, #16
 800593c:	b2d9      	uxtb	r1, r3
 800593e:	b909      	cbnz	r1, 8005944 <__lo0bits+0x32>
 8005940:	3008      	adds	r0, #8
 8005942:	0a1b      	lsrs	r3, r3, #8
 8005944:	0719      	lsls	r1, r3, #28
 8005946:	bf04      	itt	eq
 8005948:	091b      	lsreq	r3, r3, #4
 800594a:	3004      	addeq	r0, #4
 800594c:	0799      	lsls	r1, r3, #30
 800594e:	bf04      	itt	eq
 8005950:	089b      	lsreq	r3, r3, #2
 8005952:	3002      	addeq	r0, #2
 8005954:	07d9      	lsls	r1, r3, #31
 8005956:	d403      	bmi.n	8005960 <__lo0bits+0x4e>
 8005958:	085b      	lsrs	r3, r3, #1
 800595a:	f100 0001 	add.w	r0, r0, #1
 800595e:	d003      	beq.n	8005968 <__lo0bits+0x56>
 8005960:	6013      	str	r3, [r2, #0]
 8005962:	4770      	bx	lr
 8005964:	2000      	movs	r0, #0
 8005966:	4770      	bx	lr
 8005968:	2020      	movs	r0, #32
 800596a:	4770      	bx	lr

0800596c <__i2b>:
 800596c:	b510      	push	{r4, lr}
 800596e:	460c      	mov	r4, r1
 8005970:	2101      	movs	r1, #1
 8005972:	f7ff febd 	bl	80056f0 <_Balloc>
 8005976:	4602      	mov	r2, r0
 8005978:	b928      	cbnz	r0, 8005986 <__i2b+0x1a>
 800597a:	4b05      	ldr	r3, [pc, #20]	@ (8005990 <__i2b+0x24>)
 800597c:	4805      	ldr	r0, [pc, #20]	@ (8005994 <__i2b+0x28>)
 800597e:	f240 1145 	movw	r1, #325	@ 0x145
 8005982:	f7fe ff49 	bl	8004818 <__assert_func>
 8005986:	2301      	movs	r3, #1
 8005988:	6144      	str	r4, [r0, #20]
 800598a:	6103      	str	r3, [r0, #16]
 800598c:	bd10      	pop	{r4, pc}
 800598e:	bf00      	nop
 8005990:	08008071 	.word	0x08008071
 8005994:	08008082 	.word	0x08008082

08005998 <__multiply>:
 8005998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800599c:	4614      	mov	r4, r2
 800599e:	690a      	ldr	r2, [r1, #16]
 80059a0:	6923      	ldr	r3, [r4, #16]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	bfa8      	it	ge
 80059a6:	4623      	movge	r3, r4
 80059a8:	460f      	mov	r7, r1
 80059aa:	bfa4      	itt	ge
 80059ac:	460c      	movge	r4, r1
 80059ae:	461f      	movge	r7, r3
 80059b0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80059b4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80059b8:	68a3      	ldr	r3, [r4, #8]
 80059ba:	6861      	ldr	r1, [r4, #4]
 80059bc:	eb0a 0609 	add.w	r6, sl, r9
 80059c0:	42b3      	cmp	r3, r6
 80059c2:	b085      	sub	sp, #20
 80059c4:	bfb8      	it	lt
 80059c6:	3101      	addlt	r1, #1
 80059c8:	f7ff fe92 	bl	80056f0 <_Balloc>
 80059cc:	b930      	cbnz	r0, 80059dc <__multiply+0x44>
 80059ce:	4602      	mov	r2, r0
 80059d0:	4b44      	ldr	r3, [pc, #272]	@ (8005ae4 <__multiply+0x14c>)
 80059d2:	4845      	ldr	r0, [pc, #276]	@ (8005ae8 <__multiply+0x150>)
 80059d4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80059d8:	f7fe ff1e 	bl	8004818 <__assert_func>
 80059dc:	f100 0514 	add.w	r5, r0, #20
 80059e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80059e4:	462b      	mov	r3, r5
 80059e6:	2200      	movs	r2, #0
 80059e8:	4543      	cmp	r3, r8
 80059ea:	d321      	bcc.n	8005a30 <__multiply+0x98>
 80059ec:	f107 0114 	add.w	r1, r7, #20
 80059f0:	f104 0214 	add.w	r2, r4, #20
 80059f4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80059f8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80059fc:	9302      	str	r3, [sp, #8]
 80059fe:	1b13      	subs	r3, r2, r4
 8005a00:	3b15      	subs	r3, #21
 8005a02:	f023 0303 	bic.w	r3, r3, #3
 8005a06:	3304      	adds	r3, #4
 8005a08:	f104 0715 	add.w	r7, r4, #21
 8005a0c:	42ba      	cmp	r2, r7
 8005a0e:	bf38      	it	cc
 8005a10:	2304      	movcc	r3, #4
 8005a12:	9301      	str	r3, [sp, #4]
 8005a14:	9b02      	ldr	r3, [sp, #8]
 8005a16:	9103      	str	r1, [sp, #12]
 8005a18:	428b      	cmp	r3, r1
 8005a1a:	d80c      	bhi.n	8005a36 <__multiply+0x9e>
 8005a1c:	2e00      	cmp	r6, #0
 8005a1e:	dd03      	ble.n	8005a28 <__multiply+0x90>
 8005a20:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d05b      	beq.n	8005ae0 <__multiply+0x148>
 8005a28:	6106      	str	r6, [r0, #16]
 8005a2a:	b005      	add	sp, #20
 8005a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a30:	f843 2b04 	str.w	r2, [r3], #4
 8005a34:	e7d8      	b.n	80059e8 <__multiply+0x50>
 8005a36:	f8b1 a000 	ldrh.w	sl, [r1]
 8005a3a:	f1ba 0f00 	cmp.w	sl, #0
 8005a3e:	d024      	beq.n	8005a8a <__multiply+0xf2>
 8005a40:	f104 0e14 	add.w	lr, r4, #20
 8005a44:	46a9      	mov	r9, r5
 8005a46:	f04f 0c00 	mov.w	ip, #0
 8005a4a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005a4e:	f8d9 3000 	ldr.w	r3, [r9]
 8005a52:	fa1f fb87 	uxth.w	fp, r7
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	fb0a 330b 	mla	r3, sl, fp, r3
 8005a5c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8005a60:	f8d9 7000 	ldr.w	r7, [r9]
 8005a64:	4463      	add	r3, ip
 8005a66:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005a6a:	fb0a c70b 	mla	r7, sl, fp, ip
 8005a6e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005a78:	4572      	cmp	r2, lr
 8005a7a:	f849 3b04 	str.w	r3, [r9], #4
 8005a7e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005a82:	d8e2      	bhi.n	8005a4a <__multiply+0xb2>
 8005a84:	9b01      	ldr	r3, [sp, #4]
 8005a86:	f845 c003 	str.w	ip, [r5, r3]
 8005a8a:	9b03      	ldr	r3, [sp, #12]
 8005a8c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005a90:	3104      	adds	r1, #4
 8005a92:	f1b9 0f00 	cmp.w	r9, #0
 8005a96:	d021      	beq.n	8005adc <__multiply+0x144>
 8005a98:	682b      	ldr	r3, [r5, #0]
 8005a9a:	f104 0c14 	add.w	ip, r4, #20
 8005a9e:	46ae      	mov	lr, r5
 8005aa0:	f04f 0a00 	mov.w	sl, #0
 8005aa4:	f8bc b000 	ldrh.w	fp, [ip]
 8005aa8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005aac:	fb09 770b 	mla	r7, r9, fp, r7
 8005ab0:	4457      	add	r7, sl
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005ab8:	f84e 3b04 	str.w	r3, [lr], #4
 8005abc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005ac0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005ac4:	f8be 3000 	ldrh.w	r3, [lr]
 8005ac8:	fb09 330a 	mla	r3, r9, sl, r3
 8005acc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005ad0:	4562      	cmp	r2, ip
 8005ad2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005ad6:	d8e5      	bhi.n	8005aa4 <__multiply+0x10c>
 8005ad8:	9f01      	ldr	r7, [sp, #4]
 8005ada:	51eb      	str	r3, [r5, r7]
 8005adc:	3504      	adds	r5, #4
 8005ade:	e799      	b.n	8005a14 <__multiply+0x7c>
 8005ae0:	3e01      	subs	r6, #1
 8005ae2:	e79b      	b.n	8005a1c <__multiply+0x84>
 8005ae4:	08008071 	.word	0x08008071
 8005ae8:	08008082 	.word	0x08008082

08005aec <__pow5mult>:
 8005aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005af0:	4615      	mov	r5, r2
 8005af2:	f012 0203 	ands.w	r2, r2, #3
 8005af6:	4607      	mov	r7, r0
 8005af8:	460e      	mov	r6, r1
 8005afa:	d007      	beq.n	8005b0c <__pow5mult+0x20>
 8005afc:	4c25      	ldr	r4, [pc, #148]	@ (8005b94 <__pow5mult+0xa8>)
 8005afe:	3a01      	subs	r2, #1
 8005b00:	2300      	movs	r3, #0
 8005b02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005b06:	f7ff fe55 	bl	80057b4 <__multadd>
 8005b0a:	4606      	mov	r6, r0
 8005b0c:	10ad      	asrs	r5, r5, #2
 8005b0e:	d03d      	beq.n	8005b8c <__pow5mult+0xa0>
 8005b10:	69fc      	ldr	r4, [r7, #28]
 8005b12:	b97c      	cbnz	r4, 8005b34 <__pow5mult+0x48>
 8005b14:	2010      	movs	r0, #16
 8005b16:	f7ff fd35 	bl	8005584 <malloc>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	61f8      	str	r0, [r7, #28]
 8005b1e:	b928      	cbnz	r0, 8005b2c <__pow5mult+0x40>
 8005b20:	4b1d      	ldr	r3, [pc, #116]	@ (8005b98 <__pow5mult+0xac>)
 8005b22:	481e      	ldr	r0, [pc, #120]	@ (8005b9c <__pow5mult+0xb0>)
 8005b24:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005b28:	f7fe fe76 	bl	8004818 <__assert_func>
 8005b2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005b30:	6004      	str	r4, [r0, #0]
 8005b32:	60c4      	str	r4, [r0, #12]
 8005b34:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005b38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005b3c:	b94c      	cbnz	r4, 8005b52 <__pow5mult+0x66>
 8005b3e:	f240 2171 	movw	r1, #625	@ 0x271
 8005b42:	4638      	mov	r0, r7
 8005b44:	f7ff ff12 	bl	800596c <__i2b>
 8005b48:	2300      	movs	r3, #0
 8005b4a:	f8c8 0008 	str.w	r0, [r8, #8]
 8005b4e:	4604      	mov	r4, r0
 8005b50:	6003      	str	r3, [r0, #0]
 8005b52:	f04f 0900 	mov.w	r9, #0
 8005b56:	07eb      	lsls	r3, r5, #31
 8005b58:	d50a      	bpl.n	8005b70 <__pow5mult+0x84>
 8005b5a:	4631      	mov	r1, r6
 8005b5c:	4622      	mov	r2, r4
 8005b5e:	4638      	mov	r0, r7
 8005b60:	f7ff ff1a 	bl	8005998 <__multiply>
 8005b64:	4631      	mov	r1, r6
 8005b66:	4680      	mov	r8, r0
 8005b68:	4638      	mov	r0, r7
 8005b6a:	f7ff fe01 	bl	8005770 <_Bfree>
 8005b6e:	4646      	mov	r6, r8
 8005b70:	106d      	asrs	r5, r5, #1
 8005b72:	d00b      	beq.n	8005b8c <__pow5mult+0xa0>
 8005b74:	6820      	ldr	r0, [r4, #0]
 8005b76:	b938      	cbnz	r0, 8005b88 <__pow5mult+0x9c>
 8005b78:	4622      	mov	r2, r4
 8005b7a:	4621      	mov	r1, r4
 8005b7c:	4638      	mov	r0, r7
 8005b7e:	f7ff ff0b 	bl	8005998 <__multiply>
 8005b82:	6020      	str	r0, [r4, #0]
 8005b84:	f8c0 9000 	str.w	r9, [r0]
 8005b88:	4604      	mov	r4, r0
 8005b8a:	e7e4      	b.n	8005b56 <__pow5mult+0x6a>
 8005b8c:	4630      	mov	r0, r6
 8005b8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b92:	bf00      	nop
 8005b94:	080080dc 	.word	0x080080dc
 8005b98:	08007f28 	.word	0x08007f28
 8005b9c:	08008082 	.word	0x08008082

08005ba0 <__lshift>:
 8005ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ba4:	460c      	mov	r4, r1
 8005ba6:	6849      	ldr	r1, [r1, #4]
 8005ba8:	6923      	ldr	r3, [r4, #16]
 8005baa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005bae:	68a3      	ldr	r3, [r4, #8]
 8005bb0:	4607      	mov	r7, r0
 8005bb2:	4691      	mov	r9, r2
 8005bb4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005bb8:	f108 0601 	add.w	r6, r8, #1
 8005bbc:	42b3      	cmp	r3, r6
 8005bbe:	db0b      	blt.n	8005bd8 <__lshift+0x38>
 8005bc0:	4638      	mov	r0, r7
 8005bc2:	f7ff fd95 	bl	80056f0 <_Balloc>
 8005bc6:	4605      	mov	r5, r0
 8005bc8:	b948      	cbnz	r0, 8005bde <__lshift+0x3e>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	4b28      	ldr	r3, [pc, #160]	@ (8005c70 <__lshift+0xd0>)
 8005bce:	4829      	ldr	r0, [pc, #164]	@ (8005c74 <__lshift+0xd4>)
 8005bd0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005bd4:	f7fe fe20 	bl	8004818 <__assert_func>
 8005bd8:	3101      	adds	r1, #1
 8005bda:	005b      	lsls	r3, r3, #1
 8005bdc:	e7ee      	b.n	8005bbc <__lshift+0x1c>
 8005bde:	2300      	movs	r3, #0
 8005be0:	f100 0114 	add.w	r1, r0, #20
 8005be4:	f100 0210 	add.w	r2, r0, #16
 8005be8:	4618      	mov	r0, r3
 8005bea:	4553      	cmp	r3, sl
 8005bec:	db33      	blt.n	8005c56 <__lshift+0xb6>
 8005bee:	6920      	ldr	r0, [r4, #16]
 8005bf0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005bf4:	f104 0314 	add.w	r3, r4, #20
 8005bf8:	f019 091f 	ands.w	r9, r9, #31
 8005bfc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005c00:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005c04:	d02b      	beq.n	8005c5e <__lshift+0xbe>
 8005c06:	f1c9 0e20 	rsb	lr, r9, #32
 8005c0a:	468a      	mov	sl, r1
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	6818      	ldr	r0, [r3, #0]
 8005c10:	fa00 f009 	lsl.w	r0, r0, r9
 8005c14:	4310      	orrs	r0, r2
 8005c16:	f84a 0b04 	str.w	r0, [sl], #4
 8005c1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c1e:	459c      	cmp	ip, r3
 8005c20:	fa22 f20e 	lsr.w	r2, r2, lr
 8005c24:	d8f3      	bhi.n	8005c0e <__lshift+0x6e>
 8005c26:	ebac 0304 	sub.w	r3, ip, r4
 8005c2a:	3b15      	subs	r3, #21
 8005c2c:	f023 0303 	bic.w	r3, r3, #3
 8005c30:	3304      	adds	r3, #4
 8005c32:	f104 0015 	add.w	r0, r4, #21
 8005c36:	4584      	cmp	ip, r0
 8005c38:	bf38      	it	cc
 8005c3a:	2304      	movcc	r3, #4
 8005c3c:	50ca      	str	r2, [r1, r3]
 8005c3e:	b10a      	cbz	r2, 8005c44 <__lshift+0xa4>
 8005c40:	f108 0602 	add.w	r6, r8, #2
 8005c44:	3e01      	subs	r6, #1
 8005c46:	4638      	mov	r0, r7
 8005c48:	612e      	str	r6, [r5, #16]
 8005c4a:	4621      	mov	r1, r4
 8005c4c:	f7ff fd90 	bl	8005770 <_Bfree>
 8005c50:	4628      	mov	r0, r5
 8005c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c56:	f842 0f04 	str.w	r0, [r2, #4]!
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	e7c5      	b.n	8005bea <__lshift+0x4a>
 8005c5e:	3904      	subs	r1, #4
 8005c60:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c64:	f841 2f04 	str.w	r2, [r1, #4]!
 8005c68:	459c      	cmp	ip, r3
 8005c6a:	d8f9      	bhi.n	8005c60 <__lshift+0xc0>
 8005c6c:	e7ea      	b.n	8005c44 <__lshift+0xa4>
 8005c6e:	bf00      	nop
 8005c70:	08008071 	.word	0x08008071
 8005c74:	08008082 	.word	0x08008082

08005c78 <__mcmp>:
 8005c78:	690a      	ldr	r2, [r1, #16]
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	6900      	ldr	r0, [r0, #16]
 8005c7e:	1a80      	subs	r0, r0, r2
 8005c80:	b530      	push	{r4, r5, lr}
 8005c82:	d10e      	bne.n	8005ca2 <__mcmp+0x2a>
 8005c84:	3314      	adds	r3, #20
 8005c86:	3114      	adds	r1, #20
 8005c88:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005c8c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005c90:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005c94:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005c98:	4295      	cmp	r5, r2
 8005c9a:	d003      	beq.n	8005ca4 <__mcmp+0x2c>
 8005c9c:	d205      	bcs.n	8005caa <__mcmp+0x32>
 8005c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8005ca2:	bd30      	pop	{r4, r5, pc}
 8005ca4:	42a3      	cmp	r3, r4
 8005ca6:	d3f3      	bcc.n	8005c90 <__mcmp+0x18>
 8005ca8:	e7fb      	b.n	8005ca2 <__mcmp+0x2a>
 8005caa:	2001      	movs	r0, #1
 8005cac:	e7f9      	b.n	8005ca2 <__mcmp+0x2a>
	...

08005cb0 <__mdiff>:
 8005cb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cb4:	4689      	mov	r9, r1
 8005cb6:	4606      	mov	r6, r0
 8005cb8:	4611      	mov	r1, r2
 8005cba:	4648      	mov	r0, r9
 8005cbc:	4614      	mov	r4, r2
 8005cbe:	f7ff ffdb 	bl	8005c78 <__mcmp>
 8005cc2:	1e05      	subs	r5, r0, #0
 8005cc4:	d112      	bne.n	8005cec <__mdiff+0x3c>
 8005cc6:	4629      	mov	r1, r5
 8005cc8:	4630      	mov	r0, r6
 8005cca:	f7ff fd11 	bl	80056f0 <_Balloc>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	b928      	cbnz	r0, 8005cde <__mdiff+0x2e>
 8005cd2:	4b3f      	ldr	r3, [pc, #252]	@ (8005dd0 <__mdiff+0x120>)
 8005cd4:	f240 2137 	movw	r1, #567	@ 0x237
 8005cd8:	483e      	ldr	r0, [pc, #248]	@ (8005dd4 <__mdiff+0x124>)
 8005cda:	f7fe fd9d 	bl	8004818 <__assert_func>
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005ce4:	4610      	mov	r0, r2
 8005ce6:	b003      	add	sp, #12
 8005ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cec:	bfbc      	itt	lt
 8005cee:	464b      	movlt	r3, r9
 8005cf0:	46a1      	movlt	r9, r4
 8005cf2:	4630      	mov	r0, r6
 8005cf4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005cf8:	bfba      	itte	lt
 8005cfa:	461c      	movlt	r4, r3
 8005cfc:	2501      	movlt	r5, #1
 8005cfe:	2500      	movge	r5, #0
 8005d00:	f7ff fcf6 	bl	80056f0 <_Balloc>
 8005d04:	4602      	mov	r2, r0
 8005d06:	b918      	cbnz	r0, 8005d10 <__mdiff+0x60>
 8005d08:	4b31      	ldr	r3, [pc, #196]	@ (8005dd0 <__mdiff+0x120>)
 8005d0a:	f240 2145 	movw	r1, #581	@ 0x245
 8005d0e:	e7e3      	b.n	8005cd8 <__mdiff+0x28>
 8005d10:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005d14:	6926      	ldr	r6, [r4, #16]
 8005d16:	60c5      	str	r5, [r0, #12]
 8005d18:	f109 0310 	add.w	r3, r9, #16
 8005d1c:	f109 0514 	add.w	r5, r9, #20
 8005d20:	f104 0e14 	add.w	lr, r4, #20
 8005d24:	f100 0b14 	add.w	fp, r0, #20
 8005d28:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005d2c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005d30:	9301      	str	r3, [sp, #4]
 8005d32:	46d9      	mov	r9, fp
 8005d34:	f04f 0c00 	mov.w	ip, #0
 8005d38:	9b01      	ldr	r3, [sp, #4]
 8005d3a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005d3e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005d42:	9301      	str	r3, [sp, #4]
 8005d44:	fa1f f38a 	uxth.w	r3, sl
 8005d48:	4619      	mov	r1, r3
 8005d4a:	b283      	uxth	r3, r0
 8005d4c:	1acb      	subs	r3, r1, r3
 8005d4e:	0c00      	lsrs	r0, r0, #16
 8005d50:	4463      	add	r3, ip
 8005d52:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005d56:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005d60:	4576      	cmp	r6, lr
 8005d62:	f849 3b04 	str.w	r3, [r9], #4
 8005d66:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005d6a:	d8e5      	bhi.n	8005d38 <__mdiff+0x88>
 8005d6c:	1b33      	subs	r3, r6, r4
 8005d6e:	3b15      	subs	r3, #21
 8005d70:	f023 0303 	bic.w	r3, r3, #3
 8005d74:	3415      	adds	r4, #21
 8005d76:	3304      	adds	r3, #4
 8005d78:	42a6      	cmp	r6, r4
 8005d7a:	bf38      	it	cc
 8005d7c:	2304      	movcc	r3, #4
 8005d7e:	441d      	add	r5, r3
 8005d80:	445b      	add	r3, fp
 8005d82:	461e      	mov	r6, r3
 8005d84:	462c      	mov	r4, r5
 8005d86:	4544      	cmp	r4, r8
 8005d88:	d30e      	bcc.n	8005da8 <__mdiff+0xf8>
 8005d8a:	f108 0103 	add.w	r1, r8, #3
 8005d8e:	1b49      	subs	r1, r1, r5
 8005d90:	f021 0103 	bic.w	r1, r1, #3
 8005d94:	3d03      	subs	r5, #3
 8005d96:	45a8      	cmp	r8, r5
 8005d98:	bf38      	it	cc
 8005d9a:	2100      	movcc	r1, #0
 8005d9c:	440b      	add	r3, r1
 8005d9e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005da2:	b191      	cbz	r1, 8005dca <__mdiff+0x11a>
 8005da4:	6117      	str	r7, [r2, #16]
 8005da6:	e79d      	b.n	8005ce4 <__mdiff+0x34>
 8005da8:	f854 1b04 	ldr.w	r1, [r4], #4
 8005dac:	46e6      	mov	lr, ip
 8005dae:	0c08      	lsrs	r0, r1, #16
 8005db0:	fa1c fc81 	uxtah	ip, ip, r1
 8005db4:	4471      	add	r1, lr
 8005db6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005dba:	b289      	uxth	r1, r1
 8005dbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005dc0:	f846 1b04 	str.w	r1, [r6], #4
 8005dc4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005dc8:	e7dd      	b.n	8005d86 <__mdiff+0xd6>
 8005dca:	3f01      	subs	r7, #1
 8005dcc:	e7e7      	b.n	8005d9e <__mdiff+0xee>
 8005dce:	bf00      	nop
 8005dd0:	08008071 	.word	0x08008071
 8005dd4:	08008082 	.word	0x08008082

08005dd8 <__ulp>:
 8005dd8:	b082      	sub	sp, #8
 8005dda:	ed8d 0b00 	vstr	d0, [sp]
 8005dde:	9a01      	ldr	r2, [sp, #4]
 8005de0:	4b0f      	ldr	r3, [pc, #60]	@ (8005e20 <__ulp+0x48>)
 8005de2:	4013      	ands	r3, r2
 8005de4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	dc08      	bgt.n	8005dfe <__ulp+0x26>
 8005dec:	425b      	negs	r3, r3
 8005dee:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8005df2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005df6:	da04      	bge.n	8005e02 <__ulp+0x2a>
 8005df8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005dfc:	4113      	asrs	r3, r2
 8005dfe:	2200      	movs	r2, #0
 8005e00:	e008      	b.n	8005e14 <__ulp+0x3c>
 8005e02:	f1a2 0314 	sub.w	r3, r2, #20
 8005e06:	2b1e      	cmp	r3, #30
 8005e08:	bfda      	itte	le
 8005e0a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8005e0e:	40da      	lsrle	r2, r3
 8005e10:	2201      	movgt	r2, #1
 8005e12:	2300      	movs	r3, #0
 8005e14:	4619      	mov	r1, r3
 8005e16:	4610      	mov	r0, r2
 8005e18:	ec41 0b10 	vmov	d0, r0, r1
 8005e1c:	b002      	add	sp, #8
 8005e1e:	4770      	bx	lr
 8005e20:	7ff00000 	.word	0x7ff00000

08005e24 <__b2d>:
 8005e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e28:	6906      	ldr	r6, [r0, #16]
 8005e2a:	f100 0814 	add.w	r8, r0, #20
 8005e2e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8005e32:	1f37      	subs	r7, r6, #4
 8005e34:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005e38:	4610      	mov	r0, r2
 8005e3a:	f7ff fd4b 	bl	80058d4 <__hi0bits>
 8005e3e:	f1c0 0320 	rsb	r3, r0, #32
 8005e42:	280a      	cmp	r0, #10
 8005e44:	600b      	str	r3, [r1, #0]
 8005e46:	491b      	ldr	r1, [pc, #108]	@ (8005eb4 <__b2d+0x90>)
 8005e48:	dc15      	bgt.n	8005e76 <__b2d+0x52>
 8005e4a:	f1c0 0c0b 	rsb	ip, r0, #11
 8005e4e:	fa22 f30c 	lsr.w	r3, r2, ip
 8005e52:	45b8      	cmp	r8, r7
 8005e54:	ea43 0501 	orr.w	r5, r3, r1
 8005e58:	bf34      	ite	cc
 8005e5a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8005e5e:	2300      	movcs	r3, #0
 8005e60:	3015      	adds	r0, #21
 8005e62:	fa02 f000 	lsl.w	r0, r2, r0
 8005e66:	fa23 f30c 	lsr.w	r3, r3, ip
 8005e6a:	4303      	orrs	r3, r0
 8005e6c:	461c      	mov	r4, r3
 8005e6e:	ec45 4b10 	vmov	d0, r4, r5
 8005e72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e76:	45b8      	cmp	r8, r7
 8005e78:	bf3a      	itte	cc
 8005e7a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8005e7e:	f1a6 0708 	subcc.w	r7, r6, #8
 8005e82:	2300      	movcs	r3, #0
 8005e84:	380b      	subs	r0, #11
 8005e86:	d012      	beq.n	8005eae <__b2d+0x8a>
 8005e88:	f1c0 0120 	rsb	r1, r0, #32
 8005e8c:	fa23 f401 	lsr.w	r4, r3, r1
 8005e90:	4082      	lsls	r2, r0
 8005e92:	4322      	orrs	r2, r4
 8005e94:	4547      	cmp	r7, r8
 8005e96:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8005e9a:	bf8c      	ite	hi
 8005e9c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8005ea0:	2200      	movls	r2, #0
 8005ea2:	4083      	lsls	r3, r0
 8005ea4:	40ca      	lsrs	r2, r1
 8005ea6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	e7de      	b.n	8005e6c <__b2d+0x48>
 8005eae:	ea42 0501 	orr.w	r5, r2, r1
 8005eb2:	e7db      	b.n	8005e6c <__b2d+0x48>
 8005eb4:	3ff00000 	.word	0x3ff00000

08005eb8 <__d2b>:
 8005eb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005ebc:	460f      	mov	r7, r1
 8005ebe:	2101      	movs	r1, #1
 8005ec0:	ec59 8b10 	vmov	r8, r9, d0
 8005ec4:	4616      	mov	r6, r2
 8005ec6:	f7ff fc13 	bl	80056f0 <_Balloc>
 8005eca:	4604      	mov	r4, r0
 8005ecc:	b930      	cbnz	r0, 8005edc <__d2b+0x24>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	4b23      	ldr	r3, [pc, #140]	@ (8005f60 <__d2b+0xa8>)
 8005ed2:	4824      	ldr	r0, [pc, #144]	@ (8005f64 <__d2b+0xac>)
 8005ed4:	f240 310f 	movw	r1, #783	@ 0x30f
 8005ed8:	f7fe fc9e 	bl	8004818 <__assert_func>
 8005edc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005ee0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005ee4:	b10d      	cbz	r5, 8005eea <__d2b+0x32>
 8005ee6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005eea:	9301      	str	r3, [sp, #4]
 8005eec:	f1b8 0300 	subs.w	r3, r8, #0
 8005ef0:	d023      	beq.n	8005f3a <__d2b+0x82>
 8005ef2:	4668      	mov	r0, sp
 8005ef4:	9300      	str	r3, [sp, #0]
 8005ef6:	f7ff fd0c 	bl	8005912 <__lo0bits>
 8005efa:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005efe:	b1d0      	cbz	r0, 8005f36 <__d2b+0x7e>
 8005f00:	f1c0 0320 	rsb	r3, r0, #32
 8005f04:	fa02 f303 	lsl.w	r3, r2, r3
 8005f08:	430b      	orrs	r3, r1
 8005f0a:	40c2      	lsrs	r2, r0
 8005f0c:	6163      	str	r3, [r4, #20]
 8005f0e:	9201      	str	r2, [sp, #4]
 8005f10:	9b01      	ldr	r3, [sp, #4]
 8005f12:	61a3      	str	r3, [r4, #24]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	bf0c      	ite	eq
 8005f18:	2201      	moveq	r2, #1
 8005f1a:	2202      	movne	r2, #2
 8005f1c:	6122      	str	r2, [r4, #16]
 8005f1e:	b1a5      	cbz	r5, 8005f4a <__d2b+0x92>
 8005f20:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005f24:	4405      	add	r5, r0
 8005f26:	603d      	str	r5, [r7, #0]
 8005f28:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005f2c:	6030      	str	r0, [r6, #0]
 8005f2e:	4620      	mov	r0, r4
 8005f30:	b003      	add	sp, #12
 8005f32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f36:	6161      	str	r1, [r4, #20]
 8005f38:	e7ea      	b.n	8005f10 <__d2b+0x58>
 8005f3a:	a801      	add	r0, sp, #4
 8005f3c:	f7ff fce9 	bl	8005912 <__lo0bits>
 8005f40:	9b01      	ldr	r3, [sp, #4]
 8005f42:	6163      	str	r3, [r4, #20]
 8005f44:	3020      	adds	r0, #32
 8005f46:	2201      	movs	r2, #1
 8005f48:	e7e8      	b.n	8005f1c <__d2b+0x64>
 8005f4a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005f4e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005f52:	6038      	str	r0, [r7, #0]
 8005f54:	6918      	ldr	r0, [r3, #16]
 8005f56:	f7ff fcbd 	bl	80058d4 <__hi0bits>
 8005f5a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005f5e:	e7e5      	b.n	8005f2c <__d2b+0x74>
 8005f60:	08008071 	.word	0x08008071
 8005f64:	08008082 	.word	0x08008082

08005f68 <__ratio>:
 8005f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f6c:	b085      	sub	sp, #20
 8005f6e:	e9cd 1000 	strd	r1, r0, [sp]
 8005f72:	a902      	add	r1, sp, #8
 8005f74:	f7ff ff56 	bl	8005e24 <__b2d>
 8005f78:	9800      	ldr	r0, [sp, #0]
 8005f7a:	a903      	add	r1, sp, #12
 8005f7c:	ec55 4b10 	vmov	r4, r5, d0
 8005f80:	f7ff ff50 	bl	8005e24 <__b2d>
 8005f84:	9b01      	ldr	r3, [sp, #4]
 8005f86:	6919      	ldr	r1, [r3, #16]
 8005f88:	9b00      	ldr	r3, [sp, #0]
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	1ac9      	subs	r1, r1, r3
 8005f8e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005f92:	1a9b      	subs	r3, r3, r2
 8005f94:	ec5b ab10 	vmov	sl, fp, d0
 8005f98:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	bfce      	itee	gt
 8005fa0:	462a      	movgt	r2, r5
 8005fa2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005fa6:	465a      	movle	r2, fp
 8005fa8:	462f      	mov	r7, r5
 8005faa:	46d9      	mov	r9, fp
 8005fac:	bfcc      	ite	gt
 8005fae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8005fb2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8005fb6:	464b      	mov	r3, r9
 8005fb8:	4652      	mov	r2, sl
 8005fba:	4620      	mov	r0, r4
 8005fbc:	4639      	mov	r1, r7
 8005fbe:	f7fa fc45 	bl	800084c <__aeabi_ddiv>
 8005fc2:	ec41 0b10 	vmov	d0, r0, r1
 8005fc6:	b005      	add	sp, #20
 8005fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005fcc <__copybits>:
 8005fcc:	3901      	subs	r1, #1
 8005fce:	b570      	push	{r4, r5, r6, lr}
 8005fd0:	1149      	asrs	r1, r1, #5
 8005fd2:	6914      	ldr	r4, [r2, #16]
 8005fd4:	3101      	adds	r1, #1
 8005fd6:	f102 0314 	add.w	r3, r2, #20
 8005fda:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005fde:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005fe2:	1f05      	subs	r5, r0, #4
 8005fe4:	42a3      	cmp	r3, r4
 8005fe6:	d30c      	bcc.n	8006002 <__copybits+0x36>
 8005fe8:	1aa3      	subs	r3, r4, r2
 8005fea:	3b11      	subs	r3, #17
 8005fec:	f023 0303 	bic.w	r3, r3, #3
 8005ff0:	3211      	adds	r2, #17
 8005ff2:	42a2      	cmp	r2, r4
 8005ff4:	bf88      	it	hi
 8005ff6:	2300      	movhi	r3, #0
 8005ff8:	4418      	add	r0, r3
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	4288      	cmp	r0, r1
 8005ffe:	d305      	bcc.n	800600c <__copybits+0x40>
 8006000:	bd70      	pop	{r4, r5, r6, pc}
 8006002:	f853 6b04 	ldr.w	r6, [r3], #4
 8006006:	f845 6f04 	str.w	r6, [r5, #4]!
 800600a:	e7eb      	b.n	8005fe4 <__copybits+0x18>
 800600c:	f840 3b04 	str.w	r3, [r0], #4
 8006010:	e7f4      	b.n	8005ffc <__copybits+0x30>

08006012 <__any_on>:
 8006012:	f100 0214 	add.w	r2, r0, #20
 8006016:	6900      	ldr	r0, [r0, #16]
 8006018:	114b      	asrs	r3, r1, #5
 800601a:	4298      	cmp	r0, r3
 800601c:	b510      	push	{r4, lr}
 800601e:	db11      	blt.n	8006044 <__any_on+0x32>
 8006020:	dd0a      	ble.n	8006038 <__any_on+0x26>
 8006022:	f011 011f 	ands.w	r1, r1, #31
 8006026:	d007      	beq.n	8006038 <__any_on+0x26>
 8006028:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800602c:	fa24 f001 	lsr.w	r0, r4, r1
 8006030:	fa00 f101 	lsl.w	r1, r0, r1
 8006034:	428c      	cmp	r4, r1
 8006036:	d10b      	bne.n	8006050 <__any_on+0x3e>
 8006038:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800603c:	4293      	cmp	r3, r2
 800603e:	d803      	bhi.n	8006048 <__any_on+0x36>
 8006040:	2000      	movs	r0, #0
 8006042:	bd10      	pop	{r4, pc}
 8006044:	4603      	mov	r3, r0
 8006046:	e7f7      	b.n	8006038 <__any_on+0x26>
 8006048:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800604c:	2900      	cmp	r1, #0
 800604e:	d0f5      	beq.n	800603c <__any_on+0x2a>
 8006050:	2001      	movs	r0, #1
 8006052:	e7f6      	b.n	8006042 <__any_on+0x30>

08006054 <sulp>:
 8006054:	b570      	push	{r4, r5, r6, lr}
 8006056:	4604      	mov	r4, r0
 8006058:	460d      	mov	r5, r1
 800605a:	ec45 4b10 	vmov	d0, r4, r5
 800605e:	4616      	mov	r6, r2
 8006060:	f7ff feba 	bl	8005dd8 <__ulp>
 8006064:	ec51 0b10 	vmov	r0, r1, d0
 8006068:	b17e      	cbz	r6, 800608a <sulp+0x36>
 800606a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800606e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006072:	2b00      	cmp	r3, #0
 8006074:	dd09      	ble.n	800608a <sulp+0x36>
 8006076:	051b      	lsls	r3, r3, #20
 8006078:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800607c:	2400      	movs	r4, #0
 800607e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006082:	4622      	mov	r2, r4
 8006084:	462b      	mov	r3, r5
 8006086:	f7fa fab7 	bl	80005f8 <__aeabi_dmul>
 800608a:	ec41 0b10 	vmov	d0, r0, r1
 800608e:	bd70      	pop	{r4, r5, r6, pc}

08006090 <_strtod_l>:
 8006090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006094:	b09f      	sub	sp, #124	@ 0x7c
 8006096:	460c      	mov	r4, r1
 8006098:	9217      	str	r2, [sp, #92]	@ 0x5c
 800609a:	2200      	movs	r2, #0
 800609c:	921a      	str	r2, [sp, #104]	@ 0x68
 800609e:	9005      	str	r0, [sp, #20]
 80060a0:	f04f 0a00 	mov.w	sl, #0
 80060a4:	f04f 0b00 	mov.w	fp, #0
 80060a8:	460a      	mov	r2, r1
 80060aa:	9219      	str	r2, [sp, #100]	@ 0x64
 80060ac:	7811      	ldrb	r1, [r2, #0]
 80060ae:	292b      	cmp	r1, #43	@ 0x2b
 80060b0:	d04a      	beq.n	8006148 <_strtod_l+0xb8>
 80060b2:	d838      	bhi.n	8006126 <_strtod_l+0x96>
 80060b4:	290d      	cmp	r1, #13
 80060b6:	d832      	bhi.n	800611e <_strtod_l+0x8e>
 80060b8:	2908      	cmp	r1, #8
 80060ba:	d832      	bhi.n	8006122 <_strtod_l+0x92>
 80060bc:	2900      	cmp	r1, #0
 80060be:	d03b      	beq.n	8006138 <_strtod_l+0xa8>
 80060c0:	2200      	movs	r2, #0
 80060c2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80060c4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80060c6:	782a      	ldrb	r2, [r5, #0]
 80060c8:	2a30      	cmp	r2, #48	@ 0x30
 80060ca:	f040 80b3 	bne.w	8006234 <_strtod_l+0x1a4>
 80060ce:	786a      	ldrb	r2, [r5, #1]
 80060d0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80060d4:	2a58      	cmp	r2, #88	@ 0x58
 80060d6:	d16e      	bne.n	80061b6 <_strtod_l+0x126>
 80060d8:	9302      	str	r3, [sp, #8]
 80060da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80060dc:	9301      	str	r3, [sp, #4]
 80060de:	ab1a      	add	r3, sp, #104	@ 0x68
 80060e0:	9300      	str	r3, [sp, #0]
 80060e2:	4a8e      	ldr	r2, [pc, #568]	@ (800631c <_strtod_l+0x28c>)
 80060e4:	9805      	ldr	r0, [sp, #20]
 80060e6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80060e8:	a919      	add	r1, sp, #100	@ 0x64
 80060ea:	f001 f923 	bl	8007334 <__gethex>
 80060ee:	f010 060f 	ands.w	r6, r0, #15
 80060f2:	4604      	mov	r4, r0
 80060f4:	d005      	beq.n	8006102 <_strtod_l+0x72>
 80060f6:	2e06      	cmp	r6, #6
 80060f8:	d128      	bne.n	800614c <_strtod_l+0xbc>
 80060fa:	3501      	adds	r5, #1
 80060fc:	2300      	movs	r3, #0
 80060fe:	9519      	str	r5, [sp, #100]	@ 0x64
 8006100:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006102:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006104:	2b00      	cmp	r3, #0
 8006106:	f040 858e 	bne.w	8006c26 <_strtod_l+0xb96>
 800610a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800610c:	b1cb      	cbz	r3, 8006142 <_strtod_l+0xb2>
 800610e:	4652      	mov	r2, sl
 8006110:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006114:	ec43 2b10 	vmov	d0, r2, r3
 8006118:	b01f      	add	sp, #124	@ 0x7c
 800611a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800611e:	2920      	cmp	r1, #32
 8006120:	d1ce      	bne.n	80060c0 <_strtod_l+0x30>
 8006122:	3201      	adds	r2, #1
 8006124:	e7c1      	b.n	80060aa <_strtod_l+0x1a>
 8006126:	292d      	cmp	r1, #45	@ 0x2d
 8006128:	d1ca      	bne.n	80060c0 <_strtod_l+0x30>
 800612a:	2101      	movs	r1, #1
 800612c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800612e:	1c51      	adds	r1, r2, #1
 8006130:	9119      	str	r1, [sp, #100]	@ 0x64
 8006132:	7852      	ldrb	r2, [r2, #1]
 8006134:	2a00      	cmp	r2, #0
 8006136:	d1c5      	bne.n	80060c4 <_strtod_l+0x34>
 8006138:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800613a:	9419      	str	r4, [sp, #100]	@ 0x64
 800613c:	2b00      	cmp	r3, #0
 800613e:	f040 8570 	bne.w	8006c22 <_strtod_l+0xb92>
 8006142:	4652      	mov	r2, sl
 8006144:	465b      	mov	r3, fp
 8006146:	e7e5      	b.n	8006114 <_strtod_l+0x84>
 8006148:	2100      	movs	r1, #0
 800614a:	e7ef      	b.n	800612c <_strtod_l+0x9c>
 800614c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800614e:	b13a      	cbz	r2, 8006160 <_strtod_l+0xd0>
 8006150:	2135      	movs	r1, #53	@ 0x35
 8006152:	a81c      	add	r0, sp, #112	@ 0x70
 8006154:	f7ff ff3a 	bl	8005fcc <__copybits>
 8006158:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800615a:	9805      	ldr	r0, [sp, #20]
 800615c:	f7ff fb08 	bl	8005770 <_Bfree>
 8006160:	3e01      	subs	r6, #1
 8006162:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006164:	2e04      	cmp	r6, #4
 8006166:	d806      	bhi.n	8006176 <_strtod_l+0xe6>
 8006168:	e8df f006 	tbb	[pc, r6]
 800616c:	201d0314 	.word	0x201d0314
 8006170:	14          	.byte	0x14
 8006171:	00          	.byte	0x00
 8006172:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006176:	05e1      	lsls	r1, r4, #23
 8006178:	bf48      	it	mi
 800617a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800617e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006182:	0d1b      	lsrs	r3, r3, #20
 8006184:	051b      	lsls	r3, r3, #20
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1bb      	bne.n	8006102 <_strtod_l+0x72>
 800618a:	f7fe fb11 	bl	80047b0 <__errno>
 800618e:	2322      	movs	r3, #34	@ 0x22
 8006190:	6003      	str	r3, [r0, #0]
 8006192:	e7b6      	b.n	8006102 <_strtod_l+0x72>
 8006194:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006198:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800619c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80061a0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80061a4:	e7e7      	b.n	8006176 <_strtod_l+0xe6>
 80061a6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006324 <_strtod_l+0x294>
 80061aa:	e7e4      	b.n	8006176 <_strtod_l+0xe6>
 80061ac:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80061b0:	f04f 3aff 	mov.w	sl, #4294967295
 80061b4:	e7df      	b.n	8006176 <_strtod_l+0xe6>
 80061b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80061b8:	1c5a      	adds	r2, r3, #1
 80061ba:	9219      	str	r2, [sp, #100]	@ 0x64
 80061bc:	785b      	ldrb	r3, [r3, #1]
 80061be:	2b30      	cmp	r3, #48	@ 0x30
 80061c0:	d0f9      	beq.n	80061b6 <_strtod_l+0x126>
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d09d      	beq.n	8006102 <_strtod_l+0x72>
 80061c6:	2301      	movs	r3, #1
 80061c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80061ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80061cc:	930c      	str	r3, [sp, #48]	@ 0x30
 80061ce:	2300      	movs	r3, #0
 80061d0:	9308      	str	r3, [sp, #32]
 80061d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80061d4:	461f      	mov	r7, r3
 80061d6:	220a      	movs	r2, #10
 80061d8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80061da:	7805      	ldrb	r5, [r0, #0]
 80061dc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80061e0:	b2d9      	uxtb	r1, r3
 80061e2:	2909      	cmp	r1, #9
 80061e4:	d928      	bls.n	8006238 <_strtod_l+0x1a8>
 80061e6:	494e      	ldr	r1, [pc, #312]	@ (8006320 <_strtod_l+0x290>)
 80061e8:	2201      	movs	r2, #1
 80061ea:	f000 ffe7 	bl	80071bc <strncmp>
 80061ee:	2800      	cmp	r0, #0
 80061f0:	d032      	beq.n	8006258 <_strtod_l+0x1c8>
 80061f2:	2000      	movs	r0, #0
 80061f4:	462a      	mov	r2, r5
 80061f6:	4681      	mov	r9, r0
 80061f8:	463d      	mov	r5, r7
 80061fa:	4603      	mov	r3, r0
 80061fc:	2a65      	cmp	r2, #101	@ 0x65
 80061fe:	d001      	beq.n	8006204 <_strtod_l+0x174>
 8006200:	2a45      	cmp	r2, #69	@ 0x45
 8006202:	d114      	bne.n	800622e <_strtod_l+0x19e>
 8006204:	b91d      	cbnz	r5, 800620e <_strtod_l+0x17e>
 8006206:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006208:	4302      	orrs	r2, r0
 800620a:	d095      	beq.n	8006138 <_strtod_l+0xa8>
 800620c:	2500      	movs	r5, #0
 800620e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006210:	1c62      	adds	r2, r4, #1
 8006212:	9219      	str	r2, [sp, #100]	@ 0x64
 8006214:	7862      	ldrb	r2, [r4, #1]
 8006216:	2a2b      	cmp	r2, #43	@ 0x2b
 8006218:	d077      	beq.n	800630a <_strtod_l+0x27a>
 800621a:	2a2d      	cmp	r2, #45	@ 0x2d
 800621c:	d07b      	beq.n	8006316 <_strtod_l+0x286>
 800621e:	f04f 0c00 	mov.w	ip, #0
 8006222:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006226:	2909      	cmp	r1, #9
 8006228:	f240 8082 	bls.w	8006330 <_strtod_l+0x2a0>
 800622c:	9419      	str	r4, [sp, #100]	@ 0x64
 800622e:	f04f 0800 	mov.w	r8, #0
 8006232:	e0a2      	b.n	800637a <_strtod_l+0x2ea>
 8006234:	2300      	movs	r3, #0
 8006236:	e7c7      	b.n	80061c8 <_strtod_l+0x138>
 8006238:	2f08      	cmp	r7, #8
 800623a:	bfd5      	itete	le
 800623c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800623e:	9908      	ldrgt	r1, [sp, #32]
 8006240:	fb02 3301 	mlale	r3, r2, r1, r3
 8006244:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006248:	f100 0001 	add.w	r0, r0, #1
 800624c:	bfd4      	ite	le
 800624e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006250:	9308      	strgt	r3, [sp, #32]
 8006252:	3701      	adds	r7, #1
 8006254:	9019      	str	r0, [sp, #100]	@ 0x64
 8006256:	e7bf      	b.n	80061d8 <_strtod_l+0x148>
 8006258:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800625a:	1c5a      	adds	r2, r3, #1
 800625c:	9219      	str	r2, [sp, #100]	@ 0x64
 800625e:	785a      	ldrb	r2, [r3, #1]
 8006260:	b37f      	cbz	r7, 80062c2 <_strtod_l+0x232>
 8006262:	4681      	mov	r9, r0
 8006264:	463d      	mov	r5, r7
 8006266:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800626a:	2b09      	cmp	r3, #9
 800626c:	d912      	bls.n	8006294 <_strtod_l+0x204>
 800626e:	2301      	movs	r3, #1
 8006270:	e7c4      	b.n	80061fc <_strtod_l+0x16c>
 8006272:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006274:	1c5a      	adds	r2, r3, #1
 8006276:	9219      	str	r2, [sp, #100]	@ 0x64
 8006278:	785a      	ldrb	r2, [r3, #1]
 800627a:	3001      	adds	r0, #1
 800627c:	2a30      	cmp	r2, #48	@ 0x30
 800627e:	d0f8      	beq.n	8006272 <_strtod_l+0x1e2>
 8006280:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006284:	2b08      	cmp	r3, #8
 8006286:	f200 84d3 	bhi.w	8006c30 <_strtod_l+0xba0>
 800628a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800628c:	930c      	str	r3, [sp, #48]	@ 0x30
 800628e:	4681      	mov	r9, r0
 8006290:	2000      	movs	r0, #0
 8006292:	4605      	mov	r5, r0
 8006294:	3a30      	subs	r2, #48	@ 0x30
 8006296:	f100 0301 	add.w	r3, r0, #1
 800629a:	d02a      	beq.n	80062f2 <_strtod_l+0x262>
 800629c:	4499      	add	r9, r3
 800629e:	eb00 0c05 	add.w	ip, r0, r5
 80062a2:	462b      	mov	r3, r5
 80062a4:	210a      	movs	r1, #10
 80062a6:	4563      	cmp	r3, ip
 80062a8:	d10d      	bne.n	80062c6 <_strtod_l+0x236>
 80062aa:	1c69      	adds	r1, r5, #1
 80062ac:	4401      	add	r1, r0
 80062ae:	4428      	add	r0, r5
 80062b0:	2808      	cmp	r0, #8
 80062b2:	dc16      	bgt.n	80062e2 <_strtod_l+0x252>
 80062b4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80062b6:	230a      	movs	r3, #10
 80062b8:	fb03 2300 	mla	r3, r3, r0, r2
 80062bc:	930a      	str	r3, [sp, #40]	@ 0x28
 80062be:	2300      	movs	r3, #0
 80062c0:	e018      	b.n	80062f4 <_strtod_l+0x264>
 80062c2:	4638      	mov	r0, r7
 80062c4:	e7da      	b.n	800627c <_strtod_l+0x1ec>
 80062c6:	2b08      	cmp	r3, #8
 80062c8:	f103 0301 	add.w	r3, r3, #1
 80062cc:	dc03      	bgt.n	80062d6 <_strtod_l+0x246>
 80062ce:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80062d0:	434e      	muls	r6, r1
 80062d2:	960a      	str	r6, [sp, #40]	@ 0x28
 80062d4:	e7e7      	b.n	80062a6 <_strtod_l+0x216>
 80062d6:	2b10      	cmp	r3, #16
 80062d8:	bfde      	ittt	le
 80062da:	9e08      	ldrle	r6, [sp, #32]
 80062dc:	434e      	mulle	r6, r1
 80062de:	9608      	strle	r6, [sp, #32]
 80062e0:	e7e1      	b.n	80062a6 <_strtod_l+0x216>
 80062e2:	280f      	cmp	r0, #15
 80062e4:	dceb      	bgt.n	80062be <_strtod_l+0x22e>
 80062e6:	9808      	ldr	r0, [sp, #32]
 80062e8:	230a      	movs	r3, #10
 80062ea:	fb03 2300 	mla	r3, r3, r0, r2
 80062ee:	9308      	str	r3, [sp, #32]
 80062f0:	e7e5      	b.n	80062be <_strtod_l+0x22e>
 80062f2:	4629      	mov	r1, r5
 80062f4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80062f6:	1c50      	adds	r0, r2, #1
 80062f8:	9019      	str	r0, [sp, #100]	@ 0x64
 80062fa:	7852      	ldrb	r2, [r2, #1]
 80062fc:	4618      	mov	r0, r3
 80062fe:	460d      	mov	r5, r1
 8006300:	e7b1      	b.n	8006266 <_strtod_l+0x1d6>
 8006302:	f04f 0900 	mov.w	r9, #0
 8006306:	2301      	movs	r3, #1
 8006308:	e77d      	b.n	8006206 <_strtod_l+0x176>
 800630a:	f04f 0c00 	mov.w	ip, #0
 800630e:	1ca2      	adds	r2, r4, #2
 8006310:	9219      	str	r2, [sp, #100]	@ 0x64
 8006312:	78a2      	ldrb	r2, [r4, #2]
 8006314:	e785      	b.n	8006222 <_strtod_l+0x192>
 8006316:	f04f 0c01 	mov.w	ip, #1
 800631a:	e7f8      	b.n	800630e <_strtod_l+0x27e>
 800631c:	080081f0 	.word	0x080081f0
 8006320:	080081d8 	.word	0x080081d8
 8006324:	7ff00000 	.word	0x7ff00000
 8006328:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800632a:	1c51      	adds	r1, r2, #1
 800632c:	9119      	str	r1, [sp, #100]	@ 0x64
 800632e:	7852      	ldrb	r2, [r2, #1]
 8006330:	2a30      	cmp	r2, #48	@ 0x30
 8006332:	d0f9      	beq.n	8006328 <_strtod_l+0x298>
 8006334:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006338:	2908      	cmp	r1, #8
 800633a:	f63f af78 	bhi.w	800622e <_strtod_l+0x19e>
 800633e:	3a30      	subs	r2, #48	@ 0x30
 8006340:	920e      	str	r2, [sp, #56]	@ 0x38
 8006342:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006344:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006346:	f04f 080a 	mov.w	r8, #10
 800634a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800634c:	1c56      	adds	r6, r2, #1
 800634e:	9619      	str	r6, [sp, #100]	@ 0x64
 8006350:	7852      	ldrb	r2, [r2, #1]
 8006352:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006356:	f1be 0f09 	cmp.w	lr, #9
 800635a:	d939      	bls.n	80063d0 <_strtod_l+0x340>
 800635c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800635e:	1a76      	subs	r6, r6, r1
 8006360:	2e08      	cmp	r6, #8
 8006362:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006366:	dc03      	bgt.n	8006370 <_strtod_l+0x2e0>
 8006368:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800636a:	4588      	cmp	r8, r1
 800636c:	bfa8      	it	ge
 800636e:	4688      	movge	r8, r1
 8006370:	f1bc 0f00 	cmp.w	ip, #0
 8006374:	d001      	beq.n	800637a <_strtod_l+0x2ea>
 8006376:	f1c8 0800 	rsb	r8, r8, #0
 800637a:	2d00      	cmp	r5, #0
 800637c:	d14e      	bne.n	800641c <_strtod_l+0x38c>
 800637e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006380:	4308      	orrs	r0, r1
 8006382:	f47f aebe 	bne.w	8006102 <_strtod_l+0x72>
 8006386:	2b00      	cmp	r3, #0
 8006388:	f47f aed6 	bne.w	8006138 <_strtod_l+0xa8>
 800638c:	2a69      	cmp	r2, #105	@ 0x69
 800638e:	d028      	beq.n	80063e2 <_strtod_l+0x352>
 8006390:	dc25      	bgt.n	80063de <_strtod_l+0x34e>
 8006392:	2a49      	cmp	r2, #73	@ 0x49
 8006394:	d025      	beq.n	80063e2 <_strtod_l+0x352>
 8006396:	2a4e      	cmp	r2, #78	@ 0x4e
 8006398:	f47f aece 	bne.w	8006138 <_strtod_l+0xa8>
 800639c:	499b      	ldr	r1, [pc, #620]	@ (800660c <_strtod_l+0x57c>)
 800639e:	a819      	add	r0, sp, #100	@ 0x64
 80063a0:	f001 f9ea 	bl	8007778 <__match>
 80063a4:	2800      	cmp	r0, #0
 80063a6:	f43f aec7 	beq.w	8006138 <_strtod_l+0xa8>
 80063aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	2b28      	cmp	r3, #40	@ 0x28
 80063b0:	d12e      	bne.n	8006410 <_strtod_l+0x380>
 80063b2:	4997      	ldr	r1, [pc, #604]	@ (8006610 <_strtod_l+0x580>)
 80063b4:	aa1c      	add	r2, sp, #112	@ 0x70
 80063b6:	a819      	add	r0, sp, #100	@ 0x64
 80063b8:	f001 f9f2 	bl	80077a0 <__hexnan>
 80063bc:	2805      	cmp	r0, #5
 80063be:	d127      	bne.n	8006410 <_strtod_l+0x380>
 80063c0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80063c2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80063c6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80063ca:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80063ce:	e698      	b.n	8006102 <_strtod_l+0x72>
 80063d0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80063d2:	fb08 2101 	mla	r1, r8, r1, r2
 80063d6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80063da:	920e      	str	r2, [sp, #56]	@ 0x38
 80063dc:	e7b5      	b.n	800634a <_strtod_l+0x2ba>
 80063de:	2a6e      	cmp	r2, #110	@ 0x6e
 80063e0:	e7da      	b.n	8006398 <_strtod_l+0x308>
 80063e2:	498c      	ldr	r1, [pc, #560]	@ (8006614 <_strtod_l+0x584>)
 80063e4:	a819      	add	r0, sp, #100	@ 0x64
 80063e6:	f001 f9c7 	bl	8007778 <__match>
 80063ea:	2800      	cmp	r0, #0
 80063ec:	f43f aea4 	beq.w	8006138 <_strtod_l+0xa8>
 80063f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80063f2:	4989      	ldr	r1, [pc, #548]	@ (8006618 <_strtod_l+0x588>)
 80063f4:	3b01      	subs	r3, #1
 80063f6:	a819      	add	r0, sp, #100	@ 0x64
 80063f8:	9319      	str	r3, [sp, #100]	@ 0x64
 80063fa:	f001 f9bd 	bl	8007778 <__match>
 80063fe:	b910      	cbnz	r0, 8006406 <_strtod_l+0x376>
 8006400:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006402:	3301      	adds	r3, #1
 8006404:	9319      	str	r3, [sp, #100]	@ 0x64
 8006406:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8006628 <_strtod_l+0x598>
 800640a:	f04f 0a00 	mov.w	sl, #0
 800640e:	e678      	b.n	8006102 <_strtod_l+0x72>
 8006410:	4882      	ldr	r0, [pc, #520]	@ (800661c <_strtod_l+0x58c>)
 8006412:	f000 ff05 	bl	8007220 <nan>
 8006416:	ec5b ab10 	vmov	sl, fp, d0
 800641a:	e672      	b.n	8006102 <_strtod_l+0x72>
 800641c:	eba8 0309 	sub.w	r3, r8, r9
 8006420:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006422:	9309      	str	r3, [sp, #36]	@ 0x24
 8006424:	2f00      	cmp	r7, #0
 8006426:	bf08      	it	eq
 8006428:	462f      	moveq	r7, r5
 800642a:	2d10      	cmp	r5, #16
 800642c:	462c      	mov	r4, r5
 800642e:	bfa8      	it	ge
 8006430:	2410      	movge	r4, #16
 8006432:	f7fa f867 	bl	8000504 <__aeabi_ui2d>
 8006436:	2d09      	cmp	r5, #9
 8006438:	4682      	mov	sl, r0
 800643a:	468b      	mov	fp, r1
 800643c:	dc13      	bgt.n	8006466 <_strtod_l+0x3d6>
 800643e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006440:	2b00      	cmp	r3, #0
 8006442:	f43f ae5e 	beq.w	8006102 <_strtod_l+0x72>
 8006446:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006448:	dd78      	ble.n	800653c <_strtod_l+0x4ac>
 800644a:	2b16      	cmp	r3, #22
 800644c:	dc5f      	bgt.n	800650e <_strtod_l+0x47e>
 800644e:	4974      	ldr	r1, [pc, #464]	@ (8006620 <_strtod_l+0x590>)
 8006450:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006454:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006458:	4652      	mov	r2, sl
 800645a:	465b      	mov	r3, fp
 800645c:	f7fa f8cc 	bl	80005f8 <__aeabi_dmul>
 8006460:	4682      	mov	sl, r0
 8006462:	468b      	mov	fp, r1
 8006464:	e64d      	b.n	8006102 <_strtod_l+0x72>
 8006466:	4b6e      	ldr	r3, [pc, #440]	@ (8006620 <_strtod_l+0x590>)
 8006468:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800646c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006470:	f7fa f8c2 	bl	80005f8 <__aeabi_dmul>
 8006474:	4682      	mov	sl, r0
 8006476:	9808      	ldr	r0, [sp, #32]
 8006478:	468b      	mov	fp, r1
 800647a:	f7fa f843 	bl	8000504 <__aeabi_ui2d>
 800647e:	4602      	mov	r2, r0
 8006480:	460b      	mov	r3, r1
 8006482:	4650      	mov	r0, sl
 8006484:	4659      	mov	r1, fp
 8006486:	f7f9 ff01 	bl	800028c <__adddf3>
 800648a:	2d0f      	cmp	r5, #15
 800648c:	4682      	mov	sl, r0
 800648e:	468b      	mov	fp, r1
 8006490:	ddd5      	ble.n	800643e <_strtod_l+0x3ae>
 8006492:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006494:	1b2c      	subs	r4, r5, r4
 8006496:	441c      	add	r4, r3
 8006498:	2c00      	cmp	r4, #0
 800649a:	f340 8096 	ble.w	80065ca <_strtod_l+0x53a>
 800649e:	f014 030f 	ands.w	r3, r4, #15
 80064a2:	d00a      	beq.n	80064ba <_strtod_l+0x42a>
 80064a4:	495e      	ldr	r1, [pc, #376]	@ (8006620 <_strtod_l+0x590>)
 80064a6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80064aa:	4652      	mov	r2, sl
 80064ac:	465b      	mov	r3, fp
 80064ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064b2:	f7fa f8a1 	bl	80005f8 <__aeabi_dmul>
 80064b6:	4682      	mov	sl, r0
 80064b8:	468b      	mov	fp, r1
 80064ba:	f034 040f 	bics.w	r4, r4, #15
 80064be:	d073      	beq.n	80065a8 <_strtod_l+0x518>
 80064c0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80064c4:	dd48      	ble.n	8006558 <_strtod_l+0x4c8>
 80064c6:	2400      	movs	r4, #0
 80064c8:	46a0      	mov	r8, r4
 80064ca:	940a      	str	r4, [sp, #40]	@ 0x28
 80064cc:	46a1      	mov	r9, r4
 80064ce:	9a05      	ldr	r2, [sp, #20]
 80064d0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8006628 <_strtod_l+0x598>
 80064d4:	2322      	movs	r3, #34	@ 0x22
 80064d6:	6013      	str	r3, [r2, #0]
 80064d8:	f04f 0a00 	mov.w	sl, #0
 80064dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064de:	2b00      	cmp	r3, #0
 80064e0:	f43f ae0f 	beq.w	8006102 <_strtod_l+0x72>
 80064e4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80064e6:	9805      	ldr	r0, [sp, #20]
 80064e8:	f7ff f942 	bl	8005770 <_Bfree>
 80064ec:	9805      	ldr	r0, [sp, #20]
 80064ee:	4649      	mov	r1, r9
 80064f0:	f7ff f93e 	bl	8005770 <_Bfree>
 80064f4:	9805      	ldr	r0, [sp, #20]
 80064f6:	4641      	mov	r1, r8
 80064f8:	f7ff f93a 	bl	8005770 <_Bfree>
 80064fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80064fe:	9805      	ldr	r0, [sp, #20]
 8006500:	f7ff f936 	bl	8005770 <_Bfree>
 8006504:	9805      	ldr	r0, [sp, #20]
 8006506:	4621      	mov	r1, r4
 8006508:	f7ff f932 	bl	8005770 <_Bfree>
 800650c:	e5f9      	b.n	8006102 <_strtod_l+0x72>
 800650e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006510:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006514:	4293      	cmp	r3, r2
 8006516:	dbbc      	blt.n	8006492 <_strtod_l+0x402>
 8006518:	4c41      	ldr	r4, [pc, #260]	@ (8006620 <_strtod_l+0x590>)
 800651a:	f1c5 050f 	rsb	r5, r5, #15
 800651e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006522:	4652      	mov	r2, sl
 8006524:	465b      	mov	r3, fp
 8006526:	e9d1 0100 	ldrd	r0, r1, [r1]
 800652a:	f7fa f865 	bl	80005f8 <__aeabi_dmul>
 800652e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006530:	1b5d      	subs	r5, r3, r5
 8006532:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006536:	e9d4 2300 	ldrd	r2, r3, [r4]
 800653a:	e78f      	b.n	800645c <_strtod_l+0x3cc>
 800653c:	3316      	adds	r3, #22
 800653e:	dba8      	blt.n	8006492 <_strtod_l+0x402>
 8006540:	4b37      	ldr	r3, [pc, #220]	@ (8006620 <_strtod_l+0x590>)
 8006542:	eba9 0808 	sub.w	r8, r9, r8
 8006546:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800654a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800654e:	4650      	mov	r0, sl
 8006550:	4659      	mov	r1, fp
 8006552:	f7fa f97b 	bl	800084c <__aeabi_ddiv>
 8006556:	e783      	b.n	8006460 <_strtod_l+0x3d0>
 8006558:	4b32      	ldr	r3, [pc, #200]	@ (8006624 <_strtod_l+0x594>)
 800655a:	9308      	str	r3, [sp, #32]
 800655c:	2300      	movs	r3, #0
 800655e:	1124      	asrs	r4, r4, #4
 8006560:	4650      	mov	r0, sl
 8006562:	4659      	mov	r1, fp
 8006564:	461e      	mov	r6, r3
 8006566:	2c01      	cmp	r4, #1
 8006568:	dc21      	bgt.n	80065ae <_strtod_l+0x51e>
 800656a:	b10b      	cbz	r3, 8006570 <_strtod_l+0x4e0>
 800656c:	4682      	mov	sl, r0
 800656e:	468b      	mov	fp, r1
 8006570:	492c      	ldr	r1, [pc, #176]	@ (8006624 <_strtod_l+0x594>)
 8006572:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006576:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800657a:	4652      	mov	r2, sl
 800657c:	465b      	mov	r3, fp
 800657e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006582:	f7fa f839 	bl	80005f8 <__aeabi_dmul>
 8006586:	4b28      	ldr	r3, [pc, #160]	@ (8006628 <_strtod_l+0x598>)
 8006588:	460a      	mov	r2, r1
 800658a:	400b      	ands	r3, r1
 800658c:	4927      	ldr	r1, [pc, #156]	@ (800662c <_strtod_l+0x59c>)
 800658e:	428b      	cmp	r3, r1
 8006590:	4682      	mov	sl, r0
 8006592:	d898      	bhi.n	80064c6 <_strtod_l+0x436>
 8006594:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006598:	428b      	cmp	r3, r1
 800659a:	bf86      	itte	hi
 800659c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8006630 <_strtod_l+0x5a0>
 80065a0:	f04f 3aff 	movhi.w	sl, #4294967295
 80065a4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80065a8:	2300      	movs	r3, #0
 80065aa:	9308      	str	r3, [sp, #32]
 80065ac:	e07a      	b.n	80066a4 <_strtod_l+0x614>
 80065ae:	07e2      	lsls	r2, r4, #31
 80065b0:	d505      	bpl.n	80065be <_strtod_l+0x52e>
 80065b2:	9b08      	ldr	r3, [sp, #32]
 80065b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b8:	f7fa f81e 	bl	80005f8 <__aeabi_dmul>
 80065bc:	2301      	movs	r3, #1
 80065be:	9a08      	ldr	r2, [sp, #32]
 80065c0:	3208      	adds	r2, #8
 80065c2:	3601      	adds	r6, #1
 80065c4:	1064      	asrs	r4, r4, #1
 80065c6:	9208      	str	r2, [sp, #32]
 80065c8:	e7cd      	b.n	8006566 <_strtod_l+0x4d6>
 80065ca:	d0ed      	beq.n	80065a8 <_strtod_l+0x518>
 80065cc:	4264      	negs	r4, r4
 80065ce:	f014 020f 	ands.w	r2, r4, #15
 80065d2:	d00a      	beq.n	80065ea <_strtod_l+0x55a>
 80065d4:	4b12      	ldr	r3, [pc, #72]	@ (8006620 <_strtod_l+0x590>)
 80065d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065da:	4650      	mov	r0, sl
 80065dc:	4659      	mov	r1, fp
 80065de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e2:	f7fa f933 	bl	800084c <__aeabi_ddiv>
 80065e6:	4682      	mov	sl, r0
 80065e8:	468b      	mov	fp, r1
 80065ea:	1124      	asrs	r4, r4, #4
 80065ec:	d0dc      	beq.n	80065a8 <_strtod_l+0x518>
 80065ee:	2c1f      	cmp	r4, #31
 80065f0:	dd20      	ble.n	8006634 <_strtod_l+0x5a4>
 80065f2:	2400      	movs	r4, #0
 80065f4:	46a0      	mov	r8, r4
 80065f6:	940a      	str	r4, [sp, #40]	@ 0x28
 80065f8:	46a1      	mov	r9, r4
 80065fa:	9a05      	ldr	r2, [sp, #20]
 80065fc:	2322      	movs	r3, #34	@ 0x22
 80065fe:	f04f 0a00 	mov.w	sl, #0
 8006602:	f04f 0b00 	mov.w	fp, #0
 8006606:	6013      	str	r3, [r2, #0]
 8006608:	e768      	b.n	80064dc <_strtod_l+0x44c>
 800660a:	bf00      	nop
 800660c:	08007fa4 	.word	0x08007fa4
 8006610:	080081dc 	.word	0x080081dc
 8006614:	08007f9c 	.word	0x08007f9c
 8006618:	0800800f 	.word	0x0800800f
 800661c:	0800800b 	.word	0x0800800b
 8006620:	08008110 	.word	0x08008110
 8006624:	080080e8 	.word	0x080080e8
 8006628:	7ff00000 	.word	0x7ff00000
 800662c:	7ca00000 	.word	0x7ca00000
 8006630:	7fefffff 	.word	0x7fefffff
 8006634:	f014 0310 	ands.w	r3, r4, #16
 8006638:	bf18      	it	ne
 800663a:	236a      	movne	r3, #106	@ 0x6a
 800663c:	4ea9      	ldr	r6, [pc, #676]	@ (80068e4 <_strtod_l+0x854>)
 800663e:	9308      	str	r3, [sp, #32]
 8006640:	4650      	mov	r0, sl
 8006642:	4659      	mov	r1, fp
 8006644:	2300      	movs	r3, #0
 8006646:	07e2      	lsls	r2, r4, #31
 8006648:	d504      	bpl.n	8006654 <_strtod_l+0x5c4>
 800664a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800664e:	f7f9 ffd3 	bl	80005f8 <__aeabi_dmul>
 8006652:	2301      	movs	r3, #1
 8006654:	1064      	asrs	r4, r4, #1
 8006656:	f106 0608 	add.w	r6, r6, #8
 800665a:	d1f4      	bne.n	8006646 <_strtod_l+0x5b6>
 800665c:	b10b      	cbz	r3, 8006662 <_strtod_l+0x5d2>
 800665e:	4682      	mov	sl, r0
 8006660:	468b      	mov	fp, r1
 8006662:	9b08      	ldr	r3, [sp, #32]
 8006664:	b1b3      	cbz	r3, 8006694 <_strtod_l+0x604>
 8006666:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800666a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800666e:	2b00      	cmp	r3, #0
 8006670:	4659      	mov	r1, fp
 8006672:	dd0f      	ble.n	8006694 <_strtod_l+0x604>
 8006674:	2b1f      	cmp	r3, #31
 8006676:	dd55      	ble.n	8006724 <_strtod_l+0x694>
 8006678:	2b34      	cmp	r3, #52	@ 0x34
 800667a:	bfde      	ittt	le
 800667c:	f04f 33ff 	movle.w	r3, #4294967295
 8006680:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006684:	4093      	lslle	r3, r2
 8006686:	f04f 0a00 	mov.w	sl, #0
 800668a:	bfcc      	ite	gt
 800668c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006690:	ea03 0b01 	andle.w	fp, r3, r1
 8006694:	2200      	movs	r2, #0
 8006696:	2300      	movs	r3, #0
 8006698:	4650      	mov	r0, sl
 800669a:	4659      	mov	r1, fp
 800669c:	f7fa fa14 	bl	8000ac8 <__aeabi_dcmpeq>
 80066a0:	2800      	cmp	r0, #0
 80066a2:	d1a6      	bne.n	80065f2 <_strtod_l+0x562>
 80066a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066a6:	9300      	str	r3, [sp, #0]
 80066a8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80066aa:	9805      	ldr	r0, [sp, #20]
 80066ac:	462b      	mov	r3, r5
 80066ae:	463a      	mov	r2, r7
 80066b0:	f7ff f8c6 	bl	8005840 <__s2b>
 80066b4:	900a      	str	r0, [sp, #40]	@ 0x28
 80066b6:	2800      	cmp	r0, #0
 80066b8:	f43f af05 	beq.w	80064c6 <_strtod_l+0x436>
 80066bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80066be:	2a00      	cmp	r2, #0
 80066c0:	eba9 0308 	sub.w	r3, r9, r8
 80066c4:	bfa8      	it	ge
 80066c6:	2300      	movge	r3, #0
 80066c8:	9312      	str	r3, [sp, #72]	@ 0x48
 80066ca:	2400      	movs	r4, #0
 80066cc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80066d0:	9316      	str	r3, [sp, #88]	@ 0x58
 80066d2:	46a0      	mov	r8, r4
 80066d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066d6:	9805      	ldr	r0, [sp, #20]
 80066d8:	6859      	ldr	r1, [r3, #4]
 80066da:	f7ff f809 	bl	80056f0 <_Balloc>
 80066de:	4681      	mov	r9, r0
 80066e0:	2800      	cmp	r0, #0
 80066e2:	f43f aef4 	beq.w	80064ce <_strtod_l+0x43e>
 80066e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066e8:	691a      	ldr	r2, [r3, #16]
 80066ea:	3202      	adds	r2, #2
 80066ec:	f103 010c 	add.w	r1, r3, #12
 80066f0:	0092      	lsls	r2, r2, #2
 80066f2:	300c      	adds	r0, #12
 80066f4:	f000 fd84 	bl	8007200 <memcpy>
 80066f8:	ec4b ab10 	vmov	d0, sl, fp
 80066fc:	9805      	ldr	r0, [sp, #20]
 80066fe:	aa1c      	add	r2, sp, #112	@ 0x70
 8006700:	a91b      	add	r1, sp, #108	@ 0x6c
 8006702:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006706:	f7ff fbd7 	bl	8005eb8 <__d2b>
 800670a:	901a      	str	r0, [sp, #104]	@ 0x68
 800670c:	2800      	cmp	r0, #0
 800670e:	f43f aede 	beq.w	80064ce <_strtod_l+0x43e>
 8006712:	9805      	ldr	r0, [sp, #20]
 8006714:	2101      	movs	r1, #1
 8006716:	f7ff f929 	bl	800596c <__i2b>
 800671a:	4680      	mov	r8, r0
 800671c:	b948      	cbnz	r0, 8006732 <_strtod_l+0x6a2>
 800671e:	f04f 0800 	mov.w	r8, #0
 8006722:	e6d4      	b.n	80064ce <_strtod_l+0x43e>
 8006724:	f04f 32ff 	mov.w	r2, #4294967295
 8006728:	fa02 f303 	lsl.w	r3, r2, r3
 800672c:	ea03 0a0a 	and.w	sl, r3, sl
 8006730:	e7b0      	b.n	8006694 <_strtod_l+0x604>
 8006732:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006734:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006736:	2d00      	cmp	r5, #0
 8006738:	bfab      	itete	ge
 800673a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800673c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800673e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006740:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006742:	bfac      	ite	ge
 8006744:	18ef      	addge	r7, r5, r3
 8006746:	1b5e      	sublt	r6, r3, r5
 8006748:	9b08      	ldr	r3, [sp, #32]
 800674a:	1aed      	subs	r5, r5, r3
 800674c:	4415      	add	r5, r2
 800674e:	4b66      	ldr	r3, [pc, #408]	@ (80068e8 <_strtod_l+0x858>)
 8006750:	3d01      	subs	r5, #1
 8006752:	429d      	cmp	r5, r3
 8006754:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006758:	da50      	bge.n	80067fc <_strtod_l+0x76c>
 800675a:	1b5b      	subs	r3, r3, r5
 800675c:	2b1f      	cmp	r3, #31
 800675e:	eba2 0203 	sub.w	r2, r2, r3
 8006762:	f04f 0101 	mov.w	r1, #1
 8006766:	dc3d      	bgt.n	80067e4 <_strtod_l+0x754>
 8006768:	fa01 f303 	lsl.w	r3, r1, r3
 800676c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800676e:	2300      	movs	r3, #0
 8006770:	9310      	str	r3, [sp, #64]	@ 0x40
 8006772:	18bd      	adds	r5, r7, r2
 8006774:	9b08      	ldr	r3, [sp, #32]
 8006776:	42af      	cmp	r7, r5
 8006778:	4416      	add	r6, r2
 800677a:	441e      	add	r6, r3
 800677c:	463b      	mov	r3, r7
 800677e:	bfa8      	it	ge
 8006780:	462b      	movge	r3, r5
 8006782:	42b3      	cmp	r3, r6
 8006784:	bfa8      	it	ge
 8006786:	4633      	movge	r3, r6
 8006788:	2b00      	cmp	r3, #0
 800678a:	bfc2      	ittt	gt
 800678c:	1aed      	subgt	r5, r5, r3
 800678e:	1af6      	subgt	r6, r6, r3
 8006790:	1aff      	subgt	r7, r7, r3
 8006792:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006794:	2b00      	cmp	r3, #0
 8006796:	dd16      	ble.n	80067c6 <_strtod_l+0x736>
 8006798:	4641      	mov	r1, r8
 800679a:	9805      	ldr	r0, [sp, #20]
 800679c:	461a      	mov	r2, r3
 800679e:	f7ff f9a5 	bl	8005aec <__pow5mult>
 80067a2:	4680      	mov	r8, r0
 80067a4:	2800      	cmp	r0, #0
 80067a6:	d0ba      	beq.n	800671e <_strtod_l+0x68e>
 80067a8:	4601      	mov	r1, r0
 80067aa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80067ac:	9805      	ldr	r0, [sp, #20]
 80067ae:	f7ff f8f3 	bl	8005998 <__multiply>
 80067b2:	900e      	str	r0, [sp, #56]	@ 0x38
 80067b4:	2800      	cmp	r0, #0
 80067b6:	f43f ae8a 	beq.w	80064ce <_strtod_l+0x43e>
 80067ba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80067bc:	9805      	ldr	r0, [sp, #20]
 80067be:	f7fe ffd7 	bl	8005770 <_Bfree>
 80067c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80067c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80067c6:	2d00      	cmp	r5, #0
 80067c8:	dc1d      	bgt.n	8006806 <_strtod_l+0x776>
 80067ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	dd23      	ble.n	8006818 <_strtod_l+0x788>
 80067d0:	4649      	mov	r1, r9
 80067d2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80067d4:	9805      	ldr	r0, [sp, #20]
 80067d6:	f7ff f989 	bl	8005aec <__pow5mult>
 80067da:	4681      	mov	r9, r0
 80067dc:	b9e0      	cbnz	r0, 8006818 <_strtod_l+0x788>
 80067de:	f04f 0900 	mov.w	r9, #0
 80067e2:	e674      	b.n	80064ce <_strtod_l+0x43e>
 80067e4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80067e8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80067ec:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80067f0:	35e2      	adds	r5, #226	@ 0xe2
 80067f2:	fa01 f305 	lsl.w	r3, r1, r5
 80067f6:	9310      	str	r3, [sp, #64]	@ 0x40
 80067f8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80067fa:	e7ba      	b.n	8006772 <_strtod_l+0x6e2>
 80067fc:	2300      	movs	r3, #0
 80067fe:	9310      	str	r3, [sp, #64]	@ 0x40
 8006800:	2301      	movs	r3, #1
 8006802:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006804:	e7b5      	b.n	8006772 <_strtod_l+0x6e2>
 8006806:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006808:	9805      	ldr	r0, [sp, #20]
 800680a:	462a      	mov	r2, r5
 800680c:	f7ff f9c8 	bl	8005ba0 <__lshift>
 8006810:	901a      	str	r0, [sp, #104]	@ 0x68
 8006812:	2800      	cmp	r0, #0
 8006814:	d1d9      	bne.n	80067ca <_strtod_l+0x73a>
 8006816:	e65a      	b.n	80064ce <_strtod_l+0x43e>
 8006818:	2e00      	cmp	r6, #0
 800681a:	dd07      	ble.n	800682c <_strtod_l+0x79c>
 800681c:	4649      	mov	r1, r9
 800681e:	9805      	ldr	r0, [sp, #20]
 8006820:	4632      	mov	r2, r6
 8006822:	f7ff f9bd 	bl	8005ba0 <__lshift>
 8006826:	4681      	mov	r9, r0
 8006828:	2800      	cmp	r0, #0
 800682a:	d0d8      	beq.n	80067de <_strtod_l+0x74e>
 800682c:	2f00      	cmp	r7, #0
 800682e:	dd08      	ble.n	8006842 <_strtod_l+0x7b2>
 8006830:	4641      	mov	r1, r8
 8006832:	9805      	ldr	r0, [sp, #20]
 8006834:	463a      	mov	r2, r7
 8006836:	f7ff f9b3 	bl	8005ba0 <__lshift>
 800683a:	4680      	mov	r8, r0
 800683c:	2800      	cmp	r0, #0
 800683e:	f43f ae46 	beq.w	80064ce <_strtod_l+0x43e>
 8006842:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006844:	9805      	ldr	r0, [sp, #20]
 8006846:	464a      	mov	r2, r9
 8006848:	f7ff fa32 	bl	8005cb0 <__mdiff>
 800684c:	4604      	mov	r4, r0
 800684e:	2800      	cmp	r0, #0
 8006850:	f43f ae3d 	beq.w	80064ce <_strtod_l+0x43e>
 8006854:	68c3      	ldr	r3, [r0, #12]
 8006856:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006858:	2300      	movs	r3, #0
 800685a:	60c3      	str	r3, [r0, #12]
 800685c:	4641      	mov	r1, r8
 800685e:	f7ff fa0b 	bl	8005c78 <__mcmp>
 8006862:	2800      	cmp	r0, #0
 8006864:	da46      	bge.n	80068f4 <_strtod_l+0x864>
 8006866:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006868:	ea53 030a 	orrs.w	r3, r3, sl
 800686c:	d16c      	bne.n	8006948 <_strtod_l+0x8b8>
 800686e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006872:	2b00      	cmp	r3, #0
 8006874:	d168      	bne.n	8006948 <_strtod_l+0x8b8>
 8006876:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800687a:	0d1b      	lsrs	r3, r3, #20
 800687c:	051b      	lsls	r3, r3, #20
 800687e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006882:	d961      	bls.n	8006948 <_strtod_l+0x8b8>
 8006884:	6963      	ldr	r3, [r4, #20]
 8006886:	b913      	cbnz	r3, 800688e <_strtod_l+0x7fe>
 8006888:	6923      	ldr	r3, [r4, #16]
 800688a:	2b01      	cmp	r3, #1
 800688c:	dd5c      	ble.n	8006948 <_strtod_l+0x8b8>
 800688e:	4621      	mov	r1, r4
 8006890:	2201      	movs	r2, #1
 8006892:	9805      	ldr	r0, [sp, #20]
 8006894:	f7ff f984 	bl	8005ba0 <__lshift>
 8006898:	4641      	mov	r1, r8
 800689a:	4604      	mov	r4, r0
 800689c:	f7ff f9ec 	bl	8005c78 <__mcmp>
 80068a0:	2800      	cmp	r0, #0
 80068a2:	dd51      	ble.n	8006948 <_strtod_l+0x8b8>
 80068a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80068a8:	9a08      	ldr	r2, [sp, #32]
 80068aa:	0d1b      	lsrs	r3, r3, #20
 80068ac:	051b      	lsls	r3, r3, #20
 80068ae:	2a00      	cmp	r2, #0
 80068b0:	d06b      	beq.n	800698a <_strtod_l+0x8fa>
 80068b2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80068b6:	d868      	bhi.n	800698a <_strtod_l+0x8fa>
 80068b8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80068bc:	f67f ae9d 	bls.w	80065fa <_strtod_l+0x56a>
 80068c0:	4b0a      	ldr	r3, [pc, #40]	@ (80068ec <_strtod_l+0x85c>)
 80068c2:	4650      	mov	r0, sl
 80068c4:	4659      	mov	r1, fp
 80068c6:	2200      	movs	r2, #0
 80068c8:	f7f9 fe96 	bl	80005f8 <__aeabi_dmul>
 80068cc:	4b08      	ldr	r3, [pc, #32]	@ (80068f0 <_strtod_l+0x860>)
 80068ce:	400b      	ands	r3, r1
 80068d0:	4682      	mov	sl, r0
 80068d2:	468b      	mov	fp, r1
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f47f ae05 	bne.w	80064e4 <_strtod_l+0x454>
 80068da:	9a05      	ldr	r2, [sp, #20]
 80068dc:	2322      	movs	r3, #34	@ 0x22
 80068de:	6013      	str	r3, [r2, #0]
 80068e0:	e600      	b.n	80064e4 <_strtod_l+0x454>
 80068e2:	bf00      	nop
 80068e4:	08008208 	.word	0x08008208
 80068e8:	fffffc02 	.word	0xfffffc02
 80068ec:	39500000 	.word	0x39500000
 80068f0:	7ff00000 	.word	0x7ff00000
 80068f4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80068f8:	d165      	bne.n	80069c6 <_strtod_l+0x936>
 80068fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80068fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006900:	b35a      	cbz	r2, 800695a <_strtod_l+0x8ca>
 8006902:	4a9f      	ldr	r2, [pc, #636]	@ (8006b80 <_strtod_l+0xaf0>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d12b      	bne.n	8006960 <_strtod_l+0x8d0>
 8006908:	9b08      	ldr	r3, [sp, #32]
 800690a:	4651      	mov	r1, sl
 800690c:	b303      	cbz	r3, 8006950 <_strtod_l+0x8c0>
 800690e:	4b9d      	ldr	r3, [pc, #628]	@ (8006b84 <_strtod_l+0xaf4>)
 8006910:	465a      	mov	r2, fp
 8006912:	4013      	ands	r3, r2
 8006914:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006918:	f04f 32ff 	mov.w	r2, #4294967295
 800691c:	d81b      	bhi.n	8006956 <_strtod_l+0x8c6>
 800691e:	0d1b      	lsrs	r3, r3, #20
 8006920:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006924:	fa02 f303 	lsl.w	r3, r2, r3
 8006928:	4299      	cmp	r1, r3
 800692a:	d119      	bne.n	8006960 <_strtod_l+0x8d0>
 800692c:	4b96      	ldr	r3, [pc, #600]	@ (8006b88 <_strtod_l+0xaf8>)
 800692e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006930:	429a      	cmp	r2, r3
 8006932:	d102      	bne.n	800693a <_strtod_l+0x8aa>
 8006934:	3101      	adds	r1, #1
 8006936:	f43f adca 	beq.w	80064ce <_strtod_l+0x43e>
 800693a:	4b92      	ldr	r3, [pc, #584]	@ (8006b84 <_strtod_l+0xaf4>)
 800693c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800693e:	401a      	ands	r2, r3
 8006940:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006944:	f04f 0a00 	mov.w	sl, #0
 8006948:	9b08      	ldr	r3, [sp, #32]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1b8      	bne.n	80068c0 <_strtod_l+0x830>
 800694e:	e5c9      	b.n	80064e4 <_strtod_l+0x454>
 8006950:	f04f 33ff 	mov.w	r3, #4294967295
 8006954:	e7e8      	b.n	8006928 <_strtod_l+0x898>
 8006956:	4613      	mov	r3, r2
 8006958:	e7e6      	b.n	8006928 <_strtod_l+0x898>
 800695a:	ea53 030a 	orrs.w	r3, r3, sl
 800695e:	d0a1      	beq.n	80068a4 <_strtod_l+0x814>
 8006960:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006962:	b1db      	cbz	r3, 800699c <_strtod_l+0x90c>
 8006964:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006966:	4213      	tst	r3, r2
 8006968:	d0ee      	beq.n	8006948 <_strtod_l+0x8b8>
 800696a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800696c:	9a08      	ldr	r2, [sp, #32]
 800696e:	4650      	mov	r0, sl
 8006970:	4659      	mov	r1, fp
 8006972:	b1bb      	cbz	r3, 80069a4 <_strtod_l+0x914>
 8006974:	f7ff fb6e 	bl	8006054 <sulp>
 8006978:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800697c:	ec53 2b10 	vmov	r2, r3, d0
 8006980:	f7f9 fc84 	bl	800028c <__adddf3>
 8006984:	4682      	mov	sl, r0
 8006986:	468b      	mov	fp, r1
 8006988:	e7de      	b.n	8006948 <_strtod_l+0x8b8>
 800698a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800698e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006992:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006996:	f04f 3aff 	mov.w	sl, #4294967295
 800699a:	e7d5      	b.n	8006948 <_strtod_l+0x8b8>
 800699c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800699e:	ea13 0f0a 	tst.w	r3, sl
 80069a2:	e7e1      	b.n	8006968 <_strtod_l+0x8d8>
 80069a4:	f7ff fb56 	bl	8006054 <sulp>
 80069a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80069ac:	ec53 2b10 	vmov	r2, r3, d0
 80069b0:	f7f9 fc6a 	bl	8000288 <__aeabi_dsub>
 80069b4:	2200      	movs	r2, #0
 80069b6:	2300      	movs	r3, #0
 80069b8:	4682      	mov	sl, r0
 80069ba:	468b      	mov	fp, r1
 80069bc:	f7fa f884 	bl	8000ac8 <__aeabi_dcmpeq>
 80069c0:	2800      	cmp	r0, #0
 80069c2:	d0c1      	beq.n	8006948 <_strtod_l+0x8b8>
 80069c4:	e619      	b.n	80065fa <_strtod_l+0x56a>
 80069c6:	4641      	mov	r1, r8
 80069c8:	4620      	mov	r0, r4
 80069ca:	f7ff facd 	bl	8005f68 <__ratio>
 80069ce:	ec57 6b10 	vmov	r6, r7, d0
 80069d2:	2200      	movs	r2, #0
 80069d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80069d8:	4630      	mov	r0, r6
 80069da:	4639      	mov	r1, r7
 80069dc:	f7fa f888 	bl	8000af0 <__aeabi_dcmple>
 80069e0:	2800      	cmp	r0, #0
 80069e2:	d06f      	beq.n	8006ac4 <_strtod_l+0xa34>
 80069e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d17a      	bne.n	8006ae0 <_strtod_l+0xa50>
 80069ea:	f1ba 0f00 	cmp.w	sl, #0
 80069ee:	d158      	bne.n	8006aa2 <_strtod_l+0xa12>
 80069f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80069f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d15a      	bne.n	8006ab0 <_strtod_l+0xa20>
 80069fa:	4b64      	ldr	r3, [pc, #400]	@ (8006b8c <_strtod_l+0xafc>)
 80069fc:	2200      	movs	r2, #0
 80069fe:	4630      	mov	r0, r6
 8006a00:	4639      	mov	r1, r7
 8006a02:	f7fa f86b 	bl	8000adc <__aeabi_dcmplt>
 8006a06:	2800      	cmp	r0, #0
 8006a08:	d159      	bne.n	8006abe <_strtod_l+0xa2e>
 8006a0a:	4630      	mov	r0, r6
 8006a0c:	4639      	mov	r1, r7
 8006a0e:	4b60      	ldr	r3, [pc, #384]	@ (8006b90 <_strtod_l+0xb00>)
 8006a10:	2200      	movs	r2, #0
 8006a12:	f7f9 fdf1 	bl	80005f8 <__aeabi_dmul>
 8006a16:	4606      	mov	r6, r0
 8006a18:	460f      	mov	r7, r1
 8006a1a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006a1e:	9606      	str	r6, [sp, #24]
 8006a20:	9307      	str	r3, [sp, #28]
 8006a22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a26:	4d57      	ldr	r5, [pc, #348]	@ (8006b84 <_strtod_l+0xaf4>)
 8006a28:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006a2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006a2e:	401d      	ands	r5, r3
 8006a30:	4b58      	ldr	r3, [pc, #352]	@ (8006b94 <_strtod_l+0xb04>)
 8006a32:	429d      	cmp	r5, r3
 8006a34:	f040 80b2 	bne.w	8006b9c <_strtod_l+0xb0c>
 8006a38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006a3a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006a3e:	ec4b ab10 	vmov	d0, sl, fp
 8006a42:	f7ff f9c9 	bl	8005dd8 <__ulp>
 8006a46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a4a:	ec51 0b10 	vmov	r0, r1, d0
 8006a4e:	f7f9 fdd3 	bl	80005f8 <__aeabi_dmul>
 8006a52:	4652      	mov	r2, sl
 8006a54:	465b      	mov	r3, fp
 8006a56:	f7f9 fc19 	bl	800028c <__adddf3>
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	4949      	ldr	r1, [pc, #292]	@ (8006b84 <_strtod_l+0xaf4>)
 8006a5e:	4a4e      	ldr	r2, [pc, #312]	@ (8006b98 <_strtod_l+0xb08>)
 8006a60:	4019      	ands	r1, r3
 8006a62:	4291      	cmp	r1, r2
 8006a64:	4682      	mov	sl, r0
 8006a66:	d942      	bls.n	8006aee <_strtod_l+0xa5e>
 8006a68:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006a6a:	4b47      	ldr	r3, [pc, #284]	@ (8006b88 <_strtod_l+0xaf8>)
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d103      	bne.n	8006a78 <_strtod_l+0x9e8>
 8006a70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006a72:	3301      	adds	r3, #1
 8006a74:	f43f ad2b 	beq.w	80064ce <_strtod_l+0x43e>
 8006a78:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8006b88 <_strtod_l+0xaf8>
 8006a7c:	f04f 3aff 	mov.w	sl, #4294967295
 8006a80:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006a82:	9805      	ldr	r0, [sp, #20]
 8006a84:	f7fe fe74 	bl	8005770 <_Bfree>
 8006a88:	9805      	ldr	r0, [sp, #20]
 8006a8a:	4649      	mov	r1, r9
 8006a8c:	f7fe fe70 	bl	8005770 <_Bfree>
 8006a90:	9805      	ldr	r0, [sp, #20]
 8006a92:	4641      	mov	r1, r8
 8006a94:	f7fe fe6c 	bl	8005770 <_Bfree>
 8006a98:	9805      	ldr	r0, [sp, #20]
 8006a9a:	4621      	mov	r1, r4
 8006a9c:	f7fe fe68 	bl	8005770 <_Bfree>
 8006aa0:	e618      	b.n	80066d4 <_strtod_l+0x644>
 8006aa2:	f1ba 0f01 	cmp.w	sl, #1
 8006aa6:	d103      	bne.n	8006ab0 <_strtod_l+0xa20>
 8006aa8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f43f ada5 	beq.w	80065fa <_strtod_l+0x56a>
 8006ab0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8006b60 <_strtod_l+0xad0>
 8006ab4:	4f35      	ldr	r7, [pc, #212]	@ (8006b8c <_strtod_l+0xafc>)
 8006ab6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006aba:	2600      	movs	r6, #0
 8006abc:	e7b1      	b.n	8006a22 <_strtod_l+0x992>
 8006abe:	4f34      	ldr	r7, [pc, #208]	@ (8006b90 <_strtod_l+0xb00>)
 8006ac0:	2600      	movs	r6, #0
 8006ac2:	e7aa      	b.n	8006a1a <_strtod_l+0x98a>
 8006ac4:	4b32      	ldr	r3, [pc, #200]	@ (8006b90 <_strtod_l+0xb00>)
 8006ac6:	4630      	mov	r0, r6
 8006ac8:	4639      	mov	r1, r7
 8006aca:	2200      	movs	r2, #0
 8006acc:	f7f9 fd94 	bl	80005f8 <__aeabi_dmul>
 8006ad0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ad2:	4606      	mov	r6, r0
 8006ad4:	460f      	mov	r7, r1
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d09f      	beq.n	8006a1a <_strtod_l+0x98a>
 8006ada:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006ade:	e7a0      	b.n	8006a22 <_strtod_l+0x992>
 8006ae0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8006b68 <_strtod_l+0xad8>
 8006ae4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006ae8:	ec57 6b17 	vmov	r6, r7, d7
 8006aec:	e799      	b.n	8006a22 <_strtod_l+0x992>
 8006aee:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8006af2:	9b08      	ldr	r3, [sp, #32]
 8006af4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1c1      	bne.n	8006a80 <_strtod_l+0x9f0>
 8006afc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006b00:	0d1b      	lsrs	r3, r3, #20
 8006b02:	051b      	lsls	r3, r3, #20
 8006b04:	429d      	cmp	r5, r3
 8006b06:	d1bb      	bne.n	8006a80 <_strtod_l+0x9f0>
 8006b08:	4630      	mov	r0, r6
 8006b0a:	4639      	mov	r1, r7
 8006b0c:	f7fa f8bc 	bl	8000c88 <__aeabi_d2lz>
 8006b10:	f7f9 fd44 	bl	800059c <__aeabi_l2d>
 8006b14:	4602      	mov	r2, r0
 8006b16:	460b      	mov	r3, r1
 8006b18:	4630      	mov	r0, r6
 8006b1a:	4639      	mov	r1, r7
 8006b1c:	f7f9 fbb4 	bl	8000288 <__aeabi_dsub>
 8006b20:	460b      	mov	r3, r1
 8006b22:	4602      	mov	r2, r0
 8006b24:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006b28:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006b2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006b2e:	ea46 060a 	orr.w	r6, r6, sl
 8006b32:	431e      	orrs	r6, r3
 8006b34:	d06f      	beq.n	8006c16 <_strtod_l+0xb86>
 8006b36:	a30e      	add	r3, pc, #56	@ (adr r3, 8006b70 <_strtod_l+0xae0>)
 8006b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3c:	f7f9 ffce 	bl	8000adc <__aeabi_dcmplt>
 8006b40:	2800      	cmp	r0, #0
 8006b42:	f47f accf 	bne.w	80064e4 <_strtod_l+0x454>
 8006b46:	a30c      	add	r3, pc, #48	@ (adr r3, 8006b78 <_strtod_l+0xae8>)
 8006b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b50:	f7f9 ffe2 	bl	8000b18 <__aeabi_dcmpgt>
 8006b54:	2800      	cmp	r0, #0
 8006b56:	d093      	beq.n	8006a80 <_strtod_l+0x9f0>
 8006b58:	e4c4      	b.n	80064e4 <_strtod_l+0x454>
 8006b5a:	bf00      	nop
 8006b5c:	f3af 8000 	nop.w
 8006b60:	00000000 	.word	0x00000000
 8006b64:	bff00000 	.word	0xbff00000
 8006b68:	00000000 	.word	0x00000000
 8006b6c:	3ff00000 	.word	0x3ff00000
 8006b70:	94a03595 	.word	0x94a03595
 8006b74:	3fdfffff 	.word	0x3fdfffff
 8006b78:	35afe535 	.word	0x35afe535
 8006b7c:	3fe00000 	.word	0x3fe00000
 8006b80:	000fffff 	.word	0x000fffff
 8006b84:	7ff00000 	.word	0x7ff00000
 8006b88:	7fefffff 	.word	0x7fefffff
 8006b8c:	3ff00000 	.word	0x3ff00000
 8006b90:	3fe00000 	.word	0x3fe00000
 8006b94:	7fe00000 	.word	0x7fe00000
 8006b98:	7c9fffff 	.word	0x7c9fffff
 8006b9c:	9b08      	ldr	r3, [sp, #32]
 8006b9e:	b323      	cbz	r3, 8006bea <_strtod_l+0xb5a>
 8006ba0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006ba4:	d821      	bhi.n	8006bea <_strtod_l+0xb5a>
 8006ba6:	a328      	add	r3, pc, #160	@ (adr r3, 8006c48 <_strtod_l+0xbb8>)
 8006ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bac:	4630      	mov	r0, r6
 8006bae:	4639      	mov	r1, r7
 8006bb0:	f7f9 ff9e 	bl	8000af0 <__aeabi_dcmple>
 8006bb4:	b1a0      	cbz	r0, 8006be0 <_strtod_l+0xb50>
 8006bb6:	4639      	mov	r1, r7
 8006bb8:	4630      	mov	r0, r6
 8006bba:	f7f9 fff5 	bl	8000ba8 <__aeabi_d2uiz>
 8006bbe:	2801      	cmp	r0, #1
 8006bc0:	bf38      	it	cc
 8006bc2:	2001      	movcc	r0, #1
 8006bc4:	f7f9 fc9e 	bl	8000504 <__aeabi_ui2d>
 8006bc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006bca:	4606      	mov	r6, r0
 8006bcc:	460f      	mov	r7, r1
 8006bce:	b9fb      	cbnz	r3, 8006c10 <_strtod_l+0xb80>
 8006bd0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006bd4:	9014      	str	r0, [sp, #80]	@ 0x50
 8006bd6:	9315      	str	r3, [sp, #84]	@ 0x54
 8006bd8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006bdc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006be0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006be2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006be6:	1b5b      	subs	r3, r3, r5
 8006be8:	9311      	str	r3, [sp, #68]	@ 0x44
 8006bea:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006bee:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006bf2:	f7ff f8f1 	bl	8005dd8 <__ulp>
 8006bf6:	4650      	mov	r0, sl
 8006bf8:	ec53 2b10 	vmov	r2, r3, d0
 8006bfc:	4659      	mov	r1, fp
 8006bfe:	f7f9 fcfb 	bl	80005f8 <__aeabi_dmul>
 8006c02:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006c06:	f7f9 fb41 	bl	800028c <__adddf3>
 8006c0a:	4682      	mov	sl, r0
 8006c0c:	468b      	mov	fp, r1
 8006c0e:	e770      	b.n	8006af2 <_strtod_l+0xa62>
 8006c10:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006c14:	e7e0      	b.n	8006bd8 <_strtod_l+0xb48>
 8006c16:	a30e      	add	r3, pc, #56	@ (adr r3, 8006c50 <_strtod_l+0xbc0>)
 8006c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1c:	f7f9 ff5e 	bl	8000adc <__aeabi_dcmplt>
 8006c20:	e798      	b.n	8006b54 <_strtod_l+0xac4>
 8006c22:	2300      	movs	r3, #0
 8006c24:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c26:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006c28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c2a:	6013      	str	r3, [r2, #0]
 8006c2c:	f7ff ba6d 	b.w	800610a <_strtod_l+0x7a>
 8006c30:	2a65      	cmp	r2, #101	@ 0x65
 8006c32:	f43f ab66 	beq.w	8006302 <_strtod_l+0x272>
 8006c36:	2a45      	cmp	r2, #69	@ 0x45
 8006c38:	f43f ab63 	beq.w	8006302 <_strtod_l+0x272>
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	f7ff bb9e 	b.w	800637e <_strtod_l+0x2ee>
 8006c42:	bf00      	nop
 8006c44:	f3af 8000 	nop.w
 8006c48:	ffc00000 	.word	0xffc00000
 8006c4c:	41dfffff 	.word	0x41dfffff
 8006c50:	94a03595 	.word	0x94a03595
 8006c54:	3fcfffff 	.word	0x3fcfffff

08006c58 <_strtod_r>:
 8006c58:	4b01      	ldr	r3, [pc, #4]	@ (8006c60 <_strtod_r+0x8>)
 8006c5a:	f7ff ba19 	b.w	8006090 <_strtod_l>
 8006c5e:	bf00      	nop
 8006c60:	20000068 	.word	0x20000068

08006c64 <_strtol_l.constprop.0>:
 8006c64:	2b24      	cmp	r3, #36	@ 0x24
 8006c66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c6a:	4686      	mov	lr, r0
 8006c6c:	4690      	mov	r8, r2
 8006c6e:	d801      	bhi.n	8006c74 <_strtol_l.constprop.0+0x10>
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d106      	bne.n	8006c82 <_strtol_l.constprop.0+0x1e>
 8006c74:	f7fd fd9c 	bl	80047b0 <__errno>
 8006c78:	2316      	movs	r3, #22
 8006c7a:	6003      	str	r3, [r0, #0]
 8006c7c:	2000      	movs	r0, #0
 8006c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c82:	4834      	ldr	r0, [pc, #208]	@ (8006d54 <_strtol_l.constprop.0+0xf0>)
 8006c84:	460d      	mov	r5, r1
 8006c86:	462a      	mov	r2, r5
 8006c88:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006c8c:	5d06      	ldrb	r6, [r0, r4]
 8006c8e:	f016 0608 	ands.w	r6, r6, #8
 8006c92:	d1f8      	bne.n	8006c86 <_strtol_l.constprop.0+0x22>
 8006c94:	2c2d      	cmp	r4, #45	@ 0x2d
 8006c96:	d12d      	bne.n	8006cf4 <_strtol_l.constprop.0+0x90>
 8006c98:	782c      	ldrb	r4, [r5, #0]
 8006c9a:	2601      	movs	r6, #1
 8006c9c:	1c95      	adds	r5, r2, #2
 8006c9e:	f033 0210 	bics.w	r2, r3, #16
 8006ca2:	d109      	bne.n	8006cb8 <_strtol_l.constprop.0+0x54>
 8006ca4:	2c30      	cmp	r4, #48	@ 0x30
 8006ca6:	d12a      	bne.n	8006cfe <_strtol_l.constprop.0+0x9a>
 8006ca8:	782a      	ldrb	r2, [r5, #0]
 8006caa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006cae:	2a58      	cmp	r2, #88	@ 0x58
 8006cb0:	d125      	bne.n	8006cfe <_strtol_l.constprop.0+0x9a>
 8006cb2:	786c      	ldrb	r4, [r5, #1]
 8006cb4:	2310      	movs	r3, #16
 8006cb6:	3502      	adds	r5, #2
 8006cb8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006cbc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	fbbc f9f3 	udiv	r9, ip, r3
 8006cc6:	4610      	mov	r0, r2
 8006cc8:	fb03 ca19 	mls	sl, r3, r9, ip
 8006ccc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006cd0:	2f09      	cmp	r7, #9
 8006cd2:	d81b      	bhi.n	8006d0c <_strtol_l.constprop.0+0xa8>
 8006cd4:	463c      	mov	r4, r7
 8006cd6:	42a3      	cmp	r3, r4
 8006cd8:	dd27      	ble.n	8006d2a <_strtol_l.constprop.0+0xc6>
 8006cda:	1c57      	adds	r7, r2, #1
 8006cdc:	d007      	beq.n	8006cee <_strtol_l.constprop.0+0x8a>
 8006cde:	4581      	cmp	r9, r0
 8006ce0:	d320      	bcc.n	8006d24 <_strtol_l.constprop.0+0xc0>
 8006ce2:	d101      	bne.n	8006ce8 <_strtol_l.constprop.0+0x84>
 8006ce4:	45a2      	cmp	sl, r4
 8006ce6:	db1d      	blt.n	8006d24 <_strtol_l.constprop.0+0xc0>
 8006ce8:	fb00 4003 	mla	r0, r0, r3, r4
 8006cec:	2201      	movs	r2, #1
 8006cee:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006cf2:	e7eb      	b.n	8006ccc <_strtol_l.constprop.0+0x68>
 8006cf4:	2c2b      	cmp	r4, #43	@ 0x2b
 8006cf6:	bf04      	itt	eq
 8006cf8:	782c      	ldrbeq	r4, [r5, #0]
 8006cfa:	1c95      	addeq	r5, r2, #2
 8006cfc:	e7cf      	b.n	8006c9e <_strtol_l.constprop.0+0x3a>
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d1da      	bne.n	8006cb8 <_strtol_l.constprop.0+0x54>
 8006d02:	2c30      	cmp	r4, #48	@ 0x30
 8006d04:	bf0c      	ite	eq
 8006d06:	2308      	moveq	r3, #8
 8006d08:	230a      	movne	r3, #10
 8006d0a:	e7d5      	b.n	8006cb8 <_strtol_l.constprop.0+0x54>
 8006d0c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006d10:	2f19      	cmp	r7, #25
 8006d12:	d801      	bhi.n	8006d18 <_strtol_l.constprop.0+0xb4>
 8006d14:	3c37      	subs	r4, #55	@ 0x37
 8006d16:	e7de      	b.n	8006cd6 <_strtol_l.constprop.0+0x72>
 8006d18:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006d1c:	2f19      	cmp	r7, #25
 8006d1e:	d804      	bhi.n	8006d2a <_strtol_l.constprop.0+0xc6>
 8006d20:	3c57      	subs	r4, #87	@ 0x57
 8006d22:	e7d8      	b.n	8006cd6 <_strtol_l.constprop.0+0x72>
 8006d24:	f04f 32ff 	mov.w	r2, #4294967295
 8006d28:	e7e1      	b.n	8006cee <_strtol_l.constprop.0+0x8a>
 8006d2a:	1c53      	adds	r3, r2, #1
 8006d2c:	d108      	bne.n	8006d40 <_strtol_l.constprop.0+0xdc>
 8006d2e:	2322      	movs	r3, #34	@ 0x22
 8006d30:	f8ce 3000 	str.w	r3, [lr]
 8006d34:	4660      	mov	r0, ip
 8006d36:	f1b8 0f00 	cmp.w	r8, #0
 8006d3a:	d0a0      	beq.n	8006c7e <_strtol_l.constprop.0+0x1a>
 8006d3c:	1e69      	subs	r1, r5, #1
 8006d3e:	e006      	b.n	8006d4e <_strtol_l.constprop.0+0xea>
 8006d40:	b106      	cbz	r6, 8006d44 <_strtol_l.constprop.0+0xe0>
 8006d42:	4240      	negs	r0, r0
 8006d44:	f1b8 0f00 	cmp.w	r8, #0
 8006d48:	d099      	beq.n	8006c7e <_strtol_l.constprop.0+0x1a>
 8006d4a:	2a00      	cmp	r2, #0
 8006d4c:	d1f6      	bne.n	8006d3c <_strtol_l.constprop.0+0xd8>
 8006d4e:	f8c8 1000 	str.w	r1, [r8]
 8006d52:	e794      	b.n	8006c7e <_strtol_l.constprop.0+0x1a>
 8006d54:	08008231 	.word	0x08008231

08006d58 <_strtol_r>:
 8006d58:	f7ff bf84 	b.w	8006c64 <_strtol_l.constprop.0>

08006d5c <__ssputs_r>:
 8006d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d60:	688e      	ldr	r6, [r1, #8]
 8006d62:	461f      	mov	r7, r3
 8006d64:	42be      	cmp	r6, r7
 8006d66:	680b      	ldr	r3, [r1, #0]
 8006d68:	4682      	mov	sl, r0
 8006d6a:	460c      	mov	r4, r1
 8006d6c:	4690      	mov	r8, r2
 8006d6e:	d82d      	bhi.n	8006dcc <__ssputs_r+0x70>
 8006d70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006d78:	d026      	beq.n	8006dc8 <__ssputs_r+0x6c>
 8006d7a:	6965      	ldr	r5, [r4, #20]
 8006d7c:	6909      	ldr	r1, [r1, #16]
 8006d7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d82:	eba3 0901 	sub.w	r9, r3, r1
 8006d86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d8a:	1c7b      	adds	r3, r7, #1
 8006d8c:	444b      	add	r3, r9
 8006d8e:	106d      	asrs	r5, r5, #1
 8006d90:	429d      	cmp	r5, r3
 8006d92:	bf38      	it	cc
 8006d94:	461d      	movcc	r5, r3
 8006d96:	0553      	lsls	r3, r2, #21
 8006d98:	d527      	bpl.n	8006dea <__ssputs_r+0x8e>
 8006d9a:	4629      	mov	r1, r5
 8006d9c:	f7fe fc1c 	bl	80055d8 <_malloc_r>
 8006da0:	4606      	mov	r6, r0
 8006da2:	b360      	cbz	r0, 8006dfe <__ssputs_r+0xa2>
 8006da4:	6921      	ldr	r1, [r4, #16]
 8006da6:	464a      	mov	r2, r9
 8006da8:	f000 fa2a 	bl	8007200 <memcpy>
 8006dac:	89a3      	ldrh	r3, [r4, #12]
 8006dae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006db2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006db6:	81a3      	strh	r3, [r4, #12]
 8006db8:	6126      	str	r6, [r4, #16]
 8006dba:	6165      	str	r5, [r4, #20]
 8006dbc:	444e      	add	r6, r9
 8006dbe:	eba5 0509 	sub.w	r5, r5, r9
 8006dc2:	6026      	str	r6, [r4, #0]
 8006dc4:	60a5      	str	r5, [r4, #8]
 8006dc6:	463e      	mov	r6, r7
 8006dc8:	42be      	cmp	r6, r7
 8006dca:	d900      	bls.n	8006dce <__ssputs_r+0x72>
 8006dcc:	463e      	mov	r6, r7
 8006dce:	6820      	ldr	r0, [r4, #0]
 8006dd0:	4632      	mov	r2, r6
 8006dd2:	4641      	mov	r1, r8
 8006dd4:	f000 f9d8 	bl	8007188 <memmove>
 8006dd8:	68a3      	ldr	r3, [r4, #8]
 8006dda:	1b9b      	subs	r3, r3, r6
 8006ddc:	60a3      	str	r3, [r4, #8]
 8006dde:	6823      	ldr	r3, [r4, #0]
 8006de0:	4433      	add	r3, r6
 8006de2:	6023      	str	r3, [r4, #0]
 8006de4:	2000      	movs	r0, #0
 8006de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dea:	462a      	mov	r2, r5
 8006dec:	f000 fd85 	bl	80078fa <_realloc_r>
 8006df0:	4606      	mov	r6, r0
 8006df2:	2800      	cmp	r0, #0
 8006df4:	d1e0      	bne.n	8006db8 <__ssputs_r+0x5c>
 8006df6:	6921      	ldr	r1, [r4, #16]
 8006df8:	4650      	mov	r0, sl
 8006dfa:	f7fe fb79 	bl	80054f0 <_free_r>
 8006dfe:	230c      	movs	r3, #12
 8006e00:	f8ca 3000 	str.w	r3, [sl]
 8006e04:	89a3      	ldrh	r3, [r4, #12]
 8006e06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e0a:	81a3      	strh	r3, [r4, #12]
 8006e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e10:	e7e9      	b.n	8006de6 <__ssputs_r+0x8a>
	...

08006e14 <_svfiprintf_r>:
 8006e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e18:	4698      	mov	r8, r3
 8006e1a:	898b      	ldrh	r3, [r1, #12]
 8006e1c:	061b      	lsls	r3, r3, #24
 8006e1e:	b09d      	sub	sp, #116	@ 0x74
 8006e20:	4607      	mov	r7, r0
 8006e22:	460d      	mov	r5, r1
 8006e24:	4614      	mov	r4, r2
 8006e26:	d510      	bpl.n	8006e4a <_svfiprintf_r+0x36>
 8006e28:	690b      	ldr	r3, [r1, #16]
 8006e2a:	b973      	cbnz	r3, 8006e4a <_svfiprintf_r+0x36>
 8006e2c:	2140      	movs	r1, #64	@ 0x40
 8006e2e:	f7fe fbd3 	bl	80055d8 <_malloc_r>
 8006e32:	6028      	str	r0, [r5, #0]
 8006e34:	6128      	str	r0, [r5, #16]
 8006e36:	b930      	cbnz	r0, 8006e46 <_svfiprintf_r+0x32>
 8006e38:	230c      	movs	r3, #12
 8006e3a:	603b      	str	r3, [r7, #0]
 8006e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e40:	b01d      	add	sp, #116	@ 0x74
 8006e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e46:	2340      	movs	r3, #64	@ 0x40
 8006e48:	616b      	str	r3, [r5, #20]
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e4e:	2320      	movs	r3, #32
 8006e50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006e54:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e58:	2330      	movs	r3, #48	@ 0x30
 8006e5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006ff8 <_svfiprintf_r+0x1e4>
 8006e5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006e62:	f04f 0901 	mov.w	r9, #1
 8006e66:	4623      	mov	r3, r4
 8006e68:	469a      	mov	sl, r3
 8006e6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e6e:	b10a      	cbz	r2, 8006e74 <_svfiprintf_r+0x60>
 8006e70:	2a25      	cmp	r2, #37	@ 0x25
 8006e72:	d1f9      	bne.n	8006e68 <_svfiprintf_r+0x54>
 8006e74:	ebba 0b04 	subs.w	fp, sl, r4
 8006e78:	d00b      	beq.n	8006e92 <_svfiprintf_r+0x7e>
 8006e7a:	465b      	mov	r3, fp
 8006e7c:	4622      	mov	r2, r4
 8006e7e:	4629      	mov	r1, r5
 8006e80:	4638      	mov	r0, r7
 8006e82:	f7ff ff6b 	bl	8006d5c <__ssputs_r>
 8006e86:	3001      	adds	r0, #1
 8006e88:	f000 80a7 	beq.w	8006fda <_svfiprintf_r+0x1c6>
 8006e8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e8e:	445a      	add	r2, fp
 8006e90:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e92:	f89a 3000 	ldrb.w	r3, [sl]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	f000 809f 	beq.w	8006fda <_svfiprintf_r+0x1c6>
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8006ea2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ea6:	f10a 0a01 	add.w	sl, sl, #1
 8006eaa:	9304      	str	r3, [sp, #16]
 8006eac:	9307      	str	r3, [sp, #28]
 8006eae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006eb2:	931a      	str	r3, [sp, #104]	@ 0x68
 8006eb4:	4654      	mov	r4, sl
 8006eb6:	2205      	movs	r2, #5
 8006eb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ebc:	484e      	ldr	r0, [pc, #312]	@ (8006ff8 <_svfiprintf_r+0x1e4>)
 8006ebe:	f7f9 f987 	bl	80001d0 <memchr>
 8006ec2:	9a04      	ldr	r2, [sp, #16]
 8006ec4:	b9d8      	cbnz	r0, 8006efe <_svfiprintf_r+0xea>
 8006ec6:	06d0      	lsls	r0, r2, #27
 8006ec8:	bf44      	itt	mi
 8006eca:	2320      	movmi	r3, #32
 8006ecc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ed0:	0711      	lsls	r1, r2, #28
 8006ed2:	bf44      	itt	mi
 8006ed4:	232b      	movmi	r3, #43	@ 0x2b
 8006ed6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006eda:	f89a 3000 	ldrb.w	r3, [sl]
 8006ede:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ee0:	d015      	beq.n	8006f0e <_svfiprintf_r+0xfa>
 8006ee2:	9a07      	ldr	r2, [sp, #28]
 8006ee4:	4654      	mov	r4, sl
 8006ee6:	2000      	movs	r0, #0
 8006ee8:	f04f 0c0a 	mov.w	ip, #10
 8006eec:	4621      	mov	r1, r4
 8006eee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ef2:	3b30      	subs	r3, #48	@ 0x30
 8006ef4:	2b09      	cmp	r3, #9
 8006ef6:	d94b      	bls.n	8006f90 <_svfiprintf_r+0x17c>
 8006ef8:	b1b0      	cbz	r0, 8006f28 <_svfiprintf_r+0x114>
 8006efa:	9207      	str	r2, [sp, #28]
 8006efc:	e014      	b.n	8006f28 <_svfiprintf_r+0x114>
 8006efe:	eba0 0308 	sub.w	r3, r0, r8
 8006f02:	fa09 f303 	lsl.w	r3, r9, r3
 8006f06:	4313      	orrs	r3, r2
 8006f08:	9304      	str	r3, [sp, #16]
 8006f0a:	46a2      	mov	sl, r4
 8006f0c:	e7d2      	b.n	8006eb4 <_svfiprintf_r+0xa0>
 8006f0e:	9b03      	ldr	r3, [sp, #12]
 8006f10:	1d19      	adds	r1, r3, #4
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	9103      	str	r1, [sp, #12]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	bfbb      	ittet	lt
 8006f1a:	425b      	neglt	r3, r3
 8006f1c:	f042 0202 	orrlt.w	r2, r2, #2
 8006f20:	9307      	strge	r3, [sp, #28]
 8006f22:	9307      	strlt	r3, [sp, #28]
 8006f24:	bfb8      	it	lt
 8006f26:	9204      	strlt	r2, [sp, #16]
 8006f28:	7823      	ldrb	r3, [r4, #0]
 8006f2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f2c:	d10a      	bne.n	8006f44 <_svfiprintf_r+0x130>
 8006f2e:	7863      	ldrb	r3, [r4, #1]
 8006f30:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f32:	d132      	bne.n	8006f9a <_svfiprintf_r+0x186>
 8006f34:	9b03      	ldr	r3, [sp, #12]
 8006f36:	1d1a      	adds	r2, r3, #4
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	9203      	str	r2, [sp, #12]
 8006f3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006f40:	3402      	adds	r4, #2
 8006f42:	9305      	str	r3, [sp, #20]
 8006f44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007008 <_svfiprintf_r+0x1f4>
 8006f48:	7821      	ldrb	r1, [r4, #0]
 8006f4a:	2203      	movs	r2, #3
 8006f4c:	4650      	mov	r0, sl
 8006f4e:	f7f9 f93f 	bl	80001d0 <memchr>
 8006f52:	b138      	cbz	r0, 8006f64 <_svfiprintf_r+0x150>
 8006f54:	9b04      	ldr	r3, [sp, #16]
 8006f56:	eba0 000a 	sub.w	r0, r0, sl
 8006f5a:	2240      	movs	r2, #64	@ 0x40
 8006f5c:	4082      	lsls	r2, r0
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	3401      	adds	r4, #1
 8006f62:	9304      	str	r3, [sp, #16]
 8006f64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f68:	4824      	ldr	r0, [pc, #144]	@ (8006ffc <_svfiprintf_r+0x1e8>)
 8006f6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006f6e:	2206      	movs	r2, #6
 8006f70:	f7f9 f92e 	bl	80001d0 <memchr>
 8006f74:	2800      	cmp	r0, #0
 8006f76:	d036      	beq.n	8006fe6 <_svfiprintf_r+0x1d2>
 8006f78:	4b21      	ldr	r3, [pc, #132]	@ (8007000 <_svfiprintf_r+0x1ec>)
 8006f7a:	bb1b      	cbnz	r3, 8006fc4 <_svfiprintf_r+0x1b0>
 8006f7c:	9b03      	ldr	r3, [sp, #12]
 8006f7e:	3307      	adds	r3, #7
 8006f80:	f023 0307 	bic.w	r3, r3, #7
 8006f84:	3308      	adds	r3, #8
 8006f86:	9303      	str	r3, [sp, #12]
 8006f88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f8a:	4433      	add	r3, r6
 8006f8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f8e:	e76a      	b.n	8006e66 <_svfiprintf_r+0x52>
 8006f90:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f94:	460c      	mov	r4, r1
 8006f96:	2001      	movs	r0, #1
 8006f98:	e7a8      	b.n	8006eec <_svfiprintf_r+0xd8>
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	3401      	adds	r4, #1
 8006f9e:	9305      	str	r3, [sp, #20]
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	f04f 0c0a 	mov.w	ip, #10
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fac:	3a30      	subs	r2, #48	@ 0x30
 8006fae:	2a09      	cmp	r2, #9
 8006fb0:	d903      	bls.n	8006fba <_svfiprintf_r+0x1a6>
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d0c6      	beq.n	8006f44 <_svfiprintf_r+0x130>
 8006fb6:	9105      	str	r1, [sp, #20]
 8006fb8:	e7c4      	b.n	8006f44 <_svfiprintf_r+0x130>
 8006fba:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fbe:	4604      	mov	r4, r0
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e7f0      	b.n	8006fa6 <_svfiprintf_r+0x192>
 8006fc4:	ab03      	add	r3, sp, #12
 8006fc6:	9300      	str	r3, [sp, #0]
 8006fc8:	462a      	mov	r2, r5
 8006fca:	4b0e      	ldr	r3, [pc, #56]	@ (8007004 <_svfiprintf_r+0x1f0>)
 8006fcc:	a904      	add	r1, sp, #16
 8006fce:	4638      	mov	r0, r7
 8006fd0:	f7fc fc7c 	bl	80038cc <_printf_float>
 8006fd4:	1c42      	adds	r2, r0, #1
 8006fd6:	4606      	mov	r6, r0
 8006fd8:	d1d6      	bne.n	8006f88 <_svfiprintf_r+0x174>
 8006fda:	89ab      	ldrh	r3, [r5, #12]
 8006fdc:	065b      	lsls	r3, r3, #25
 8006fde:	f53f af2d 	bmi.w	8006e3c <_svfiprintf_r+0x28>
 8006fe2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006fe4:	e72c      	b.n	8006e40 <_svfiprintf_r+0x2c>
 8006fe6:	ab03      	add	r3, sp, #12
 8006fe8:	9300      	str	r3, [sp, #0]
 8006fea:	462a      	mov	r2, r5
 8006fec:	4b05      	ldr	r3, [pc, #20]	@ (8007004 <_svfiprintf_r+0x1f0>)
 8006fee:	a904      	add	r1, sp, #16
 8006ff0:	4638      	mov	r0, r7
 8006ff2:	f7fc ff03 	bl	8003dfc <_printf_i>
 8006ff6:	e7ed      	b.n	8006fd4 <_svfiprintf_r+0x1c0>
 8006ff8:	08008331 	.word	0x08008331
 8006ffc:	0800833b 	.word	0x0800833b
 8007000:	080038cd 	.word	0x080038cd
 8007004:	08006d5d 	.word	0x08006d5d
 8007008:	08008337 	.word	0x08008337

0800700c <__sflush_r>:
 800700c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007014:	0716      	lsls	r6, r2, #28
 8007016:	4605      	mov	r5, r0
 8007018:	460c      	mov	r4, r1
 800701a:	d454      	bmi.n	80070c6 <__sflush_r+0xba>
 800701c:	684b      	ldr	r3, [r1, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	dc02      	bgt.n	8007028 <__sflush_r+0x1c>
 8007022:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007024:	2b00      	cmp	r3, #0
 8007026:	dd48      	ble.n	80070ba <__sflush_r+0xae>
 8007028:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800702a:	2e00      	cmp	r6, #0
 800702c:	d045      	beq.n	80070ba <__sflush_r+0xae>
 800702e:	2300      	movs	r3, #0
 8007030:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007034:	682f      	ldr	r7, [r5, #0]
 8007036:	6a21      	ldr	r1, [r4, #32]
 8007038:	602b      	str	r3, [r5, #0]
 800703a:	d030      	beq.n	800709e <__sflush_r+0x92>
 800703c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800703e:	89a3      	ldrh	r3, [r4, #12]
 8007040:	0759      	lsls	r1, r3, #29
 8007042:	d505      	bpl.n	8007050 <__sflush_r+0x44>
 8007044:	6863      	ldr	r3, [r4, #4]
 8007046:	1ad2      	subs	r2, r2, r3
 8007048:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800704a:	b10b      	cbz	r3, 8007050 <__sflush_r+0x44>
 800704c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800704e:	1ad2      	subs	r2, r2, r3
 8007050:	2300      	movs	r3, #0
 8007052:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007054:	6a21      	ldr	r1, [r4, #32]
 8007056:	4628      	mov	r0, r5
 8007058:	47b0      	blx	r6
 800705a:	1c43      	adds	r3, r0, #1
 800705c:	89a3      	ldrh	r3, [r4, #12]
 800705e:	d106      	bne.n	800706e <__sflush_r+0x62>
 8007060:	6829      	ldr	r1, [r5, #0]
 8007062:	291d      	cmp	r1, #29
 8007064:	d82b      	bhi.n	80070be <__sflush_r+0xb2>
 8007066:	4a2a      	ldr	r2, [pc, #168]	@ (8007110 <__sflush_r+0x104>)
 8007068:	410a      	asrs	r2, r1
 800706a:	07d6      	lsls	r6, r2, #31
 800706c:	d427      	bmi.n	80070be <__sflush_r+0xb2>
 800706e:	2200      	movs	r2, #0
 8007070:	6062      	str	r2, [r4, #4]
 8007072:	04d9      	lsls	r1, r3, #19
 8007074:	6922      	ldr	r2, [r4, #16]
 8007076:	6022      	str	r2, [r4, #0]
 8007078:	d504      	bpl.n	8007084 <__sflush_r+0x78>
 800707a:	1c42      	adds	r2, r0, #1
 800707c:	d101      	bne.n	8007082 <__sflush_r+0x76>
 800707e:	682b      	ldr	r3, [r5, #0]
 8007080:	b903      	cbnz	r3, 8007084 <__sflush_r+0x78>
 8007082:	6560      	str	r0, [r4, #84]	@ 0x54
 8007084:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007086:	602f      	str	r7, [r5, #0]
 8007088:	b1b9      	cbz	r1, 80070ba <__sflush_r+0xae>
 800708a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800708e:	4299      	cmp	r1, r3
 8007090:	d002      	beq.n	8007098 <__sflush_r+0x8c>
 8007092:	4628      	mov	r0, r5
 8007094:	f7fe fa2c 	bl	80054f0 <_free_r>
 8007098:	2300      	movs	r3, #0
 800709a:	6363      	str	r3, [r4, #52]	@ 0x34
 800709c:	e00d      	b.n	80070ba <__sflush_r+0xae>
 800709e:	2301      	movs	r3, #1
 80070a0:	4628      	mov	r0, r5
 80070a2:	47b0      	blx	r6
 80070a4:	4602      	mov	r2, r0
 80070a6:	1c50      	adds	r0, r2, #1
 80070a8:	d1c9      	bne.n	800703e <__sflush_r+0x32>
 80070aa:	682b      	ldr	r3, [r5, #0]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d0c6      	beq.n	800703e <__sflush_r+0x32>
 80070b0:	2b1d      	cmp	r3, #29
 80070b2:	d001      	beq.n	80070b8 <__sflush_r+0xac>
 80070b4:	2b16      	cmp	r3, #22
 80070b6:	d11e      	bne.n	80070f6 <__sflush_r+0xea>
 80070b8:	602f      	str	r7, [r5, #0]
 80070ba:	2000      	movs	r0, #0
 80070bc:	e022      	b.n	8007104 <__sflush_r+0xf8>
 80070be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070c2:	b21b      	sxth	r3, r3
 80070c4:	e01b      	b.n	80070fe <__sflush_r+0xf2>
 80070c6:	690f      	ldr	r7, [r1, #16]
 80070c8:	2f00      	cmp	r7, #0
 80070ca:	d0f6      	beq.n	80070ba <__sflush_r+0xae>
 80070cc:	0793      	lsls	r3, r2, #30
 80070ce:	680e      	ldr	r6, [r1, #0]
 80070d0:	bf08      	it	eq
 80070d2:	694b      	ldreq	r3, [r1, #20]
 80070d4:	600f      	str	r7, [r1, #0]
 80070d6:	bf18      	it	ne
 80070d8:	2300      	movne	r3, #0
 80070da:	eba6 0807 	sub.w	r8, r6, r7
 80070de:	608b      	str	r3, [r1, #8]
 80070e0:	f1b8 0f00 	cmp.w	r8, #0
 80070e4:	dde9      	ble.n	80070ba <__sflush_r+0xae>
 80070e6:	6a21      	ldr	r1, [r4, #32]
 80070e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80070ea:	4643      	mov	r3, r8
 80070ec:	463a      	mov	r2, r7
 80070ee:	4628      	mov	r0, r5
 80070f0:	47b0      	blx	r6
 80070f2:	2800      	cmp	r0, #0
 80070f4:	dc08      	bgt.n	8007108 <__sflush_r+0xfc>
 80070f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070fe:	81a3      	strh	r3, [r4, #12]
 8007100:	f04f 30ff 	mov.w	r0, #4294967295
 8007104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007108:	4407      	add	r7, r0
 800710a:	eba8 0800 	sub.w	r8, r8, r0
 800710e:	e7e7      	b.n	80070e0 <__sflush_r+0xd4>
 8007110:	dfbffffe 	.word	0xdfbffffe

08007114 <_fflush_r>:
 8007114:	b538      	push	{r3, r4, r5, lr}
 8007116:	690b      	ldr	r3, [r1, #16]
 8007118:	4605      	mov	r5, r0
 800711a:	460c      	mov	r4, r1
 800711c:	b913      	cbnz	r3, 8007124 <_fflush_r+0x10>
 800711e:	2500      	movs	r5, #0
 8007120:	4628      	mov	r0, r5
 8007122:	bd38      	pop	{r3, r4, r5, pc}
 8007124:	b118      	cbz	r0, 800712e <_fflush_r+0x1a>
 8007126:	6a03      	ldr	r3, [r0, #32]
 8007128:	b90b      	cbnz	r3, 800712e <_fflush_r+0x1a>
 800712a:	f7fd fa27 	bl	800457c <__sinit>
 800712e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d0f3      	beq.n	800711e <_fflush_r+0xa>
 8007136:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007138:	07d0      	lsls	r0, r2, #31
 800713a:	d404      	bmi.n	8007146 <_fflush_r+0x32>
 800713c:	0599      	lsls	r1, r3, #22
 800713e:	d402      	bmi.n	8007146 <_fflush_r+0x32>
 8007140:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007142:	f7fd fb60 	bl	8004806 <__retarget_lock_acquire_recursive>
 8007146:	4628      	mov	r0, r5
 8007148:	4621      	mov	r1, r4
 800714a:	f7ff ff5f 	bl	800700c <__sflush_r>
 800714e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007150:	07da      	lsls	r2, r3, #31
 8007152:	4605      	mov	r5, r0
 8007154:	d4e4      	bmi.n	8007120 <_fflush_r+0xc>
 8007156:	89a3      	ldrh	r3, [r4, #12]
 8007158:	059b      	lsls	r3, r3, #22
 800715a:	d4e1      	bmi.n	8007120 <_fflush_r+0xc>
 800715c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800715e:	f7fd fb53 	bl	8004808 <__retarget_lock_release_recursive>
 8007162:	e7dd      	b.n	8007120 <_fflush_r+0xc>

08007164 <fiprintf>:
 8007164:	b40e      	push	{r1, r2, r3}
 8007166:	b503      	push	{r0, r1, lr}
 8007168:	4601      	mov	r1, r0
 800716a:	ab03      	add	r3, sp, #12
 800716c:	4805      	ldr	r0, [pc, #20]	@ (8007184 <fiprintf+0x20>)
 800716e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007172:	6800      	ldr	r0, [r0, #0]
 8007174:	9301      	str	r3, [sp, #4]
 8007176:	f000 fc25 	bl	80079c4 <_vfiprintf_r>
 800717a:	b002      	add	sp, #8
 800717c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007180:	b003      	add	sp, #12
 8007182:	4770      	bx	lr
 8007184:	20000018 	.word	0x20000018

08007188 <memmove>:
 8007188:	4288      	cmp	r0, r1
 800718a:	b510      	push	{r4, lr}
 800718c:	eb01 0402 	add.w	r4, r1, r2
 8007190:	d902      	bls.n	8007198 <memmove+0x10>
 8007192:	4284      	cmp	r4, r0
 8007194:	4623      	mov	r3, r4
 8007196:	d807      	bhi.n	80071a8 <memmove+0x20>
 8007198:	1e43      	subs	r3, r0, #1
 800719a:	42a1      	cmp	r1, r4
 800719c:	d008      	beq.n	80071b0 <memmove+0x28>
 800719e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80071a6:	e7f8      	b.n	800719a <memmove+0x12>
 80071a8:	4402      	add	r2, r0
 80071aa:	4601      	mov	r1, r0
 80071ac:	428a      	cmp	r2, r1
 80071ae:	d100      	bne.n	80071b2 <memmove+0x2a>
 80071b0:	bd10      	pop	{r4, pc}
 80071b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80071ba:	e7f7      	b.n	80071ac <memmove+0x24>

080071bc <strncmp>:
 80071bc:	b510      	push	{r4, lr}
 80071be:	b16a      	cbz	r2, 80071dc <strncmp+0x20>
 80071c0:	3901      	subs	r1, #1
 80071c2:	1884      	adds	r4, r0, r2
 80071c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071c8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d103      	bne.n	80071d8 <strncmp+0x1c>
 80071d0:	42a0      	cmp	r0, r4
 80071d2:	d001      	beq.n	80071d8 <strncmp+0x1c>
 80071d4:	2a00      	cmp	r2, #0
 80071d6:	d1f5      	bne.n	80071c4 <strncmp+0x8>
 80071d8:	1ad0      	subs	r0, r2, r3
 80071da:	bd10      	pop	{r4, pc}
 80071dc:	4610      	mov	r0, r2
 80071de:	e7fc      	b.n	80071da <strncmp+0x1e>

080071e0 <_sbrk_r>:
 80071e0:	b538      	push	{r3, r4, r5, lr}
 80071e2:	4d06      	ldr	r5, [pc, #24]	@ (80071fc <_sbrk_r+0x1c>)
 80071e4:	2300      	movs	r3, #0
 80071e6:	4604      	mov	r4, r0
 80071e8:	4608      	mov	r0, r1
 80071ea:	602b      	str	r3, [r5, #0]
 80071ec:	f7fa f87a 	bl	80012e4 <_sbrk>
 80071f0:	1c43      	adds	r3, r0, #1
 80071f2:	d102      	bne.n	80071fa <_sbrk_r+0x1a>
 80071f4:	682b      	ldr	r3, [r5, #0]
 80071f6:	b103      	cbz	r3, 80071fa <_sbrk_r+0x1a>
 80071f8:	6023      	str	r3, [r4, #0]
 80071fa:	bd38      	pop	{r3, r4, r5, pc}
 80071fc:	200003e4 	.word	0x200003e4

08007200 <memcpy>:
 8007200:	440a      	add	r2, r1
 8007202:	4291      	cmp	r1, r2
 8007204:	f100 33ff 	add.w	r3, r0, #4294967295
 8007208:	d100      	bne.n	800720c <memcpy+0xc>
 800720a:	4770      	bx	lr
 800720c:	b510      	push	{r4, lr}
 800720e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007212:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007216:	4291      	cmp	r1, r2
 8007218:	d1f9      	bne.n	800720e <memcpy+0xe>
 800721a:	bd10      	pop	{r4, pc}
 800721c:	0000      	movs	r0, r0
	...

08007220 <nan>:
 8007220:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007228 <nan+0x8>
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop
 8007228:	00000000 	.word	0x00000000
 800722c:	7ff80000 	.word	0x7ff80000

08007230 <abort>:
 8007230:	b508      	push	{r3, lr}
 8007232:	2006      	movs	r0, #6
 8007234:	f000 fd9a 	bl	8007d6c <raise>
 8007238:	2001      	movs	r0, #1
 800723a:	f7f9 ffda 	bl	80011f2 <_exit>

0800723e <_calloc_r>:
 800723e:	b570      	push	{r4, r5, r6, lr}
 8007240:	fba1 5402 	umull	r5, r4, r1, r2
 8007244:	b93c      	cbnz	r4, 8007256 <_calloc_r+0x18>
 8007246:	4629      	mov	r1, r5
 8007248:	f7fe f9c6 	bl	80055d8 <_malloc_r>
 800724c:	4606      	mov	r6, r0
 800724e:	b928      	cbnz	r0, 800725c <_calloc_r+0x1e>
 8007250:	2600      	movs	r6, #0
 8007252:	4630      	mov	r0, r6
 8007254:	bd70      	pop	{r4, r5, r6, pc}
 8007256:	220c      	movs	r2, #12
 8007258:	6002      	str	r2, [r0, #0]
 800725a:	e7f9      	b.n	8007250 <_calloc_r+0x12>
 800725c:	462a      	mov	r2, r5
 800725e:	4621      	mov	r1, r4
 8007260:	f7fd fa25 	bl	80046ae <memset>
 8007264:	e7f5      	b.n	8007252 <_calloc_r+0x14>

08007266 <rshift>:
 8007266:	6903      	ldr	r3, [r0, #16]
 8007268:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800726c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007270:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007274:	f100 0414 	add.w	r4, r0, #20
 8007278:	dd45      	ble.n	8007306 <rshift+0xa0>
 800727a:	f011 011f 	ands.w	r1, r1, #31
 800727e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007282:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007286:	d10c      	bne.n	80072a2 <rshift+0x3c>
 8007288:	f100 0710 	add.w	r7, r0, #16
 800728c:	4629      	mov	r1, r5
 800728e:	42b1      	cmp	r1, r6
 8007290:	d334      	bcc.n	80072fc <rshift+0x96>
 8007292:	1a9b      	subs	r3, r3, r2
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	1eea      	subs	r2, r5, #3
 8007298:	4296      	cmp	r6, r2
 800729a:	bf38      	it	cc
 800729c:	2300      	movcc	r3, #0
 800729e:	4423      	add	r3, r4
 80072a0:	e015      	b.n	80072ce <rshift+0x68>
 80072a2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80072a6:	f1c1 0820 	rsb	r8, r1, #32
 80072aa:	40cf      	lsrs	r7, r1
 80072ac:	f105 0e04 	add.w	lr, r5, #4
 80072b0:	46a1      	mov	r9, r4
 80072b2:	4576      	cmp	r6, lr
 80072b4:	46f4      	mov	ip, lr
 80072b6:	d815      	bhi.n	80072e4 <rshift+0x7e>
 80072b8:	1a9a      	subs	r2, r3, r2
 80072ba:	0092      	lsls	r2, r2, #2
 80072bc:	3a04      	subs	r2, #4
 80072be:	3501      	adds	r5, #1
 80072c0:	42ae      	cmp	r6, r5
 80072c2:	bf38      	it	cc
 80072c4:	2200      	movcc	r2, #0
 80072c6:	18a3      	adds	r3, r4, r2
 80072c8:	50a7      	str	r7, [r4, r2]
 80072ca:	b107      	cbz	r7, 80072ce <rshift+0x68>
 80072cc:	3304      	adds	r3, #4
 80072ce:	1b1a      	subs	r2, r3, r4
 80072d0:	42a3      	cmp	r3, r4
 80072d2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80072d6:	bf08      	it	eq
 80072d8:	2300      	moveq	r3, #0
 80072da:	6102      	str	r2, [r0, #16]
 80072dc:	bf08      	it	eq
 80072de:	6143      	streq	r3, [r0, #20]
 80072e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072e4:	f8dc c000 	ldr.w	ip, [ip]
 80072e8:	fa0c fc08 	lsl.w	ip, ip, r8
 80072ec:	ea4c 0707 	orr.w	r7, ip, r7
 80072f0:	f849 7b04 	str.w	r7, [r9], #4
 80072f4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80072f8:	40cf      	lsrs	r7, r1
 80072fa:	e7da      	b.n	80072b2 <rshift+0x4c>
 80072fc:	f851 cb04 	ldr.w	ip, [r1], #4
 8007300:	f847 cf04 	str.w	ip, [r7, #4]!
 8007304:	e7c3      	b.n	800728e <rshift+0x28>
 8007306:	4623      	mov	r3, r4
 8007308:	e7e1      	b.n	80072ce <rshift+0x68>

0800730a <__hexdig_fun>:
 800730a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800730e:	2b09      	cmp	r3, #9
 8007310:	d802      	bhi.n	8007318 <__hexdig_fun+0xe>
 8007312:	3820      	subs	r0, #32
 8007314:	b2c0      	uxtb	r0, r0
 8007316:	4770      	bx	lr
 8007318:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800731c:	2b05      	cmp	r3, #5
 800731e:	d801      	bhi.n	8007324 <__hexdig_fun+0x1a>
 8007320:	3847      	subs	r0, #71	@ 0x47
 8007322:	e7f7      	b.n	8007314 <__hexdig_fun+0xa>
 8007324:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007328:	2b05      	cmp	r3, #5
 800732a:	d801      	bhi.n	8007330 <__hexdig_fun+0x26>
 800732c:	3827      	subs	r0, #39	@ 0x27
 800732e:	e7f1      	b.n	8007314 <__hexdig_fun+0xa>
 8007330:	2000      	movs	r0, #0
 8007332:	4770      	bx	lr

08007334 <__gethex>:
 8007334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007338:	b085      	sub	sp, #20
 800733a:	468a      	mov	sl, r1
 800733c:	9302      	str	r3, [sp, #8]
 800733e:	680b      	ldr	r3, [r1, #0]
 8007340:	9001      	str	r0, [sp, #4]
 8007342:	4690      	mov	r8, r2
 8007344:	1c9c      	adds	r4, r3, #2
 8007346:	46a1      	mov	r9, r4
 8007348:	f814 0b01 	ldrb.w	r0, [r4], #1
 800734c:	2830      	cmp	r0, #48	@ 0x30
 800734e:	d0fa      	beq.n	8007346 <__gethex+0x12>
 8007350:	eba9 0303 	sub.w	r3, r9, r3
 8007354:	f1a3 0b02 	sub.w	fp, r3, #2
 8007358:	f7ff ffd7 	bl	800730a <__hexdig_fun>
 800735c:	4605      	mov	r5, r0
 800735e:	2800      	cmp	r0, #0
 8007360:	d168      	bne.n	8007434 <__gethex+0x100>
 8007362:	49a0      	ldr	r1, [pc, #640]	@ (80075e4 <__gethex+0x2b0>)
 8007364:	2201      	movs	r2, #1
 8007366:	4648      	mov	r0, r9
 8007368:	f7ff ff28 	bl	80071bc <strncmp>
 800736c:	4607      	mov	r7, r0
 800736e:	2800      	cmp	r0, #0
 8007370:	d167      	bne.n	8007442 <__gethex+0x10e>
 8007372:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007376:	4626      	mov	r6, r4
 8007378:	f7ff ffc7 	bl	800730a <__hexdig_fun>
 800737c:	2800      	cmp	r0, #0
 800737e:	d062      	beq.n	8007446 <__gethex+0x112>
 8007380:	4623      	mov	r3, r4
 8007382:	7818      	ldrb	r0, [r3, #0]
 8007384:	2830      	cmp	r0, #48	@ 0x30
 8007386:	4699      	mov	r9, r3
 8007388:	f103 0301 	add.w	r3, r3, #1
 800738c:	d0f9      	beq.n	8007382 <__gethex+0x4e>
 800738e:	f7ff ffbc 	bl	800730a <__hexdig_fun>
 8007392:	fab0 f580 	clz	r5, r0
 8007396:	096d      	lsrs	r5, r5, #5
 8007398:	f04f 0b01 	mov.w	fp, #1
 800739c:	464a      	mov	r2, r9
 800739e:	4616      	mov	r6, r2
 80073a0:	3201      	adds	r2, #1
 80073a2:	7830      	ldrb	r0, [r6, #0]
 80073a4:	f7ff ffb1 	bl	800730a <__hexdig_fun>
 80073a8:	2800      	cmp	r0, #0
 80073aa:	d1f8      	bne.n	800739e <__gethex+0x6a>
 80073ac:	498d      	ldr	r1, [pc, #564]	@ (80075e4 <__gethex+0x2b0>)
 80073ae:	2201      	movs	r2, #1
 80073b0:	4630      	mov	r0, r6
 80073b2:	f7ff ff03 	bl	80071bc <strncmp>
 80073b6:	2800      	cmp	r0, #0
 80073b8:	d13f      	bne.n	800743a <__gethex+0x106>
 80073ba:	b944      	cbnz	r4, 80073ce <__gethex+0x9a>
 80073bc:	1c74      	adds	r4, r6, #1
 80073be:	4622      	mov	r2, r4
 80073c0:	4616      	mov	r6, r2
 80073c2:	3201      	adds	r2, #1
 80073c4:	7830      	ldrb	r0, [r6, #0]
 80073c6:	f7ff ffa0 	bl	800730a <__hexdig_fun>
 80073ca:	2800      	cmp	r0, #0
 80073cc:	d1f8      	bne.n	80073c0 <__gethex+0x8c>
 80073ce:	1ba4      	subs	r4, r4, r6
 80073d0:	00a7      	lsls	r7, r4, #2
 80073d2:	7833      	ldrb	r3, [r6, #0]
 80073d4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80073d8:	2b50      	cmp	r3, #80	@ 0x50
 80073da:	d13e      	bne.n	800745a <__gethex+0x126>
 80073dc:	7873      	ldrb	r3, [r6, #1]
 80073de:	2b2b      	cmp	r3, #43	@ 0x2b
 80073e0:	d033      	beq.n	800744a <__gethex+0x116>
 80073e2:	2b2d      	cmp	r3, #45	@ 0x2d
 80073e4:	d034      	beq.n	8007450 <__gethex+0x11c>
 80073e6:	1c71      	adds	r1, r6, #1
 80073e8:	2400      	movs	r4, #0
 80073ea:	7808      	ldrb	r0, [r1, #0]
 80073ec:	f7ff ff8d 	bl	800730a <__hexdig_fun>
 80073f0:	1e43      	subs	r3, r0, #1
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	2b18      	cmp	r3, #24
 80073f6:	d830      	bhi.n	800745a <__gethex+0x126>
 80073f8:	f1a0 0210 	sub.w	r2, r0, #16
 80073fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007400:	f7ff ff83 	bl	800730a <__hexdig_fun>
 8007404:	f100 3cff 	add.w	ip, r0, #4294967295
 8007408:	fa5f fc8c 	uxtb.w	ip, ip
 800740c:	f1bc 0f18 	cmp.w	ip, #24
 8007410:	f04f 030a 	mov.w	r3, #10
 8007414:	d91e      	bls.n	8007454 <__gethex+0x120>
 8007416:	b104      	cbz	r4, 800741a <__gethex+0xe6>
 8007418:	4252      	negs	r2, r2
 800741a:	4417      	add	r7, r2
 800741c:	f8ca 1000 	str.w	r1, [sl]
 8007420:	b1ed      	cbz	r5, 800745e <__gethex+0x12a>
 8007422:	f1bb 0f00 	cmp.w	fp, #0
 8007426:	bf0c      	ite	eq
 8007428:	2506      	moveq	r5, #6
 800742a:	2500      	movne	r5, #0
 800742c:	4628      	mov	r0, r5
 800742e:	b005      	add	sp, #20
 8007430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007434:	2500      	movs	r5, #0
 8007436:	462c      	mov	r4, r5
 8007438:	e7b0      	b.n	800739c <__gethex+0x68>
 800743a:	2c00      	cmp	r4, #0
 800743c:	d1c7      	bne.n	80073ce <__gethex+0x9a>
 800743e:	4627      	mov	r7, r4
 8007440:	e7c7      	b.n	80073d2 <__gethex+0x9e>
 8007442:	464e      	mov	r6, r9
 8007444:	462f      	mov	r7, r5
 8007446:	2501      	movs	r5, #1
 8007448:	e7c3      	b.n	80073d2 <__gethex+0x9e>
 800744a:	2400      	movs	r4, #0
 800744c:	1cb1      	adds	r1, r6, #2
 800744e:	e7cc      	b.n	80073ea <__gethex+0xb6>
 8007450:	2401      	movs	r4, #1
 8007452:	e7fb      	b.n	800744c <__gethex+0x118>
 8007454:	fb03 0002 	mla	r0, r3, r2, r0
 8007458:	e7ce      	b.n	80073f8 <__gethex+0xc4>
 800745a:	4631      	mov	r1, r6
 800745c:	e7de      	b.n	800741c <__gethex+0xe8>
 800745e:	eba6 0309 	sub.w	r3, r6, r9
 8007462:	3b01      	subs	r3, #1
 8007464:	4629      	mov	r1, r5
 8007466:	2b07      	cmp	r3, #7
 8007468:	dc0a      	bgt.n	8007480 <__gethex+0x14c>
 800746a:	9801      	ldr	r0, [sp, #4]
 800746c:	f7fe f940 	bl	80056f0 <_Balloc>
 8007470:	4604      	mov	r4, r0
 8007472:	b940      	cbnz	r0, 8007486 <__gethex+0x152>
 8007474:	4b5c      	ldr	r3, [pc, #368]	@ (80075e8 <__gethex+0x2b4>)
 8007476:	4602      	mov	r2, r0
 8007478:	21e4      	movs	r1, #228	@ 0xe4
 800747a:	485c      	ldr	r0, [pc, #368]	@ (80075ec <__gethex+0x2b8>)
 800747c:	f7fd f9cc 	bl	8004818 <__assert_func>
 8007480:	3101      	adds	r1, #1
 8007482:	105b      	asrs	r3, r3, #1
 8007484:	e7ef      	b.n	8007466 <__gethex+0x132>
 8007486:	f100 0a14 	add.w	sl, r0, #20
 800748a:	2300      	movs	r3, #0
 800748c:	4655      	mov	r5, sl
 800748e:	469b      	mov	fp, r3
 8007490:	45b1      	cmp	r9, r6
 8007492:	d337      	bcc.n	8007504 <__gethex+0x1d0>
 8007494:	f845 bb04 	str.w	fp, [r5], #4
 8007498:	eba5 050a 	sub.w	r5, r5, sl
 800749c:	10ad      	asrs	r5, r5, #2
 800749e:	6125      	str	r5, [r4, #16]
 80074a0:	4658      	mov	r0, fp
 80074a2:	f7fe fa17 	bl	80058d4 <__hi0bits>
 80074a6:	016d      	lsls	r5, r5, #5
 80074a8:	f8d8 6000 	ldr.w	r6, [r8]
 80074ac:	1a2d      	subs	r5, r5, r0
 80074ae:	42b5      	cmp	r5, r6
 80074b0:	dd54      	ble.n	800755c <__gethex+0x228>
 80074b2:	1bad      	subs	r5, r5, r6
 80074b4:	4629      	mov	r1, r5
 80074b6:	4620      	mov	r0, r4
 80074b8:	f7fe fdab 	bl	8006012 <__any_on>
 80074bc:	4681      	mov	r9, r0
 80074be:	b178      	cbz	r0, 80074e0 <__gethex+0x1ac>
 80074c0:	1e6b      	subs	r3, r5, #1
 80074c2:	1159      	asrs	r1, r3, #5
 80074c4:	f003 021f 	and.w	r2, r3, #31
 80074c8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80074cc:	f04f 0901 	mov.w	r9, #1
 80074d0:	fa09 f202 	lsl.w	r2, r9, r2
 80074d4:	420a      	tst	r2, r1
 80074d6:	d003      	beq.n	80074e0 <__gethex+0x1ac>
 80074d8:	454b      	cmp	r3, r9
 80074da:	dc36      	bgt.n	800754a <__gethex+0x216>
 80074dc:	f04f 0902 	mov.w	r9, #2
 80074e0:	4629      	mov	r1, r5
 80074e2:	4620      	mov	r0, r4
 80074e4:	f7ff febf 	bl	8007266 <rshift>
 80074e8:	442f      	add	r7, r5
 80074ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80074ee:	42bb      	cmp	r3, r7
 80074f0:	da42      	bge.n	8007578 <__gethex+0x244>
 80074f2:	9801      	ldr	r0, [sp, #4]
 80074f4:	4621      	mov	r1, r4
 80074f6:	f7fe f93b 	bl	8005770 <_Bfree>
 80074fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80074fc:	2300      	movs	r3, #0
 80074fe:	6013      	str	r3, [r2, #0]
 8007500:	25a3      	movs	r5, #163	@ 0xa3
 8007502:	e793      	b.n	800742c <__gethex+0xf8>
 8007504:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007508:	2a2e      	cmp	r2, #46	@ 0x2e
 800750a:	d012      	beq.n	8007532 <__gethex+0x1fe>
 800750c:	2b20      	cmp	r3, #32
 800750e:	d104      	bne.n	800751a <__gethex+0x1e6>
 8007510:	f845 bb04 	str.w	fp, [r5], #4
 8007514:	f04f 0b00 	mov.w	fp, #0
 8007518:	465b      	mov	r3, fp
 800751a:	7830      	ldrb	r0, [r6, #0]
 800751c:	9303      	str	r3, [sp, #12]
 800751e:	f7ff fef4 	bl	800730a <__hexdig_fun>
 8007522:	9b03      	ldr	r3, [sp, #12]
 8007524:	f000 000f 	and.w	r0, r0, #15
 8007528:	4098      	lsls	r0, r3
 800752a:	ea4b 0b00 	orr.w	fp, fp, r0
 800752e:	3304      	adds	r3, #4
 8007530:	e7ae      	b.n	8007490 <__gethex+0x15c>
 8007532:	45b1      	cmp	r9, r6
 8007534:	d8ea      	bhi.n	800750c <__gethex+0x1d8>
 8007536:	492b      	ldr	r1, [pc, #172]	@ (80075e4 <__gethex+0x2b0>)
 8007538:	9303      	str	r3, [sp, #12]
 800753a:	2201      	movs	r2, #1
 800753c:	4630      	mov	r0, r6
 800753e:	f7ff fe3d 	bl	80071bc <strncmp>
 8007542:	9b03      	ldr	r3, [sp, #12]
 8007544:	2800      	cmp	r0, #0
 8007546:	d1e1      	bne.n	800750c <__gethex+0x1d8>
 8007548:	e7a2      	b.n	8007490 <__gethex+0x15c>
 800754a:	1ea9      	subs	r1, r5, #2
 800754c:	4620      	mov	r0, r4
 800754e:	f7fe fd60 	bl	8006012 <__any_on>
 8007552:	2800      	cmp	r0, #0
 8007554:	d0c2      	beq.n	80074dc <__gethex+0x1a8>
 8007556:	f04f 0903 	mov.w	r9, #3
 800755a:	e7c1      	b.n	80074e0 <__gethex+0x1ac>
 800755c:	da09      	bge.n	8007572 <__gethex+0x23e>
 800755e:	1b75      	subs	r5, r6, r5
 8007560:	4621      	mov	r1, r4
 8007562:	9801      	ldr	r0, [sp, #4]
 8007564:	462a      	mov	r2, r5
 8007566:	f7fe fb1b 	bl	8005ba0 <__lshift>
 800756a:	1b7f      	subs	r7, r7, r5
 800756c:	4604      	mov	r4, r0
 800756e:	f100 0a14 	add.w	sl, r0, #20
 8007572:	f04f 0900 	mov.w	r9, #0
 8007576:	e7b8      	b.n	80074ea <__gethex+0x1b6>
 8007578:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800757c:	42bd      	cmp	r5, r7
 800757e:	dd6f      	ble.n	8007660 <__gethex+0x32c>
 8007580:	1bed      	subs	r5, r5, r7
 8007582:	42ae      	cmp	r6, r5
 8007584:	dc34      	bgt.n	80075f0 <__gethex+0x2bc>
 8007586:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800758a:	2b02      	cmp	r3, #2
 800758c:	d022      	beq.n	80075d4 <__gethex+0x2a0>
 800758e:	2b03      	cmp	r3, #3
 8007590:	d024      	beq.n	80075dc <__gethex+0x2a8>
 8007592:	2b01      	cmp	r3, #1
 8007594:	d115      	bne.n	80075c2 <__gethex+0x28e>
 8007596:	42ae      	cmp	r6, r5
 8007598:	d113      	bne.n	80075c2 <__gethex+0x28e>
 800759a:	2e01      	cmp	r6, #1
 800759c:	d10b      	bne.n	80075b6 <__gethex+0x282>
 800759e:	9a02      	ldr	r2, [sp, #8]
 80075a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80075a4:	6013      	str	r3, [r2, #0]
 80075a6:	2301      	movs	r3, #1
 80075a8:	6123      	str	r3, [r4, #16]
 80075aa:	f8ca 3000 	str.w	r3, [sl]
 80075ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075b0:	2562      	movs	r5, #98	@ 0x62
 80075b2:	601c      	str	r4, [r3, #0]
 80075b4:	e73a      	b.n	800742c <__gethex+0xf8>
 80075b6:	1e71      	subs	r1, r6, #1
 80075b8:	4620      	mov	r0, r4
 80075ba:	f7fe fd2a 	bl	8006012 <__any_on>
 80075be:	2800      	cmp	r0, #0
 80075c0:	d1ed      	bne.n	800759e <__gethex+0x26a>
 80075c2:	9801      	ldr	r0, [sp, #4]
 80075c4:	4621      	mov	r1, r4
 80075c6:	f7fe f8d3 	bl	8005770 <_Bfree>
 80075ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80075cc:	2300      	movs	r3, #0
 80075ce:	6013      	str	r3, [r2, #0]
 80075d0:	2550      	movs	r5, #80	@ 0x50
 80075d2:	e72b      	b.n	800742c <__gethex+0xf8>
 80075d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d1f3      	bne.n	80075c2 <__gethex+0x28e>
 80075da:	e7e0      	b.n	800759e <__gethex+0x26a>
 80075dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d1dd      	bne.n	800759e <__gethex+0x26a>
 80075e2:	e7ee      	b.n	80075c2 <__gethex+0x28e>
 80075e4:	080081d8 	.word	0x080081d8
 80075e8:	08008071 	.word	0x08008071
 80075ec:	0800834a 	.word	0x0800834a
 80075f0:	1e6f      	subs	r7, r5, #1
 80075f2:	f1b9 0f00 	cmp.w	r9, #0
 80075f6:	d130      	bne.n	800765a <__gethex+0x326>
 80075f8:	b127      	cbz	r7, 8007604 <__gethex+0x2d0>
 80075fa:	4639      	mov	r1, r7
 80075fc:	4620      	mov	r0, r4
 80075fe:	f7fe fd08 	bl	8006012 <__any_on>
 8007602:	4681      	mov	r9, r0
 8007604:	117a      	asrs	r2, r7, #5
 8007606:	2301      	movs	r3, #1
 8007608:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800760c:	f007 071f 	and.w	r7, r7, #31
 8007610:	40bb      	lsls	r3, r7
 8007612:	4213      	tst	r3, r2
 8007614:	4629      	mov	r1, r5
 8007616:	4620      	mov	r0, r4
 8007618:	bf18      	it	ne
 800761a:	f049 0902 	orrne.w	r9, r9, #2
 800761e:	f7ff fe22 	bl	8007266 <rshift>
 8007622:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007626:	1b76      	subs	r6, r6, r5
 8007628:	2502      	movs	r5, #2
 800762a:	f1b9 0f00 	cmp.w	r9, #0
 800762e:	d047      	beq.n	80076c0 <__gethex+0x38c>
 8007630:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007634:	2b02      	cmp	r3, #2
 8007636:	d015      	beq.n	8007664 <__gethex+0x330>
 8007638:	2b03      	cmp	r3, #3
 800763a:	d017      	beq.n	800766c <__gethex+0x338>
 800763c:	2b01      	cmp	r3, #1
 800763e:	d109      	bne.n	8007654 <__gethex+0x320>
 8007640:	f019 0f02 	tst.w	r9, #2
 8007644:	d006      	beq.n	8007654 <__gethex+0x320>
 8007646:	f8da 3000 	ldr.w	r3, [sl]
 800764a:	ea49 0903 	orr.w	r9, r9, r3
 800764e:	f019 0f01 	tst.w	r9, #1
 8007652:	d10e      	bne.n	8007672 <__gethex+0x33e>
 8007654:	f045 0510 	orr.w	r5, r5, #16
 8007658:	e032      	b.n	80076c0 <__gethex+0x38c>
 800765a:	f04f 0901 	mov.w	r9, #1
 800765e:	e7d1      	b.n	8007604 <__gethex+0x2d0>
 8007660:	2501      	movs	r5, #1
 8007662:	e7e2      	b.n	800762a <__gethex+0x2f6>
 8007664:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007666:	f1c3 0301 	rsb	r3, r3, #1
 800766a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800766c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800766e:	2b00      	cmp	r3, #0
 8007670:	d0f0      	beq.n	8007654 <__gethex+0x320>
 8007672:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007676:	f104 0314 	add.w	r3, r4, #20
 800767a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800767e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007682:	f04f 0c00 	mov.w	ip, #0
 8007686:	4618      	mov	r0, r3
 8007688:	f853 2b04 	ldr.w	r2, [r3], #4
 800768c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007690:	d01b      	beq.n	80076ca <__gethex+0x396>
 8007692:	3201      	adds	r2, #1
 8007694:	6002      	str	r2, [r0, #0]
 8007696:	2d02      	cmp	r5, #2
 8007698:	f104 0314 	add.w	r3, r4, #20
 800769c:	d13c      	bne.n	8007718 <__gethex+0x3e4>
 800769e:	f8d8 2000 	ldr.w	r2, [r8]
 80076a2:	3a01      	subs	r2, #1
 80076a4:	42b2      	cmp	r2, r6
 80076a6:	d109      	bne.n	80076bc <__gethex+0x388>
 80076a8:	1171      	asrs	r1, r6, #5
 80076aa:	2201      	movs	r2, #1
 80076ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80076b0:	f006 061f 	and.w	r6, r6, #31
 80076b4:	fa02 f606 	lsl.w	r6, r2, r6
 80076b8:	421e      	tst	r6, r3
 80076ba:	d13a      	bne.n	8007732 <__gethex+0x3fe>
 80076bc:	f045 0520 	orr.w	r5, r5, #32
 80076c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076c2:	601c      	str	r4, [r3, #0]
 80076c4:	9b02      	ldr	r3, [sp, #8]
 80076c6:	601f      	str	r7, [r3, #0]
 80076c8:	e6b0      	b.n	800742c <__gethex+0xf8>
 80076ca:	4299      	cmp	r1, r3
 80076cc:	f843 cc04 	str.w	ip, [r3, #-4]
 80076d0:	d8d9      	bhi.n	8007686 <__gethex+0x352>
 80076d2:	68a3      	ldr	r3, [r4, #8]
 80076d4:	459b      	cmp	fp, r3
 80076d6:	db17      	blt.n	8007708 <__gethex+0x3d4>
 80076d8:	6861      	ldr	r1, [r4, #4]
 80076da:	9801      	ldr	r0, [sp, #4]
 80076dc:	3101      	adds	r1, #1
 80076de:	f7fe f807 	bl	80056f0 <_Balloc>
 80076e2:	4681      	mov	r9, r0
 80076e4:	b918      	cbnz	r0, 80076ee <__gethex+0x3ba>
 80076e6:	4b1a      	ldr	r3, [pc, #104]	@ (8007750 <__gethex+0x41c>)
 80076e8:	4602      	mov	r2, r0
 80076ea:	2184      	movs	r1, #132	@ 0x84
 80076ec:	e6c5      	b.n	800747a <__gethex+0x146>
 80076ee:	6922      	ldr	r2, [r4, #16]
 80076f0:	3202      	adds	r2, #2
 80076f2:	f104 010c 	add.w	r1, r4, #12
 80076f6:	0092      	lsls	r2, r2, #2
 80076f8:	300c      	adds	r0, #12
 80076fa:	f7ff fd81 	bl	8007200 <memcpy>
 80076fe:	4621      	mov	r1, r4
 8007700:	9801      	ldr	r0, [sp, #4]
 8007702:	f7fe f835 	bl	8005770 <_Bfree>
 8007706:	464c      	mov	r4, r9
 8007708:	6923      	ldr	r3, [r4, #16]
 800770a:	1c5a      	adds	r2, r3, #1
 800770c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007710:	6122      	str	r2, [r4, #16]
 8007712:	2201      	movs	r2, #1
 8007714:	615a      	str	r2, [r3, #20]
 8007716:	e7be      	b.n	8007696 <__gethex+0x362>
 8007718:	6922      	ldr	r2, [r4, #16]
 800771a:	455a      	cmp	r2, fp
 800771c:	dd0b      	ble.n	8007736 <__gethex+0x402>
 800771e:	2101      	movs	r1, #1
 8007720:	4620      	mov	r0, r4
 8007722:	f7ff fda0 	bl	8007266 <rshift>
 8007726:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800772a:	3701      	adds	r7, #1
 800772c:	42bb      	cmp	r3, r7
 800772e:	f6ff aee0 	blt.w	80074f2 <__gethex+0x1be>
 8007732:	2501      	movs	r5, #1
 8007734:	e7c2      	b.n	80076bc <__gethex+0x388>
 8007736:	f016 061f 	ands.w	r6, r6, #31
 800773a:	d0fa      	beq.n	8007732 <__gethex+0x3fe>
 800773c:	4453      	add	r3, sl
 800773e:	f1c6 0620 	rsb	r6, r6, #32
 8007742:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007746:	f7fe f8c5 	bl	80058d4 <__hi0bits>
 800774a:	42b0      	cmp	r0, r6
 800774c:	dbe7      	blt.n	800771e <__gethex+0x3ea>
 800774e:	e7f0      	b.n	8007732 <__gethex+0x3fe>
 8007750:	08008071 	.word	0x08008071

08007754 <L_shift>:
 8007754:	f1c2 0208 	rsb	r2, r2, #8
 8007758:	0092      	lsls	r2, r2, #2
 800775a:	b570      	push	{r4, r5, r6, lr}
 800775c:	f1c2 0620 	rsb	r6, r2, #32
 8007760:	6843      	ldr	r3, [r0, #4]
 8007762:	6804      	ldr	r4, [r0, #0]
 8007764:	fa03 f506 	lsl.w	r5, r3, r6
 8007768:	432c      	orrs	r4, r5
 800776a:	40d3      	lsrs	r3, r2
 800776c:	6004      	str	r4, [r0, #0]
 800776e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007772:	4288      	cmp	r0, r1
 8007774:	d3f4      	bcc.n	8007760 <L_shift+0xc>
 8007776:	bd70      	pop	{r4, r5, r6, pc}

08007778 <__match>:
 8007778:	b530      	push	{r4, r5, lr}
 800777a:	6803      	ldr	r3, [r0, #0]
 800777c:	3301      	adds	r3, #1
 800777e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007782:	b914      	cbnz	r4, 800778a <__match+0x12>
 8007784:	6003      	str	r3, [r0, #0]
 8007786:	2001      	movs	r0, #1
 8007788:	bd30      	pop	{r4, r5, pc}
 800778a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800778e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007792:	2d19      	cmp	r5, #25
 8007794:	bf98      	it	ls
 8007796:	3220      	addls	r2, #32
 8007798:	42a2      	cmp	r2, r4
 800779a:	d0f0      	beq.n	800777e <__match+0x6>
 800779c:	2000      	movs	r0, #0
 800779e:	e7f3      	b.n	8007788 <__match+0x10>

080077a0 <__hexnan>:
 80077a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077a4:	680b      	ldr	r3, [r1, #0]
 80077a6:	6801      	ldr	r1, [r0, #0]
 80077a8:	115e      	asrs	r6, r3, #5
 80077aa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80077ae:	f013 031f 	ands.w	r3, r3, #31
 80077b2:	b087      	sub	sp, #28
 80077b4:	bf18      	it	ne
 80077b6:	3604      	addne	r6, #4
 80077b8:	2500      	movs	r5, #0
 80077ba:	1f37      	subs	r7, r6, #4
 80077bc:	4682      	mov	sl, r0
 80077be:	4690      	mov	r8, r2
 80077c0:	9301      	str	r3, [sp, #4]
 80077c2:	f846 5c04 	str.w	r5, [r6, #-4]
 80077c6:	46b9      	mov	r9, r7
 80077c8:	463c      	mov	r4, r7
 80077ca:	9502      	str	r5, [sp, #8]
 80077cc:	46ab      	mov	fp, r5
 80077ce:	784a      	ldrb	r2, [r1, #1]
 80077d0:	1c4b      	adds	r3, r1, #1
 80077d2:	9303      	str	r3, [sp, #12]
 80077d4:	b342      	cbz	r2, 8007828 <__hexnan+0x88>
 80077d6:	4610      	mov	r0, r2
 80077d8:	9105      	str	r1, [sp, #20]
 80077da:	9204      	str	r2, [sp, #16]
 80077dc:	f7ff fd95 	bl	800730a <__hexdig_fun>
 80077e0:	2800      	cmp	r0, #0
 80077e2:	d151      	bne.n	8007888 <__hexnan+0xe8>
 80077e4:	9a04      	ldr	r2, [sp, #16]
 80077e6:	9905      	ldr	r1, [sp, #20]
 80077e8:	2a20      	cmp	r2, #32
 80077ea:	d818      	bhi.n	800781e <__hexnan+0x7e>
 80077ec:	9b02      	ldr	r3, [sp, #8]
 80077ee:	459b      	cmp	fp, r3
 80077f0:	dd13      	ble.n	800781a <__hexnan+0x7a>
 80077f2:	454c      	cmp	r4, r9
 80077f4:	d206      	bcs.n	8007804 <__hexnan+0x64>
 80077f6:	2d07      	cmp	r5, #7
 80077f8:	dc04      	bgt.n	8007804 <__hexnan+0x64>
 80077fa:	462a      	mov	r2, r5
 80077fc:	4649      	mov	r1, r9
 80077fe:	4620      	mov	r0, r4
 8007800:	f7ff ffa8 	bl	8007754 <L_shift>
 8007804:	4544      	cmp	r4, r8
 8007806:	d952      	bls.n	80078ae <__hexnan+0x10e>
 8007808:	2300      	movs	r3, #0
 800780a:	f1a4 0904 	sub.w	r9, r4, #4
 800780e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007812:	f8cd b008 	str.w	fp, [sp, #8]
 8007816:	464c      	mov	r4, r9
 8007818:	461d      	mov	r5, r3
 800781a:	9903      	ldr	r1, [sp, #12]
 800781c:	e7d7      	b.n	80077ce <__hexnan+0x2e>
 800781e:	2a29      	cmp	r2, #41	@ 0x29
 8007820:	d157      	bne.n	80078d2 <__hexnan+0x132>
 8007822:	3102      	adds	r1, #2
 8007824:	f8ca 1000 	str.w	r1, [sl]
 8007828:	f1bb 0f00 	cmp.w	fp, #0
 800782c:	d051      	beq.n	80078d2 <__hexnan+0x132>
 800782e:	454c      	cmp	r4, r9
 8007830:	d206      	bcs.n	8007840 <__hexnan+0xa0>
 8007832:	2d07      	cmp	r5, #7
 8007834:	dc04      	bgt.n	8007840 <__hexnan+0xa0>
 8007836:	462a      	mov	r2, r5
 8007838:	4649      	mov	r1, r9
 800783a:	4620      	mov	r0, r4
 800783c:	f7ff ff8a 	bl	8007754 <L_shift>
 8007840:	4544      	cmp	r4, r8
 8007842:	d936      	bls.n	80078b2 <__hexnan+0x112>
 8007844:	f1a8 0204 	sub.w	r2, r8, #4
 8007848:	4623      	mov	r3, r4
 800784a:	f853 1b04 	ldr.w	r1, [r3], #4
 800784e:	f842 1f04 	str.w	r1, [r2, #4]!
 8007852:	429f      	cmp	r7, r3
 8007854:	d2f9      	bcs.n	800784a <__hexnan+0xaa>
 8007856:	1b3b      	subs	r3, r7, r4
 8007858:	f023 0303 	bic.w	r3, r3, #3
 800785c:	3304      	adds	r3, #4
 800785e:	3401      	adds	r4, #1
 8007860:	3e03      	subs	r6, #3
 8007862:	42b4      	cmp	r4, r6
 8007864:	bf88      	it	hi
 8007866:	2304      	movhi	r3, #4
 8007868:	4443      	add	r3, r8
 800786a:	2200      	movs	r2, #0
 800786c:	f843 2b04 	str.w	r2, [r3], #4
 8007870:	429f      	cmp	r7, r3
 8007872:	d2fb      	bcs.n	800786c <__hexnan+0xcc>
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	b91b      	cbnz	r3, 8007880 <__hexnan+0xe0>
 8007878:	4547      	cmp	r7, r8
 800787a:	d128      	bne.n	80078ce <__hexnan+0x12e>
 800787c:	2301      	movs	r3, #1
 800787e:	603b      	str	r3, [r7, #0]
 8007880:	2005      	movs	r0, #5
 8007882:	b007      	add	sp, #28
 8007884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007888:	3501      	adds	r5, #1
 800788a:	2d08      	cmp	r5, #8
 800788c:	f10b 0b01 	add.w	fp, fp, #1
 8007890:	dd06      	ble.n	80078a0 <__hexnan+0x100>
 8007892:	4544      	cmp	r4, r8
 8007894:	d9c1      	bls.n	800781a <__hexnan+0x7a>
 8007896:	2300      	movs	r3, #0
 8007898:	f844 3c04 	str.w	r3, [r4, #-4]
 800789c:	2501      	movs	r5, #1
 800789e:	3c04      	subs	r4, #4
 80078a0:	6822      	ldr	r2, [r4, #0]
 80078a2:	f000 000f 	and.w	r0, r0, #15
 80078a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80078aa:	6020      	str	r0, [r4, #0]
 80078ac:	e7b5      	b.n	800781a <__hexnan+0x7a>
 80078ae:	2508      	movs	r5, #8
 80078b0:	e7b3      	b.n	800781a <__hexnan+0x7a>
 80078b2:	9b01      	ldr	r3, [sp, #4]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d0dd      	beq.n	8007874 <__hexnan+0xd4>
 80078b8:	f1c3 0320 	rsb	r3, r3, #32
 80078bc:	f04f 32ff 	mov.w	r2, #4294967295
 80078c0:	40da      	lsrs	r2, r3
 80078c2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80078c6:	4013      	ands	r3, r2
 80078c8:	f846 3c04 	str.w	r3, [r6, #-4]
 80078cc:	e7d2      	b.n	8007874 <__hexnan+0xd4>
 80078ce:	3f04      	subs	r7, #4
 80078d0:	e7d0      	b.n	8007874 <__hexnan+0xd4>
 80078d2:	2004      	movs	r0, #4
 80078d4:	e7d5      	b.n	8007882 <__hexnan+0xe2>

080078d6 <__ascii_mbtowc>:
 80078d6:	b082      	sub	sp, #8
 80078d8:	b901      	cbnz	r1, 80078dc <__ascii_mbtowc+0x6>
 80078da:	a901      	add	r1, sp, #4
 80078dc:	b142      	cbz	r2, 80078f0 <__ascii_mbtowc+0x1a>
 80078de:	b14b      	cbz	r3, 80078f4 <__ascii_mbtowc+0x1e>
 80078e0:	7813      	ldrb	r3, [r2, #0]
 80078e2:	600b      	str	r3, [r1, #0]
 80078e4:	7812      	ldrb	r2, [r2, #0]
 80078e6:	1e10      	subs	r0, r2, #0
 80078e8:	bf18      	it	ne
 80078ea:	2001      	movne	r0, #1
 80078ec:	b002      	add	sp, #8
 80078ee:	4770      	bx	lr
 80078f0:	4610      	mov	r0, r2
 80078f2:	e7fb      	b.n	80078ec <__ascii_mbtowc+0x16>
 80078f4:	f06f 0001 	mvn.w	r0, #1
 80078f8:	e7f8      	b.n	80078ec <__ascii_mbtowc+0x16>

080078fa <_realloc_r>:
 80078fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078fe:	4680      	mov	r8, r0
 8007900:	4615      	mov	r5, r2
 8007902:	460c      	mov	r4, r1
 8007904:	b921      	cbnz	r1, 8007910 <_realloc_r+0x16>
 8007906:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800790a:	4611      	mov	r1, r2
 800790c:	f7fd be64 	b.w	80055d8 <_malloc_r>
 8007910:	b92a      	cbnz	r2, 800791e <_realloc_r+0x24>
 8007912:	f7fd fded 	bl	80054f0 <_free_r>
 8007916:	2400      	movs	r4, #0
 8007918:	4620      	mov	r0, r4
 800791a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800791e:	f000 fa41 	bl	8007da4 <_malloc_usable_size_r>
 8007922:	4285      	cmp	r5, r0
 8007924:	4606      	mov	r6, r0
 8007926:	d802      	bhi.n	800792e <_realloc_r+0x34>
 8007928:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800792c:	d8f4      	bhi.n	8007918 <_realloc_r+0x1e>
 800792e:	4629      	mov	r1, r5
 8007930:	4640      	mov	r0, r8
 8007932:	f7fd fe51 	bl	80055d8 <_malloc_r>
 8007936:	4607      	mov	r7, r0
 8007938:	2800      	cmp	r0, #0
 800793a:	d0ec      	beq.n	8007916 <_realloc_r+0x1c>
 800793c:	42b5      	cmp	r5, r6
 800793e:	462a      	mov	r2, r5
 8007940:	4621      	mov	r1, r4
 8007942:	bf28      	it	cs
 8007944:	4632      	movcs	r2, r6
 8007946:	f7ff fc5b 	bl	8007200 <memcpy>
 800794a:	4621      	mov	r1, r4
 800794c:	4640      	mov	r0, r8
 800794e:	f7fd fdcf 	bl	80054f0 <_free_r>
 8007952:	463c      	mov	r4, r7
 8007954:	e7e0      	b.n	8007918 <_realloc_r+0x1e>

08007956 <__ascii_wctomb>:
 8007956:	4603      	mov	r3, r0
 8007958:	4608      	mov	r0, r1
 800795a:	b141      	cbz	r1, 800796e <__ascii_wctomb+0x18>
 800795c:	2aff      	cmp	r2, #255	@ 0xff
 800795e:	d904      	bls.n	800796a <__ascii_wctomb+0x14>
 8007960:	228a      	movs	r2, #138	@ 0x8a
 8007962:	601a      	str	r2, [r3, #0]
 8007964:	f04f 30ff 	mov.w	r0, #4294967295
 8007968:	4770      	bx	lr
 800796a:	700a      	strb	r2, [r1, #0]
 800796c:	2001      	movs	r0, #1
 800796e:	4770      	bx	lr

08007970 <__sfputc_r>:
 8007970:	6893      	ldr	r3, [r2, #8]
 8007972:	3b01      	subs	r3, #1
 8007974:	2b00      	cmp	r3, #0
 8007976:	b410      	push	{r4}
 8007978:	6093      	str	r3, [r2, #8]
 800797a:	da08      	bge.n	800798e <__sfputc_r+0x1e>
 800797c:	6994      	ldr	r4, [r2, #24]
 800797e:	42a3      	cmp	r3, r4
 8007980:	db01      	blt.n	8007986 <__sfputc_r+0x16>
 8007982:	290a      	cmp	r1, #10
 8007984:	d103      	bne.n	800798e <__sfputc_r+0x1e>
 8007986:	f85d 4b04 	ldr.w	r4, [sp], #4
 800798a:	f000 b933 	b.w	8007bf4 <__swbuf_r>
 800798e:	6813      	ldr	r3, [r2, #0]
 8007990:	1c58      	adds	r0, r3, #1
 8007992:	6010      	str	r0, [r2, #0]
 8007994:	7019      	strb	r1, [r3, #0]
 8007996:	4608      	mov	r0, r1
 8007998:	f85d 4b04 	ldr.w	r4, [sp], #4
 800799c:	4770      	bx	lr

0800799e <__sfputs_r>:
 800799e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079a0:	4606      	mov	r6, r0
 80079a2:	460f      	mov	r7, r1
 80079a4:	4614      	mov	r4, r2
 80079a6:	18d5      	adds	r5, r2, r3
 80079a8:	42ac      	cmp	r4, r5
 80079aa:	d101      	bne.n	80079b0 <__sfputs_r+0x12>
 80079ac:	2000      	movs	r0, #0
 80079ae:	e007      	b.n	80079c0 <__sfputs_r+0x22>
 80079b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079b4:	463a      	mov	r2, r7
 80079b6:	4630      	mov	r0, r6
 80079b8:	f7ff ffda 	bl	8007970 <__sfputc_r>
 80079bc:	1c43      	adds	r3, r0, #1
 80079be:	d1f3      	bne.n	80079a8 <__sfputs_r+0xa>
 80079c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080079c4 <_vfiprintf_r>:
 80079c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c8:	460d      	mov	r5, r1
 80079ca:	b09d      	sub	sp, #116	@ 0x74
 80079cc:	4614      	mov	r4, r2
 80079ce:	4698      	mov	r8, r3
 80079d0:	4606      	mov	r6, r0
 80079d2:	b118      	cbz	r0, 80079dc <_vfiprintf_r+0x18>
 80079d4:	6a03      	ldr	r3, [r0, #32]
 80079d6:	b90b      	cbnz	r3, 80079dc <_vfiprintf_r+0x18>
 80079d8:	f7fc fdd0 	bl	800457c <__sinit>
 80079dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80079de:	07d9      	lsls	r1, r3, #31
 80079e0:	d405      	bmi.n	80079ee <_vfiprintf_r+0x2a>
 80079e2:	89ab      	ldrh	r3, [r5, #12]
 80079e4:	059a      	lsls	r2, r3, #22
 80079e6:	d402      	bmi.n	80079ee <_vfiprintf_r+0x2a>
 80079e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80079ea:	f7fc ff0c 	bl	8004806 <__retarget_lock_acquire_recursive>
 80079ee:	89ab      	ldrh	r3, [r5, #12]
 80079f0:	071b      	lsls	r3, r3, #28
 80079f2:	d501      	bpl.n	80079f8 <_vfiprintf_r+0x34>
 80079f4:	692b      	ldr	r3, [r5, #16]
 80079f6:	b99b      	cbnz	r3, 8007a20 <_vfiprintf_r+0x5c>
 80079f8:	4629      	mov	r1, r5
 80079fa:	4630      	mov	r0, r6
 80079fc:	f000 f938 	bl	8007c70 <__swsetup_r>
 8007a00:	b170      	cbz	r0, 8007a20 <_vfiprintf_r+0x5c>
 8007a02:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a04:	07dc      	lsls	r4, r3, #31
 8007a06:	d504      	bpl.n	8007a12 <_vfiprintf_r+0x4e>
 8007a08:	f04f 30ff 	mov.w	r0, #4294967295
 8007a0c:	b01d      	add	sp, #116	@ 0x74
 8007a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a12:	89ab      	ldrh	r3, [r5, #12]
 8007a14:	0598      	lsls	r0, r3, #22
 8007a16:	d4f7      	bmi.n	8007a08 <_vfiprintf_r+0x44>
 8007a18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a1a:	f7fc fef5 	bl	8004808 <__retarget_lock_release_recursive>
 8007a1e:	e7f3      	b.n	8007a08 <_vfiprintf_r+0x44>
 8007a20:	2300      	movs	r3, #0
 8007a22:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a24:	2320      	movs	r3, #32
 8007a26:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007a2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a2e:	2330      	movs	r3, #48	@ 0x30
 8007a30:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007be0 <_vfiprintf_r+0x21c>
 8007a34:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007a38:	f04f 0901 	mov.w	r9, #1
 8007a3c:	4623      	mov	r3, r4
 8007a3e:	469a      	mov	sl, r3
 8007a40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a44:	b10a      	cbz	r2, 8007a4a <_vfiprintf_r+0x86>
 8007a46:	2a25      	cmp	r2, #37	@ 0x25
 8007a48:	d1f9      	bne.n	8007a3e <_vfiprintf_r+0x7a>
 8007a4a:	ebba 0b04 	subs.w	fp, sl, r4
 8007a4e:	d00b      	beq.n	8007a68 <_vfiprintf_r+0xa4>
 8007a50:	465b      	mov	r3, fp
 8007a52:	4622      	mov	r2, r4
 8007a54:	4629      	mov	r1, r5
 8007a56:	4630      	mov	r0, r6
 8007a58:	f7ff ffa1 	bl	800799e <__sfputs_r>
 8007a5c:	3001      	adds	r0, #1
 8007a5e:	f000 80a7 	beq.w	8007bb0 <_vfiprintf_r+0x1ec>
 8007a62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a64:	445a      	add	r2, fp
 8007a66:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a68:	f89a 3000 	ldrb.w	r3, [sl]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f000 809f 	beq.w	8007bb0 <_vfiprintf_r+0x1ec>
 8007a72:	2300      	movs	r3, #0
 8007a74:	f04f 32ff 	mov.w	r2, #4294967295
 8007a78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a7c:	f10a 0a01 	add.w	sl, sl, #1
 8007a80:	9304      	str	r3, [sp, #16]
 8007a82:	9307      	str	r3, [sp, #28]
 8007a84:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007a88:	931a      	str	r3, [sp, #104]	@ 0x68
 8007a8a:	4654      	mov	r4, sl
 8007a8c:	2205      	movs	r2, #5
 8007a8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a92:	4853      	ldr	r0, [pc, #332]	@ (8007be0 <_vfiprintf_r+0x21c>)
 8007a94:	f7f8 fb9c 	bl	80001d0 <memchr>
 8007a98:	9a04      	ldr	r2, [sp, #16]
 8007a9a:	b9d8      	cbnz	r0, 8007ad4 <_vfiprintf_r+0x110>
 8007a9c:	06d1      	lsls	r1, r2, #27
 8007a9e:	bf44      	itt	mi
 8007aa0:	2320      	movmi	r3, #32
 8007aa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007aa6:	0713      	lsls	r3, r2, #28
 8007aa8:	bf44      	itt	mi
 8007aaa:	232b      	movmi	r3, #43	@ 0x2b
 8007aac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ab0:	f89a 3000 	ldrb.w	r3, [sl]
 8007ab4:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ab6:	d015      	beq.n	8007ae4 <_vfiprintf_r+0x120>
 8007ab8:	9a07      	ldr	r2, [sp, #28]
 8007aba:	4654      	mov	r4, sl
 8007abc:	2000      	movs	r0, #0
 8007abe:	f04f 0c0a 	mov.w	ip, #10
 8007ac2:	4621      	mov	r1, r4
 8007ac4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ac8:	3b30      	subs	r3, #48	@ 0x30
 8007aca:	2b09      	cmp	r3, #9
 8007acc:	d94b      	bls.n	8007b66 <_vfiprintf_r+0x1a2>
 8007ace:	b1b0      	cbz	r0, 8007afe <_vfiprintf_r+0x13a>
 8007ad0:	9207      	str	r2, [sp, #28]
 8007ad2:	e014      	b.n	8007afe <_vfiprintf_r+0x13a>
 8007ad4:	eba0 0308 	sub.w	r3, r0, r8
 8007ad8:	fa09 f303 	lsl.w	r3, r9, r3
 8007adc:	4313      	orrs	r3, r2
 8007ade:	9304      	str	r3, [sp, #16]
 8007ae0:	46a2      	mov	sl, r4
 8007ae2:	e7d2      	b.n	8007a8a <_vfiprintf_r+0xc6>
 8007ae4:	9b03      	ldr	r3, [sp, #12]
 8007ae6:	1d19      	adds	r1, r3, #4
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	9103      	str	r1, [sp, #12]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	bfbb      	ittet	lt
 8007af0:	425b      	neglt	r3, r3
 8007af2:	f042 0202 	orrlt.w	r2, r2, #2
 8007af6:	9307      	strge	r3, [sp, #28]
 8007af8:	9307      	strlt	r3, [sp, #28]
 8007afa:	bfb8      	it	lt
 8007afc:	9204      	strlt	r2, [sp, #16]
 8007afe:	7823      	ldrb	r3, [r4, #0]
 8007b00:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b02:	d10a      	bne.n	8007b1a <_vfiprintf_r+0x156>
 8007b04:	7863      	ldrb	r3, [r4, #1]
 8007b06:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b08:	d132      	bne.n	8007b70 <_vfiprintf_r+0x1ac>
 8007b0a:	9b03      	ldr	r3, [sp, #12]
 8007b0c:	1d1a      	adds	r2, r3, #4
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	9203      	str	r2, [sp, #12]
 8007b12:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007b16:	3402      	adds	r4, #2
 8007b18:	9305      	str	r3, [sp, #20]
 8007b1a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007bf0 <_vfiprintf_r+0x22c>
 8007b1e:	7821      	ldrb	r1, [r4, #0]
 8007b20:	2203      	movs	r2, #3
 8007b22:	4650      	mov	r0, sl
 8007b24:	f7f8 fb54 	bl	80001d0 <memchr>
 8007b28:	b138      	cbz	r0, 8007b3a <_vfiprintf_r+0x176>
 8007b2a:	9b04      	ldr	r3, [sp, #16]
 8007b2c:	eba0 000a 	sub.w	r0, r0, sl
 8007b30:	2240      	movs	r2, #64	@ 0x40
 8007b32:	4082      	lsls	r2, r0
 8007b34:	4313      	orrs	r3, r2
 8007b36:	3401      	adds	r4, #1
 8007b38:	9304      	str	r3, [sp, #16]
 8007b3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b3e:	4829      	ldr	r0, [pc, #164]	@ (8007be4 <_vfiprintf_r+0x220>)
 8007b40:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007b44:	2206      	movs	r2, #6
 8007b46:	f7f8 fb43 	bl	80001d0 <memchr>
 8007b4a:	2800      	cmp	r0, #0
 8007b4c:	d03f      	beq.n	8007bce <_vfiprintf_r+0x20a>
 8007b4e:	4b26      	ldr	r3, [pc, #152]	@ (8007be8 <_vfiprintf_r+0x224>)
 8007b50:	bb1b      	cbnz	r3, 8007b9a <_vfiprintf_r+0x1d6>
 8007b52:	9b03      	ldr	r3, [sp, #12]
 8007b54:	3307      	adds	r3, #7
 8007b56:	f023 0307 	bic.w	r3, r3, #7
 8007b5a:	3308      	adds	r3, #8
 8007b5c:	9303      	str	r3, [sp, #12]
 8007b5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b60:	443b      	add	r3, r7
 8007b62:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b64:	e76a      	b.n	8007a3c <_vfiprintf_r+0x78>
 8007b66:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b6a:	460c      	mov	r4, r1
 8007b6c:	2001      	movs	r0, #1
 8007b6e:	e7a8      	b.n	8007ac2 <_vfiprintf_r+0xfe>
 8007b70:	2300      	movs	r3, #0
 8007b72:	3401      	adds	r4, #1
 8007b74:	9305      	str	r3, [sp, #20]
 8007b76:	4619      	mov	r1, r3
 8007b78:	f04f 0c0a 	mov.w	ip, #10
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b82:	3a30      	subs	r2, #48	@ 0x30
 8007b84:	2a09      	cmp	r2, #9
 8007b86:	d903      	bls.n	8007b90 <_vfiprintf_r+0x1cc>
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d0c6      	beq.n	8007b1a <_vfiprintf_r+0x156>
 8007b8c:	9105      	str	r1, [sp, #20]
 8007b8e:	e7c4      	b.n	8007b1a <_vfiprintf_r+0x156>
 8007b90:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b94:	4604      	mov	r4, r0
 8007b96:	2301      	movs	r3, #1
 8007b98:	e7f0      	b.n	8007b7c <_vfiprintf_r+0x1b8>
 8007b9a:	ab03      	add	r3, sp, #12
 8007b9c:	9300      	str	r3, [sp, #0]
 8007b9e:	462a      	mov	r2, r5
 8007ba0:	4b12      	ldr	r3, [pc, #72]	@ (8007bec <_vfiprintf_r+0x228>)
 8007ba2:	a904      	add	r1, sp, #16
 8007ba4:	4630      	mov	r0, r6
 8007ba6:	f7fb fe91 	bl	80038cc <_printf_float>
 8007baa:	4607      	mov	r7, r0
 8007bac:	1c78      	adds	r0, r7, #1
 8007bae:	d1d6      	bne.n	8007b5e <_vfiprintf_r+0x19a>
 8007bb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007bb2:	07d9      	lsls	r1, r3, #31
 8007bb4:	d405      	bmi.n	8007bc2 <_vfiprintf_r+0x1fe>
 8007bb6:	89ab      	ldrh	r3, [r5, #12]
 8007bb8:	059a      	lsls	r2, r3, #22
 8007bba:	d402      	bmi.n	8007bc2 <_vfiprintf_r+0x1fe>
 8007bbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007bbe:	f7fc fe23 	bl	8004808 <__retarget_lock_release_recursive>
 8007bc2:	89ab      	ldrh	r3, [r5, #12]
 8007bc4:	065b      	lsls	r3, r3, #25
 8007bc6:	f53f af1f 	bmi.w	8007a08 <_vfiprintf_r+0x44>
 8007bca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007bcc:	e71e      	b.n	8007a0c <_vfiprintf_r+0x48>
 8007bce:	ab03      	add	r3, sp, #12
 8007bd0:	9300      	str	r3, [sp, #0]
 8007bd2:	462a      	mov	r2, r5
 8007bd4:	4b05      	ldr	r3, [pc, #20]	@ (8007bec <_vfiprintf_r+0x228>)
 8007bd6:	a904      	add	r1, sp, #16
 8007bd8:	4630      	mov	r0, r6
 8007bda:	f7fc f90f 	bl	8003dfc <_printf_i>
 8007bde:	e7e4      	b.n	8007baa <_vfiprintf_r+0x1e6>
 8007be0:	08008331 	.word	0x08008331
 8007be4:	0800833b 	.word	0x0800833b
 8007be8:	080038cd 	.word	0x080038cd
 8007bec:	0800799f 	.word	0x0800799f
 8007bf0:	08008337 	.word	0x08008337

08007bf4 <__swbuf_r>:
 8007bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bf6:	460e      	mov	r6, r1
 8007bf8:	4614      	mov	r4, r2
 8007bfa:	4605      	mov	r5, r0
 8007bfc:	b118      	cbz	r0, 8007c06 <__swbuf_r+0x12>
 8007bfe:	6a03      	ldr	r3, [r0, #32]
 8007c00:	b90b      	cbnz	r3, 8007c06 <__swbuf_r+0x12>
 8007c02:	f7fc fcbb 	bl	800457c <__sinit>
 8007c06:	69a3      	ldr	r3, [r4, #24]
 8007c08:	60a3      	str	r3, [r4, #8]
 8007c0a:	89a3      	ldrh	r3, [r4, #12]
 8007c0c:	071a      	lsls	r2, r3, #28
 8007c0e:	d501      	bpl.n	8007c14 <__swbuf_r+0x20>
 8007c10:	6923      	ldr	r3, [r4, #16]
 8007c12:	b943      	cbnz	r3, 8007c26 <__swbuf_r+0x32>
 8007c14:	4621      	mov	r1, r4
 8007c16:	4628      	mov	r0, r5
 8007c18:	f000 f82a 	bl	8007c70 <__swsetup_r>
 8007c1c:	b118      	cbz	r0, 8007c26 <__swbuf_r+0x32>
 8007c1e:	f04f 37ff 	mov.w	r7, #4294967295
 8007c22:	4638      	mov	r0, r7
 8007c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c26:	6823      	ldr	r3, [r4, #0]
 8007c28:	6922      	ldr	r2, [r4, #16]
 8007c2a:	1a98      	subs	r0, r3, r2
 8007c2c:	6963      	ldr	r3, [r4, #20]
 8007c2e:	b2f6      	uxtb	r6, r6
 8007c30:	4283      	cmp	r3, r0
 8007c32:	4637      	mov	r7, r6
 8007c34:	dc05      	bgt.n	8007c42 <__swbuf_r+0x4e>
 8007c36:	4621      	mov	r1, r4
 8007c38:	4628      	mov	r0, r5
 8007c3a:	f7ff fa6b 	bl	8007114 <_fflush_r>
 8007c3e:	2800      	cmp	r0, #0
 8007c40:	d1ed      	bne.n	8007c1e <__swbuf_r+0x2a>
 8007c42:	68a3      	ldr	r3, [r4, #8]
 8007c44:	3b01      	subs	r3, #1
 8007c46:	60a3      	str	r3, [r4, #8]
 8007c48:	6823      	ldr	r3, [r4, #0]
 8007c4a:	1c5a      	adds	r2, r3, #1
 8007c4c:	6022      	str	r2, [r4, #0]
 8007c4e:	701e      	strb	r6, [r3, #0]
 8007c50:	6962      	ldr	r2, [r4, #20]
 8007c52:	1c43      	adds	r3, r0, #1
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d004      	beq.n	8007c62 <__swbuf_r+0x6e>
 8007c58:	89a3      	ldrh	r3, [r4, #12]
 8007c5a:	07db      	lsls	r3, r3, #31
 8007c5c:	d5e1      	bpl.n	8007c22 <__swbuf_r+0x2e>
 8007c5e:	2e0a      	cmp	r6, #10
 8007c60:	d1df      	bne.n	8007c22 <__swbuf_r+0x2e>
 8007c62:	4621      	mov	r1, r4
 8007c64:	4628      	mov	r0, r5
 8007c66:	f7ff fa55 	bl	8007114 <_fflush_r>
 8007c6a:	2800      	cmp	r0, #0
 8007c6c:	d0d9      	beq.n	8007c22 <__swbuf_r+0x2e>
 8007c6e:	e7d6      	b.n	8007c1e <__swbuf_r+0x2a>

08007c70 <__swsetup_r>:
 8007c70:	b538      	push	{r3, r4, r5, lr}
 8007c72:	4b29      	ldr	r3, [pc, #164]	@ (8007d18 <__swsetup_r+0xa8>)
 8007c74:	4605      	mov	r5, r0
 8007c76:	6818      	ldr	r0, [r3, #0]
 8007c78:	460c      	mov	r4, r1
 8007c7a:	b118      	cbz	r0, 8007c84 <__swsetup_r+0x14>
 8007c7c:	6a03      	ldr	r3, [r0, #32]
 8007c7e:	b90b      	cbnz	r3, 8007c84 <__swsetup_r+0x14>
 8007c80:	f7fc fc7c 	bl	800457c <__sinit>
 8007c84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c88:	0719      	lsls	r1, r3, #28
 8007c8a:	d422      	bmi.n	8007cd2 <__swsetup_r+0x62>
 8007c8c:	06da      	lsls	r2, r3, #27
 8007c8e:	d407      	bmi.n	8007ca0 <__swsetup_r+0x30>
 8007c90:	2209      	movs	r2, #9
 8007c92:	602a      	str	r2, [r5, #0]
 8007c94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c98:	81a3      	strh	r3, [r4, #12]
 8007c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c9e:	e033      	b.n	8007d08 <__swsetup_r+0x98>
 8007ca0:	0758      	lsls	r0, r3, #29
 8007ca2:	d512      	bpl.n	8007cca <__swsetup_r+0x5a>
 8007ca4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ca6:	b141      	cbz	r1, 8007cba <__swsetup_r+0x4a>
 8007ca8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007cac:	4299      	cmp	r1, r3
 8007cae:	d002      	beq.n	8007cb6 <__swsetup_r+0x46>
 8007cb0:	4628      	mov	r0, r5
 8007cb2:	f7fd fc1d 	bl	80054f0 <_free_r>
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	6363      	str	r3, [r4, #52]	@ 0x34
 8007cba:	89a3      	ldrh	r3, [r4, #12]
 8007cbc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007cc0:	81a3      	strh	r3, [r4, #12]
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	6063      	str	r3, [r4, #4]
 8007cc6:	6923      	ldr	r3, [r4, #16]
 8007cc8:	6023      	str	r3, [r4, #0]
 8007cca:	89a3      	ldrh	r3, [r4, #12]
 8007ccc:	f043 0308 	orr.w	r3, r3, #8
 8007cd0:	81a3      	strh	r3, [r4, #12]
 8007cd2:	6923      	ldr	r3, [r4, #16]
 8007cd4:	b94b      	cbnz	r3, 8007cea <__swsetup_r+0x7a>
 8007cd6:	89a3      	ldrh	r3, [r4, #12]
 8007cd8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007cdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ce0:	d003      	beq.n	8007cea <__swsetup_r+0x7a>
 8007ce2:	4621      	mov	r1, r4
 8007ce4:	4628      	mov	r0, r5
 8007ce6:	f000 f88b 	bl	8007e00 <__smakebuf_r>
 8007cea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cee:	f013 0201 	ands.w	r2, r3, #1
 8007cf2:	d00a      	beq.n	8007d0a <__swsetup_r+0x9a>
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	60a2      	str	r2, [r4, #8]
 8007cf8:	6962      	ldr	r2, [r4, #20]
 8007cfa:	4252      	negs	r2, r2
 8007cfc:	61a2      	str	r2, [r4, #24]
 8007cfe:	6922      	ldr	r2, [r4, #16]
 8007d00:	b942      	cbnz	r2, 8007d14 <__swsetup_r+0xa4>
 8007d02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007d06:	d1c5      	bne.n	8007c94 <__swsetup_r+0x24>
 8007d08:	bd38      	pop	{r3, r4, r5, pc}
 8007d0a:	0799      	lsls	r1, r3, #30
 8007d0c:	bf58      	it	pl
 8007d0e:	6962      	ldrpl	r2, [r4, #20]
 8007d10:	60a2      	str	r2, [r4, #8]
 8007d12:	e7f4      	b.n	8007cfe <__swsetup_r+0x8e>
 8007d14:	2000      	movs	r0, #0
 8007d16:	e7f7      	b.n	8007d08 <__swsetup_r+0x98>
 8007d18:	20000018 	.word	0x20000018

08007d1c <_raise_r>:
 8007d1c:	291f      	cmp	r1, #31
 8007d1e:	b538      	push	{r3, r4, r5, lr}
 8007d20:	4605      	mov	r5, r0
 8007d22:	460c      	mov	r4, r1
 8007d24:	d904      	bls.n	8007d30 <_raise_r+0x14>
 8007d26:	2316      	movs	r3, #22
 8007d28:	6003      	str	r3, [r0, #0]
 8007d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d2e:	bd38      	pop	{r3, r4, r5, pc}
 8007d30:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007d32:	b112      	cbz	r2, 8007d3a <_raise_r+0x1e>
 8007d34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007d38:	b94b      	cbnz	r3, 8007d4e <_raise_r+0x32>
 8007d3a:	4628      	mov	r0, r5
 8007d3c:	f000 f830 	bl	8007da0 <_getpid_r>
 8007d40:	4622      	mov	r2, r4
 8007d42:	4601      	mov	r1, r0
 8007d44:	4628      	mov	r0, r5
 8007d46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d4a:	f000 b817 	b.w	8007d7c <_kill_r>
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d00a      	beq.n	8007d68 <_raise_r+0x4c>
 8007d52:	1c59      	adds	r1, r3, #1
 8007d54:	d103      	bne.n	8007d5e <_raise_r+0x42>
 8007d56:	2316      	movs	r3, #22
 8007d58:	6003      	str	r3, [r0, #0]
 8007d5a:	2001      	movs	r0, #1
 8007d5c:	e7e7      	b.n	8007d2e <_raise_r+0x12>
 8007d5e:	2100      	movs	r1, #0
 8007d60:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007d64:	4620      	mov	r0, r4
 8007d66:	4798      	blx	r3
 8007d68:	2000      	movs	r0, #0
 8007d6a:	e7e0      	b.n	8007d2e <_raise_r+0x12>

08007d6c <raise>:
 8007d6c:	4b02      	ldr	r3, [pc, #8]	@ (8007d78 <raise+0xc>)
 8007d6e:	4601      	mov	r1, r0
 8007d70:	6818      	ldr	r0, [r3, #0]
 8007d72:	f7ff bfd3 	b.w	8007d1c <_raise_r>
 8007d76:	bf00      	nop
 8007d78:	20000018 	.word	0x20000018

08007d7c <_kill_r>:
 8007d7c:	b538      	push	{r3, r4, r5, lr}
 8007d7e:	4d07      	ldr	r5, [pc, #28]	@ (8007d9c <_kill_r+0x20>)
 8007d80:	2300      	movs	r3, #0
 8007d82:	4604      	mov	r4, r0
 8007d84:	4608      	mov	r0, r1
 8007d86:	4611      	mov	r1, r2
 8007d88:	602b      	str	r3, [r5, #0]
 8007d8a:	f7f9 fa22 	bl	80011d2 <_kill>
 8007d8e:	1c43      	adds	r3, r0, #1
 8007d90:	d102      	bne.n	8007d98 <_kill_r+0x1c>
 8007d92:	682b      	ldr	r3, [r5, #0]
 8007d94:	b103      	cbz	r3, 8007d98 <_kill_r+0x1c>
 8007d96:	6023      	str	r3, [r4, #0]
 8007d98:	bd38      	pop	{r3, r4, r5, pc}
 8007d9a:	bf00      	nop
 8007d9c:	200003e4 	.word	0x200003e4

08007da0 <_getpid_r>:
 8007da0:	f7f9 ba0f 	b.w	80011c2 <_getpid>

08007da4 <_malloc_usable_size_r>:
 8007da4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007da8:	1f18      	subs	r0, r3, #4
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	bfbc      	itt	lt
 8007dae:	580b      	ldrlt	r3, [r1, r0]
 8007db0:	18c0      	addlt	r0, r0, r3
 8007db2:	4770      	bx	lr

08007db4 <__swhatbuf_r>:
 8007db4:	b570      	push	{r4, r5, r6, lr}
 8007db6:	460c      	mov	r4, r1
 8007db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dbc:	2900      	cmp	r1, #0
 8007dbe:	b096      	sub	sp, #88	@ 0x58
 8007dc0:	4615      	mov	r5, r2
 8007dc2:	461e      	mov	r6, r3
 8007dc4:	da0d      	bge.n	8007de2 <__swhatbuf_r+0x2e>
 8007dc6:	89a3      	ldrh	r3, [r4, #12]
 8007dc8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007dcc:	f04f 0100 	mov.w	r1, #0
 8007dd0:	bf14      	ite	ne
 8007dd2:	2340      	movne	r3, #64	@ 0x40
 8007dd4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007dd8:	2000      	movs	r0, #0
 8007dda:	6031      	str	r1, [r6, #0]
 8007ddc:	602b      	str	r3, [r5, #0]
 8007dde:	b016      	add	sp, #88	@ 0x58
 8007de0:	bd70      	pop	{r4, r5, r6, pc}
 8007de2:	466a      	mov	r2, sp
 8007de4:	f000 f848 	bl	8007e78 <_fstat_r>
 8007de8:	2800      	cmp	r0, #0
 8007dea:	dbec      	blt.n	8007dc6 <__swhatbuf_r+0x12>
 8007dec:	9901      	ldr	r1, [sp, #4]
 8007dee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007df2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007df6:	4259      	negs	r1, r3
 8007df8:	4159      	adcs	r1, r3
 8007dfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007dfe:	e7eb      	b.n	8007dd8 <__swhatbuf_r+0x24>

08007e00 <__smakebuf_r>:
 8007e00:	898b      	ldrh	r3, [r1, #12]
 8007e02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e04:	079d      	lsls	r5, r3, #30
 8007e06:	4606      	mov	r6, r0
 8007e08:	460c      	mov	r4, r1
 8007e0a:	d507      	bpl.n	8007e1c <__smakebuf_r+0x1c>
 8007e0c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007e10:	6023      	str	r3, [r4, #0]
 8007e12:	6123      	str	r3, [r4, #16]
 8007e14:	2301      	movs	r3, #1
 8007e16:	6163      	str	r3, [r4, #20]
 8007e18:	b003      	add	sp, #12
 8007e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e1c:	ab01      	add	r3, sp, #4
 8007e1e:	466a      	mov	r2, sp
 8007e20:	f7ff ffc8 	bl	8007db4 <__swhatbuf_r>
 8007e24:	9f00      	ldr	r7, [sp, #0]
 8007e26:	4605      	mov	r5, r0
 8007e28:	4639      	mov	r1, r7
 8007e2a:	4630      	mov	r0, r6
 8007e2c:	f7fd fbd4 	bl	80055d8 <_malloc_r>
 8007e30:	b948      	cbnz	r0, 8007e46 <__smakebuf_r+0x46>
 8007e32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e36:	059a      	lsls	r2, r3, #22
 8007e38:	d4ee      	bmi.n	8007e18 <__smakebuf_r+0x18>
 8007e3a:	f023 0303 	bic.w	r3, r3, #3
 8007e3e:	f043 0302 	orr.w	r3, r3, #2
 8007e42:	81a3      	strh	r3, [r4, #12]
 8007e44:	e7e2      	b.n	8007e0c <__smakebuf_r+0xc>
 8007e46:	89a3      	ldrh	r3, [r4, #12]
 8007e48:	6020      	str	r0, [r4, #0]
 8007e4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e4e:	81a3      	strh	r3, [r4, #12]
 8007e50:	9b01      	ldr	r3, [sp, #4]
 8007e52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007e56:	b15b      	cbz	r3, 8007e70 <__smakebuf_r+0x70>
 8007e58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e5c:	4630      	mov	r0, r6
 8007e5e:	f000 f81d 	bl	8007e9c <_isatty_r>
 8007e62:	b128      	cbz	r0, 8007e70 <__smakebuf_r+0x70>
 8007e64:	89a3      	ldrh	r3, [r4, #12]
 8007e66:	f023 0303 	bic.w	r3, r3, #3
 8007e6a:	f043 0301 	orr.w	r3, r3, #1
 8007e6e:	81a3      	strh	r3, [r4, #12]
 8007e70:	89a3      	ldrh	r3, [r4, #12]
 8007e72:	431d      	orrs	r5, r3
 8007e74:	81a5      	strh	r5, [r4, #12]
 8007e76:	e7cf      	b.n	8007e18 <__smakebuf_r+0x18>

08007e78 <_fstat_r>:
 8007e78:	b538      	push	{r3, r4, r5, lr}
 8007e7a:	4d07      	ldr	r5, [pc, #28]	@ (8007e98 <_fstat_r+0x20>)
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	4604      	mov	r4, r0
 8007e80:	4608      	mov	r0, r1
 8007e82:	4611      	mov	r1, r2
 8007e84:	602b      	str	r3, [r5, #0]
 8007e86:	f7f9 fa04 	bl	8001292 <_fstat>
 8007e8a:	1c43      	adds	r3, r0, #1
 8007e8c:	d102      	bne.n	8007e94 <_fstat_r+0x1c>
 8007e8e:	682b      	ldr	r3, [r5, #0]
 8007e90:	b103      	cbz	r3, 8007e94 <_fstat_r+0x1c>
 8007e92:	6023      	str	r3, [r4, #0]
 8007e94:	bd38      	pop	{r3, r4, r5, pc}
 8007e96:	bf00      	nop
 8007e98:	200003e4 	.word	0x200003e4

08007e9c <_isatty_r>:
 8007e9c:	b538      	push	{r3, r4, r5, lr}
 8007e9e:	4d06      	ldr	r5, [pc, #24]	@ (8007eb8 <_isatty_r+0x1c>)
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	4604      	mov	r4, r0
 8007ea4:	4608      	mov	r0, r1
 8007ea6:	602b      	str	r3, [r5, #0]
 8007ea8:	f7f9 fa03 	bl	80012b2 <_isatty>
 8007eac:	1c43      	adds	r3, r0, #1
 8007eae:	d102      	bne.n	8007eb6 <_isatty_r+0x1a>
 8007eb0:	682b      	ldr	r3, [r5, #0]
 8007eb2:	b103      	cbz	r3, 8007eb6 <_isatty_r+0x1a>
 8007eb4:	6023      	str	r3, [r4, #0]
 8007eb6:	bd38      	pop	{r3, r4, r5, pc}
 8007eb8:	200003e4 	.word	0x200003e4

08007ebc <_gettimeofday>:
 8007ebc:	4b02      	ldr	r3, [pc, #8]	@ (8007ec8 <_gettimeofday+0xc>)
 8007ebe:	2258      	movs	r2, #88	@ 0x58
 8007ec0:	601a      	str	r2, [r3, #0]
 8007ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ec6:	4770      	bx	lr
 8007ec8:	200003e4 	.word	0x200003e4

08007ecc <_init>:
 8007ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ece:	bf00      	nop
 8007ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ed2:	bc08      	pop	{r3}
 8007ed4:	469e      	mov	lr, r3
 8007ed6:	4770      	bx	lr

08007ed8 <_fini>:
 8007ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eda:	bf00      	nop
 8007edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ede:	bc08      	pop	{r3}
 8007ee0:	469e      	mov	lr, r3
 8007ee2:	4770      	bx	lr
