
Dice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083ec  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  08008580  08008580  00009580  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a44  08008a44  0000a1d8  2**0
                  CONTENTS
  4 .ARM          00000008  08008a44  08008a44  00009a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a4c  08008a4c  0000a1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a4c  08008a4c  00009a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008a50  08008a50  00009a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08008a54  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  200001d8  08008c2c  0000a1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000438  08008c2c  0000a438  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d1fe  00000000  00000000  0000a208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aa9  00000000  00000000  00017406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  00018eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009bc  00000000  00000000  00019b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c7dc  00000000  00000000  0001a4dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000efd8  00000000  00000000  00036cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7916  00000000  00000000  00045c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ed5a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000497c  00000000  00000000  000ed5ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000f1f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008564 	.word	0x08008564

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08008564 	.word	0x08008564

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cfa:	f000 fc01 	bl	8001500 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cfe:	f000 f89d 	bl	8000e3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d02:	f000 f955 	bl	8000fb0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d06:	f000 f923 	bl	8000f50 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000d0a:	f000 f8d3 	bl	8000eb4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
//  srand((unsigned) time(&timeSeed)););
//  srand(1000 * (timeSeed2 - timeSeed1) / CLOCKS_PER_SEC);
  HAL_TIM_Base_Start(&htim2);
 8000d0e:	4843      	ldr	r0, [pc, #268]	@ (8000e1c <main+0x128>)
 8000d10:	f002 f99a 	bl	8003048 <HAL_TIM_Base_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (HAL_GPIO_ReadPin(Roll_GPIO_Port, Roll_Pin)) {
 8000d14:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d1c:	f000 feae 	bl	8001a7c <HAL_GPIO_ReadPin>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d072      	beq.n	8000e0c <main+0x118>
		  for (int i = 0; i < 65535; i++);
 8000d26:	2300      	movs	r3, #0
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	e002      	b.n	8000d32 <main+0x3e>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	607b      	str	r3, [r7, #4]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	ddf7      	ble.n	8000d2c <main+0x38>
		  if (!toggle && !firstTime) {
 8000d3c:	4b38      	ldr	r3, [pc, #224]	@ (8000e20 <main+0x12c>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d1e7      	bne.n	8000d14 <main+0x20>
 8000d44:	4b37      	ldr	r3, [pc, #220]	@ (8000e24 <main+0x130>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d1e3      	bne.n	8000d14 <main+0x20>
			  toggle = 1;
 8000d4c:	4b34      	ldr	r3, [pc, #208]	@ (8000e20 <main+0x12c>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	701a      	strb	r2, [r3, #0]
			  srand(__HAL_TIM_GET_COUNTER(&htim2));
 8000d52:	4b32      	ldr	r3, [pc, #200]	@ (8000e1c <main+0x128>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f003 f82f 	bl	8003dbc <srand>
			  int generatedNumber = (rand() % 6) + 1;
 8000d5e:	f003 f85b 	bl	8003e18 <rand>
 8000d62:	4601      	mov	r1, r0
 8000d64:	4b30      	ldr	r3, [pc, #192]	@ (8000e28 <main+0x134>)
 8000d66:	fb83 3201 	smull	r3, r2, r3, r1
 8000d6a:	17cb      	asrs	r3, r1, #31
 8000d6c:	1ad2      	subs	r2, r2, r3
 8000d6e:	4613      	mov	r3, r2
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	4413      	add	r3, r2
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	1aca      	subs	r2, r1, r3
 8000d78:	1c53      	adds	r3, r2, #1
 8000d7a:	603b      	str	r3, [r7, #0]
			  while (generatedNumber == previousGeneratedNumber) {
 8000d7c:	e00e      	b.n	8000d9c <main+0xa8>
				  generatedNumber = (rand() % 6) + 1;
 8000d7e:	f003 f84b 	bl	8003e18 <rand>
 8000d82:	4601      	mov	r1, r0
 8000d84:	4b28      	ldr	r3, [pc, #160]	@ (8000e28 <main+0x134>)
 8000d86:	fb83 3201 	smull	r3, r2, r3, r1
 8000d8a:	17cb      	asrs	r3, r1, #31
 8000d8c:	1ad2      	subs	r2, r2, r3
 8000d8e:	4613      	mov	r3, r2
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	4413      	add	r3, r2
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	1aca      	subs	r2, r1, r3
 8000d98:	1c53      	adds	r3, r2, #1
 8000d9a:	603b      	str	r3, [r7, #0]
			  while (generatedNumber == previousGeneratedNumber) {
 8000d9c:	4b23      	ldr	r3, [pc, #140]	@ (8000e2c <main+0x138>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	683a      	ldr	r2, [r7, #0]
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d0eb      	beq.n	8000d7e <main+0x8a>
			  }
			  sprintf(msg, "%d\r\n", generatedNumber);
 8000da6:	683a      	ldr	r2, [r7, #0]
 8000da8:	4921      	ldr	r1, [pc, #132]	@ (8000e30 <main+0x13c>)
 8000daa:	4822      	ldr	r0, [pc, #136]	@ (8000e34 <main+0x140>)
 8000dac:	f003 ffa0 	bl	8004cf0 <siprintf>
			  HAL_UART_Transmit(&huart2, (uint8_t*) msg, 10, 100);
 8000db0:	2364      	movs	r3, #100	@ 0x64
 8000db2:	220a      	movs	r2, #10
 8000db4:	491f      	ldr	r1, [pc, #124]	@ (8000e34 <main+0x140>)
 8000db6:	4820      	ldr	r0, [pc, #128]	@ (8000e38 <main+0x144>)
 8000db8:	f002 fc24 	bl	8003604 <HAL_UART_Transmit>
			  previousGeneratedNumber = generatedNumber;
 8000dbc:	4a1b      	ldr	r2, [pc, #108]	@ (8000e2c <main+0x138>)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	6013      	str	r3, [r2, #0]

			  switch(generatedNumber) {
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	2b05      	cmp	r3, #5
 8000dc8:	d8a4      	bhi.n	8000d14 <main+0x20>
 8000dca:	a201      	add	r2, pc, #4	@ (adr r2, 8000dd0 <main+0xdc>)
 8000dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd0:	08000de9 	.word	0x08000de9
 8000dd4:	08000def 	.word	0x08000def
 8000dd8:	08000df5 	.word	0x08000df5
 8000ddc:	08000dfb 	.word	0x08000dfb
 8000de0:	08000e01 	.word	0x08000e01
 8000de4:	08000e07 	.word	0x08000e07
			  case 1:
				  NumberOne();
 8000de8:	f000 f964 	bl	80010b4 <NumberOne>
				  break;
 8000dec:	e015      	b.n	8000e1a <main+0x126>
			  case 2:
				  NumberTwo();
 8000dee:	f000 f972 	bl	80010d6 <NumberTwo>
				  break;
 8000df2:	e012      	b.n	8000e1a <main+0x126>
			  case 3:
				  NumberThree();
 8000df4:	f000 f981 	bl	80010fa <NumberThree>
				  break;
 8000df8:	e00f      	b.n	8000e1a <main+0x126>
			  case 4:
				  NumberFour();
 8000dfa:	f000 f990 	bl	800111e <NumberFour>
				  break;
 8000dfe:	e00c      	b.n	8000e1a <main+0x126>
			  case 5:
				  NumberFive();
 8000e00:	f000 f99f 	bl	8001142 <NumberFive>
				  break;
 8000e04:	e009      	b.n	8000e1a <main+0x126>
			  case 6:
				  NumberSix();
 8000e06:	f000 f9ae 	bl	8001166 <NumberSix>
				  break;
 8000e0a:	e006      	b.n	8000e1a <main+0x126>
			  }
		  }
	  } else {
		  toggle = 0;
 8000e0c:	4b04      	ldr	r3, [pc, #16]	@ (8000e20 <main+0x12c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	701a      	strb	r2, [r3, #0]
		  firstTime = 0;
 8000e12:	4b04      	ldr	r3, [pc, #16]	@ (8000e24 <main+0x130>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	701a      	strb	r2, [r3, #0]
 8000e18:	e77c      	b.n	8000d14 <main+0x20>
	  if (HAL_GPIO_ReadPin(Roll_GPIO_Port, Roll_Pin)) {
 8000e1a:	e77b      	b.n	8000d14 <main+0x20>
 8000e1c:	200001f4 	.word	0x200001f4
 8000e20:	200002dc 	.word	0x200002dc
 8000e24:	20000000 	.word	0x20000000
 8000e28:	2aaaaaab 	.word	0x2aaaaaab
 8000e2c:	200002e0 	.word	0x200002e0
 8000e30:	08008580 	.word	0x08008580
 8000e34:	200002c8 	.word	0x200002c8
 8000e38:	20000240 	.word	0x20000240

08000e3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b090      	sub	sp, #64	@ 0x40
 8000e40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e42:	f107 0318 	add.w	r3, r7, #24
 8000e46:	2228      	movs	r2, #40	@ 0x28
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f003 ffb3 	bl	8004db6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]
 8000e5c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e62:	2301      	movs	r3, #1
 8000e64:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e66:	2310      	movs	r3, #16
 8000e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e6e:	f107 0318 	add.w	r3, r7, #24
 8000e72:	4618      	mov	r0, r3
 8000e74:	f000 fe32 	bl	8001adc <HAL_RCC_OscConfig>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000e7e:	f000 f983 	bl	8001188 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e82:	230f      	movs	r3, #15
 8000e84:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f001 fe5c 	bl	8002b58 <HAL_RCC_ClockConfig>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000ea6:	f000 f96f 	bl	8001188 <Error_Handler>
  }
}
 8000eaa:	bf00      	nop
 8000eac:	3740      	adds	r7, #64	@ 0x40
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
	...

08000eb4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b088      	sub	sp, #32
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eba:	f107 0310 	add.w	r3, r7, #16
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ed2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f4c <MX_TIM2_Init+0x98>)
 8000ed4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ed8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000eda:	4b1c      	ldr	r3, [pc, #112]	@ (8000f4c <MX_TIM2_Init+0x98>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f4c <MX_TIM2_Init+0x98>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000ee6:	4b19      	ldr	r3, [pc, #100]	@ (8000f4c <MX_TIM2_Init+0x98>)
 8000ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8000eec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eee:	4b17      	ldr	r3, [pc, #92]	@ (8000f4c <MX_TIM2_Init+0x98>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef4:	4b15      	ldr	r3, [pc, #84]	@ (8000f4c <MX_TIM2_Init+0x98>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000efa:	4814      	ldr	r0, [pc, #80]	@ (8000f4c <MX_TIM2_Init+0x98>)
 8000efc:	f002 f84c 	bl	8002f98 <HAL_TIM_Base_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f06:	f000 f93f 	bl	8001188 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f0e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f10:	f107 0310 	add.w	r3, r7, #16
 8000f14:	4619      	mov	r1, r3
 8000f16:	480d      	ldr	r0, [pc, #52]	@ (8000f4c <MX_TIM2_Init+0x98>)
 8000f18:	f002 f8e2 	bl	80030e0 <HAL_TIM_ConfigClockSource>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000f22:	f000 f931 	bl	8001188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f26:	2300      	movs	r3, #0
 8000f28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	4619      	mov	r1, r3
 8000f32:	4806      	ldr	r0, [pc, #24]	@ (8000f4c <MX_TIM2_Init+0x98>)
 8000f34:	f002 fab2 	bl	800349c <HAL_TIMEx_MasterConfigSynchronization>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000f3e:	f000 f923 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f42:	bf00      	nop
 8000f44:	3720      	adds	r7, #32
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200001f4 	.word	0x200001f4

08000f50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f54:	4b14      	ldr	r3, [pc, #80]	@ (8000fa8 <MX_USART2_UART_Init+0x58>)
 8000f56:	4a15      	ldr	r2, [pc, #84]	@ (8000fac <MX_USART2_UART_Init+0x5c>)
 8000f58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000f5a:	4b13      	ldr	r3, [pc, #76]	@ (8000fa8 <MX_USART2_UART_Init+0x58>)
 8000f5c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000f60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f62:	4b11      	ldr	r3, [pc, #68]	@ (8000fa8 <MX_USART2_UART_Init+0x58>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f68:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa8 <MX_USART2_UART_Init+0x58>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa8 <MX_USART2_UART_Init+0x58>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f74:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa8 <MX_USART2_UART_Init+0x58>)
 8000f76:	220c      	movs	r2, #12
 8000f78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa8 <MX_USART2_UART_Init+0x58>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f80:	4b09      	ldr	r3, [pc, #36]	@ (8000fa8 <MX_USART2_UART_Init+0x58>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f86:	4b08      	ldr	r3, [pc, #32]	@ (8000fa8 <MX_USART2_UART_Init+0x58>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	@ (8000fa8 <MX_USART2_UART_Init+0x58>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f92:	4805      	ldr	r0, [pc, #20]	@ (8000fa8 <MX_USART2_UART_Init+0x58>)
 8000f94:	f002 fae8 	bl	8003568 <HAL_UART_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f9e:	f000 f8f3 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000240 	.word	0x20000240
 8000fac:	40004400 	.word	0x40004400

08000fb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb6:	f107 030c 	add.w	r3, r7, #12
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	609a      	str	r2, [r3, #8]
 8000fc2:	60da      	str	r2, [r3, #12]
 8000fc4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc6:	4b38      	ldr	r3, [pc, #224]	@ (80010a8 <MX_GPIO_Init+0xf8>)
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	4a37      	ldr	r2, [pc, #220]	@ (80010a8 <MX_GPIO_Init+0xf8>)
 8000fcc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000fd0:	6153      	str	r3, [r2, #20]
 8000fd2:	4b35      	ldr	r3, [pc, #212]	@ (80010a8 <MX_GPIO_Init+0xf8>)
 8000fd4:	695b      	ldr	r3, [r3, #20]
 8000fd6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fde:	4b32      	ldr	r3, [pc, #200]	@ (80010a8 <MX_GPIO_Init+0xf8>)
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	4a31      	ldr	r2, [pc, #196]	@ (80010a8 <MX_GPIO_Init+0xf8>)
 8000fe4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fe8:	6153      	str	r3, [r2, #20]
 8000fea:	4b2f      	ldr	r3, [pc, #188]	@ (80010a8 <MX_GPIO_Init+0xf8>)
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff6:	4b2c      	ldr	r3, [pc, #176]	@ (80010a8 <MX_GPIO_Init+0xf8>)
 8000ff8:	695b      	ldr	r3, [r3, #20]
 8000ffa:	4a2b      	ldr	r2, [pc, #172]	@ (80010a8 <MX_GPIO_Init+0xf8>)
 8000ffc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001000:	6153      	str	r3, [r2, #20]
 8001002:	4b29      	ldr	r3, [pc, #164]	@ (80010a8 <MX_GPIO_Init+0xf8>)
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800100a:	603b      	str	r3, [r7, #0]
 800100c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TL_Pin|ML_Pin|BL_Pin|MC_Pin
 800100e:	2200      	movs	r2, #0
 8001010:	f240 31f2 	movw	r1, #1010	@ 0x3f2
 8001014:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001018:	f000 fd48 	bl	8001aac <HAL_GPIO_WritePin>
                          |BR_Pin|MR_Pin|TR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001022:	4822      	ldr	r0, [pc, #136]	@ (80010ac <MX_GPIO_Init+0xfc>)
 8001024:	f000 fd42 	bl	8001aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001028:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800102c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800102e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001032:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	4619      	mov	r1, r3
 800103e:	481c      	ldr	r0, [pc, #112]	@ (80010b0 <MX_GPIO_Init+0x100>)
 8001040:	f000 fbaa 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : TL_Pin ML_Pin BL_Pin MC_Pin
                           BR_Pin MR_Pin TR_Pin */
  GPIO_InitStruct.Pin = TL_Pin|ML_Pin|BL_Pin|MC_Pin
 8001044:	f240 33f2 	movw	r3, #1010	@ 0x3f2
 8001048:	60fb      	str	r3, [r7, #12]
                          |BR_Pin|MR_Pin|TR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104a:	2301      	movs	r3, #1
 800104c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	2300      	movs	r3, #0
 8001054:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001056:	f107 030c 	add.w	r3, r7, #12
 800105a:	4619      	mov	r1, r3
 800105c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001060:	f000 fb9a 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001064:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001068:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106a:	2301      	movs	r3, #1
 800106c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001076:	f107 030c 	add.w	r3, r7, #12
 800107a:	4619      	mov	r1, r3
 800107c:	480b      	ldr	r0, [pc, #44]	@ (80010ac <MX_GPIO_Init+0xfc>)
 800107e:	f000 fb8b 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pin : Roll_Pin */
  GPIO_InitStruct.Pin = Roll_Pin;
 8001082:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001086:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001088:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800108c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800108e:	2301      	movs	r3, #1
 8001090:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Roll_GPIO_Port, &GPIO_InitStruct);
 8001092:	f107 030c 	add.w	r3, r7, #12
 8001096:	4619      	mov	r1, r3
 8001098:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800109c:	f000 fb7c 	bl	8001798 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010a0:	bf00      	nop
 80010a2:	3720      	adds	r7, #32
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40021000 	.word	0x40021000
 80010ac:	48000400 	.word	0x48000400
 80010b0:	48000800 	.word	0x48000800

080010b4 <NumberOne>:

/* USER CODE BEGIN 4 */
static void NumberOne(void) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, TL_Pin | ML_Pin | BL_Pin | TR_Pin | MR_Pin | BR_Pin, GPIO_PIN_RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	f240 31b2 	movw	r1, #946	@ 0x3b2
 80010be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010c2:	f000 fcf3 	bl	8001aac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, MC_Pin, GPIO_PIN_SET);
 80010c6:	2201      	movs	r2, #1
 80010c8:	2140      	movs	r1, #64	@ 0x40
 80010ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010ce:	f000 fced 	bl	8001aac <HAL_GPIO_WritePin>
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <NumberTwo>:

static void NumberTwo(void) {
 80010d6:	b580      	push	{r7, lr}
 80010d8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, TL_Pin | ML_Pin | MC_Pin | MR_Pin | BR_Pin, GPIO_PIN_RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	f44f 71e9 	mov.w	r1, #466	@ 0x1d2
 80010e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010e4:	f000 fce2 	bl	8001aac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BL_Pin | TR_Pin, GPIO_PIN_SET);
 80010e8:	2201      	movs	r2, #1
 80010ea:	f44f 7108 	mov.w	r1, #544	@ 0x220
 80010ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010f2:	f000 fcdb 	bl	8001aac <HAL_GPIO_WritePin>
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}

080010fa <NumberThree>:

static void NumberThree(void) {
 80010fa:	b580      	push	{r7, lr}
 80010fc:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, TL_Pin | ML_Pin | MR_Pin | BR_Pin, GPIO_PIN_RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	f44f 71c9 	mov.w	r1, #402	@ 0x192
 8001104:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001108:	f000 fcd0 	bl	8001aac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BL_Pin | MC_Pin | TR_Pin, GPIO_PIN_SET);
 800110c:	2201      	movs	r2, #1
 800110e:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8001112:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001116:	f000 fcc9 	bl	8001aac <HAL_GPIO_WritePin>
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}

0800111e <NumberFour>:

static void NumberFour(void) {
 800111e:	b580      	push	{r7, lr}
 8001120:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, ML_Pin | MC_Pin | MR_Pin, GPIO_PIN_RESET);
 8001122:	2200      	movs	r2, #0
 8001124:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8001128:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800112c:	f000 fcbe 	bl	8001aac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, TL_Pin | BL_Pin | TR_Pin | BR_Pin, GPIO_PIN_SET);
 8001130:	2201      	movs	r2, #1
 8001132:	f240 21a2 	movw	r1, #674	@ 0x2a2
 8001136:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800113a:	f000 fcb7 	bl	8001aac <HAL_GPIO_WritePin>
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}

08001142 <NumberFive>:

static void NumberFive(void) {
 8001142:	b580      	push	{r7, lr}
 8001144:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, ML_Pin | MR_Pin, GPIO_PIN_RESET);
 8001146:	2200      	movs	r2, #0
 8001148:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800114c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001150:	f000 fcac 	bl	8001aac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, TL_Pin | BL_Pin | MC_Pin | TR_Pin | BR_Pin, GPIO_PIN_SET);
 8001154:	2201      	movs	r2, #1
 8001156:	f240 21e2 	movw	r1, #738	@ 0x2e2
 800115a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800115e:	f000 fca5 	bl	8001aac <HAL_GPIO_WritePin>
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}

08001166 <NumberSix>:

static void NumberSix(void) {
 8001166:	b580      	push	{r7, lr}
 8001168:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, MC_Pin, GPIO_PIN_RESET);
 800116a:	2200      	movs	r2, #0
 800116c:	2140      	movs	r1, #64	@ 0x40
 800116e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001172:	f000 fc9b 	bl	8001aac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, TL_Pin | ML_Pin | BL_Pin | TR_Pin | MR_Pin | BR_Pin, GPIO_PIN_SET);
 8001176:	2201      	movs	r2, #1
 8001178:	f240 31b2 	movw	r1, #946	@ 0x3b2
 800117c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001180:	f000 fc94 	bl	8001aac <HAL_GPIO_WritePin>
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}

08001188 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800118c:	b672      	cpsid	i
}
 800118e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001190:	bf00      	nop
 8001192:	e7fd      	b.n	8001190 <Error_Handler+0x8>

08001194 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119a:	4b0f      	ldr	r3, [pc, #60]	@ (80011d8 <HAL_MspInit+0x44>)
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	4a0e      	ldr	r2, [pc, #56]	@ (80011d8 <HAL_MspInit+0x44>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6193      	str	r3, [r2, #24]
 80011a6:	4b0c      	ldr	r3, [pc, #48]	@ (80011d8 <HAL_MspInit+0x44>)
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b2:	4b09      	ldr	r3, [pc, #36]	@ (80011d8 <HAL_MspInit+0x44>)
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	4a08      	ldr	r2, [pc, #32]	@ (80011d8 <HAL_MspInit+0x44>)
 80011b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011bc:	61d3      	str	r3, [r2, #28]
 80011be:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <HAL_MspInit+0x44>)
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011c6:	603b      	str	r3, [r7, #0]
 80011c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	40021000 	.word	0x40021000

080011dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011ec:	d10b      	bne.n	8001206 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011ee:	4b09      	ldr	r3, [pc, #36]	@ (8001214 <HAL_TIM_Base_MspInit+0x38>)
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	4a08      	ldr	r2, [pc, #32]	@ (8001214 <HAL_TIM_Base_MspInit+0x38>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	61d3      	str	r3, [r2, #28]
 80011fa:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <HAL_TIM_Base_MspInit+0x38>)
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001206:	bf00      	nop
 8001208:	3714      	adds	r7, #20
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	40021000 	.word	0x40021000

08001218 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08a      	sub	sp, #40	@ 0x28
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a17      	ldr	r2, [pc, #92]	@ (8001294 <HAL_UART_MspInit+0x7c>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d128      	bne.n	800128c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800123a:	4b17      	ldr	r3, [pc, #92]	@ (8001298 <HAL_UART_MspInit+0x80>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	4a16      	ldr	r2, [pc, #88]	@ (8001298 <HAL_UART_MspInit+0x80>)
 8001240:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001244:	61d3      	str	r3, [r2, #28]
 8001246:	4b14      	ldr	r3, [pc, #80]	@ (8001298 <HAL_UART_MspInit+0x80>)
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800124e:	613b      	str	r3, [r7, #16]
 8001250:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001252:	4b11      	ldr	r3, [pc, #68]	@ (8001298 <HAL_UART_MspInit+0x80>)
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	4a10      	ldr	r2, [pc, #64]	@ (8001298 <HAL_UART_MspInit+0x80>)
 8001258:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800125c:	6153      	str	r3, [r2, #20]
 800125e:	4b0e      	ldr	r3, [pc, #56]	@ (8001298 <HAL_UART_MspInit+0x80>)
 8001260:	695b      	ldr	r3, [r3, #20]
 8001262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800126a:	230c      	movs	r3, #12
 800126c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126e:	2302      	movs	r3, #2
 8001270:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001276:	2303      	movs	r3, #3
 8001278:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800127a:	2307      	movs	r3, #7
 800127c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127e:	f107 0314 	add.w	r3, r7, #20
 8001282:	4619      	mov	r1, r3
 8001284:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001288:	f000 fa86 	bl	8001798 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800128c:	bf00      	nop
 800128e:	3728      	adds	r7, #40	@ 0x28
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40004400 	.word	0x40004400
 8001298:	40021000 	.word	0x40021000

0800129c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012a0:	bf00      	nop
 80012a2:	e7fd      	b.n	80012a0 <NMI_Handler+0x4>

080012a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a8:	bf00      	nop
 80012aa:	e7fd      	b.n	80012a8 <HardFault_Handler+0x4>

080012ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b0:	bf00      	nop
 80012b2:	e7fd      	b.n	80012b0 <MemManage_Handler+0x4>

080012b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b8:	bf00      	nop
 80012ba:	e7fd      	b.n	80012b8 <BusFault_Handler+0x4>

080012bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c0:	bf00      	nop
 80012c2:	e7fd      	b.n	80012c0 <UsageFault_Handler+0x4>

080012c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012f2:	f000 f94b 	bl	800158c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}

080012fa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0
  return 1;
 80012fe:	2301      	movs	r3, #1
}
 8001300:	4618      	mov	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <_kill>:

int _kill(int pid, int sig)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
 8001312:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001314:	f003 fda2 	bl	8004e5c <__errno>
 8001318:	4603      	mov	r3, r0
 800131a:	2216      	movs	r2, #22
 800131c:	601a      	str	r2, [r3, #0]
  return -1;
 800131e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <_exit>:

void _exit (int status)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001332:	f04f 31ff 	mov.w	r1, #4294967295
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff ffe7 	bl	800130a <_kill>
  while (1) {}    /* Make sure we hang here */
 800133c:	bf00      	nop
 800133e:	e7fd      	b.n	800133c <_exit+0x12>

08001340 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	e00a      	b.n	8001368 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001352:	f3af 8000 	nop.w
 8001356:	4601      	mov	r1, r0
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	1c5a      	adds	r2, r3, #1
 800135c:	60ba      	str	r2, [r7, #8]
 800135e:	b2ca      	uxtb	r2, r1
 8001360:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	3301      	adds	r3, #1
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	697a      	ldr	r2, [r7, #20]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	429a      	cmp	r2, r3
 800136e:	dbf0      	blt.n	8001352 <_read+0x12>
  }

  return len;
 8001370:	687b      	ldr	r3, [r7, #4]
}
 8001372:	4618      	mov	r0, r3
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b086      	sub	sp, #24
 800137e:	af00      	add	r7, sp, #0
 8001380:	60f8      	str	r0, [r7, #12]
 8001382:	60b9      	str	r1, [r7, #8]
 8001384:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	e009      	b.n	80013a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	1c5a      	adds	r2, r3, #1
 8001390:	60ba      	str	r2, [r7, #8]
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	3301      	adds	r3, #1
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	697a      	ldr	r2, [r7, #20]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	dbf1      	blt.n	800138c <_write+0x12>
  }
  return len;
 80013a8:	687b      	ldr	r3, [r7, #4]
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3718      	adds	r7, #24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <_close>:

int _close(int file)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b083      	sub	sp, #12
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013be:	4618      	mov	r0, r3
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
 80013d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013da:	605a      	str	r2, [r3, #4]
  return 0;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <_isatty>:

int _isatty(int file)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b083      	sub	sp, #12
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013f2:	2301      	movs	r3, #1
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
	...

0800141c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001424:	4a14      	ldr	r2, [pc, #80]	@ (8001478 <_sbrk+0x5c>)
 8001426:	4b15      	ldr	r3, [pc, #84]	@ (800147c <_sbrk+0x60>)
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001430:	4b13      	ldr	r3, [pc, #76]	@ (8001480 <_sbrk+0x64>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d102      	bne.n	800143e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001438:	4b11      	ldr	r3, [pc, #68]	@ (8001480 <_sbrk+0x64>)
 800143a:	4a12      	ldr	r2, [pc, #72]	@ (8001484 <_sbrk+0x68>)
 800143c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800143e:	4b10      	ldr	r3, [pc, #64]	@ (8001480 <_sbrk+0x64>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4413      	add	r3, r2
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	429a      	cmp	r2, r3
 800144a:	d207      	bcs.n	800145c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800144c:	f003 fd06 	bl	8004e5c <__errno>
 8001450:	4603      	mov	r3, r0
 8001452:	220c      	movs	r2, #12
 8001454:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001456:	f04f 33ff 	mov.w	r3, #4294967295
 800145a:	e009      	b.n	8001470 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800145c:	4b08      	ldr	r3, [pc, #32]	@ (8001480 <_sbrk+0x64>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001462:	4b07      	ldr	r3, [pc, #28]	@ (8001480 <_sbrk+0x64>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	4a05      	ldr	r2, [pc, #20]	@ (8001480 <_sbrk+0x64>)
 800146c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800146e:	68fb      	ldr	r3, [r7, #12]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20004000 	.word	0x20004000
 800147c:	00000400 	.word	0x00000400
 8001480:	200002e4 	.word	0x200002e4
 8001484:	20000438 	.word	0x20000438

08001488 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800148c:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <SystemInit+0x20>)
 800148e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001492:	4a05      	ldr	r2, [pc, #20]	@ (80014a8 <SystemInit+0x20>)
 8001494:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001498:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014e4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80014b0:	f7ff ffea 	bl	8001488 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014b4:	480c      	ldr	r0, [pc, #48]	@ (80014e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80014b6:	490d      	ldr	r1, [pc, #52]	@ (80014ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80014b8:	4a0d      	ldr	r2, [pc, #52]	@ (80014f0 <LoopForever+0xe>)
  movs r3, #0
 80014ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014bc:	e002      	b.n	80014c4 <LoopCopyDataInit>

080014be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014c2:	3304      	adds	r3, #4

080014c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c8:	d3f9      	bcc.n	80014be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ca:	4a0a      	ldr	r2, [pc, #40]	@ (80014f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014cc:	4c0a      	ldr	r4, [pc, #40]	@ (80014f8 <LoopForever+0x16>)
  movs r3, #0
 80014ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d0:	e001      	b.n	80014d6 <LoopFillZerobss>

080014d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d4:	3204      	adds	r2, #4

080014d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d8:	d3fb      	bcc.n	80014d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014da:	f003 fcc5 	bl	8004e68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014de:	f7ff fc09 	bl	8000cf4 <main>

080014e2 <LoopForever>:

LoopForever:
    b LoopForever
 80014e2:	e7fe      	b.n	80014e2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014e4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80014e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014ec:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80014f0:	08008a54 	.word	0x08008a54
  ldr r2, =_sbss
 80014f4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80014f8:	20000438 	.word	0x20000438

080014fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014fc:	e7fe      	b.n	80014fc <ADC1_IRQHandler>
	...

08001500 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001504:	4b08      	ldr	r3, [pc, #32]	@ (8001528 <HAL_Init+0x28>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a07      	ldr	r2, [pc, #28]	@ (8001528 <HAL_Init+0x28>)
 800150a:	f043 0310 	orr.w	r3, r3, #16
 800150e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001510:	2003      	movs	r0, #3
 8001512:	f000 f90d 	bl	8001730 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001516:	200f      	movs	r0, #15
 8001518:	f000 f808 	bl	800152c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800151c:	f7ff fe3a 	bl	8001194 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40022000 	.word	0x40022000

0800152c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001534:	4b12      	ldr	r3, [pc, #72]	@ (8001580 <HAL_InitTick+0x54>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	4b12      	ldr	r3, [pc, #72]	@ (8001584 <HAL_InitTick+0x58>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	4619      	mov	r1, r3
 800153e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001542:	fbb3 f3f1 	udiv	r3, r3, r1
 8001546:	fbb2 f3f3 	udiv	r3, r2, r3
 800154a:	4618      	mov	r0, r3
 800154c:	f000 f917 	bl	800177e <HAL_SYSTICK_Config>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e00e      	b.n	8001578 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b0f      	cmp	r3, #15
 800155e:	d80a      	bhi.n	8001576 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001560:	2200      	movs	r2, #0
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	f04f 30ff 	mov.w	r0, #4294967295
 8001568:	f000 f8ed 	bl	8001746 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800156c:	4a06      	ldr	r2, [pc, #24]	@ (8001588 <HAL_InitTick+0x5c>)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001572:	2300      	movs	r3, #0
 8001574:	e000      	b.n	8001578 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
}
 8001578:	4618      	mov	r0, r3
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000004 	.word	0x20000004
 8001584:	2000000c 	.word	0x2000000c
 8001588:	20000008 	.word	0x20000008

0800158c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001590:	4b06      	ldr	r3, [pc, #24]	@ (80015ac <HAL_IncTick+0x20>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	461a      	mov	r2, r3
 8001596:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <HAL_IncTick+0x24>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4413      	add	r3, r2
 800159c:	4a04      	ldr	r2, [pc, #16]	@ (80015b0 <HAL_IncTick+0x24>)
 800159e:	6013      	str	r3, [r2, #0]
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	2000000c 	.word	0x2000000c
 80015b0:	200002e8 	.word	0x200002e8

080015b4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return uwTick;  
 80015b8:	4b03      	ldr	r3, [pc, #12]	@ (80015c8 <HAL_GetTick+0x14>)
 80015ba:	681b      	ldr	r3, [r3, #0]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	200002e8 	.word	0x200002e8

080015cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001610 <__NVIC_SetPriorityGrouping+0x44>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015e8:	4013      	ands	r3, r2
 80015ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015fe:	4a04      	ldr	r2, [pc, #16]	@ (8001610 <__NVIC_SetPriorityGrouping+0x44>)
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	60d3      	str	r3, [r2, #12]
}
 8001604:	bf00      	nop
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001618:	4b04      	ldr	r3, [pc, #16]	@ (800162c <__NVIC_GetPriorityGrouping+0x18>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	0a1b      	lsrs	r3, r3, #8
 800161e:	f003 0307 	and.w	r3, r3, #7
}
 8001622:	4618      	mov	r0, r3
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	6039      	str	r1, [r7, #0]
 800163a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800163c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001640:	2b00      	cmp	r3, #0
 8001642:	db0a      	blt.n	800165a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	b2da      	uxtb	r2, r3
 8001648:	490c      	ldr	r1, [pc, #48]	@ (800167c <__NVIC_SetPriority+0x4c>)
 800164a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164e:	0112      	lsls	r2, r2, #4
 8001650:	b2d2      	uxtb	r2, r2
 8001652:	440b      	add	r3, r1
 8001654:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001658:	e00a      	b.n	8001670 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	b2da      	uxtb	r2, r3
 800165e:	4908      	ldr	r1, [pc, #32]	@ (8001680 <__NVIC_SetPriority+0x50>)
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	f003 030f 	and.w	r3, r3, #15
 8001666:	3b04      	subs	r3, #4
 8001668:	0112      	lsls	r2, r2, #4
 800166a:	b2d2      	uxtb	r2, r2
 800166c:	440b      	add	r3, r1
 800166e:	761a      	strb	r2, [r3, #24]
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	e000e100 	.word	0xe000e100
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001684:	b480      	push	{r7}
 8001686:	b089      	sub	sp, #36	@ 0x24
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	f1c3 0307 	rsb	r3, r3, #7
 800169e:	2b04      	cmp	r3, #4
 80016a0:	bf28      	it	cs
 80016a2:	2304      	movcs	r3, #4
 80016a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3304      	adds	r3, #4
 80016aa:	2b06      	cmp	r3, #6
 80016ac:	d902      	bls.n	80016b4 <NVIC_EncodePriority+0x30>
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3b03      	subs	r3, #3
 80016b2:	e000      	b.n	80016b6 <NVIC_EncodePriority+0x32>
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b8:	f04f 32ff 	mov.w	r2, #4294967295
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	43da      	mvns	r2, r3
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	401a      	ands	r2, r3
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016cc:	f04f 31ff 	mov.w	r1, #4294967295
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	fa01 f303 	lsl.w	r3, r1, r3
 80016d6:	43d9      	mvns	r1, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016dc:	4313      	orrs	r3, r2
         );
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3724      	adds	r7, #36	@ 0x24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
	...

080016ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016fc:	d301      	bcc.n	8001702 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016fe:	2301      	movs	r3, #1
 8001700:	e00f      	b.n	8001722 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001702:	4a0a      	ldr	r2, [pc, #40]	@ (800172c <SysTick_Config+0x40>)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3b01      	subs	r3, #1
 8001708:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800170a:	210f      	movs	r1, #15
 800170c:	f04f 30ff 	mov.w	r0, #4294967295
 8001710:	f7ff ff8e 	bl	8001630 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001714:	4b05      	ldr	r3, [pc, #20]	@ (800172c <SysTick_Config+0x40>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800171a:	4b04      	ldr	r3, [pc, #16]	@ (800172c <SysTick_Config+0x40>)
 800171c:	2207      	movs	r2, #7
 800171e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	e000e010 	.word	0xe000e010

08001730 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ff47 	bl	80015cc <__NVIC_SetPriorityGrouping>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b086      	sub	sp, #24
 800174a:	af00      	add	r7, sp, #0
 800174c:	4603      	mov	r3, r0
 800174e:	60b9      	str	r1, [r7, #8]
 8001750:	607a      	str	r2, [r7, #4]
 8001752:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001758:	f7ff ff5c 	bl	8001614 <__NVIC_GetPriorityGrouping>
 800175c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	68b9      	ldr	r1, [r7, #8]
 8001762:	6978      	ldr	r0, [r7, #20]
 8001764:	f7ff ff8e 	bl	8001684 <NVIC_EncodePriority>
 8001768:	4602      	mov	r2, r0
 800176a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800176e:	4611      	mov	r1, r2
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff5d 	bl	8001630 <__NVIC_SetPriority>
}
 8001776:	bf00      	nop
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff ffb0 	bl	80016ec <SysTick_Config>
 800178c:	4603      	mov	r3, r0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001798:	b480      	push	{r7}
 800179a:	b087      	sub	sp, #28
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017a6:	e14e      	b.n	8001a46 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	2101      	movs	r1, #1
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	fa01 f303 	lsl.w	r3, r1, r3
 80017b4:	4013      	ands	r3, r2
 80017b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 8140 	beq.w	8001a40 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 0303 	and.w	r3, r3, #3
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d005      	beq.n	80017d8 <HAL_GPIO_Init+0x40>
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d130      	bne.n	800183a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	2203      	movs	r2, #3
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	43db      	mvns	r3, r3
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	4013      	ands	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	68da      	ldr	r2, [r3, #12]
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	4313      	orrs	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800180e:	2201      	movs	r2, #1
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	4013      	ands	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	091b      	lsrs	r3, r3, #4
 8001824:	f003 0201 	and.w	r2, r3, #1
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4313      	orrs	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f003 0303 	and.w	r3, r3, #3
 8001842:	2b03      	cmp	r3, #3
 8001844:	d017      	beq.n	8001876 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	2203      	movs	r2, #3
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43db      	mvns	r3, r3
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	4013      	ands	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4313      	orrs	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f003 0303 	and.w	r3, r3, #3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d123      	bne.n	80018ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	08da      	lsrs	r2, r3, #3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	3208      	adds	r2, #8
 800188a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800188e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	220f      	movs	r2, #15
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43db      	mvns	r3, r3
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	4013      	ands	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	691a      	ldr	r2, [r3, #16]
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	08da      	lsrs	r2, r3, #3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3208      	adds	r2, #8
 80018c4:	6939      	ldr	r1, [r7, #16]
 80018c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	2203      	movs	r2, #3
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4013      	ands	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 0203 	and.w	r2, r3, #3
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001906:	2b00      	cmp	r3, #0
 8001908:	f000 809a 	beq.w	8001a40 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190c:	4b55      	ldr	r3, [pc, #340]	@ (8001a64 <HAL_GPIO_Init+0x2cc>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	4a54      	ldr	r2, [pc, #336]	@ (8001a64 <HAL_GPIO_Init+0x2cc>)
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	6193      	str	r3, [r2, #24]
 8001918:	4b52      	ldr	r3, [pc, #328]	@ (8001a64 <HAL_GPIO_Init+0x2cc>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001924:	4a50      	ldr	r2, [pc, #320]	@ (8001a68 <HAL_GPIO_Init+0x2d0>)
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	089b      	lsrs	r3, r3, #2
 800192a:	3302      	adds	r3, #2
 800192c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001930:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f003 0303 	and.w	r3, r3, #3
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	220f      	movs	r2, #15
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	4013      	ands	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800194e:	d013      	beq.n	8001978 <HAL_GPIO_Init+0x1e0>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a46      	ldr	r2, [pc, #280]	@ (8001a6c <HAL_GPIO_Init+0x2d4>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d00d      	beq.n	8001974 <HAL_GPIO_Init+0x1dc>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a45      	ldr	r2, [pc, #276]	@ (8001a70 <HAL_GPIO_Init+0x2d8>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d007      	beq.n	8001970 <HAL_GPIO_Init+0x1d8>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a44      	ldr	r2, [pc, #272]	@ (8001a74 <HAL_GPIO_Init+0x2dc>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d101      	bne.n	800196c <HAL_GPIO_Init+0x1d4>
 8001968:	2303      	movs	r3, #3
 800196a:	e006      	b.n	800197a <HAL_GPIO_Init+0x1e2>
 800196c:	2305      	movs	r3, #5
 800196e:	e004      	b.n	800197a <HAL_GPIO_Init+0x1e2>
 8001970:	2302      	movs	r3, #2
 8001972:	e002      	b.n	800197a <HAL_GPIO_Init+0x1e2>
 8001974:	2301      	movs	r3, #1
 8001976:	e000      	b.n	800197a <HAL_GPIO_Init+0x1e2>
 8001978:	2300      	movs	r3, #0
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	f002 0203 	and.w	r2, r2, #3
 8001980:	0092      	lsls	r2, r2, #2
 8001982:	4093      	lsls	r3, r2
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4313      	orrs	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800198a:	4937      	ldr	r1, [pc, #220]	@ (8001a68 <HAL_GPIO_Init+0x2d0>)
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	089b      	lsrs	r3, r3, #2
 8001990:	3302      	adds	r3, #2
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001998:	4b37      	ldr	r3, [pc, #220]	@ (8001a78 <HAL_GPIO_Init+0x2e0>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	43db      	mvns	r3, r3
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	4013      	ands	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d003      	beq.n	80019bc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019bc:	4a2e      	ldr	r2, [pc, #184]	@ (8001a78 <HAL_GPIO_Init+0x2e0>)
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001a78 <HAL_GPIO_Init+0x2e0>)
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	43db      	mvns	r3, r3
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	4013      	ands	r3, r2
 80019d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019e6:	4a24      	ldr	r2, [pc, #144]	@ (8001a78 <HAL_GPIO_Init+0x2e0>)
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019ec:	4b22      	ldr	r3, [pc, #136]	@ (8001a78 <HAL_GPIO_Init+0x2e0>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	43db      	mvns	r3, r3
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4013      	ands	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a10:	4a19      	ldr	r2, [pc, #100]	@ (8001a78 <HAL_GPIO_Init+0x2e0>)
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a16:	4b18      	ldr	r3, [pc, #96]	@ (8001a78 <HAL_GPIO_Init+0x2e0>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	4013      	ands	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a3a:	4a0f      	ldr	r2, [pc, #60]	@ (8001a78 <HAL_GPIO_Init+0x2e0>)
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	3301      	adds	r3, #1
 8001a44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f47f aea9 	bne.w	80017a8 <HAL_GPIO_Init+0x10>
  }
}
 8001a56:	bf00      	nop
 8001a58:	bf00      	nop
 8001a5a:	371c      	adds	r7, #28
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	40021000 	.word	0x40021000
 8001a68:	40010000 	.word	0x40010000
 8001a6c:	48000400 	.word	0x48000400
 8001a70:	48000800 	.word	0x48000800
 8001a74:	48000c00 	.word	0x48000c00
 8001a78:	40010400 	.word	0x40010400

08001a7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	691a      	ldr	r2, [r3, #16]
 8001a8c:	887b      	ldrh	r3, [r7, #2]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d002      	beq.n	8001a9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a94:	2301      	movs	r3, #1
 8001a96:	73fb      	strb	r3, [r7, #15]
 8001a98:	e001      	b.n	8001a9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	807b      	strh	r3, [r7, #2]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001abc:	787b      	ldrb	r3, [r7, #1]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ac2:	887a      	ldrh	r2, [r7, #2]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ac8:	e002      	b.n	8001ad0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001aca:	887a      	ldrh	r2, [r7, #2]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ae8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001aec:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001aee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001af2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d102      	bne.n	8001b02 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	f001 b823 	b.w	8002b48 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b06:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f000 817d 	beq.w	8001e12 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b18:	4bbc      	ldr	r3, [pc, #752]	@ (8001e0c <HAL_RCC_OscConfig+0x330>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 030c 	and.w	r3, r3, #12
 8001b20:	2b04      	cmp	r3, #4
 8001b22:	d00c      	beq.n	8001b3e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b24:	4bb9      	ldr	r3, [pc, #740]	@ (8001e0c <HAL_RCC_OscConfig+0x330>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 030c 	and.w	r3, r3, #12
 8001b2c:	2b08      	cmp	r3, #8
 8001b2e:	d15c      	bne.n	8001bea <HAL_RCC_OscConfig+0x10e>
 8001b30:	4bb6      	ldr	r3, [pc, #728]	@ (8001e0c <HAL_RCC_OscConfig+0x330>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b3c:	d155      	bne.n	8001bea <HAL_RCC_OscConfig+0x10e>
 8001b3e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b42:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b46:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001b4a:	fa93 f3a3 	rbit	r3, r3
 8001b4e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b52:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b56:	fab3 f383 	clz	r3, r3
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	095b      	lsrs	r3, r3, #5
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d102      	bne.n	8001b70 <HAL_RCC_OscConfig+0x94>
 8001b6a:	4ba8      	ldr	r3, [pc, #672]	@ (8001e0c <HAL_RCC_OscConfig+0x330>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	e015      	b.n	8001b9c <HAL_RCC_OscConfig+0xc0>
 8001b70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b74:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b78:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001b7c:	fa93 f3a3 	rbit	r3, r3
 8001b80:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001b84:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b88:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001b8c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001b90:	fa93 f3a3 	rbit	r3, r3
 8001b94:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001b98:	4b9c      	ldr	r3, [pc, #624]	@ (8001e0c <HAL_RCC_OscConfig+0x330>)
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ba0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001ba4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001ba8:	fa92 f2a2 	rbit	r2, r2
 8001bac:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001bb0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001bb4:	fab2 f282 	clz	r2, r2
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	f042 0220 	orr.w	r2, r2, #32
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	f002 021f 	and.w	r2, r2, #31
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bca:	4013      	ands	r3, r2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 811f 	beq.w	8001e10 <HAL_RCC_OscConfig+0x334>
 8001bd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bd6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f040 8116 	bne.w	8001e10 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	f000 bfaf 	b.w	8002b48 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bfa:	d106      	bne.n	8001c0a <HAL_RCC_OscConfig+0x12e>
 8001bfc:	4b83      	ldr	r3, [pc, #524]	@ (8001e0c <HAL_RCC_OscConfig+0x330>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a82      	ldr	r2, [pc, #520]	@ (8001e0c <HAL_RCC_OscConfig+0x330>)
 8001c02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c06:	6013      	str	r3, [r2, #0]
 8001c08:	e036      	b.n	8001c78 <HAL_RCC_OscConfig+0x19c>
 8001c0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10c      	bne.n	8001c34 <HAL_RCC_OscConfig+0x158>
 8001c1a:	4b7c      	ldr	r3, [pc, #496]	@ (8001e0c <HAL_RCC_OscConfig+0x330>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a7b      	ldr	r2, [pc, #492]	@ (8001e0c <HAL_RCC_OscConfig+0x330>)
 8001c20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	4b79      	ldr	r3, [pc, #484]	@ (8001e0c <HAL_RCC_OscConfig+0x330>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a78      	ldr	r2, [pc, #480]	@ (8001e0c <HAL_RCC_OscConfig+0x330>)
 8001c2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	e021      	b.n	8001c78 <HAL_RCC_OscConfig+0x19c>
 8001c34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c38:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c44:	d10c      	bne.n	8001c60 <HAL_RCC_OscConfig+0x184>
 8001c46:	4b71      	ldr	r3, [pc, #452]	@ (8001e0c <HAL_RCC_OscConfig+0x330>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a70      	ldr	r2, [pc, #448]	@ (8001e0c <HAL_RCC_OscConfig+0x330>)
 8001c4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	4b6e      	ldr	r3, [pc, #440]	@ (8001e0c <HAL_RCC_OscConfig+0x330>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a6d      	ldr	r2, [pc, #436]	@ (8001e0c <HAL_RCC_OscConfig+0x330>)
 8001c58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c5c:	6013      	str	r3, [r2, #0]
 8001c5e:	e00b      	b.n	8001c78 <HAL_RCC_OscConfig+0x19c>
 8001c60:	4b6a      	ldr	r3, [pc, #424]	@ (8001e0c <HAL_RCC_OscConfig+0x330>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a69      	ldr	r2, [pc, #420]	@ (8001e0c <HAL_RCC_OscConfig+0x330>)
 8001c66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	4b67      	ldr	r3, [pc, #412]	@ (8001e0c <HAL_RCC_OscConfig+0x330>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a66      	ldr	r2, [pc, #408]	@ (8001e0c <HAL_RCC_OscConfig+0x330>)
 8001c72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c76:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c78:	4b64      	ldr	r3, [pc, #400]	@ (8001e0c <HAL_RCC_OscConfig+0x330>)
 8001c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c7c:	f023 020f 	bic.w	r2, r3, #15
 8001c80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c84:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	495f      	ldr	r1, [pc, #380]	@ (8001e0c <HAL_RCC_OscConfig+0x330>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c96:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d059      	beq.n	8001d56 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca2:	f7ff fc87 	bl	80015b4 <HAL_GetTick>
 8001ca6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001caa:	e00a      	b.n	8001cc2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cac:	f7ff fc82 	bl	80015b4 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b64      	cmp	r3, #100	@ 0x64
 8001cba:	d902      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	f000 bf43 	b.w	8002b48 <HAL_RCC_OscConfig+0x106c>
 8001cc2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cc6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cca:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001cce:	fa93 f3a3 	rbit	r3, r3
 8001cd2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001cd6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cda:	fab3 f383 	clz	r3, r3
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	095b      	lsrs	r3, r3, #5
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d102      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x218>
 8001cee:	4b47      	ldr	r3, [pc, #284]	@ (8001e0c <HAL_RCC_OscConfig+0x330>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	e015      	b.n	8001d20 <HAL_RCC_OscConfig+0x244>
 8001cf4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cf8:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001d00:	fa93 f3a3 	rbit	r3, r3
 8001d04:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001d08:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d0c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001d10:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001d14:	fa93 f3a3 	rbit	r3, r3
 8001d18:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001d1c:	4b3b      	ldr	r3, [pc, #236]	@ (8001e0c <HAL_RCC_OscConfig+0x330>)
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d20:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d24:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001d28:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001d2c:	fa92 f2a2 	rbit	r2, r2
 8001d30:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001d34:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001d38:	fab2 f282 	clz	r2, r2
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	f042 0220 	orr.w	r2, r2, #32
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	f002 021f 	and.w	r2, r2, #31
 8001d48:	2101      	movs	r1, #1
 8001d4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d4e:	4013      	ands	r3, r2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0ab      	beq.n	8001cac <HAL_RCC_OscConfig+0x1d0>
 8001d54:	e05d      	b.n	8001e12 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d56:	f7ff fc2d 	bl	80015b4 <HAL_GetTick>
 8001d5a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d5e:	e00a      	b.n	8001d76 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d60:	f7ff fc28 	bl	80015b4 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b64      	cmp	r3, #100	@ 0x64
 8001d6e:	d902      	bls.n	8001d76 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	f000 bee9 	b.w	8002b48 <HAL_RCC_OscConfig+0x106c>
 8001d76:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d7a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001d82:	fa93 f3a3 	rbit	r3, r3
 8001d86:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001d8a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d8e:	fab3 f383 	clz	r3, r3
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	095b      	lsrs	r3, r3, #5
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d102      	bne.n	8001da8 <HAL_RCC_OscConfig+0x2cc>
 8001da2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e0c <HAL_RCC_OscConfig+0x330>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	e015      	b.n	8001dd4 <HAL_RCC_OscConfig+0x2f8>
 8001da8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001dac:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001db4:	fa93 f3a3 	rbit	r3, r3
 8001db8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001dbc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001dc0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001dc4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001dc8:	fa93 f3a3 	rbit	r3, r3
 8001dcc:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8001e0c <HAL_RCC_OscConfig+0x330>)
 8001dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001dd8:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001ddc:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001de0:	fa92 f2a2 	rbit	r2, r2
 8001de4:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001de8:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001dec:	fab2 f282 	clz	r2, r2
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	f042 0220 	orr.w	r2, r2, #32
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	f002 021f 	and.w	r2, r2, #31
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8001e02:	4013      	ands	r3, r2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1ab      	bne.n	8001d60 <HAL_RCC_OscConfig+0x284>
 8001e08:	e003      	b.n	8001e12 <HAL_RCC_OscConfig+0x336>
 8001e0a:	bf00      	nop
 8001e0c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e16:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 817d 	beq.w	8002122 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e28:	4ba6      	ldr	r3, [pc, #664]	@ (80020c4 <HAL_RCC_OscConfig+0x5e8>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 030c 	and.w	r3, r3, #12
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d00b      	beq.n	8001e4c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e34:	4ba3      	ldr	r3, [pc, #652]	@ (80020c4 <HAL_RCC_OscConfig+0x5e8>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 030c 	and.w	r3, r3, #12
 8001e3c:	2b08      	cmp	r3, #8
 8001e3e:	d172      	bne.n	8001f26 <HAL_RCC_OscConfig+0x44a>
 8001e40:	4ba0      	ldr	r3, [pc, #640]	@ (80020c4 <HAL_RCC_OscConfig+0x5e8>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d16c      	bne.n	8001f26 <HAL_RCC_OscConfig+0x44a>
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e52:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001e56:	fa93 f3a3 	rbit	r3, r3
 8001e5a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001e5e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e62:	fab3 f383 	clz	r3, r3
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	095b      	lsrs	r3, r3, #5
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d102      	bne.n	8001e7c <HAL_RCC_OscConfig+0x3a0>
 8001e76:	4b93      	ldr	r3, [pc, #588]	@ (80020c4 <HAL_RCC_OscConfig+0x5e8>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	e013      	b.n	8001ea4 <HAL_RCC_OscConfig+0x3c8>
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001e86:	fa93 f3a3 	rbit	r3, r3
 8001e8a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001e8e:	2302      	movs	r3, #2
 8001e90:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001e94:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001e98:	fa93 f3a3 	rbit	r3, r3
 8001e9c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001ea0:	4b88      	ldr	r3, [pc, #544]	@ (80020c4 <HAL_RCC_OscConfig+0x5e8>)
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001eaa:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001eae:	fa92 f2a2 	rbit	r2, r2
 8001eb2:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001eb6:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001eba:	fab2 f282 	clz	r2, r2
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	f042 0220 	orr.w	r2, r2, #32
 8001ec4:	b2d2      	uxtb	r2, r2
 8001ec6:	f002 021f 	and.w	r2, r2, #31
 8001eca:	2101      	movs	r1, #1
 8001ecc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00a      	beq.n	8001eec <HAL_RCC_OscConfig+0x410>
 8001ed6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eda:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d002      	beq.n	8001eec <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	f000 be2e 	b.w	8002b48 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eec:	4b75      	ldr	r3, [pc, #468]	@ (80020c4 <HAL_RCC_OscConfig+0x5e8>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ef4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ef8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	695b      	ldr	r3, [r3, #20]
 8001f00:	21f8      	movs	r1, #248	@ 0xf8
 8001f02:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f06:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001f0a:	fa91 f1a1 	rbit	r1, r1
 8001f0e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001f12:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001f16:	fab1 f181 	clz	r1, r1
 8001f1a:	b2c9      	uxtb	r1, r1
 8001f1c:	408b      	lsls	r3, r1
 8001f1e:	4969      	ldr	r1, [pc, #420]	@ (80020c4 <HAL_RCC_OscConfig+0x5e8>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f24:	e0fd      	b.n	8002122 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f000 8088 	beq.w	8002048 <HAL_RCC_OscConfig+0x56c>
 8001f38:	2301      	movs	r3, #1
 8001f3a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001f42:	fa93 f3a3 	rbit	r3, r3
 8001f46:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001f4a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f4e:	fab3 f383 	clz	r3, r3
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001f58:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	461a      	mov	r2, r3
 8001f60:	2301      	movs	r3, #1
 8001f62:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f64:	f7ff fb26 	bl	80015b4 <HAL_GetTick>
 8001f68:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f6c:	e00a      	b.n	8001f84 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f6e:	f7ff fb21 	bl	80015b4 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d902      	bls.n	8001f84 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	f000 bde2 	b.w	8002b48 <HAL_RCC_OscConfig+0x106c>
 8001f84:	2302      	movs	r3, #2
 8001f86:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001f8e:	fa93 f3a3 	rbit	r3, r3
 8001f92:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001f96:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9a:	fab3 f383 	clz	r3, r3
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	095b      	lsrs	r3, r3, #5
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d102      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x4d8>
 8001fae:	4b45      	ldr	r3, [pc, #276]	@ (80020c4 <HAL_RCC_OscConfig+0x5e8>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	e013      	b.n	8001fdc <HAL_RCC_OscConfig+0x500>
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fba:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001fbe:	fa93 f3a3 	rbit	r3, r3
 8001fc2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001fcc:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001fd0:	fa93 f3a3 	rbit	r3, r3
 8001fd4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001fd8:	4b3a      	ldr	r3, [pc, #232]	@ (80020c4 <HAL_RCC_OscConfig+0x5e8>)
 8001fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fdc:	2202      	movs	r2, #2
 8001fde:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001fe2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001fe6:	fa92 f2a2 	rbit	r2, r2
 8001fea:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001fee:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001ff2:	fab2 f282 	clz	r2, r2
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	f042 0220 	orr.w	r2, r2, #32
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	f002 021f 	and.w	r2, r2, #31
 8002002:	2101      	movs	r1, #1
 8002004:	fa01 f202 	lsl.w	r2, r1, r2
 8002008:	4013      	ands	r3, r2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0af      	beq.n	8001f6e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800200e:	4b2d      	ldr	r3, [pc, #180]	@ (80020c4 <HAL_RCC_OscConfig+0x5e8>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002016:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800201a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	21f8      	movs	r1, #248	@ 0xf8
 8002024:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002028:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800202c:	fa91 f1a1 	rbit	r1, r1
 8002030:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002034:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002038:	fab1 f181 	clz	r1, r1
 800203c:	b2c9      	uxtb	r1, r1
 800203e:	408b      	lsls	r3, r1
 8002040:	4920      	ldr	r1, [pc, #128]	@ (80020c4 <HAL_RCC_OscConfig+0x5e8>)
 8002042:	4313      	orrs	r3, r2
 8002044:	600b      	str	r3, [r1, #0]
 8002046:	e06c      	b.n	8002122 <HAL_RCC_OscConfig+0x646>
 8002048:	2301      	movs	r3, #1
 800204a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002052:	fa93 f3a3 	rbit	r3, r3
 8002056:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800205a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800205e:	fab3 f383 	clz	r3, r3
 8002062:	b2db      	uxtb	r3, r3
 8002064:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002068:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	461a      	mov	r2, r3
 8002070:	2300      	movs	r3, #0
 8002072:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002074:	f7ff fa9e 	bl	80015b4 <HAL_GetTick>
 8002078:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800207c:	e00a      	b.n	8002094 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800207e:	f7ff fa99 	bl	80015b4 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d902      	bls.n	8002094 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	f000 bd5a 	b.w	8002b48 <HAL_RCC_OscConfig+0x106c>
 8002094:	2302      	movs	r3, #2
 8002096:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800209e:	fa93 f3a3 	rbit	r3, r3
 80020a2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80020a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020aa:	fab3 f383 	clz	r3, r3
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	095b      	lsrs	r3, r3, #5
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d104      	bne.n	80020c8 <HAL_RCC_OscConfig+0x5ec>
 80020be:	4b01      	ldr	r3, [pc, #4]	@ (80020c4 <HAL_RCC_OscConfig+0x5e8>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	e015      	b.n	80020f0 <HAL_RCC_OscConfig+0x614>
 80020c4:	40021000 	.word	0x40021000
 80020c8:	2302      	movs	r3, #2
 80020ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80020d2:	fa93 f3a3 	rbit	r3, r3
 80020d6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80020da:	2302      	movs	r3, #2
 80020dc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80020e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80020e4:	fa93 f3a3 	rbit	r3, r3
 80020e8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80020ec:	4bc8      	ldr	r3, [pc, #800]	@ (8002410 <HAL_RCC_OscConfig+0x934>)
 80020ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f0:	2202      	movs	r2, #2
 80020f2:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80020f6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80020fa:	fa92 f2a2 	rbit	r2, r2
 80020fe:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002102:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002106:	fab2 f282 	clz	r2, r2
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	f042 0220 	orr.w	r2, r2, #32
 8002110:	b2d2      	uxtb	r2, r2
 8002112:	f002 021f 	and.w	r2, r2, #31
 8002116:	2101      	movs	r1, #1
 8002118:	fa01 f202 	lsl.w	r2, r1, r2
 800211c:	4013      	ands	r3, r2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1ad      	bne.n	800207e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002122:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002126:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 8110 	beq.w	8002358 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002138:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800213c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d079      	beq.n	800223c <HAL_RCC_OscConfig+0x760>
 8002148:	2301      	movs	r3, #1
 800214a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002152:	fa93 f3a3 	rbit	r3, r3
 8002156:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800215a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800215e:	fab3 f383 	clz	r3, r3
 8002162:	b2db      	uxtb	r3, r3
 8002164:	461a      	mov	r2, r3
 8002166:	4bab      	ldr	r3, [pc, #684]	@ (8002414 <HAL_RCC_OscConfig+0x938>)
 8002168:	4413      	add	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	461a      	mov	r2, r3
 800216e:	2301      	movs	r3, #1
 8002170:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002172:	f7ff fa1f 	bl	80015b4 <HAL_GetTick>
 8002176:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800217a:	e00a      	b.n	8002192 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800217c:	f7ff fa1a 	bl	80015b4 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d902      	bls.n	8002192 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	f000 bcdb 	b.w	8002b48 <HAL_RCC_OscConfig+0x106c>
 8002192:	2302      	movs	r3, #2
 8002194:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002198:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800219c:	fa93 f3a3 	rbit	r3, r3
 80021a0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80021a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021a8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80021ac:	2202      	movs	r2, #2
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021b4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	fa93 f2a3 	rbit	r2, r3
 80021be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80021d0:	2202      	movs	r2, #2
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	fa93 f2a3 	rbit	r2, r3
 80021e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80021ea:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ec:	4b88      	ldr	r3, [pc, #544]	@ (8002410 <HAL_RCC_OscConfig+0x934>)
 80021ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021f4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80021f8:	2102      	movs	r1, #2
 80021fa:	6019      	str	r1, [r3, #0]
 80021fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002200:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	fa93 f1a3 	rbit	r1, r3
 800220a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800220e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002212:	6019      	str	r1, [r3, #0]
  return result;
 8002214:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002218:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	fab3 f383 	clz	r3, r3
 8002222:	b2db      	uxtb	r3, r3
 8002224:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002228:	b2db      	uxtb	r3, r3
 800222a:	f003 031f 	and.w	r3, r3, #31
 800222e:	2101      	movs	r1, #1
 8002230:	fa01 f303 	lsl.w	r3, r1, r3
 8002234:	4013      	ands	r3, r2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d0a0      	beq.n	800217c <HAL_RCC_OscConfig+0x6a0>
 800223a:	e08d      	b.n	8002358 <HAL_RCC_OscConfig+0x87c>
 800223c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002240:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002244:	2201      	movs	r2, #1
 8002246:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002248:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800224c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	fa93 f2a3 	rbit	r2, r3
 8002256:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800225a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800225e:	601a      	str	r2, [r3, #0]
  return result;
 8002260:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002264:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002268:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800226a:	fab3 f383 	clz	r3, r3
 800226e:	b2db      	uxtb	r3, r3
 8002270:	461a      	mov	r2, r3
 8002272:	4b68      	ldr	r3, [pc, #416]	@ (8002414 <HAL_RCC_OscConfig+0x938>)
 8002274:	4413      	add	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	461a      	mov	r2, r3
 800227a:	2300      	movs	r3, #0
 800227c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800227e:	f7ff f999 	bl	80015b4 <HAL_GetTick>
 8002282:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002286:	e00a      	b.n	800229e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002288:	f7ff f994 	bl	80015b4 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d902      	bls.n	800229e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	f000 bc55 	b.w	8002b48 <HAL_RCC_OscConfig+0x106c>
 800229e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022a2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80022a6:	2202      	movs	r2, #2
 80022a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ae:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	fa93 f2a3 	rbit	r2, r3
 80022b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022bc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022c6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80022ca:	2202      	movs	r2, #2
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022d2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	fa93 f2a3 	rbit	r2, r3
 80022dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ea:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80022ee:	2202      	movs	r2, #2
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	fa93 f2a3 	rbit	r2, r3
 8002300:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002304:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002308:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800230a:	4b41      	ldr	r3, [pc, #260]	@ (8002410 <HAL_RCC_OscConfig+0x934>)
 800230c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800230e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002312:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002316:	2102      	movs	r1, #2
 8002318:	6019      	str	r1, [r3, #0]
 800231a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800231e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	fa93 f1a3 	rbit	r1, r3
 8002328:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800232c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002330:	6019      	str	r1, [r3, #0]
  return result;
 8002332:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002336:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	fab3 f383 	clz	r3, r3
 8002340:	b2db      	uxtb	r3, r3
 8002342:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002346:	b2db      	uxtb	r3, r3
 8002348:	f003 031f 	and.w	r3, r3, #31
 800234c:	2101      	movs	r1, #1
 800234e:	fa01 f303 	lsl.w	r3, r1, r3
 8002352:	4013      	ands	r3, r2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d197      	bne.n	8002288 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002358:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800235c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 81a1 	beq.w	80026b0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800236e:	2300      	movs	r3, #0
 8002370:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002374:	4b26      	ldr	r3, [pc, #152]	@ (8002410 <HAL_RCC_OscConfig+0x934>)
 8002376:	69db      	ldr	r3, [r3, #28]
 8002378:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d116      	bne.n	80023ae <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002380:	4b23      	ldr	r3, [pc, #140]	@ (8002410 <HAL_RCC_OscConfig+0x934>)
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	4a22      	ldr	r2, [pc, #136]	@ (8002410 <HAL_RCC_OscConfig+0x934>)
 8002386:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800238a:	61d3      	str	r3, [r2, #28]
 800238c:	4b20      	ldr	r3, [pc, #128]	@ (8002410 <HAL_RCC_OscConfig+0x934>)
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002394:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002398:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023a2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80023a6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80023a8:	2301      	movs	r3, #1
 80023aa:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002418 <HAL_RCC_OscConfig+0x93c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d11a      	bne.n	80023f0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023ba:	4b17      	ldr	r3, [pc, #92]	@ (8002418 <HAL_RCC_OscConfig+0x93c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a16      	ldr	r2, [pc, #88]	@ (8002418 <HAL_RCC_OscConfig+0x93c>)
 80023c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023c4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023c6:	f7ff f8f5 	bl	80015b4 <HAL_GetTick>
 80023ca:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ce:	e009      	b.n	80023e4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d0:	f7ff f8f0 	bl	80015b4 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b64      	cmp	r3, #100	@ 0x64
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e3b1      	b.n	8002b48 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002418 <HAL_RCC_OscConfig+0x93c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0ef      	beq.n	80023d0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d10d      	bne.n	800241c <HAL_RCC_OscConfig+0x940>
 8002400:	4b03      	ldr	r3, [pc, #12]	@ (8002410 <HAL_RCC_OscConfig+0x934>)
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	4a02      	ldr	r2, [pc, #8]	@ (8002410 <HAL_RCC_OscConfig+0x934>)
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	6213      	str	r3, [r2, #32]
 800240c:	e03c      	b.n	8002488 <HAL_RCC_OscConfig+0x9ac>
 800240e:	bf00      	nop
 8002410:	40021000 	.word	0x40021000
 8002414:	10908120 	.word	0x10908120
 8002418:	40007000 	.word	0x40007000
 800241c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002420:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10c      	bne.n	8002446 <HAL_RCC_OscConfig+0x96a>
 800242c:	4bc1      	ldr	r3, [pc, #772]	@ (8002734 <HAL_RCC_OscConfig+0xc58>)
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	4ac0      	ldr	r2, [pc, #768]	@ (8002734 <HAL_RCC_OscConfig+0xc58>)
 8002432:	f023 0301 	bic.w	r3, r3, #1
 8002436:	6213      	str	r3, [r2, #32]
 8002438:	4bbe      	ldr	r3, [pc, #760]	@ (8002734 <HAL_RCC_OscConfig+0xc58>)
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	4abd      	ldr	r2, [pc, #756]	@ (8002734 <HAL_RCC_OscConfig+0xc58>)
 800243e:	f023 0304 	bic.w	r3, r3, #4
 8002442:	6213      	str	r3, [r2, #32]
 8002444:	e020      	b.n	8002488 <HAL_RCC_OscConfig+0x9ac>
 8002446:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800244a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	2b05      	cmp	r3, #5
 8002454:	d10c      	bne.n	8002470 <HAL_RCC_OscConfig+0x994>
 8002456:	4bb7      	ldr	r3, [pc, #732]	@ (8002734 <HAL_RCC_OscConfig+0xc58>)
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	4ab6      	ldr	r2, [pc, #728]	@ (8002734 <HAL_RCC_OscConfig+0xc58>)
 800245c:	f043 0304 	orr.w	r3, r3, #4
 8002460:	6213      	str	r3, [r2, #32]
 8002462:	4bb4      	ldr	r3, [pc, #720]	@ (8002734 <HAL_RCC_OscConfig+0xc58>)
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	4ab3      	ldr	r2, [pc, #716]	@ (8002734 <HAL_RCC_OscConfig+0xc58>)
 8002468:	f043 0301 	orr.w	r3, r3, #1
 800246c:	6213      	str	r3, [r2, #32]
 800246e:	e00b      	b.n	8002488 <HAL_RCC_OscConfig+0x9ac>
 8002470:	4bb0      	ldr	r3, [pc, #704]	@ (8002734 <HAL_RCC_OscConfig+0xc58>)
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	4aaf      	ldr	r2, [pc, #700]	@ (8002734 <HAL_RCC_OscConfig+0xc58>)
 8002476:	f023 0301 	bic.w	r3, r3, #1
 800247a:	6213      	str	r3, [r2, #32]
 800247c:	4bad      	ldr	r3, [pc, #692]	@ (8002734 <HAL_RCC_OscConfig+0xc58>)
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	4aac      	ldr	r2, [pc, #688]	@ (8002734 <HAL_RCC_OscConfig+0xc58>)
 8002482:	f023 0304 	bic.w	r3, r3, #4
 8002486:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002488:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800248c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 8081 	beq.w	800259c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800249a:	f7ff f88b 	bl	80015b4 <HAL_GetTick>
 800249e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a2:	e00b      	b.n	80024bc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024a4:	f7ff f886 	bl	80015b4 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e345      	b.n	8002b48 <HAL_RCC_OscConfig+0x106c>
 80024bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80024c4:	2202      	movs	r2, #2
 80024c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024cc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	fa93 f2a3 	rbit	r2, r3
 80024d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024da:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024e4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80024e8:	2202      	movs	r2, #2
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024f0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	fa93 f2a3 	rbit	r2, r3
 80024fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024fe:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002502:	601a      	str	r2, [r3, #0]
  return result;
 8002504:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002508:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800250c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800250e:	fab3 f383 	clz	r3, r3
 8002512:	b2db      	uxtb	r3, r3
 8002514:	095b      	lsrs	r3, r3, #5
 8002516:	b2db      	uxtb	r3, r3
 8002518:	f043 0302 	orr.w	r3, r3, #2
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d102      	bne.n	8002528 <HAL_RCC_OscConfig+0xa4c>
 8002522:	4b84      	ldr	r3, [pc, #528]	@ (8002734 <HAL_RCC_OscConfig+0xc58>)
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	e013      	b.n	8002550 <HAL_RCC_OscConfig+0xa74>
 8002528:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800252c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002530:	2202      	movs	r2, #2
 8002532:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002534:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002538:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	fa93 f2a3 	rbit	r2, r3
 8002542:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002546:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	4b79      	ldr	r3, [pc, #484]	@ (8002734 <HAL_RCC_OscConfig+0xc58>)
 800254e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002550:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002554:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002558:	2102      	movs	r1, #2
 800255a:	6011      	str	r1, [r2, #0]
 800255c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002560:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002564:	6812      	ldr	r2, [r2, #0]
 8002566:	fa92 f1a2 	rbit	r1, r2
 800256a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800256e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002572:	6011      	str	r1, [r2, #0]
  return result;
 8002574:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002578:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800257c:	6812      	ldr	r2, [r2, #0]
 800257e:	fab2 f282 	clz	r2, r2
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	f002 021f 	and.w	r2, r2, #31
 800258e:	2101      	movs	r1, #1
 8002590:	fa01 f202 	lsl.w	r2, r1, r2
 8002594:	4013      	ands	r3, r2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d084      	beq.n	80024a4 <HAL_RCC_OscConfig+0x9c8>
 800259a:	e07f      	b.n	800269c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259c:	f7ff f80a 	bl	80015b4 <HAL_GetTick>
 80025a0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a4:	e00b      	b.n	80025be <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025a6:	f7ff f805 	bl	80015b4 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e2c4      	b.n	8002b48 <HAL_RCC_OscConfig+0x106c>
 80025be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025c2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80025c6:	2202      	movs	r2, #2
 80025c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ce:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	fa93 f2a3 	rbit	r2, r3
 80025d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025dc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025e6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80025ea:	2202      	movs	r2, #2
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025f2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	fa93 f2a3 	rbit	r2, r3
 80025fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002600:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002604:	601a      	str	r2, [r3, #0]
  return result;
 8002606:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800260a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800260e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002610:	fab3 f383 	clz	r3, r3
 8002614:	b2db      	uxtb	r3, r3
 8002616:	095b      	lsrs	r3, r3, #5
 8002618:	b2db      	uxtb	r3, r3
 800261a:	f043 0302 	orr.w	r3, r3, #2
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d102      	bne.n	800262a <HAL_RCC_OscConfig+0xb4e>
 8002624:	4b43      	ldr	r3, [pc, #268]	@ (8002734 <HAL_RCC_OscConfig+0xc58>)
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	e013      	b.n	8002652 <HAL_RCC_OscConfig+0xb76>
 800262a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800262e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002632:	2202      	movs	r2, #2
 8002634:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002636:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800263a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	fa93 f2a3 	rbit	r2, r3
 8002644:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002648:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	4b39      	ldr	r3, [pc, #228]	@ (8002734 <HAL_RCC_OscConfig+0xc58>)
 8002650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002652:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002656:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800265a:	2102      	movs	r1, #2
 800265c:	6011      	str	r1, [r2, #0]
 800265e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002662:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002666:	6812      	ldr	r2, [r2, #0]
 8002668:	fa92 f1a2 	rbit	r1, r2
 800266c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002670:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002674:	6011      	str	r1, [r2, #0]
  return result;
 8002676:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800267a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800267e:	6812      	ldr	r2, [r2, #0]
 8002680:	fab2 f282 	clz	r2, r2
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	f002 021f 	and.w	r2, r2, #31
 8002690:	2101      	movs	r1, #1
 8002692:	fa01 f202 	lsl.w	r2, r1, r2
 8002696:	4013      	ands	r3, r2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d184      	bne.n	80025a6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800269c:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d105      	bne.n	80026b0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026a4:	4b23      	ldr	r3, [pc, #140]	@ (8002734 <HAL_RCC_OscConfig+0xc58>)
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	4a22      	ldr	r2, [pc, #136]	@ (8002734 <HAL_RCC_OscConfig+0xc58>)
 80026aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026ae:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 8242 	beq.w	8002b46 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026c2:	4b1c      	ldr	r3, [pc, #112]	@ (8002734 <HAL_RCC_OscConfig+0xc58>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f003 030c 	and.w	r3, r3, #12
 80026ca:	2b08      	cmp	r3, #8
 80026cc:	f000 8213 	beq.w	8002af6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	69db      	ldr	r3, [r3, #28]
 80026dc:	2b02      	cmp	r3, #2
 80026de:	f040 8162 	bne.w	80029a6 <HAL_RCC_OscConfig+0xeca>
 80026e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026e6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80026ea:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80026ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	fa93 f2a3 	rbit	r2, r3
 80026fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002702:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002706:	601a      	str	r2, [r3, #0]
  return result;
 8002708:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800270c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002710:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002712:	fab3 f383 	clz	r3, r3
 8002716:	b2db      	uxtb	r3, r3
 8002718:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800271c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	461a      	mov	r2, r3
 8002724:	2300      	movs	r3, #0
 8002726:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002728:	f7fe ff44 	bl	80015b4 <HAL_GetTick>
 800272c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002730:	e00c      	b.n	800274c <HAL_RCC_OscConfig+0xc70>
 8002732:	bf00      	nop
 8002734:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002738:	f7fe ff3c 	bl	80015b4 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e1fd      	b.n	8002b48 <HAL_RCC_OscConfig+0x106c>
 800274c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002750:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002754:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002758:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800275e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	fa93 f2a3 	rbit	r2, r3
 8002768:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800276c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002770:	601a      	str	r2, [r3, #0]
  return result;
 8002772:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002776:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800277a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800277c:	fab3 f383 	clz	r3, r3
 8002780:	b2db      	uxtb	r3, r3
 8002782:	095b      	lsrs	r3, r3, #5
 8002784:	b2db      	uxtb	r3, r3
 8002786:	f043 0301 	orr.w	r3, r3, #1
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b01      	cmp	r3, #1
 800278e:	d102      	bne.n	8002796 <HAL_RCC_OscConfig+0xcba>
 8002790:	4bb0      	ldr	r3, [pc, #704]	@ (8002a54 <HAL_RCC_OscConfig+0xf78>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	e027      	b.n	80027e6 <HAL_RCC_OscConfig+0xd0a>
 8002796:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800279a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800279e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	fa93 f2a3 	rbit	r2, r3
 80027b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027b6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027c0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80027c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ce:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	fa93 f2a3 	rbit	r2, r3
 80027d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027dc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	4b9c      	ldr	r3, [pc, #624]	@ (8002a54 <HAL_RCC_OscConfig+0xf78>)
 80027e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027ea:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80027ee:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80027f2:	6011      	str	r1, [r2, #0]
 80027f4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027f8:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80027fc:	6812      	ldr	r2, [r2, #0]
 80027fe:	fa92 f1a2 	rbit	r1, r2
 8002802:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002806:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800280a:	6011      	str	r1, [r2, #0]
  return result;
 800280c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002810:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002814:	6812      	ldr	r2, [r2, #0]
 8002816:	fab2 f282 	clz	r2, r2
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	f042 0220 	orr.w	r2, r2, #32
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	f002 021f 	and.w	r2, r2, #31
 8002826:	2101      	movs	r1, #1
 8002828:	fa01 f202 	lsl.w	r2, r1, r2
 800282c:	4013      	ands	r3, r2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d182      	bne.n	8002738 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002832:	4b88      	ldr	r3, [pc, #544]	@ (8002a54 <HAL_RCC_OscConfig+0xf78>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800283a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800283e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002846:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800284a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	430b      	orrs	r3, r1
 8002854:	497f      	ldr	r1, [pc, #508]	@ (8002a54 <HAL_RCC_OscConfig+0xf78>)
 8002856:	4313      	orrs	r3, r2
 8002858:	604b      	str	r3, [r1, #4]
 800285a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800285e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002862:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002866:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002868:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800286c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	fa93 f2a3 	rbit	r2, r3
 8002876:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800287a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800287e:	601a      	str	r2, [r3, #0]
  return result;
 8002880:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002884:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002888:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800288a:	fab3 f383 	clz	r3, r3
 800288e:	b2db      	uxtb	r3, r3
 8002890:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002894:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	461a      	mov	r2, r3
 800289c:	2301      	movs	r3, #1
 800289e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a0:	f7fe fe88 	bl	80015b4 <HAL_GetTick>
 80028a4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028a8:	e009      	b.n	80028be <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028aa:	f7fe fe83 	bl	80015b4 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e144      	b.n	8002b48 <HAL_RCC_OscConfig+0x106c>
 80028be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80028c6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	fa93 f2a3 	rbit	r2, r3
 80028da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028de:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80028e2:	601a      	str	r2, [r3, #0]
  return result;
 80028e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80028ec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028ee:	fab3 f383 	clz	r3, r3
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	095b      	lsrs	r3, r3, #5
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d102      	bne.n	8002908 <HAL_RCC_OscConfig+0xe2c>
 8002902:	4b54      	ldr	r3, [pc, #336]	@ (8002a54 <HAL_RCC_OscConfig+0xf78>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	e027      	b.n	8002958 <HAL_RCC_OscConfig+0xe7c>
 8002908:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800290c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002910:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002914:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002916:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800291a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	fa93 f2a3 	rbit	r2, r3
 8002924:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002928:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002932:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002936:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002940:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	fa93 f2a3 	rbit	r2, r3
 800294a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800294e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	4b3f      	ldr	r3, [pc, #252]	@ (8002a54 <HAL_RCC_OscConfig+0xf78>)
 8002956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002958:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800295c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002960:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002964:	6011      	str	r1, [r2, #0]
 8002966:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800296a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800296e:	6812      	ldr	r2, [r2, #0]
 8002970:	fa92 f1a2 	rbit	r1, r2
 8002974:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002978:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800297c:	6011      	str	r1, [r2, #0]
  return result;
 800297e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002982:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002986:	6812      	ldr	r2, [r2, #0]
 8002988:	fab2 f282 	clz	r2, r2
 800298c:	b2d2      	uxtb	r2, r2
 800298e:	f042 0220 	orr.w	r2, r2, #32
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	f002 021f 	and.w	r2, r2, #31
 8002998:	2101      	movs	r1, #1
 800299a:	fa01 f202 	lsl.w	r2, r1, r2
 800299e:	4013      	ands	r3, r2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d082      	beq.n	80028aa <HAL_RCC_OscConfig+0xdce>
 80029a4:	e0cf      	b.n	8002b46 <HAL_RCC_OscConfig+0x106a>
 80029a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029aa:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80029ae:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80029b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029b8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	fa93 f2a3 	rbit	r2, r3
 80029c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80029ca:	601a      	str	r2, [r3, #0]
  return result;
 80029cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80029d4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d6:	fab3 f383 	clz	r3, r3
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80029e0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	461a      	mov	r2, r3
 80029e8:	2300      	movs	r3, #0
 80029ea:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ec:	f7fe fde2 	bl	80015b4 <HAL_GetTick>
 80029f0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029f4:	e009      	b.n	8002a0a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029f6:	f7fe fddd 	bl	80015b4 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e09e      	b.n	8002b48 <HAL_RCC_OscConfig+0x106c>
 8002a0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a0e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002a12:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a1c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	fa93 f2a3 	rbit	r2, r3
 8002a26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a2a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002a2e:	601a      	str	r2, [r3, #0]
  return result;
 8002a30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a34:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002a38:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a3a:	fab3 f383 	clz	r3, r3
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	095b      	lsrs	r3, r3, #5
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d104      	bne.n	8002a58 <HAL_RCC_OscConfig+0xf7c>
 8002a4e:	4b01      	ldr	r3, [pc, #4]	@ (8002a54 <HAL_RCC_OscConfig+0xf78>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	e029      	b.n	8002aa8 <HAL_RCC_OscConfig+0xfcc>
 8002a54:	40021000 	.word	0x40021000
 8002a58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a5c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002a60:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a6a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	fa93 f2a3 	rbit	r2, r3
 8002a74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a78:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a82:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002a86:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a90:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	fa93 f2a3 	rbit	r2, r3
 8002a9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a9e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	4b2b      	ldr	r3, [pc, #172]	@ (8002b54 <HAL_RCC_OscConfig+0x1078>)
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002aac:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002ab0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002ab4:	6011      	str	r1, [r2, #0]
 8002ab6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002aba:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002abe:	6812      	ldr	r2, [r2, #0]
 8002ac0:	fa92 f1a2 	rbit	r1, r2
 8002ac4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ac8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002acc:	6011      	str	r1, [r2, #0]
  return result;
 8002ace:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ad2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002ad6:	6812      	ldr	r2, [r2, #0]
 8002ad8:	fab2 f282 	clz	r2, r2
 8002adc:	b2d2      	uxtb	r2, r2
 8002ade:	f042 0220 	orr.w	r2, r2, #32
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	f002 021f 	and.w	r2, r2, #31
 8002ae8:	2101      	movs	r1, #1
 8002aea:	fa01 f202 	lsl.w	r2, r1, r2
 8002aee:	4013      	ands	r3, r2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d180      	bne.n	80029f6 <HAL_RCC_OscConfig+0xf1a>
 8002af4:	e027      	b.n	8002b46 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002af6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002afa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d101      	bne.n	8002b0a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e01e      	b.n	8002b48 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b0a:	4b12      	ldr	r3, [pc, #72]	@ (8002b54 <HAL_RCC_OscConfig+0x1078>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b12:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002b16:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002b1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d10b      	bne.n	8002b42 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002b2a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002b2e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002b32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b36:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d001      	beq.n	8002b46 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40021000 	.word	0x40021000

08002b58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b09e      	sub	sp, #120	@ 0x78
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b62:	2300      	movs	r3, #0
 8002b64:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e162      	b.n	8002e36 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b70:	4b90      	ldr	r3, [pc, #576]	@ (8002db4 <HAL_RCC_ClockConfig+0x25c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d910      	bls.n	8002ba0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b7e:	4b8d      	ldr	r3, [pc, #564]	@ (8002db4 <HAL_RCC_ClockConfig+0x25c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f023 0207 	bic.w	r2, r3, #7
 8002b86:	498b      	ldr	r1, [pc, #556]	@ (8002db4 <HAL_RCC_ClockConfig+0x25c>)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8e:	4b89      	ldr	r3, [pc, #548]	@ (8002db4 <HAL_RCC_ClockConfig+0x25c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d001      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e14a      	b.n	8002e36 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d008      	beq.n	8002bbe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bac:	4b82      	ldr	r3, [pc, #520]	@ (8002db8 <HAL_RCC_ClockConfig+0x260>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	497f      	ldr	r1, [pc, #508]	@ (8002db8 <HAL_RCC_ClockConfig+0x260>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 80dc 	beq.w	8002d84 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d13c      	bne.n	8002c4e <HAL_RCC_ClockConfig+0xf6>
 8002bd4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bd8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002bdc:	fa93 f3a3 	rbit	r3, r3
 8002be0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002be2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002be4:	fab3 f383 	clz	r3, r3
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	095b      	lsrs	r3, r3, #5
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	f043 0301 	orr.w	r3, r3, #1
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d102      	bne.n	8002bfe <HAL_RCC_ClockConfig+0xa6>
 8002bf8:	4b6f      	ldr	r3, [pc, #444]	@ (8002db8 <HAL_RCC_ClockConfig+0x260>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	e00f      	b.n	8002c1e <HAL_RCC_ClockConfig+0xc6>
 8002bfe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c02:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c06:	fa93 f3a3 	rbit	r3, r3
 8002c0a:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c10:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c14:	fa93 f3a3 	rbit	r3, r3
 8002c18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c1a:	4b67      	ldr	r3, [pc, #412]	@ (8002db8 <HAL_RCC_ClockConfig+0x260>)
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c22:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002c24:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c26:	fa92 f2a2 	rbit	r2, r2
 8002c2a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002c2c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002c2e:	fab2 f282 	clz	r2, r2
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	f042 0220 	orr.w	r2, r2, #32
 8002c38:	b2d2      	uxtb	r2, r2
 8002c3a:	f002 021f 	and.w	r2, r2, #31
 8002c3e:	2101      	movs	r1, #1
 8002c40:	fa01 f202 	lsl.w	r2, r1, r2
 8002c44:	4013      	ands	r3, r2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d17b      	bne.n	8002d42 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e0f3      	b.n	8002e36 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d13c      	bne.n	8002cd0 <HAL_RCC_ClockConfig+0x178>
 8002c56:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c5a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c5e:	fa93 f3a3 	rbit	r3, r3
 8002c62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002c64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c66:	fab3 f383 	clz	r3, r3
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	095b      	lsrs	r3, r3, #5
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	f043 0301 	orr.w	r3, r3, #1
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d102      	bne.n	8002c80 <HAL_RCC_ClockConfig+0x128>
 8002c7a:	4b4f      	ldr	r3, [pc, #316]	@ (8002db8 <HAL_RCC_ClockConfig+0x260>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	e00f      	b.n	8002ca0 <HAL_RCC_ClockConfig+0x148>
 8002c80:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c84:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c88:	fa93 f3a3 	rbit	r3, r3
 8002c8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c8e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c92:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c96:	fa93 f3a3 	rbit	r3, r3
 8002c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c9c:	4b46      	ldr	r3, [pc, #280]	@ (8002db8 <HAL_RCC_ClockConfig+0x260>)
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ca4:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002ca6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002ca8:	fa92 f2a2 	rbit	r2, r2
 8002cac:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002cae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002cb0:	fab2 f282 	clz	r2, r2
 8002cb4:	b2d2      	uxtb	r2, r2
 8002cb6:	f042 0220 	orr.w	r2, r2, #32
 8002cba:	b2d2      	uxtb	r2, r2
 8002cbc:	f002 021f 	and.w	r2, r2, #31
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d13a      	bne.n	8002d42 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e0b2      	b.n	8002e36 <HAL_RCC_ClockConfig+0x2de>
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cd6:	fa93 f3a3 	rbit	r3, r3
 8002cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cde:	fab3 f383 	clz	r3, r3
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	095b      	lsrs	r3, r3, #5
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	f043 0301 	orr.w	r3, r3, #1
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d102      	bne.n	8002cf8 <HAL_RCC_ClockConfig+0x1a0>
 8002cf2:	4b31      	ldr	r3, [pc, #196]	@ (8002db8 <HAL_RCC_ClockConfig+0x260>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	e00d      	b.n	8002d14 <HAL_RCC_ClockConfig+0x1bc>
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cfe:	fa93 f3a3 	rbit	r3, r3
 8002d02:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d04:	2302      	movs	r3, #2
 8002d06:	623b      	str	r3, [r7, #32]
 8002d08:	6a3b      	ldr	r3, [r7, #32]
 8002d0a:	fa93 f3a3 	rbit	r3, r3
 8002d0e:	61fb      	str	r3, [r7, #28]
 8002d10:	4b29      	ldr	r3, [pc, #164]	@ (8002db8 <HAL_RCC_ClockConfig+0x260>)
 8002d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d14:	2202      	movs	r2, #2
 8002d16:	61ba      	str	r2, [r7, #24]
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	fa92 f2a2 	rbit	r2, r2
 8002d1e:	617a      	str	r2, [r7, #20]
  return result;
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	fab2 f282 	clz	r2, r2
 8002d26:	b2d2      	uxtb	r2, r2
 8002d28:	f042 0220 	orr.w	r2, r2, #32
 8002d2c:	b2d2      	uxtb	r2, r2
 8002d2e:	f002 021f 	and.w	r2, r2, #31
 8002d32:	2101      	movs	r1, #1
 8002d34:	fa01 f202 	lsl.w	r2, r1, r2
 8002d38:	4013      	ands	r3, r2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e079      	b.n	8002e36 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d42:	4b1d      	ldr	r3, [pc, #116]	@ (8002db8 <HAL_RCC_ClockConfig+0x260>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f023 0203 	bic.w	r2, r3, #3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	491a      	ldr	r1, [pc, #104]	@ (8002db8 <HAL_RCC_ClockConfig+0x260>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d54:	f7fe fc2e 	bl	80015b4 <HAL_GetTick>
 8002d58:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d5a:	e00a      	b.n	8002d72 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d5c:	f7fe fc2a 	bl	80015b4 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e061      	b.n	8002e36 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d72:	4b11      	ldr	r3, [pc, #68]	@ (8002db8 <HAL_RCC_ClockConfig+0x260>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f003 020c 	and.w	r2, r3, #12
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d1eb      	bne.n	8002d5c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d84:	4b0b      	ldr	r3, [pc, #44]	@ (8002db4 <HAL_RCC_ClockConfig+0x25c>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d214      	bcs.n	8002dbc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d92:	4b08      	ldr	r3, [pc, #32]	@ (8002db4 <HAL_RCC_ClockConfig+0x25c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f023 0207 	bic.w	r2, r3, #7
 8002d9a:	4906      	ldr	r1, [pc, #24]	@ (8002db4 <HAL_RCC_ClockConfig+0x25c>)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da2:	4b04      	ldr	r3, [pc, #16]	@ (8002db4 <HAL_RCC_ClockConfig+0x25c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d005      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e040      	b.n	8002e36 <HAL_RCC_ClockConfig+0x2de>
 8002db4:	40022000 	.word	0x40022000
 8002db8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d008      	beq.n	8002dda <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8002e40 <HAL_RCC_ClockConfig+0x2e8>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	491a      	ldr	r1, [pc, #104]	@ (8002e40 <HAL_RCC_ClockConfig+0x2e8>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0308 	and.w	r3, r3, #8
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d009      	beq.n	8002dfa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002de6:	4b16      	ldr	r3, [pc, #88]	@ (8002e40 <HAL_RCC_ClockConfig+0x2e8>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	4912      	ldr	r1, [pc, #72]	@ (8002e40 <HAL_RCC_ClockConfig+0x2e8>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002dfa:	f000 f829 	bl	8002e50 <HAL_RCC_GetSysClockFreq>
 8002dfe:	4601      	mov	r1, r0
 8002e00:	4b0f      	ldr	r3, [pc, #60]	@ (8002e40 <HAL_RCC_ClockConfig+0x2e8>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e08:	22f0      	movs	r2, #240	@ 0xf0
 8002e0a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	fa92 f2a2 	rbit	r2, r2
 8002e12:	60fa      	str	r2, [r7, #12]
  return result;
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	fab2 f282 	clz	r2, r2
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	40d3      	lsrs	r3, r2
 8002e1e:	4a09      	ldr	r2, [pc, #36]	@ (8002e44 <HAL_RCC_ClockConfig+0x2ec>)
 8002e20:	5cd3      	ldrb	r3, [r2, r3]
 8002e22:	fa21 f303 	lsr.w	r3, r1, r3
 8002e26:	4a08      	ldr	r2, [pc, #32]	@ (8002e48 <HAL_RCC_ClockConfig+0x2f0>)
 8002e28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002e2a:	4b08      	ldr	r3, [pc, #32]	@ (8002e4c <HAL_RCC_ClockConfig+0x2f4>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fe fb7c 	bl	800152c <HAL_InitTick>
  
  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3778      	adds	r7, #120	@ 0x78
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40021000 	.word	0x40021000
 8002e44:	08008588 	.word	0x08008588
 8002e48:	20000004 	.word	0x20000004
 8002e4c:	20000008 	.word	0x20000008

08002e50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b087      	sub	sp, #28
 8002e54:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e56:	2300      	movs	r3, #0
 8002e58:	60fb      	str	r3, [r7, #12]
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60bb      	str	r3, [r7, #8]
 8002e5e:	2300      	movs	r3, #0
 8002e60:	617b      	str	r3, [r7, #20]
 8002e62:	2300      	movs	r3, #0
 8002e64:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e66:	2300      	movs	r3, #0
 8002e68:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002e6a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f003 030c 	and.w	r3, r3, #12
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	d002      	beq.n	8002e80 <HAL_RCC_GetSysClockFreq+0x30>
 8002e7a:	2b08      	cmp	r3, #8
 8002e7c:	d003      	beq.n	8002e86 <HAL_RCC_GetSysClockFreq+0x36>
 8002e7e:	e026      	b.n	8002ece <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e80:	4b19      	ldr	r3, [pc, #100]	@ (8002ee8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e82:	613b      	str	r3, [r7, #16]
      break;
 8002e84:	e026      	b.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	0c9b      	lsrs	r3, r3, #18
 8002e8a:	f003 030f 	and.w	r3, r3, #15
 8002e8e:	4a17      	ldr	r2, [pc, #92]	@ (8002eec <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e90:	5cd3      	ldrb	r3, [r2, r3]
 8002e92:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002e94:	4b13      	ldr	r3, [pc, #76]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e98:	f003 030f 	and.w	r3, r3, #15
 8002e9c:	4a14      	ldr	r2, [pc, #80]	@ (8002ef0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e9e:	5cd3      	ldrb	r3, [r2, r3]
 8002ea0:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d008      	beq.n	8002ebe <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002eac:	4a0e      	ldr	r2, [pc, #56]	@ (8002ee8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	fb02 f303 	mul.w	r3, r2, r3
 8002eba:	617b      	str	r3, [r7, #20]
 8002ebc:	e004      	b.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a0c      	ldr	r2, [pc, #48]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ec2:	fb02 f303 	mul.w	r3, r2, r3
 8002ec6:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	613b      	str	r3, [r7, #16]
      break;
 8002ecc:	e002      	b.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ece:	4b06      	ldr	r3, [pc, #24]	@ (8002ee8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ed0:	613b      	str	r3, [r7, #16]
      break;
 8002ed2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ed4:	693b      	ldr	r3, [r7, #16]
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	371c      	adds	r7, #28
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	007a1200 	.word	0x007a1200
 8002eec:	080085a0 	.word	0x080085a0
 8002ef0:	080085b0 	.word	0x080085b0
 8002ef4:	003d0900 	.word	0x003d0900

08002ef8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002efc:	4b03      	ldr	r3, [pc, #12]	@ (8002f0c <HAL_RCC_GetHCLKFreq+0x14>)
 8002efe:	681b      	ldr	r3, [r3, #0]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	20000004 	.word	0x20000004

08002f10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002f16:	f7ff ffef 	bl	8002ef8 <HAL_RCC_GetHCLKFreq>
 8002f1a:	4601      	mov	r1, r0
 8002f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f4c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f24:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002f28:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	fa92 f2a2 	rbit	r2, r2
 8002f30:	603a      	str	r2, [r7, #0]
  return result;
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	fab2 f282 	clz	r2, r2
 8002f38:	b2d2      	uxtb	r2, r2
 8002f3a:	40d3      	lsrs	r3, r2
 8002f3c:	4a04      	ldr	r2, [pc, #16]	@ (8002f50 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002f3e:	5cd3      	ldrb	r3, [r2, r3]
 8002f40:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002f44:	4618      	mov	r0, r3
 8002f46:	3708      	adds	r7, #8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	08008598 	.word	0x08008598

08002f54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002f5a:	f7ff ffcd 	bl	8002ef8 <HAL_RCC_GetHCLKFreq>
 8002f5e:	4601      	mov	r1, r0
 8002f60:	4b0b      	ldr	r3, [pc, #44]	@ (8002f90 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002f68:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002f6c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	fa92 f2a2 	rbit	r2, r2
 8002f74:	603a      	str	r2, [r7, #0]
  return result;
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	fab2 f282 	clz	r2, r2
 8002f7c:	b2d2      	uxtb	r2, r2
 8002f7e:	40d3      	lsrs	r3, r2
 8002f80:	4a04      	ldr	r2, [pc, #16]	@ (8002f94 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002f82:	5cd3      	ldrb	r3, [r2, r3]
 8002f84:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40021000 	.word	0x40021000
 8002f94:	08008598 	.word	0x08008598

08002f98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e049      	b.n	800303e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d106      	bne.n	8002fc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f7fe f90c 	bl	80011dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3304      	adds	r3, #4
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	4610      	mov	r0, r2
 8002fd8:	f000 f94c 	bl	8003274 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
	...

08003048 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b01      	cmp	r3, #1
 800305a:	d001      	beq.n	8003060 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e033      	b.n	80030c8 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2202      	movs	r2, #2
 8003064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a19      	ldr	r2, [pc, #100]	@ (80030d4 <HAL_TIM_Base_Start+0x8c>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d009      	beq.n	8003086 <HAL_TIM_Base_Start+0x3e>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800307a:	d004      	beq.n	8003086 <HAL_TIM_Base_Start+0x3e>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a15      	ldr	r2, [pc, #84]	@ (80030d8 <HAL_TIM_Base_Start+0x90>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d115      	bne.n	80030b2 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	4b13      	ldr	r3, [pc, #76]	@ (80030dc <HAL_TIM_Base_Start+0x94>)
 800308e:	4013      	ands	r3, r2
 8003090:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2b06      	cmp	r3, #6
 8003096:	d015      	beq.n	80030c4 <HAL_TIM_Base_Start+0x7c>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800309e:	d011      	beq.n	80030c4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 0201 	orr.w	r2, r2, #1
 80030ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030b0:	e008      	b.n	80030c4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f042 0201 	orr.w	r2, r2, #1
 80030c0:	601a      	str	r2, [r3, #0]
 80030c2:	e000      	b.n	80030c6 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3714      	adds	r7, #20
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	40012c00 	.word	0x40012c00
 80030d8:	40014000 	.word	0x40014000
 80030dc:	00010007 	.word	0x00010007

080030e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ea:	2300      	movs	r3, #0
 80030ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d101      	bne.n	80030fc <HAL_TIM_ConfigClockSource+0x1c>
 80030f8:	2302      	movs	r3, #2
 80030fa:	e0b6      	b.n	800326a <HAL_TIM_ConfigClockSource+0x18a>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2202      	movs	r2, #2
 8003108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800311a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800311e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003126:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003138:	d03e      	beq.n	80031b8 <HAL_TIM_ConfigClockSource+0xd8>
 800313a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800313e:	f200 8087 	bhi.w	8003250 <HAL_TIM_ConfigClockSource+0x170>
 8003142:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003146:	f000 8086 	beq.w	8003256 <HAL_TIM_ConfigClockSource+0x176>
 800314a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800314e:	d87f      	bhi.n	8003250 <HAL_TIM_ConfigClockSource+0x170>
 8003150:	2b70      	cmp	r3, #112	@ 0x70
 8003152:	d01a      	beq.n	800318a <HAL_TIM_ConfigClockSource+0xaa>
 8003154:	2b70      	cmp	r3, #112	@ 0x70
 8003156:	d87b      	bhi.n	8003250 <HAL_TIM_ConfigClockSource+0x170>
 8003158:	2b60      	cmp	r3, #96	@ 0x60
 800315a:	d050      	beq.n	80031fe <HAL_TIM_ConfigClockSource+0x11e>
 800315c:	2b60      	cmp	r3, #96	@ 0x60
 800315e:	d877      	bhi.n	8003250 <HAL_TIM_ConfigClockSource+0x170>
 8003160:	2b50      	cmp	r3, #80	@ 0x50
 8003162:	d03c      	beq.n	80031de <HAL_TIM_ConfigClockSource+0xfe>
 8003164:	2b50      	cmp	r3, #80	@ 0x50
 8003166:	d873      	bhi.n	8003250 <HAL_TIM_ConfigClockSource+0x170>
 8003168:	2b40      	cmp	r3, #64	@ 0x40
 800316a:	d058      	beq.n	800321e <HAL_TIM_ConfigClockSource+0x13e>
 800316c:	2b40      	cmp	r3, #64	@ 0x40
 800316e:	d86f      	bhi.n	8003250 <HAL_TIM_ConfigClockSource+0x170>
 8003170:	2b30      	cmp	r3, #48	@ 0x30
 8003172:	d064      	beq.n	800323e <HAL_TIM_ConfigClockSource+0x15e>
 8003174:	2b30      	cmp	r3, #48	@ 0x30
 8003176:	d86b      	bhi.n	8003250 <HAL_TIM_ConfigClockSource+0x170>
 8003178:	2b20      	cmp	r3, #32
 800317a:	d060      	beq.n	800323e <HAL_TIM_ConfigClockSource+0x15e>
 800317c:	2b20      	cmp	r3, #32
 800317e:	d867      	bhi.n	8003250 <HAL_TIM_ConfigClockSource+0x170>
 8003180:	2b00      	cmp	r3, #0
 8003182:	d05c      	beq.n	800323e <HAL_TIM_ConfigClockSource+0x15e>
 8003184:	2b10      	cmp	r3, #16
 8003186:	d05a      	beq.n	800323e <HAL_TIM_ConfigClockSource+0x15e>
 8003188:	e062      	b.n	8003250 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800319a:	f000 f95f 	bl	800345c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80031ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	609a      	str	r2, [r3, #8]
      break;
 80031b6:	e04f      	b.n	8003258 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031c8:	f000 f948 	bl	800345c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80031da:	609a      	str	r2, [r3, #8]
      break;
 80031dc:	e03c      	b.n	8003258 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ea:	461a      	mov	r2, r3
 80031ec:	f000 f8bc 	bl	8003368 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2150      	movs	r1, #80	@ 0x50
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 f915 	bl	8003426 <TIM_ITRx_SetConfig>
      break;
 80031fc:	e02c      	b.n	8003258 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800320a:	461a      	mov	r2, r3
 800320c:	f000 f8db 	bl	80033c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2160      	movs	r1, #96	@ 0x60
 8003216:	4618      	mov	r0, r3
 8003218:	f000 f905 	bl	8003426 <TIM_ITRx_SetConfig>
      break;
 800321c:	e01c      	b.n	8003258 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800322a:	461a      	mov	r2, r3
 800322c:	f000 f89c 	bl	8003368 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2140      	movs	r1, #64	@ 0x40
 8003236:	4618      	mov	r0, r3
 8003238:	f000 f8f5 	bl	8003426 <TIM_ITRx_SetConfig>
      break;
 800323c:	e00c      	b.n	8003258 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4619      	mov	r1, r3
 8003248:	4610      	mov	r0, r2
 800324a:	f000 f8ec 	bl	8003426 <TIM_ITRx_SetConfig>
      break;
 800324e:	e003      	b.n	8003258 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	73fb      	strb	r3, [r7, #15]
      break;
 8003254:	e000      	b.n	8003258 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003256:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003268:	7bfb      	ldrb	r3, [r7, #15]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
	...

08003274 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a34      	ldr	r2, [pc, #208]	@ (8003358 <TIM_Base_SetConfig+0xe4>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d003      	beq.n	8003294 <TIM_Base_SetConfig+0x20>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003292:	d108      	bne.n	80032a6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800329a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a2b      	ldr	r2, [pc, #172]	@ (8003358 <TIM_Base_SetConfig+0xe4>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d00f      	beq.n	80032ce <TIM_Base_SetConfig+0x5a>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032b4:	d00b      	beq.n	80032ce <TIM_Base_SetConfig+0x5a>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a28      	ldr	r2, [pc, #160]	@ (800335c <TIM_Base_SetConfig+0xe8>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d007      	beq.n	80032ce <TIM_Base_SetConfig+0x5a>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a27      	ldr	r2, [pc, #156]	@ (8003360 <TIM_Base_SetConfig+0xec>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d003      	beq.n	80032ce <TIM_Base_SetConfig+0x5a>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a26      	ldr	r2, [pc, #152]	@ (8003364 <TIM_Base_SetConfig+0xf0>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d108      	bne.n	80032e0 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	4313      	orrs	r3, r2
 80032de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a14      	ldr	r2, [pc, #80]	@ (8003358 <TIM_Base_SetConfig+0xe4>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d00b      	beq.n	8003324 <TIM_Base_SetConfig+0xb0>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a13      	ldr	r2, [pc, #76]	@ (800335c <TIM_Base_SetConfig+0xe8>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d007      	beq.n	8003324 <TIM_Base_SetConfig+0xb0>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a12      	ldr	r2, [pc, #72]	@ (8003360 <TIM_Base_SetConfig+0xec>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d003      	beq.n	8003324 <TIM_Base_SetConfig+0xb0>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a11      	ldr	r2, [pc, #68]	@ (8003364 <TIM_Base_SetConfig+0xf0>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d103      	bne.n	800332c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	691a      	ldr	r2, [r3, #16]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b01      	cmp	r3, #1
 800333c:	d105      	bne.n	800334a <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	f023 0201 	bic.w	r2, r3, #1
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	611a      	str	r2, [r3, #16]
  }
}
 800334a:	bf00      	nop
 800334c:	3714      	adds	r7, #20
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	40012c00 	.word	0x40012c00
 800335c:	40014000 	.word	0x40014000
 8003360:	40014400 	.word	0x40014400
 8003364:	40014800 	.word	0x40014800

08003368 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003368:	b480      	push	{r7}
 800336a:	b087      	sub	sp, #28
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	f023 0201 	bic.w	r2, r3, #1
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003392:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	011b      	lsls	r3, r3, #4
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	4313      	orrs	r3, r2
 800339c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f023 030a 	bic.w	r3, r3, #10
 80033a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	621a      	str	r2, [r3, #32]
}
 80033ba:	bf00      	nop
 80033bc:	371c      	adds	r7, #28
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b087      	sub	sp, #28
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	60f8      	str	r0, [r7, #12]
 80033ce:	60b9      	str	r1, [r7, #8]
 80033d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	f023 0210 	bic.w	r2, r3, #16
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80033f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	031b      	lsls	r3, r3, #12
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003402:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	011b      	lsls	r3, r3, #4
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	4313      	orrs	r3, r2
 800340c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	621a      	str	r2, [r3, #32]
}
 800341a:	bf00      	nop
 800341c:	371c      	adds	r7, #28
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003426:	b480      	push	{r7}
 8003428:	b085      	sub	sp, #20
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
 800342e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800343c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	4313      	orrs	r3, r2
 8003444:	f043 0307 	orr.w	r3, r3, #7
 8003448:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	609a      	str	r2, [r3, #8]
}
 8003450:	bf00      	nop
 8003452:	3714      	adds	r7, #20
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800345c:	b480      	push	{r7}
 800345e:	b087      	sub	sp, #28
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
 8003468:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003476:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	021a      	lsls	r2, r3, #8
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	431a      	orrs	r2, r3
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	4313      	orrs	r3, r2
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	4313      	orrs	r3, r2
 8003488:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	609a      	str	r2, [r3, #8]
}
 8003490:	bf00      	nop
 8003492:	371c      	adds	r7, #28
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d101      	bne.n	80034b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034b0:	2302      	movs	r3, #2
 80034b2:	e04f      	b.n	8003554 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2202      	movs	r2, #2
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a21      	ldr	r2, [pc, #132]	@ (8003560 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d108      	bne.n	80034f0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80034e4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	4313      	orrs	r3, r2
 8003500:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a14      	ldr	r2, [pc, #80]	@ (8003560 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d009      	beq.n	8003528 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800351c:	d004      	beq.n	8003528 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a10      	ldr	r2, [pc, #64]	@ (8003564 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d10c      	bne.n	8003542 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800352e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	4313      	orrs	r3, r2
 8003538:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3714      	adds	r7, #20
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr
 8003560:	40012c00 	.word	0x40012c00
 8003564:	40014000 	.word	0x40014000

08003568 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e040      	b.n	80035fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800357e:	2b00      	cmp	r3, #0
 8003580:	d106      	bne.n	8003590 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7fd fe44 	bl	8001218 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2224      	movs	r2, #36	@ 0x24
 8003594:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 0201 	bic.w	r2, r2, #1
 80035a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d002      	beq.n	80035b4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f9e8 	bl	8003984 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 f8af 	bl	8003718 <UART_SetConfig>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d101      	bne.n	80035c4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e01b      	b.n	80035fc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80035d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689a      	ldr	r2, [r3, #8]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80035e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f042 0201 	orr.w	r2, r2, #1
 80035f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 fa67 	bl	8003ac8 <UART_CheckIdleState>
 80035fa:	4603      	mov	r3, r0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b08a      	sub	sp, #40	@ 0x28
 8003608:	af02      	add	r7, sp, #8
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	603b      	str	r3, [r7, #0]
 8003610:	4613      	mov	r3, r2
 8003612:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003618:	2b20      	cmp	r3, #32
 800361a:	d177      	bne.n	800370c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d002      	beq.n	8003628 <HAL_UART_Transmit+0x24>
 8003622:	88fb      	ldrh	r3, [r7, #6]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e070      	b.n	800370e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2221      	movs	r2, #33	@ 0x21
 8003638:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800363a:	f7fd ffbb 	bl	80015b4 <HAL_GetTick>
 800363e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	88fa      	ldrh	r2, [r7, #6]
 8003644:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	88fa      	ldrh	r2, [r7, #6]
 800364c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003658:	d108      	bne.n	800366c <HAL_UART_Transmit+0x68>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d104      	bne.n	800366c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003662:	2300      	movs	r3, #0
 8003664:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	61bb      	str	r3, [r7, #24]
 800366a:	e003      	b.n	8003674 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003670:	2300      	movs	r3, #0
 8003672:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003674:	e02f      	b.n	80036d6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	2200      	movs	r2, #0
 800367e:	2180      	movs	r1, #128	@ 0x80
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	f000 fac9 	bl	8003c18 <UART_WaitOnFlagUntilTimeout>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d004      	beq.n	8003696 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2220      	movs	r2, #32
 8003690:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e03b      	b.n	800370e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10b      	bne.n	80036b4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	881a      	ldrh	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036a8:	b292      	uxth	r2, r2
 80036aa:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	3302      	adds	r3, #2
 80036b0:	61bb      	str	r3, [r7, #24]
 80036b2:	e007      	b.n	80036c4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	781a      	ldrb	r2, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	3301      	adds	r3, #1
 80036c2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	3b01      	subs	r3, #1
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80036dc:	b29b      	uxth	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1c9      	bne.n	8003676 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	2200      	movs	r2, #0
 80036ea:	2140      	movs	r1, #64	@ 0x40
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 fa93 	bl	8003c18 <UART_WaitOnFlagUntilTimeout>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d004      	beq.n	8003702 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2220      	movs	r2, #32
 80036fc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e005      	b.n	800370e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2220      	movs	r2, #32
 8003706:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003708:	2300      	movs	r3, #0
 800370a:	e000      	b.n	800370e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800370c:	2302      	movs	r3, #2
  }
}
 800370e:	4618      	mov	r0, r3
 8003710:	3720      	adds	r7, #32
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
	...

08003718 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b088      	sub	sp, #32
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003720:	2300      	movs	r3, #0
 8003722:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	431a      	orrs	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	431a      	orrs	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	4313      	orrs	r3, r2
 800373a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	4b8a      	ldr	r3, [pc, #552]	@ (800396c <UART_SetConfig+0x254>)
 8003744:	4013      	ands	r3, r2
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6812      	ldr	r2, [r2, #0]
 800374a:	6979      	ldr	r1, [r7, #20]
 800374c:	430b      	orrs	r3, r1
 800374e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68da      	ldr	r2, [r3, #12]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	4313      	orrs	r3, r2
 8003774:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	430a      	orrs	r2, r1
 8003788:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a78      	ldr	r2, [pc, #480]	@ (8003970 <UART_SetConfig+0x258>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d120      	bne.n	80037d6 <UART_SetConfig+0xbe>
 8003794:	4b77      	ldr	r3, [pc, #476]	@ (8003974 <UART_SetConfig+0x25c>)
 8003796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003798:	f003 0303 	and.w	r3, r3, #3
 800379c:	2b03      	cmp	r3, #3
 800379e:	d817      	bhi.n	80037d0 <UART_SetConfig+0xb8>
 80037a0:	a201      	add	r2, pc, #4	@ (adr r2, 80037a8 <UART_SetConfig+0x90>)
 80037a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a6:	bf00      	nop
 80037a8:	080037b9 	.word	0x080037b9
 80037ac:	080037c5 	.word	0x080037c5
 80037b0:	080037cb 	.word	0x080037cb
 80037b4:	080037bf 	.word	0x080037bf
 80037b8:	2300      	movs	r3, #0
 80037ba:	77fb      	strb	r3, [r7, #31]
 80037bc:	e01d      	b.n	80037fa <UART_SetConfig+0xe2>
 80037be:	2302      	movs	r3, #2
 80037c0:	77fb      	strb	r3, [r7, #31]
 80037c2:	e01a      	b.n	80037fa <UART_SetConfig+0xe2>
 80037c4:	2304      	movs	r3, #4
 80037c6:	77fb      	strb	r3, [r7, #31]
 80037c8:	e017      	b.n	80037fa <UART_SetConfig+0xe2>
 80037ca:	2308      	movs	r3, #8
 80037cc:	77fb      	strb	r3, [r7, #31]
 80037ce:	e014      	b.n	80037fa <UART_SetConfig+0xe2>
 80037d0:	2310      	movs	r3, #16
 80037d2:	77fb      	strb	r3, [r7, #31]
 80037d4:	e011      	b.n	80037fa <UART_SetConfig+0xe2>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a67      	ldr	r2, [pc, #412]	@ (8003978 <UART_SetConfig+0x260>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d102      	bne.n	80037e6 <UART_SetConfig+0xce>
 80037e0:	2300      	movs	r3, #0
 80037e2:	77fb      	strb	r3, [r7, #31]
 80037e4:	e009      	b.n	80037fa <UART_SetConfig+0xe2>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a64      	ldr	r2, [pc, #400]	@ (800397c <UART_SetConfig+0x264>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d102      	bne.n	80037f6 <UART_SetConfig+0xde>
 80037f0:	2300      	movs	r3, #0
 80037f2:	77fb      	strb	r3, [r7, #31]
 80037f4:	e001      	b.n	80037fa <UART_SetConfig+0xe2>
 80037f6:	2310      	movs	r3, #16
 80037f8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003802:	d15a      	bne.n	80038ba <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003804:	7ffb      	ldrb	r3, [r7, #31]
 8003806:	2b08      	cmp	r3, #8
 8003808:	d827      	bhi.n	800385a <UART_SetConfig+0x142>
 800380a:	a201      	add	r2, pc, #4	@ (adr r2, 8003810 <UART_SetConfig+0xf8>)
 800380c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003810:	08003835 	.word	0x08003835
 8003814:	0800383d 	.word	0x0800383d
 8003818:	08003845 	.word	0x08003845
 800381c:	0800385b 	.word	0x0800385b
 8003820:	0800384b 	.word	0x0800384b
 8003824:	0800385b 	.word	0x0800385b
 8003828:	0800385b 	.word	0x0800385b
 800382c:	0800385b 	.word	0x0800385b
 8003830:	08003853 	.word	0x08003853
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003834:	f7ff fb6c 	bl	8002f10 <HAL_RCC_GetPCLK1Freq>
 8003838:	61b8      	str	r0, [r7, #24]
        break;
 800383a:	e013      	b.n	8003864 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800383c:	f7ff fb8a 	bl	8002f54 <HAL_RCC_GetPCLK2Freq>
 8003840:	61b8      	str	r0, [r7, #24]
        break;
 8003842:	e00f      	b.n	8003864 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003844:	4b4e      	ldr	r3, [pc, #312]	@ (8003980 <UART_SetConfig+0x268>)
 8003846:	61bb      	str	r3, [r7, #24]
        break;
 8003848:	e00c      	b.n	8003864 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800384a:	f7ff fb01 	bl	8002e50 <HAL_RCC_GetSysClockFreq>
 800384e:	61b8      	str	r0, [r7, #24]
        break;
 8003850:	e008      	b.n	8003864 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003852:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003856:	61bb      	str	r3, [r7, #24]
        break;
 8003858:	e004      	b.n	8003864 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800385a:	2300      	movs	r3, #0
 800385c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	77bb      	strb	r3, [r7, #30]
        break;
 8003862:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d074      	beq.n	8003954 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	005a      	lsls	r2, r3, #1
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	085b      	lsrs	r3, r3, #1
 8003874:	441a      	add	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	fbb2 f3f3 	udiv	r3, r2, r3
 800387e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	2b0f      	cmp	r3, #15
 8003884:	d916      	bls.n	80038b4 <UART_SetConfig+0x19c>
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800388c:	d212      	bcs.n	80038b4 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	b29b      	uxth	r3, r3
 8003892:	f023 030f 	bic.w	r3, r3, #15
 8003896:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	085b      	lsrs	r3, r3, #1
 800389c:	b29b      	uxth	r3, r3
 800389e:	f003 0307 	and.w	r3, r3, #7
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	89fb      	ldrh	r3, [r7, #14]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	89fa      	ldrh	r2, [r7, #14]
 80038b0:	60da      	str	r2, [r3, #12]
 80038b2:	e04f      	b.n	8003954 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	77bb      	strb	r3, [r7, #30]
 80038b8:	e04c      	b.n	8003954 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038ba:	7ffb      	ldrb	r3, [r7, #31]
 80038bc:	2b08      	cmp	r3, #8
 80038be:	d828      	bhi.n	8003912 <UART_SetConfig+0x1fa>
 80038c0:	a201      	add	r2, pc, #4	@ (adr r2, 80038c8 <UART_SetConfig+0x1b0>)
 80038c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c6:	bf00      	nop
 80038c8:	080038ed 	.word	0x080038ed
 80038cc:	080038f5 	.word	0x080038f5
 80038d0:	080038fd 	.word	0x080038fd
 80038d4:	08003913 	.word	0x08003913
 80038d8:	08003903 	.word	0x08003903
 80038dc:	08003913 	.word	0x08003913
 80038e0:	08003913 	.word	0x08003913
 80038e4:	08003913 	.word	0x08003913
 80038e8:	0800390b 	.word	0x0800390b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038ec:	f7ff fb10 	bl	8002f10 <HAL_RCC_GetPCLK1Freq>
 80038f0:	61b8      	str	r0, [r7, #24]
        break;
 80038f2:	e013      	b.n	800391c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038f4:	f7ff fb2e 	bl	8002f54 <HAL_RCC_GetPCLK2Freq>
 80038f8:	61b8      	str	r0, [r7, #24]
        break;
 80038fa:	e00f      	b.n	800391c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038fc:	4b20      	ldr	r3, [pc, #128]	@ (8003980 <UART_SetConfig+0x268>)
 80038fe:	61bb      	str	r3, [r7, #24]
        break;
 8003900:	e00c      	b.n	800391c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003902:	f7ff faa5 	bl	8002e50 <HAL_RCC_GetSysClockFreq>
 8003906:	61b8      	str	r0, [r7, #24]
        break;
 8003908:	e008      	b.n	800391c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800390a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800390e:	61bb      	str	r3, [r7, #24]
        break;
 8003910:	e004      	b.n	800391c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003912:	2300      	movs	r3, #0
 8003914:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	77bb      	strb	r3, [r7, #30]
        break;
 800391a:	bf00      	nop
    }

    if (pclk != 0U)
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d018      	beq.n	8003954 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	085a      	lsrs	r2, r3, #1
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	441a      	add	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	fbb2 f3f3 	udiv	r3, r2, r3
 8003934:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	2b0f      	cmp	r3, #15
 800393a:	d909      	bls.n	8003950 <UART_SetConfig+0x238>
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003942:	d205      	bcs.n	8003950 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	b29a      	uxth	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	60da      	str	r2, [r3, #12]
 800394e:	e001      	b.n	8003954 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003960:	7fbb      	ldrb	r3, [r7, #30]
}
 8003962:	4618      	mov	r0, r3
 8003964:	3720      	adds	r7, #32
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	efff69f3 	.word	0xefff69f3
 8003970:	40013800 	.word	0x40013800
 8003974:	40021000 	.word	0x40021000
 8003978:	40004400 	.word	0x40004400
 800397c:	40004800 	.word	0x40004800
 8003980:	007a1200 	.word	0x007a1200

08003984 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003990:	f003 0308 	and.w	r3, r3, #8
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00a      	beq.n	80039ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00a      	beq.n	80039d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00a      	beq.n	80039f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f6:	f003 0304 	and.w	r3, r3, #4
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00a      	beq.n	8003a14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a18:	f003 0310 	and.w	r3, r3, #16
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00a      	beq.n	8003a36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3a:	f003 0320 	and.w	r3, r3, #32
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00a      	beq.n	8003a58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d01a      	beq.n	8003a9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a82:	d10a      	bne.n	8003a9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00a      	beq.n	8003abc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	605a      	str	r2, [r3, #4]
  }
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b098      	sub	sp, #96	@ 0x60
 8003acc:	af02      	add	r7, sp, #8
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ad8:	f7fd fd6c 	bl	80015b4 <HAL_GetTick>
 8003adc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0308 	and.w	r3, r3, #8
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	d12e      	bne.n	8003b4a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003aec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003af4:	2200      	movs	r2, #0
 8003af6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f88c 	bl	8003c18 <UART_WaitOnFlagUntilTimeout>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d021      	beq.n	8003b4a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b0e:	e853 3f00 	ldrex	r3, [r3]
 8003b12:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	461a      	mov	r2, r3
 8003b22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b24:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b26:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b2c:	e841 2300 	strex	r3, r2, [r1]
 8003b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1e6      	bne.n	8003b06 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e062      	b.n	8003c10 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	2b04      	cmp	r3, #4
 8003b56:	d149      	bne.n	8003bec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003b5c:	9300      	str	r3, [sp, #0]
 8003b5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b60:	2200      	movs	r2, #0
 8003b62:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f856 	bl	8003c18 <UART_WaitOnFlagUntilTimeout>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d03c      	beq.n	8003bec <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7a:	e853 3f00 	ldrex	r3, [r3]
 8003b7e:	623b      	str	r3, [r7, #32]
   return(result);
 8003b80:	6a3b      	ldr	r3, [r7, #32]
 8003b82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b90:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b92:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b94:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b98:	e841 2300 	strex	r3, r2, [r1]
 8003b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1e6      	bne.n	8003b72 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	3308      	adds	r3, #8
 8003baa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	e853 3f00 	ldrex	r3, [r3]
 8003bb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f023 0301 	bic.w	r3, r3, #1
 8003bba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	3308      	adds	r3, #8
 8003bc2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bc4:	61fa      	str	r2, [r7, #28]
 8003bc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc8:	69b9      	ldr	r1, [r7, #24]
 8003bca:	69fa      	ldr	r2, [r7, #28]
 8003bcc:	e841 2300 	strex	r3, r2, [r1]
 8003bd0:	617b      	str	r3, [r7, #20]
   return(result);
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1e5      	bne.n	8003ba4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e011      	b.n	8003c10 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3758      	adds	r7, #88	@ 0x58
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	603b      	str	r3, [r7, #0]
 8003c24:	4613      	mov	r3, r2
 8003c26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c28:	e04f      	b.n	8003cca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c30:	d04b      	beq.n	8003cca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c32:	f7fd fcbf 	bl	80015b4 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d302      	bcc.n	8003c48 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d101      	bne.n	8003c4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e04e      	b.n	8003cea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0304 	and.w	r3, r3, #4
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d037      	beq.n	8003cca <UART_WaitOnFlagUntilTimeout+0xb2>
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	2b80      	cmp	r3, #128	@ 0x80
 8003c5e:	d034      	beq.n	8003cca <UART_WaitOnFlagUntilTimeout+0xb2>
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	2b40      	cmp	r3, #64	@ 0x40
 8003c64:	d031      	beq.n	8003cca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	f003 0308 	and.w	r3, r3, #8
 8003c70:	2b08      	cmp	r3, #8
 8003c72:	d110      	bne.n	8003c96 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2208      	movs	r2, #8
 8003c7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f000 f838 	bl	8003cf2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2208      	movs	r2, #8
 8003c86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e029      	b.n	8003cea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	69db      	ldr	r3, [r3, #28]
 8003c9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ca0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ca4:	d111      	bne.n	8003cca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003cae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f000 f81e 	bl	8003cf2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2220      	movs	r2, #32
 8003cba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e00f      	b.n	8003cea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	69da      	ldr	r2, [r3, #28]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	bf0c      	ite	eq
 8003cda:	2301      	moveq	r3, #1
 8003cdc:	2300      	movne	r3, #0
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	79fb      	ldrb	r3, [r7, #7]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d0a0      	beq.n	8003c2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b095      	sub	sp, #84	@ 0x54
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d02:	e853 3f00 	ldrex	r3, [r3]
 8003d06:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	461a      	mov	r2, r3
 8003d16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d18:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d1a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d1e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d20:	e841 2300 	strex	r3, r2, [r1]
 8003d24:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1e6      	bne.n	8003cfa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	3308      	adds	r3, #8
 8003d32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d34:	6a3b      	ldr	r3, [r7, #32]
 8003d36:	e853 3f00 	ldrex	r3, [r3]
 8003d3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	f023 0301 	bic.w	r3, r3, #1
 8003d42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	3308      	adds	r3, #8
 8003d4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d4c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d54:	e841 2300 	strex	r3, r2, [r1]
 8003d58:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1e5      	bne.n	8003d2c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d118      	bne.n	8003d9a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	e853 3f00 	ldrex	r3, [r3]
 8003d74:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	f023 0310 	bic.w	r3, r3, #16
 8003d7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	461a      	mov	r2, r3
 8003d84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d86:	61bb      	str	r3, [r7, #24]
 8003d88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8a:	6979      	ldr	r1, [r7, #20]
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	e841 2300 	strex	r3, r2, [r1]
 8003d92:	613b      	str	r3, [r7, #16]
   return(result);
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1e6      	bne.n	8003d68 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003dae:	bf00      	nop
 8003db0:	3754      	adds	r7, #84	@ 0x54
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
	...

08003dbc <srand>:
 8003dbc:	b538      	push	{r3, r4, r5, lr}
 8003dbe:	4b10      	ldr	r3, [pc, #64]	@ (8003e00 <srand+0x44>)
 8003dc0:	681d      	ldr	r5, [r3, #0]
 8003dc2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003dc4:	4604      	mov	r4, r0
 8003dc6:	b9b3      	cbnz	r3, 8003df6 <srand+0x3a>
 8003dc8:	2018      	movs	r0, #24
 8003dca:	f001 ff2f 	bl	8005c2c <malloc>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	6328      	str	r0, [r5, #48]	@ 0x30
 8003dd2:	b920      	cbnz	r0, 8003dde <srand+0x22>
 8003dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8003e04 <srand+0x48>)
 8003dd6:	480c      	ldr	r0, [pc, #48]	@ (8003e08 <srand+0x4c>)
 8003dd8:	2146      	movs	r1, #70	@ 0x46
 8003dda:	f001 f873 	bl	8004ec4 <__assert_func>
 8003dde:	490b      	ldr	r1, [pc, #44]	@ (8003e0c <srand+0x50>)
 8003de0:	4b0b      	ldr	r3, [pc, #44]	@ (8003e10 <srand+0x54>)
 8003de2:	e9c0 1300 	strd	r1, r3, [r0]
 8003de6:	4b0b      	ldr	r3, [pc, #44]	@ (8003e14 <srand+0x58>)
 8003de8:	6083      	str	r3, [r0, #8]
 8003dea:	230b      	movs	r3, #11
 8003dec:	8183      	strh	r3, [r0, #12]
 8003dee:	2100      	movs	r1, #0
 8003df0:	2001      	movs	r0, #1
 8003df2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003df6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003df8:	2200      	movs	r2, #0
 8003dfa:	611c      	str	r4, [r3, #16]
 8003dfc:	615a      	str	r2, [r3, #20]
 8003dfe:	bd38      	pop	{r3, r4, r5, pc}
 8003e00:	2000001c 	.word	0x2000001c
 8003e04:	080085c0 	.word	0x080085c0
 8003e08:	080085d7 	.word	0x080085d7
 8003e0c:	abcd330e 	.word	0xabcd330e
 8003e10:	e66d1234 	.word	0xe66d1234
 8003e14:	0005deec 	.word	0x0005deec

08003e18 <rand>:
 8003e18:	4b16      	ldr	r3, [pc, #88]	@ (8003e74 <rand+0x5c>)
 8003e1a:	b510      	push	{r4, lr}
 8003e1c:	681c      	ldr	r4, [r3, #0]
 8003e1e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003e20:	b9b3      	cbnz	r3, 8003e50 <rand+0x38>
 8003e22:	2018      	movs	r0, #24
 8003e24:	f001 ff02 	bl	8005c2c <malloc>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	6320      	str	r0, [r4, #48]	@ 0x30
 8003e2c:	b920      	cbnz	r0, 8003e38 <rand+0x20>
 8003e2e:	4b12      	ldr	r3, [pc, #72]	@ (8003e78 <rand+0x60>)
 8003e30:	4812      	ldr	r0, [pc, #72]	@ (8003e7c <rand+0x64>)
 8003e32:	2152      	movs	r1, #82	@ 0x52
 8003e34:	f001 f846 	bl	8004ec4 <__assert_func>
 8003e38:	4911      	ldr	r1, [pc, #68]	@ (8003e80 <rand+0x68>)
 8003e3a:	4b12      	ldr	r3, [pc, #72]	@ (8003e84 <rand+0x6c>)
 8003e3c:	e9c0 1300 	strd	r1, r3, [r0]
 8003e40:	4b11      	ldr	r3, [pc, #68]	@ (8003e88 <rand+0x70>)
 8003e42:	6083      	str	r3, [r0, #8]
 8003e44:	230b      	movs	r3, #11
 8003e46:	8183      	strh	r3, [r0, #12]
 8003e48:	2100      	movs	r1, #0
 8003e4a:	2001      	movs	r0, #1
 8003e4c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003e50:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003e52:	480e      	ldr	r0, [pc, #56]	@ (8003e8c <rand+0x74>)
 8003e54:	690b      	ldr	r3, [r1, #16]
 8003e56:	694c      	ldr	r4, [r1, #20]
 8003e58:	4a0d      	ldr	r2, [pc, #52]	@ (8003e90 <rand+0x78>)
 8003e5a:	4358      	muls	r0, r3
 8003e5c:	fb02 0004 	mla	r0, r2, r4, r0
 8003e60:	fba3 3202 	umull	r3, r2, r3, r2
 8003e64:	3301      	adds	r3, #1
 8003e66:	eb40 0002 	adc.w	r0, r0, r2
 8003e6a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8003e6e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8003e72:	bd10      	pop	{r4, pc}
 8003e74:	2000001c 	.word	0x2000001c
 8003e78:	080085c0 	.word	0x080085c0
 8003e7c:	080085d7 	.word	0x080085d7
 8003e80:	abcd330e 	.word	0xabcd330e
 8003e84:	e66d1234 	.word	0xe66d1234
 8003e88:	0005deec 	.word	0x0005deec
 8003e8c:	5851f42d 	.word	0x5851f42d
 8003e90:	4c957f2d 	.word	0x4c957f2d

08003e94 <__cvt>:
 8003e94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e98:	ec57 6b10 	vmov	r6, r7, d0
 8003e9c:	2f00      	cmp	r7, #0
 8003e9e:	460c      	mov	r4, r1
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	463b      	mov	r3, r7
 8003ea4:	bfbb      	ittet	lt
 8003ea6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003eaa:	461f      	movlt	r7, r3
 8003eac:	2300      	movge	r3, #0
 8003eae:	232d      	movlt	r3, #45	@ 0x2d
 8003eb0:	700b      	strb	r3, [r1, #0]
 8003eb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003eb4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003eb8:	4691      	mov	r9, r2
 8003eba:	f023 0820 	bic.w	r8, r3, #32
 8003ebe:	bfbc      	itt	lt
 8003ec0:	4632      	movlt	r2, r6
 8003ec2:	4616      	movlt	r6, r2
 8003ec4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003ec8:	d005      	beq.n	8003ed6 <__cvt+0x42>
 8003eca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003ece:	d100      	bne.n	8003ed2 <__cvt+0x3e>
 8003ed0:	3401      	adds	r4, #1
 8003ed2:	2102      	movs	r1, #2
 8003ed4:	e000      	b.n	8003ed8 <__cvt+0x44>
 8003ed6:	2103      	movs	r1, #3
 8003ed8:	ab03      	add	r3, sp, #12
 8003eda:	9301      	str	r3, [sp, #4]
 8003edc:	ab02      	add	r3, sp, #8
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	ec47 6b10 	vmov	d0, r6, r7
 8003ee4:	4653      	mov	r3, sl
 8003ee6:	4622      	mov	r2, r4
 8003ee8:	f001 f892 	bl	8005010 <_dtoa_r>
 8003eec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003ef0:	4605      	mov	r5, r0
 8003ef2:	d119      	bne.n	8003f28 <__cvt+0x94>
 8003ef4:	f019 0f01 	tst.w	r9, #1
 8003ef8:	d00e      	beq.n	8003f18 <__cvt+0x84>
 8003efa:	eb00 0904 	add.w	r9, r0, r4
 8003efe:	2200      	movs	r2, #0
 8003f00:	2300      	movs	r3, #0
 8003f02:	4630      	mov	r0, r6
 8003f04:	4639      	mov	r1, r7
 8003f06:	f7fc fddf 	bl	8000ac8 <__aeabi_dcmpeq>
 8003f0a:	b108      	cbz	r0, 8003f10 <__cvt+0x7c>
 8003f0c:	f8cd 900c 	str.w	r9, [sp, #12]
 8003f10:	2230      	movs	r2, #48	@ 0x30
 8003f12:	9b03      	ldr	r3, [sp, #12]
 8003f14:	454b      	cmp	r3, r9
 8003f16:	d31e      	bcc.n	8003f56 <__cvt+0xc2>
 8003f18:	9b03      	ldr	r3, [sp, #12]
 8003f1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003f1c:	1b5b      	subs	r3, r3, r5
 8003f1e:	4628      	mov	r0, r5
 8003f20:	6013      	str	r3, [r2, #0]
 8003f22:	b004      	add	sp, #16
 8003f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f28:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003f2c:	eb00 0904 	add.w	r9, r0, r4
 8003f30:	d1e5      	bne.n	8003efe <__cvt+0x6a>
 8003f32:	7803      	ldrb	r3, [r0, #0]
 8003f34:	2b30      	cmp	r3, #48	@ 0x30
 8003f36:	d10a      	bne.n	8003f4e <__cvt+0xba>
 8003f38:	2200      	movs	r2, #0
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	4630      	mov	r0, r6
 8003f3e:	4639      	mov	r1, r7
 8003f40:	f7fc fdc2 	bl	8000ac8 <__aeabi_dcmpeq>
 8003f44:	b918      	cbnz	r0, 8003f4e <__cvt+0xba>
 8003f46:	f1c4 0401 	rsb	r4, r4, #1
 8003f4a:	f8ca 4000 	str.w	r4, [sl]
 8003f4e:	f8da 3000 	ldr.w	r3, [sl]
 8003f52:	4499      	add	r9, r3
 8003f54:	e7d3      	b.n	8003efe <__cvt+0x6a>
 8003f56:	1c59      	adds	r1, r3, #1
 8003f58:	9103      	str	r1, [sp, #12]
 8003f5a:	701a      	strb	r2, [r3, #0]
 8003f5c:	e7d9      	b.n	8003f12 <__cvt+0x7e>

08003f5e <__exponent>:
 8003f5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f60:	2900      	cmp	r1, #0
 8003f62:	bfba      	itte	lt
 8003f64:	4249      	neglt	r1, r1
 8003f66:	232d      	movlt	r3, #45	@ 0x2d
 8003f68:	232b      	movge	r3, #43	@ 0x2b
 8003f6a:	2909      	cmp	r1, #9
 8003f6c:	7002      	strb	r2, [r0, #0]
 8003f6e:	7043      	strb	r3, [r0, #1]
 8003f70:	dd29      	ble.n	8003fc6 <__exponent+0x68>
 8003f72:	f10d 0307 	add.w	r3, sp, #7
 8003f76:	461d      	mov	r5, r3
 8003f78:	270a      	movs	r7, #10
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	fbb1 f6f7 	udiv	r6, r1, r7
 8003f80:	fb07 1416 	mls	r4, r7, r6, r1
 8003f84:	3430      	adds	r4, #48	@ 0x30
 8003f86:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003f8a:	460c      	mov	r4, r1
 8003f8c:	2c63      	cmp	r4, #99	@ 0x63
 8003f8e:	f103 33ff 	add.w	r3, r3, #4294967295
 8003f92:	4631      	mov	r1, r6
 8003f94:	dcf1      	bgt.n	8003f7a <__exponent+0x1c>
 8003f96:	3130      	adds	r1, #48	@ 0x30
 8003f98:	1e94      	subs	r4, r2, #2
 8003f9a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003f9e:	1c41      	adds	r1, r0, #1
 8003fa0:	4623      	mov	r3, r4
 8003fa2:	42ab      	cmp	r3, r5
 8003fa4:	d30a      	bcc.n	8003fbc <__exponent+0x5e>
 8003fa6:	f10d 0309 	add.w	r3, sp, #9
 8003faa:	1a9b      	subs	r3, r3, r2
 8003fac:	42ac      	cmp	r4, r5
 8003fae:	bf88      	it	hi
 8003fb0:	2300      	movhi	r3, #0
 8003fb2:	3302      	adds	r3, #2
 8003fb4:	4403      	add	r3, r0
 8003fb6:	1a18      	subs	r0, r3, r0
 8003fb8:	b003      	add	sp, #12
 8003fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fbc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003fc0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003fc4:	e7ed      	b.n	8003fa2 <__exponent+0x44>
 8003fc6:	2330      	movs	r3, #48	@ 0x30
 8003fc8:	3130      	adds	r1, #48	@ 0x30
 8003fca:	7083      	strb	r3, [r0, #2]
 8003fcc:	70c1      	strb	r1, [r0, #3]
 8003fce:	1d03      	adds	r3, r0, #4
 8003fd0:	e7f1      	b.n	8003fb6 <__exponent+0x58>
	...

08003fd4 <_printf_float>:
 8003fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fd8:	b08d      	sub	sp, #52	@ 0x34
 8003fda:	460c      	mov	r4, r1
 8003fdc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003fe0:	4616      	mov	r6, r2
 8003fe2:	461f      	mov	r7, r3
 8003fe4:	4605      	mov	r5, r0
 8003fe6:	f000 feef 	bl	8004dc8 <_localeconv_r>
 8003fea:	6803      	ldr	r3, [r0, #0]
 8003fec:	9304      	str	r3, [sp, #16]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7fc f93e 	bl	8000270 <strlen>
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	930a      	str	r3, [sp, #40]	@ 0x28
 8003ff8:	f8d8 3000 	ldr.w	r3, [r8]
 8003ffc:	9005      	str	r0, [sp, #20]
 8003ffe:	3307      	adds	r3, #7
 8004000:	f023 0307 	bic.w	r3, r3, #7
 8004004:	f103 0208 	add.w	r2, r3, #8
 8004008:	f894 a018 	ldrb.w	sl, [r4, #24]
 800400c:	f8d4 b000 	ldr.w	fp, [r4]
 8004010:	f8c8 2000 	str.w	r2, [r8]
 8004014:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004018:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800401c:	9307      	str	r3, [sp, #28]
 800401e:	f8cd 8018 	str.w	r8, [sp, #24]
 8004022:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004026:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800402a:	4b9c      	ldr	r3, [pc, #624]	@ (800429c <_printf_float+0x2c8>)
 800402c:	f04f 32ff 	mov.w	r2, #4294967295
 8004030:	f7fc fd7c 	bl	8000b2c <__aeabi_dcmpun>
 8004034:	bb70      	cbnz	r0, 8004094 <_printf_float+0xc0>
 8004036:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800403a:	4b98      	ldr	r3, [pc, #608]	@ (800429c <_printf_float+0x2c8>)
 800403c:	f04f 32ff 	mov.w	r2, #4294967295
 8004040:	f7fc fd56 	bl	8000af0 <__aeabi_dcmple>
 8004044:	bb30      	cbnz	r0, 8004094 <_printf_float+0xc0>
 8004046:	2200      	movs	r2, #0
 8004048:	2300      	movs	r3, #0
 800404a:	4640      	mov	r0, r8
 800404c:	4649      	mov	r1, r9
 800404e:	f7fc fd45 	bl	8000adc <__aeabi_dcmplt>
 8004052:	b110      	cbz	r0, 800405a <_printf_float+0x86>
 8004054:	232d      	movs	r3, #45	@ 0x2d
 8004056:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800405a:	4a91      	ldr	r2, [pc, #580]	@ (80042a0 <_printf_float+0x2cc>)
 800405c:	4b91      	ldr	r3, [pc, #580]	@ (80042a4 <_printf_float+0x2d0>)
 800405e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004062:	bf94      	ite	ls
 8004064:	4690      	movls	r8, r2
 8004066:	4698      	movhi	r8, r3
 8004068:	2303      	movs	r3, #3
 800406a:	6123      	str	r3, [r4, #16]
 800406c:	f02b 0304 	bic.w	r3, fp, #4
 8004070:	6023      	str	r3, [r4, #0]
 8004072:	f04f 0900 	mov.w	r9, #0
 8004076:	9700      	str	r7, [sp, #0]
 8004078:	4633      	mov	r3, r6
 800407a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800407c:	4621      	mov	r1, r4
 800407e:	4628      	mov	r0, r5
 8004080:	f000 f9d2 	bl	8004428 <_printf_common>
 8004084:	3001      	adds	r0, #1
 8004086:	f040 808d 	bne.w	80041a4 <_printf_float+0x1d0>
 800408a:	f04f 30ff 	mov.w	r0, #4294967295
 800408e:	b00d      	add	sp, #52	@ 0x34
 8004090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004094:	4642      	mov	r2, r8
 8004096:	464b      	mov	r3, r9
 8004098:	4640      	mov	r0, r8
 800409a:	4649      	mov	r1, r9
 800409c:	f7fc fd46 	bl	8000b2c <__aeabi_dcmpun>
 80040a0:	b140      	cbz	r0, 80040b4 <_printf_float+0xe0>
 80040a2:	464b      	mov	r3, r9
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	bfbc      	itt	lt
 80040a8:	232d      	movlt	r3, #45	@ 0x2d
 80040aa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80040ae:	4a7e      	ldr	r2, [pc, #504]	@ (80042a8 <_printf_float+0x2d4>)
 80040b0:	4b7e      	ldr	r3, [pc, #504]	@ (80042ac <_printf_float+0x2d8>)
 80040b2:	e7d4      	b.n	800405e <_printf_float+0x8a>
 80040b4:	6863      	ldr	r3, [r4, #4]
 80040b6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80040ba:	9206      	str	r2, [sp, #24]
 80040bc:	1c5a      	adds	r2, r3, #1
 80040be:	d13b      	bne.n	8004138 <_printf_float+0x164>
 80040c0:	2306      	movs	r3, #6
 80040c2:	6063      	str	r3, [r4, #4]
 80040c4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80040c8:	2300      	movs	r3, #0
 80040ca:	6022      	str	r2, [r4, #0]
 80040cc:	9303      	str	r3, [sp, #12]
 80040ce:	ab0a      	add	r3, sp, #40	@ 0x28
 80040d0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80040d4:	ab09      	add	r3, sp, #36	@ 0x24
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	6861      	ldr	r1, [r4, #4]
 80040da:	ec49 8b10 	vmov	d0, r8, r9
 80040de:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80040e2:	4628      	mov	r0, r5
 80040e4:	f7ff fed6 	bl	8003e94 <__cvt>
 80040e8:	9b06      	ldr	r3, [sp, #24]
 80040ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80040ec:	2b47      	cmp	r3, #71	@ 0x47
 80040ee:	4680      	mov	r8, r0
 80040f0:	d129      	bne.n	8004146 <_printf_float+0x172>
 80040f2:	1cc8      	adds	r0, r1, #3
 80040f4:	db02      	blt.n	80040fc <_printf_float+0x128>
 80040f6:	6863      	ldr	r3, [r4, #4]
 80040f8:	4299      	cmp	r1, r3
 80040fa:	dd41      	ble.n	8004180 <_printf_float+0x1ac>
 80040fc:	f1aa 0a02 	sub.w	sl, sl, #2
 8004100:	fa5f fa8a 	uxtb.w	sl, sl
 8004104:	3901      	subs	r1, #1
 8004106:	4652      	mov	r2, sl
 8004108:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800410c:	9109      	str	r1, [sp, #36]	@ 0x24
 800410e:	f7ff ff26 	bl	8003f5e <__exponent>
 8004112:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004114:	1813      	adds	r3, r2, r0
 8004116:	2a01      	cmp	r2, #1
 8004118:	4681      	mov	r9, r0
 800411a:	6123      	str	r3, [r4, #16]
 800411c:	dc02      	bgt.n	8004124 <_printf_float+0x150>
 800411e:	6822      	ldr	r2, [r4, #0]
 8004120:	07d2      	lsls	r2, r2, #31
 8004122:	d501      	bpl.n	8004128 <_printf_float+0x154>
 8004124:	3301      	adds	r3, #1
 8004126:	6123      	str	r3, [r4, #16]
 8004128:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800412c:	2b00      	cmp	r3, #0
 800412e:	d0a2      	beq.n	8004076 <_printf_float+0xa2>
 8004130:	232d      	movs	r3, #45	@ 0x2d
 8004132:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004136:	e79e      	b.n	8004076 <_printf_float+0xa2>
 8004138:	9a06      	ldr	r2, [sp, #24]
 800413a:	2a47      	cmp	r2, #71	@ 0x47
 800413c:	d1c2      	bne.n	80040c4 <_printf_float+0xf0>
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1c0      	bne.n	80040c4 <_printf_float+0xf0>
 8004142:	2301      	movs	r3, #1
 8004144:	e7bd      	b.n	80040c2 <_printf_float+0xee>
 8004146:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800414a:	d9db      	bls.n	8004104 <_printf_float+0x130>
 800414c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004150:	d118      	bne.n	8004184 <_printf_float+0x1b0>
 8004152:	2900      	cmp	r1, #0
 8004154:	6863      	ldr	r3, [r4, #4]
 8004156:	dd0b      	ble.n	8004170 <_printf_float+0x19c>
 8004158:	6121      	str	r1, [r4, #16]
 800415a:	b913      	cbnz	r3, 8004162 <_printf_float+0x18e>
 800415c:	6822      	ldr	r2, [r4, #0]
 800415e:	07d0      	lsls	r0, r2, #31
 8004160:	d502      	bpl.n	8004168 <_printf_float+0x194>
 8004162:	3301      	adds	r3, #1
 8004164:	440b      	add	r3, r1
 8004166:	6123      	str	r3, [r4, #16]
 8004168:	65a1      	str	r1, [r4, #88]	@ 0x58
 800416a:	f04f 0900 	mov.w	r9, #0
 800416e:	e7db      	b.n	8004128 <_printf_float+0x154>
 8004170:	b913      	cbnz	r3, 8004178 <_printf_float+0x1a4>
 8004172:	6822      	ldr	r2, [r4, #0]
 8004174:	07d2      	lsls	r2, r2, #31
 8004176:	d501      	bpl.n	800417c <_printf_float+0x1a8>
 8004178:	3302      	adds	r3, #2
 800417a:	e7f4      	b.n	8004166 <_printf_float+0x192>
 800417c:	2301      	movs	r3, #1
 800417e:	e7f2      	b.n	8004166 <_printf_float+0x192>
 8004180:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004184:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004186:	4299      	cmp	r1, r3
 8004188:	db05      	blt.n	8004196 <_printf_float+0x1c2>
 800418a:	6823      	ldr	r3, [r4, #0]
 800418c:	6121      	str	r1, [r4, #16]
 800418e:	07d8      	lsls	r0, r3, #31
 8004190:	d5ea      	bpl.n	8004168 <_printf_float+0x194>
 8004192:	1c4b      	adds	r3, r1, #1
 8004194:	e7e7      	b.n	8004166 <_printf_float+0x192>
 8004196:	2900      	cmp	r1, #0
 8004198:	bfd4      	ite	le
 800419a:	f1c1 0202 	rsble	r2, r1, #2
 800419e:	2201      	movgt	r2, #1
 80041a0:	4413      	add	r3, r2
 80041a2:	e7e0      	b.n	8004166 <_printf_float+0x192>
 80041a4:	6823      	ldr	r3, [r4, #0]
 80041a6:	055a      	lsls	r2, r3, #21
 80041a8:	d407      	bmi.n	80041ba <_printf_float+0x1e6>
 80041aa:	6923      	ldr	r3, [r4, #16]
 80041ac:	4642      	mov	r2, r8
 80041ae:	4631      	mov	r1, r6
 80041b0:	4628      	mov	r0, r5
 80041b2:	47b8      	blx	r7
 80041b4:	3001      	adds	r0, #1
 80041b6:	d12b      	bne.n	8004210 <_printf_float+0x23c>
 80041b8:	e767      	b.n	800408a <_printf_float+0xb6>
 80041ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80041be:	f240 80dd 	bls.w	800437c <_printf_float+0x3a8>
 80041c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80041c6:	2200      	movs	r2, #0
 80041c8:	2300      	movs	r3, #0
 80041ca:	f7fc fc7d 	bl	8000ac8 <__aeabi_dcmpeq>
 80041ce:	2800      	cmp	r0, #0
 80041d0:	d033      	beq.n	800423a <_printf_float+0x266>
 80041d2:	4a37      	ldr	r2, [pc, #220]	@ (80042b0 <_printf_float+0x2dc>)
 80041d4:	2301      	movs	r3, #1
 80041d6:	4631      	mov	r1, r6
 80041d8:	4628      	mov	r0, r5
 80041da:	47b8      	blx	r7
 80041dc:	3001      	adds	r0, #1
 80041de:	f43f af54 	beq.w	800408a <_printf_float+0xb6>
 80041e2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80041e6:	4543      	cmp	r3, r8
 80041e8:	db02      	blt.n	80041f0 <_printf_float+0x21c>
 80041ea:	6823      	ldr	r3, [r4, #0]
 80041ec:	07d8      	lsls	r0, r3, #31
 80041ee:	d50f      	bpl.n	8004210 <_printf_float+0x23c>
 80041f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80041f4:	4631      	mov	r1, r6
 80041f6:	4628      	mov	r0, r5
 80041f8:	47b8      	blx	r7
 80041fa:	3001      	adds	r0, #1
 80041fc:	f43f af45 	beq.w	800408a <_printf_float+0xb6>
 8004200:	f04f 0900 	mov.w	r9, #0
 8004204:	f108 38ff 	add.w	r8, r8, #4294967295
 8004208:	f104 0a1a 	add.w	sl, r4, #26
 800420c:	45c8      	cmp	r8, r9
 800420e:	dc09      	bgt.n	8004224 <_printf_float+0x250>
 8004210:	6823      	ldr	r3, [r4, #0]
 8004212:	079b      	lsls	r3, r3, #30
 8004214:	f100 8103 	bmi.w	800441e <_printf_float+0x44a>
 8004218:	68e0      	ldr	r0, [r4, #12]
 800421a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800421c:	4298      	cmp	r0, r3
 800421e:	bfb8      	it	lt
 8004220:	4618      	movlt	r0, r3
 8004222:	e734      	b.n	800408e <_printf_float+0xba>
 8004224:	2301      	movs	r3, #1
 8004226:	4652      	mov	r2, sl
 8004228:	4631      	mov	r1, r6
 800422a:	4628      	mov	r0, r5
 800422c:	47b8      	blx	r7
 800422e:	3001      	adds	r0, #1
 8004230:	f43f af2b 	beq.w	800408a <_printf_float+0xb6>
 8004234:	f109 0901 	add.w	r9, r9, #1
 8004238:	e7e8      	b.n	800420c <_printf_float+0x238>
 800423a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800423c:	2b00      	cmp	r3, #0
 800423e:	dc39      	bgt.n	80042b4 <_printf_float+0x2e0>
 8004240:	4a1b      	ldr	r2, [pc, #108]	@ (80042b0 <_printf_float+0x2dc>)
 8004242:	2301      	movs	r3, #1
 8004244:	4631      	mov	r1, r6
 8004246:	4628      	mov	r0, r5
 8004248:	47b8      	blx	r7
 800424a:	3001      	adds	r0, #1
 800424c:	f43f af1d 	beq.w	800408a <_printf_float+0xb6>
 8004250:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004254:	ea59 0303 	orrs.w	r3, r9, r3
 8004258:	d102      	bne.n	8004260 <_printf_float+0x28c>
 800425a:	6823      	ldr	r3, [r4, #0]
 800425c:	07d9      	lsls	r1, r3, #31
 800425e:	d5d7      	bpl.n	8004210 <_printf_float+0x23c>
 8004260:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004264:	4631      	mov	r1, r6
 8004266:	4628      	mov	r0, r5
 8004268:	47b8      	blx	r7
 800426a:	3001      	adds	r0, #1
 800426c:	f43f af0d 	beq.w	800408a <_printf_float+0xb6>
 8004270:	f04f 0a00 	mov.w	sl, #0
 8004274:	f104 0b1a 	add.w	fp, r4, #26
 8004278:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800427a:	425b      	negs	r3, r3
 800427c:	4553      	cmp	r3, sl
 800427e:	dc01      	bgt.n	8004284 <_printf_float+0x2b0>
 8004280:	464b      	mov	r3, r9
 8004282:	e793      	b.n	80041ac <_printf_float+0x1d8>
 8004284:	2301      	movs	r3, #1
 8004286:	465a      	mov	r2, fp
 8004288:	4631      	mov	r1, r6
 800428a:	4628      	mov	r0, r5
 800428c:	47b8      	blx	r7
 800428e:	3001      	adds	r0, #1
 8004290:	f43f aefb 	beq.w	800408a <_printf_float+0xb6>
 8004294:	f10a 0a01 	add.w	sl, sl, #1
 8004298:	e7ee      	b.n	8004278 <_printf_float+0x2a4>
 800429a:	bf00      	nop
 800429c:	7fefffff 	.word	0x7fefffff
 80042a0:	0800862f 	.word	0x0800862f
 80042a4:	08008633 	.word	0x08008633
 80042a8:	08008637 	.word	0x08008637
 80042ac:	0800863b 	.word	0x0800863b
 80042b0:	0800863f 	.word	0x0800863f
 80042b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80042b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80042ba:	4553      	cmp	r3, sl
 80042bc:	bfa8      	it	ge
 80042be:	4653      	movge	r3, sl
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	4699      	mov	r9, r3
 80042c4:	dc36      	bgt.n	8004334 <_printf_float+0x360>
 80042c6:	f04f 0b00 	mov.w	fp, #0
 80042ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80042ce:	f104 021a 	add.w	r2, r4, #26
 80042d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80042d4:	9306      	str	r3, [sp, #24]
 80042d6:	eba3 0309 	sub.w	r3, r3, r9
 80042da:	455b      	cmp	r3, fp
 80042dc:	dc31      	bgt.n	8004342 <_printf_float+0x36e>
 80042de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042e0:	459a      	cmp	sl, r3
 80042e2:	dc3a      	bgt.n	800435a <_printf_float+0x386>
 80042e4:	6823      	ldr	r3, [r4, #0]
 80042e6:	07da      	lsls	r2, r3, #31
 80042e8:	d437      	bmi.n	800435a <_printf_float+0x386>
 80042ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042ec:	ebaa 0903 	sub.w	r9, sl, r3
 80042f0:	9b06      	ldr	r3, [sp, #24]
 80042f2:	ebaa 0303 	sub.w	r3, sl, r3
 80042f6:	4599      	cmp	r9, r3
 80042f8:	bfa8      	it	ge
 80042fa:	4699      	movge	r9, r3
 80042fc:	f1b9 0f00 	cmp.w	r9, #0
 8004300:	dc33      	bgt.n	800436a <_printf_float+0x396>
 8004302:	f04f 0800 	mov.w	r8, #0
 8004306:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800430a:	f104 0b1a 	add.w	fp, r4, #26
 800430e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004310:	ebaa 0303 	sub.w	r3, sl, r3
 8004314:	eba3 0309 	sub.w	r3, r3, r9
 8004318:	4543      	cmp	r3, r8
 800431a:	f77f af79 	ble.w	8004210 <_printf_float+0x23c>
 800431e:	2301      	movs	r3, #1
 8004320:	465a      	mov	r2, fp
 8004322:	4631      	mov	r1, r6
 8004324:	4628      	mov	r0, r5
 8004326:	47b8      	blx	r7
 8004328:	3001      	adds	r0, #1
 800432a:	f43f aeae 	beq.w	800408a <_printf_float+0xb6>
 800432e:	f108 0801 	add.w	r8, r8, #1
 8004332:	e7ec      	b.n	800430e <_printf_float+0x33a>
 8004334:	4642      	mov	r2, r8
 8004336:	4631      	mov	r1, r6
 8004338:	4628      	mov	r0, r5
 800433a:	47b8      	blx	r7
 800433c:	3001      	adds	r0, #1
 800433e:	d1c2      	bne.n	80042c6 <_printf_float+0x2f2>
 8004340:	e6a3      	b.n	800408a <_printf_float+0xb6>
 8004342:	2301      	movs	r3, #1
 8004344:	4631      	mov	r1, r6
 8004346:	4628      	mov	r0, r5
 8004348:	9206      	str	r2, [sp, #24]
 800434a:	47b8      	blx	r7
 800434c:	3001      	adds	r0, #1
 800434e:	f43f ae9c 	beq.w	800408a <_printf_float+0xb6>
 8004352:	9a06      	ldr	r2, [sp, #24]
 8004354:	f10b 0b01 	add.w	fp, fp, #1
 8004358:	e7bb      	b.n	80042d2 <_printf_float+0x2fe>
 800435a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800435e:	4631      	mov	r1, r6
 8004360:	4628      	mov	r0, r5
 8004362:	47b8      	blx	r7
 8004364:	3001      	adds	r0, #1
 8004366:	d1c0      	bne.n	80042ea <_printf_float+0x316>
 8004368:	e68f      	b.n	800408a <_printf_float+0xb6>
 800436a:	9a06      	ldr	r2, [sp, #24]
 800436c:	464b      	mov	r3, r9
 800436e:	4442      	add	r2, r8
 8004370:	4631      	mov	r1, r6
 8004372:	4628      	mov	r0, r5
 8004374:	47b8      	blx	r7
 8004376:	3001      	adds	r0, #1
 8004378:	d1c3      	bne.n	8004302 <_printf_float+0x32e>
 800437a:	e686      	b.n	800408a <_printf_float+0xb6>
 800437c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004380:	f1ba 0f01 	cmp.w	sl, #1
 8004384:	dc01      	bgt.n	800438a <_printf_float+0x3b6>
 8004386:	07db      	lsls	r3, r3, #31
 8004388:	d536      	bpl.n	80043f8 <_printf_float+0x424>
 800438a:	2301      	movs	r3, #1
 800438c:	4642      	mov	r2, r8
 800438e:	4631      	mov	r1, r6
 8004390:	4628      	mov	r0, r5
 8004392:	47b8      	blx	r7
 8004394:	3001      	adds	r0, #1
 8004396:	f43f ae78 	beq.w	800408a <_printf_float+0xb6>
 800439a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800439e:	4631      	mov	r1, r6
 80043a0:	4628      	mov	r0, r5
 80043a2:	47b8      	blx	r7
 80043a4:	3001      	adds	r0, #1
 80043a6:	f43f ae70 	beq.w	800408a <_printf_float+0xb6>
 80043aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80043ae:	2200      	movs	r2, #0
 80043b0:	2300      	movs	r3, #0
 80043b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80043b6:	f7fc fb87 	bl	8000ac8 <__aeabi_dcmpeq>
 80043ba:	b9c0      	cbnz	r0, 80043ee <_printf_float+0x41a>
 80043bc:	4653      	mov	r3, sl
 80043be:	f108 0201 	add.w	r2, r8, #1
 80043c2:	4631      	mov	r1, r6
 80043c4:	4628      	mov	r0, r5
 80043c6:	47b8      	blx	r7
 80043c8:	3001      	adds	r0, #1
 80043ca:	d10c      	bne.n	80043e6 <_printf_float+0x412>
 80043cc:	e65d      	b.n	800408a <_printf_float+0xb6>
 80043ce:	2301      	movs	r3, #1
 80043d0:	465a      	mov	r2, fp
 80043d2:	4631      	mov	r1, r6
 80043d4:	4628      	mov	r0, r5
 80043d6:	47b8      	blx	r7
 80043d8:	3001      	adds	r0, #1
 80043da:	f43f ae56 	beq.w	800408a <_printf_float+0xb6>
 80043de:	f108 0801 	add.w	r8, r8, #1
 80043e2:	45d0      	cmp	r8, sl
 80043e4:	dbf3      	blt.n	80043ce <_printf_float+0x3fa>
 80043e6:	464b      	mov	r3, r9
 80043e8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80043ec:	e6df      	b.n	80041ae <_printf_float+0x1da>
 80043ee:	f04f 0800 	mov.w	r8, #0
 80043f2:	f104 0b1a 	add.w	fp, r4, #26
 80043f6:	e7f4      	b.n	80043e2 <_printf_float+0x40e>
 80043f8:	2301      	movs	r3, #1
 80043fa:	4642      	mov	r2, r8
 80043fc:	e7e1      	b.n	80043c2 <_printf_float+0x3ee>
 80043fe:	2301      	movs	r3, #1
 8004400:	464a      	mov	r2, r9
 8004402:	4631      	mov	r1, r6
 8004404:	4628      	mov	r0, r5
 8004406:	47b8      	blx	r7
 8004408:	3001      	adds	r0, #1
 800440a:	f43f ae3e 	beq.w	800408a <_printf_float+0xb6>
 800440e:	f108 0801 	add.w	r8, r8, #1
 8004412:	68e3      	ldr	r3, [r4, #12]
 8004414:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004416:	1a5b      	subs	r3, r3, r1
 8004418:	4543      	cmp	r3, r8
 800441a:	dcf0      	bgt.n	80043fe <_printf_float+0x42a>
 800441c:	e6fc      	b.n	8004218 <_printf_float+0x244>
 800441e:	f04f 0800 	mov.w	r8, #0
 8004422:	f104 0919 	add.w	r9, r4, #25
 8004426:	e7f4      	b.n	8004412 <_printf_float+0x43e>

08004428 <_printf_common>:
 8004428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800442c:	4616      	mov	r6, r2
 800442e:	4698      	mov	r8, r3
 8004430:	688a      	ldr	r2, [r1, #8]
 8004432:	690b      	ldr	r3, [r1, #16]
 8004434:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004438:	4293      	cmp	r3, r2
 800443a:	bfb8      	it	lt
 800443c:	4613      	movlt	r3, r2
 800443e:	6033      	str	r3, [r6, #0]
 8004440:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004444:	4607      	mov	r7, r0
 8004446:	460c      	mov	r4, r1
 8004448:	b10a      	cbz	r2, 800444e <_printf_common+0x26>
 800444a:	3301      	adds	r3, #1
 800444c:	6033      	str	r3, [r6, #0]
 800444e:	6823      	ldr	r3, [r4, #0]
 8004450:	0699      	lsls	r1, r3, #26
 8004452:	bf42      	ittt	mi
 8004454:	6833      	ldrmi	r3, [r6, #0]
 8004456:	3302      	addmi	r3, #2
 8004458:	6033      	strmi	r3, [r6, #0]
 800445a:	6825      	ldr	r5, [r4, #0]
 800445c:	f015 0506 	ands.w	r5, r5, #6
 8004460:	d106      	bne.n	8004470 <_printf_common+0x48>
 8004462:	f104 0a19 	add.w	sl, r4, #25
 8004466:	68e3      	ldr	r3, [r4, #12]
 8004468:	6832      	ldr	r2, [r6, #0]
 800446a:	1a9b      	subs	r3, r3, r2
 800446c:	42ab      	cmp	r3, r5
 800446e:	dc26      	bgt.n	80044be <_printf_common+0x96>
 8004470:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004474:	6822      	ldr	r2, [r4, #0]
 8004476:	3b00      	subs	r3, #0
 8004478:	bf18      	it	ne
 800447a:	2301      	movne	r3, #1
 800447c:	0692      	lsls	r2, r2, #26
 800447e:	d42b      	bmi.n	80044d8 <_printf_common+0xb0>
 8004480:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004484:	4641      	mov	r1, r8
 8004486:	4638      	mov	r0, r7
 8004488:	47c8      	blx	r9
 800448a:	3001      	adds	r0, #1
 800448c:	d01e      	beq.n	80044cc <_printf_common+0xa4>
 800448e:	6823      	ldr	r3, [r4, #0]
 8004490:	6922      	ldr	r2, [r4, #16]
 8004492:	f003 0306 	and.w	r3, r3, #6
 8004496:	2b04      	cmp	r3, #4
 8004498:	bf02      	ittt	eq
 800449a:	68e5      	ldreq	r5, [r4, #12]
 800449c:	6833      	ldreq	r3, [r6, #0]
 800449e:	1aed      	subeq	r5, r5, r3
 80044a0:	68a3      	ldr	r3, [r4, #8]
 80044a2:	bf0c      	ite	eq
 80044a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044a8:	2500      	movne	r5, #0
 80044aa:	4293      	cmp	r3, r2
 80044ac:	bfc4      	itt	gt
 80044ae:	1a9b      	subgt	r3, r3, r2
 80044b0:	18ed      	addgt	r5, r5, r3
 80044b2:	2600      	movs	r6, #0
 80044b4:	341a      	adds	r4, #26
 80044b6:	42b5      	cmp	r5, r6
 80044b8:	d11a      	bne.n	80044f0 <_printf_common+0xc8>
 80044ba:	2000      	movs	r0, #0
 80044bc:	e008      	b.n	80044d0 <_printf_common+0xa8>
 80044be:	2301      	movs	r3, #1
 80044c0:	4652      	mov	r2, sl
 80044c2:	4641      	mov	r1, r8
 80044c4:	4638      	mov	r0, r7
 80044c6:	47c8      	blx	r9
 80044c8:	3001      	adds	r0, #1
 80044ca:	d103      	bne.n	80044d4 <_printf_common+0xac>
 80044cc:	f04f 30ff 	mov.w	r0, #4294967295
 80044d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044d4:	3501      	adds	r5, #1
 80044d6:	e7c6      	b.n	8004466 <_printf_common+0x3e>
 80044d8:	18e1      	adds	r1, r4, r3
 80044da:	1c5a      	adds	r2, r3, #1
 80044dc:	2030      	movs	r0, #48	@ 0x30
 80044de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80044e2:	4422      	add	r2, r4
 80044e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80044e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80044ec:	3302      	adds	r3, #2
 80044ee:	e7c7      	b.n	8004480 <_printf_common+0x58>
 80044f0:	2301      	movs	r3, #1
 80044f2:	4622      	mov	r2, r4
 80044f4:	4641      	mov	r1, r8
 80044f6:	4638      	mov	r0, r7
 80044f8:	47c8      	blx	r9
 80044fa:	3001      	adds	r0, #1
 80044fc:	d0e6      	beq.n	80044cc <_printf_common+0xa4>
 80044fe:	3601      	adds	r6, #1
 8004500:	e7d9      	b.n	80044b6 <_printf_common+0x8e>
	...

08004504 <_printf_i>:
 8004504:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004508:	7e0f      	ldrb	r7, [r1, #24]
 800450a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800450c:	2f78      	cmp	r7, #120	@ 0x78
 800450e:	4691      	mov	r9, r2
 8004510:	4680      	mov	r8, r0
 8004512:	460c      	mov	r4, r1
 8004514:	469a      	mov	sl, r3
 8004516:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800451a:	d807      	bhi.n	800452c <_printf_i+0x28>
 800451c:	2f62      	cmp	r7, #98	@ 0x62
 800451e:	d80a      	bhi.n	8004536 <_printf_i+0x32>
 8004520:	2f00      	cmp	r7, #0
 8004522:	f000 80d2 	beq.w	80046ca <_printf_i+0x1c6>
 8004526:	2f58      	cmp	r7, #88	@ 0x58
 8004528:	f000 80b9 	beq.w	800469e <_printf_i+0x19a>
 800452c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004530:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004534:	e03a      	b.n	80045ac <_printf_i+0xa8>
 8004536:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800453a:	2b15      	cmp	r3, #21
 800453c:	d8f6      	bhi.n	800452c <_printf_i+0x28>
 800453e:	a101      	add	r1, pc, #4	@ (adr r1, 8004544 <_printf_i+0x40>)
 8004540:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004544:	0800459d 	.word	0x0800459d
 8004548:	080045b1 	.word	0x080045b1
 800454c:	0800452d 	.word	0x0800452d
 8004550:	0800452d 	.word	0x0800452d
 8004554:	0800452d 	.word	0x0800452d
 8004558:	0800452d 	.word	0x0800452d
 800455c:	080045b1 	.word	0x080045b1
 8004560:	0800452d 	.word	0x0800452d
 8004564:	0800452d 	.word	0x0800452d
 8004568:	0800452d 	.word	0x0800452d
 800456c:	0800452d 	.word	0x0800452d
 8004570:	080046b1 	.word	0x080046b1
 8004574:	080045db 	.word	0x080045db
 8004578:	0800466b 	.word	0x0800466b
 800457c:	0800452d 	.word	0x0800452d
 8004580:	0800452d 	.word	0x0800452d
 8004584:	080046d3 	.word	0x080046d3
 8004588:	0800452d 	.word	0x0800452d
 800458c:	080045db 	.word	0x080045db
 8004590:	0800452d 	.word	0x0800452d
 8004594:	0800452d 	.word	0x0800452d
 8004598:	08004673 	.word	0x08004673
 800459c:	6833      	ldr	r3, [r6, #0]
 800459e:	1d1a      	adds	r2, r3, #4
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	6032      	str	r2, [r6, #0]
 80045a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80045a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80045ac:	2301      	movs	r3, #1
 80045ae:	e09d      	b.n	80046ec <_printf_i+0x1e8>
 80045b0:	6833      	ldr	r3, [r6, #0]
 80045b2:	6820      	ldr	r0, [r4, #0]
 80045b4:	1d19      	adds	r1, r3, #4
 80045b6:	6031      	str	r1, [r6, #0]
 80045b8:	0606      	lsls	r6, r0, #24
 80045ba:	d501      	bpl.n	80045c0 <_printf_i+0xbc>
 80045bc:	681d      	ldr	r5, [r3, #0]
 80045be:	e003      	b.n	80045c8 <_printf_i+0xc4>
 80045c0:	0645      	lsls	r5, r0, #25
 80045c2:	d5fb      	bpl.n	80045bc <_printf_i+0xb8>
 80045c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80045c8:	2d00      	cmp	r5, #0
 80045ca:	da03      	bge.n	80045d4 <_printf_i+0xd0>
 80045cc:	232d      	movs	r3, #45	@ 0x2d
 80045ce:	426d      	negs	r5, r5
 80045d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045d4:	4859      	ldr	r0, [pc, #356]	@ (800473c <_printf_i+0x238>)
 80045d6:	230a      	movs	r3, #10
 80045d8:	e011      	b.n	80045fe <_printf_i+0xfa>
 80045da:	6821      	ldr	r1, [r4, #0]
 80045dc:	6833      	ldr	r3, [r6, #0]
 80045de:	0608      	lsls	r0, r1, #24
 80045e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80045e4:	d402      	bmi.n	80045ec <_printf_i+0xe8>
 80045e6:	0649      	lsls	r1, r1, #25
 80045e8:	bf48      	it	mi
 80045ea:	b2ad      	uxthmi	r5, r5
 80045ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80045ee:	4853      	ldr	r0, [pc, #332]	@ (800473c <_printf_i+0x238>)
 80045f0:	6033      	str	r3, [r6, #0]
 80045f2:	bf14      	ite	ne
 80045f4:	230a      	movne	r3, #10
 80045f6:	2308      	moveq	r3, #8
 80045f8:	2100      	movs	r1, #0
 80045fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80045fe:	6866      	ldr	r6, [r4, #4]
 8004600:	60a6      	str	r6, [r4, #8]
 8004602:	2e00      	cmp	r6, #0
 8004604:	bfa2      	ittt	ge
 8004606:	6821      	ldrge	r1, [r4, #0]
 8004608:	f021 0104 	bicge.w	r1, r1, #4
 800460c:	6021      	strge	r1, [r4, #0]
 800460e:	b90d      	cbnz	r5, 8004614 <_printf_i+0x110>
 8004610:	2e00      	cmp	r6, #0
 8004612:	d04b      	beq.n	80046ac <_printf_i+0x1a8>
 8004614:	4616      	mov	r6, r2
 8004616:	fbb5 f1f3 	udiv	r1, r5, r3
 800461a:	fb03 5711 	mls	r7, r3, r1, r5
 800461e:	5dc7      	ldrb	r7, [r0, r7]
 8004620:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004624:	462f      	mov	r7, r5
 8004626:	42bb      	cmp	r3, r7
 8004628:	460d      	mov	r5, r1
 800462a:	d9f4      	bls.n	8004616 <_printf_i+0x112>
 800462c:	2b08      	cmp	r3, #8
 800462e:	d10b      	bne.n	8004648 <_printf_i+0x144>
 8004630:	6823      	ldr	r3, [r4, #0]
 8004632:	07df      	lsls	r7, r3, #31
 8004634:	d508      	bpl.n	8004648 <_printf_i+0x144>
 8004636:	6923      	ldr	r3, [r4, #16]
 8004638:	6861      	ldr	r1, [r4, #4]
 800463a:	4299      	cmp	r1, r3
 800463c:	bfde      	ittt	le
 800463e:	2330      	movle	r3, #48	@ 0x30
 8004640:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004644:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004648:	1b92      	subs	r2, r2, r6
 800464a:	6122      	str	r2, [r4, #16]
 800464c:	f8cd a000 	str.w	sl, [sp]
 8004650:	464b      	mov	r3, r9
 8004652:	aa03      	add	r2, sp, #12
 8004654:	4621      	mov	r1, r4
 8004656:	4640      	mov	r0, r8
 8004658:	f7ff fee6 	bl	8004428 <_printf_common>
 800465c:	3001      	adds	r0, #1
 800465e:	d14a      	bne.n	80046f6 <_printf_i+0x1f2>
 8004660:	f04f 30ff 	mov.w	r0, #4294967295
 8004664:	b004      	add	sp, #16
 8004666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800466a:	6823      	ldr	r3, [r4, #0]
 800466c:	f043 0320 	orr.w	r3, r3, #32
 8004670:	6023      	str	r3, [r4, #0]
 8004672:	4833      	ldr	r0, [pc, #204]	@ (8004740 <_printf_i+0x23c>)
 8004674:	2778      	movs	r7, #120	@ 0x78
 8004676:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800467a:	6823      	ldr	r3, [r4, #0]
 800467c:	6831      	ldr	r1, [r6, #0]
 800467e:	061f      	lsls	r7, r3, #24
 8004680:	f851 5b04 	ldr.w	r5, [r1], #4
 8004684:	d402      	bmi.n	800468c <_printf_i+0x188>
 8004686:	065f      	lsls	r7, r3, #25
 8004688:	bf48      	it	mi
 800468a:	b2ad      	uxthmi	r5, r5
 800468c:	6031      	str	r1, [r6, #0]
 800468e:	07d9      	lsls	r1, r3, #31
 8004690:	bf44      	itt	mi
 8004692:	f043 0320 	orrmi.w	r3, r3, #32
 8004696:	6023      	strmi	r3, [r4, #0]
 8004698:	b11d      	cbz	r5, 80046a2 <_printf_i+0x19e>
 800469a:	2310      	movs	r3, #16
 800469c:	e7ac      	b.n	80045f8 <_printf_i+0xf4>
 800469e:	4827      	ldr	r0, [pc, #156]	@ (800473c <_printf_i+0x238>)
 80046a0:	e7e9      	b.n	8004676 <_printf_i+0x172>
 80046a2:	6823      	ldr	r3, [r4, #0]
 80046a4:	f023 0320 	bic.w	r3, r3, #32
 80046a8:	6023      	str	r3, [r4, #0]
 80046aa:	e7f6      	b.n	800469a <_printf_i+0x196>
 80046ac:	4616      	mov	r6, r2
 80046ae:	e7bd      	b.n	800462c <_printf_i+0x128>
 80046b0:	6833      	ldr	r3, [r6, #0]
 80046b2:	6825      	ldr	r5, [r4, #0]
 80046b4:	6961      	ldr	r1, [r4, #20]
 80046b6:	1d18      	adds	r0, r3, #4
 80046b8:	6030      	str	r0, [r6, #0]
 80046ba:	062e      	lsls	r6, r5, #24
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	d501      	bpl.n	80046c4 <_printf_i+0x1c0>
 80046c0:	6019      	str	r1, [r3, #0]
 80046c2:	e002      	b.n	80046ca <_printf_i+0x1c6>
 80046c4:	0668      	lsls	r0, r5, #25
 80046c6:	d5fb      	bpl.n	80046c0 <_printf_i+0x1bc>
 80046c8:	8019      	strh	r1, [r3, #0]
 80046ca:	2300      	movs	r3, #0
 80046cc:	6123      	str	r3, [r4, #16]
 80046ce:	4616      	mov	r6, r2
 80046d0:	e7bc      	b.n	800464c <_printf_i+0x148>
 80046d2:	6833      	ldr	r3, [r6, #0]
 80046d4:	1d1a      	adds	r2, r3, #4
 80046d6:	6032      	str	r2, [r6, #0]
 80046d8:	681e      	ldr	r6, [r3, #0]
 80046da:	6862      	ldr	r2, [r4, #4]
 80046dc:	2100      	movs	r1, #0
 80046de:	4630      	mov	r0, r6
 80046e0:	f7fb fd76 	bl	80001d0 <memchr>
 80046e4:	b108      	cbz	r0, 80046ea <_printf_i+0x1e6>
 80046e6:	1b80      	subs	r0, r0, r6
 80046e8:	6060      	str	r0, [r4, #4]
 80046ea:	6863      	ldr	r3, [r4, #4]
 80046ec:	6123      	str	r3, [r4, #16]
 80046ee:	2300      	movs	r3, #0
 80046f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046f4:	e7aa      	b.n	800464c <_printf_i+0x148>
 80046f6:	6923      	ldr	r3, [r4, #16]
 80046f8:	4632      	mov	r2, r6
 80046fa:	4649      	mov	r1, r9
 80046fc:	4640      	mov	r0, r8
 80046fe:	47d0      	blx	sl
 8004700:	3001      	adds	r0, #1
 8004702:	d0ad      	beq.n	8004660 <_printf_i+0x15c>
 8004704:	6823      	ldr	r3, [r4, #0]
 8004706:	079b      	lsls	r3, r3, #30
 8004708:	d413      	bmi.n	8004732 <_printf_i+0x22e>
 800470a:	68e0      	ldr	r0, [r4, #12]
 800470c:	9b03      	ldr	r3, [sp, #12]
 800470e:	4298      	cmp	r0, r3
 8004710:	bfb8      	it	lt
 8004712:	4618      	movlt	r0, r3
 8004714:	e7a6      	b.n	8004664 <_printf_i+0x160>
 8004716:	2301      	movs	r3, #1
 8004718:	4632      	mov	r2, r6
 800471a:	4649      	mov	r1, r9
 800471c:	4640      	mov	r0, r8
 800471e:	47d0      	blx	sl
 8004720:	3001      	adds	r0, #1
 8004722:	d09d      	beq.n	8004660 <_printf_i+0x15c>
 8004724:	3501      	adds	r5, #1
 8004726:	68e3      	ldr	r3, [r4, #12]
 8004728:	9903      	ldr	r1, [sp, #12]
 800472a:	1a5b      	subs	r3, r3, r1
 800472c:	42ab      	cmp	r3, r5
 800472e:	dcf2      	bgt.n	8004716 <_printf_i+0x212>
 8004730:	e7eb      	b.n	800470a <_printf_i+0x206>
 8004732:	2500      	movs	r5, #0
 8004734:	f104 0619 	add.w	r6, r4, #25
 8004738:	e7f5      	b.n	8004726 <_printf_i+0x222>
 800473a:	bf00      	nop
 800473c:	08008641 	.word	0x08008641
 8004740:	08008652 	.word	0x08008652

08004744 <_scanf_float>:
 8004744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004748:	b087      	sub	sp, #28
 800474a:	4617      	mov	r7, r2
 800474c:	9303      	str	r3, [sp, #12]
 800474e:	688b      	ldr	r3, [r1, #8]
 8004750:	1e5a      	subs	r2, r3, #1
 8004752:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004756:	bf81      	itttt	hi
 8004758:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800475c:	eb03 0b05 	addhi.w	fp, r3, r5
 8004760:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004764:	608b      	strhi	r3, [r1, #8]
 8004766:	680b      	ldr	r3, [r1, #0]
 8004768:	460a      	mov	r2, r1
 800476a:	f04f 0500 	mov.w	r5, #0
 800476e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8004772:	f842 3b1c 	str.w	r3, [r2], #28
 8004776:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800477a:	4680      	mov	r8, r0
 800477c:	460c      	mov	r4, r1
 800477e:	bf98      	it	ls
 8004780:	f04f 0b00 	movls.w	fp, #0
 8004784:	9201      	str	r2, [sp, #4]
 8004786:	4616      	mov	r6, r2
 8004788:	46aa      	mov	sl, r5
 800478a:	46a9      	mov	r9, r5
 800478c:	9502      	str	r5, [sp, #8]
 800478e:	68a2      	ldr	r2, [r4, #8]
 8004790:	b152      	cbz	r2, 80047a8 <_scanf_float+0x64>
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	2b4e      	cmp	r3, #78	@ 0x4e
 8004798:	d864      	bhi.n	8004864 <_scanf_float+0x120>
 800479a:	2b40      	cmp	r3, #64	@ 0x40
 800479c:	d83c      	bhi.n	8004818 <_scanf_float+0xd4>
 800479e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80047a2:	b2c8      	uxtb	r0, r1
 80047a4:	280e      	cmp	r0, #14
 80047a6:	d93a      	bls.n	800481e <_scanf_float+0xda>
 80047a8:	f1b9 0f00 	cmp.w	r9, #0
 80047ac:	d003      	beq.n	80047b6 <_scanf_float+0x72>
 80047ae:	6823      	ldr	r3, [r4, #0]
 80047b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047b4:	6023      	str	r3, [r4, #0]
 80047b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80047ba:	f1ba 0f01 	cmp.w	sl, #1
 80047be:	f200 8117 	bhi.w	80049f0 <_scanf_float+0x2ac>
 80047c2:	9b01      	ldr	r3, [sp, #4]
 80047c4:	429e      	cmp	r6, r3
 80047c6:	f200 8108 	bhi.w	80049da <_scanf_float+0x296>
 80047ca:	2001      	movs	r0, #1
 80047cc:	b007      	add	sp, #28
 80047ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047d2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80047d6:	2a0d      	cmp	r2, #13
 80047d8:	d8e6      	bhi.n	80047a8 <_scanf_float+0x64>
 80047da:	a101      	add	r1, pc, #4	@ (adr r1, 80047e0 <_scanf_float+0x9c>)
 80047dc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80047e0:	08004927 	.word	0x08004927
 80047e4:	080047a9 	.word	0x080047a9
 80047e8:	080047a9 	.word	0x080047a9
 80047ec:	080047a9 	.word	0x080047a9
 80047f0:	08004987 	.word	0x08004987
 80047f4:	0800495f 	.word	0x0800495f
 80047f8:	080047a9 	.word	0x080047a9
 80047fc:	080047a9 	.word	0x080047a9
 8004800:	08004935 	.word	0x08004935
 8004804:	080047a9 	.word	0x080047a9
 8004808:	080047a9 	.word	0x080047a9
 800480c:	080047a9 	.word	0x080047a9
 8004810:	080047a9 	.word	0x080047a9
 8004814:	080048ed 	.word	0x080048ed
 8004818:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800481c:	e7db      	b.n	80047d6 <_scanf_float+0x92>
 800481e:	290e      	cmp	r1, #14
 8004820:	d8c2      	bhi.n	80047a8 <_scanf_float+0x64>
 8004822:	a001      	add	r0, pc, #4	@ (adr r0, 8004828 <_scanf_float+0xe4>)
 8004824:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004828:	080048dd 	.word	0x080048dd
 800482c:	080047a9 	.word	0x080047a9
 8004830:	080048dd 	.word	0x080048dd
 8004834:	08004973 	.word	0x08004973
 8004838:	080047a9 	.word	0x080047a9
 800483c:	08004885 	.word	0x08004885
 8004840:	080048c3 	.word	0x080048c3
 8004844:	080048c3 	.word	0x080048c3
 8004848:	080048c3 	.word	0x080048c3
 800484c:	080048c3 	.word	0x080048c3
 8004850:	080048c3 	.word	0x080048c3
 8004854:	080048c3 	.word	0x080048c3
 8004858:	080048c3 	.word	0x080048c3
 800485c:	080048c3 	.word	0x080048c3
 8004860:	080048c3 	.word	0x080048c3
 8004864:	2b6e      	cmp	r3, #110	@ 0x6e
 8004866:	d809      	bhi.n	800487c <_scanf_float+0x138>
 8004868:	2b60      	cmp	r3, #96	@ 0x60
 800486a:	d8b2      	bhi.n	80047d2 <_scanf_float+0x8e>
 800486c:	2b54      	cmp	r3, #84	@ 0x54
 800486e:	d07b      	beq.n	8004968 <_scanf_float+0x224>
 8004870:	2b59      	cmp	r3, #89	@ 0x59
 8004872:	d199      	bne.n	80047a8 <_scanf_float+0x64>
 8004874:	2d07      	cmp	r5, #7
 8004876:	d197      	bne.n	80047a8 <_scanf_float+0x64>
 8004878:	2508      	movs	r5, #8
 800487a:	e02c      	b.n	80048d6 <_scanf_float+0x192>
 800487c:	2b74      	cmp	r3, #116	@ 0x74
 800487e:	d073      	beq.n	8004968 <_scanf_float+0x224>
 8004880:	2b79      	cmp	r3, #121	@ 0x79
 8004882:	e7f6      	b.n	8004872 <_scanf_float+0x12e>
 8004884:	6821      	ldr	r1, [r4, #0]
 8004886:	05c8      	lsls	r0, r1, #23
 8004888:	d51b      	bpl.n	80048c2 <_scanf_float+0x17e>
 800488a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800488e:	6021      	str	r1, [r4, #0]
 8004890:	f109 0901 	add.w	r9, r9, #1
 8004894:	f1bb 0f00 	cmp.w	fp, #0
 8004898:	d003      	beq.n	80048a2 <_scanf_float+0x15e>
 800489a:	3201      	adds	r2, #1
 800489c:	f10b 3bff 	add.w	fp, fp, #4294967295
 80048a0:	60a2      	str	r2, [r4, #8]
 80048a2:	68a3      	ldr	r3, [r4, #8]
 80048a4:	3b01      	subs	r3, #1
 80048a6:	60a3      	str	r3, [r4, #8]
 80048a8:	6923      	ldr	r3, [r4, #16]
 80048aa:	3301      	adds	r3, #1
 80048ac:	6123      	str	r3, [r4, #16]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	3b01      	subs	r3, #1
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	607b      	str	r3, [r7, #4]
 80048b6:	f340 8087 	ble.w	80049c8 <_scanf_float+0x284>
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	3301      	adds	r3, #1
 80048be:	603b      	str	r3, [r7, #0]
 80048c0:	e765      	b.n	800478e <_scanf_float+0x4a>
 80048c2:	eb1a 0105 	adds.w	r1, sl, r5
 80048c6:	f47f af6f 	bne.w	80047a8 <_scanf_float+0x64>
 80048ca:	6822      	ldr	r2, [r4, #0]
 80048cc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80048d0:	6022      	str	r2, [r4, #0]
 80048d2:	460d      	mov	r5, r1
 80048d4:	468a      	mov	sl, r1
 80048d6:	f806 3b01 	strb.w	r3, [r6], #1
 80048da:	e7e2      	b.n	80048a2 <_scanf_float+0x15e>
 80048dc:	6822      	ldr	r2, [r4, #0]
 80048de:	0610      	lsls	r0, r2, #24
 80048e0:	f57f af62 	bpl.w	80047a8 <_scanf_float+0x64>
 80048e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80048e8:	6022      	str	r2, [r4, #0]
 80048ea:	e7f4      	b.n	80048d6 <_scanf_float+0x192>
 80048ec:	f1ba 0f00 	cmp.w	sl, #0
 80048f0:	d10e      	bne.n	8004910 <_scanf_float+0x1cc>
 80048f2:	f1b9 0f00 	cmp.w	r9, #0
 80048f6:	d10e      	bne.n	8004916 <_scanf_float+0x1d2>
 80048f8:	6822      	ldr	r2, [r4, #0]
 80048fa:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80048fe:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004902:	d108      	bne.n	8004916 <_scanf_float+0x1d2>
 8004904:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004908:	6022      	str	r2, [r4, #0]
 800490a:	f04f 0a01 	mov.w	sl, #1
 800490e:	e7e2      	b.n	80048d6 <_scanf_float+0x192>
 8004910:	f1ba 0f02 	cmp.w	sl, #2
 8004914:	d055      	beq.n	80049c2 <_scanf_float+0x27e>
 8004916:	2d01      	cmp	r5, #1
 8004918:	d002      	beq.n	8004920 <_scanf_float+0x1dc>
 800491a:	2d04      	cmp	r5, #4
 800491c:	f47f af44 	bne.w	80047a8 <_scanf_float+0x64>
 8004920:	3501      	adds	r5, #1
 8004922:	b2ed      	uxtb	r5, r5
 8004924:	e7d7      	b.n	80048d6 <_scanf_float+0x192>
 8004926:	f1ba 0f01 	cmp.w	sl, #1
 800492a:	f47f af3d 	bne.w	80047a8 <_scanf_float+0x64>
 800492e:	f04f 0a02 	mov.w	sl, #2
 8004932:	e7d0      	b.n	80048d6 <_scanf_float+0x192>
 8004934:	b97d      	cbnz	r5, 8004956 <_scanf_float+0x212>
 8004936:	f1b9 0f00 	cmp.w	r9, #0
 800493a:	f47f af38 	bne.w	80047ae <_scanf_float+0x6a>
 800493e:	6822      	ldr	r2, [r4, #0]
 8004940:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004944:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004948:	f040 8108 	bne.w	8004b5c <_scanf_float+0x418>
 800494c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004950:	6022      	str	r2, [r4, #0]
 8004952:	2501      	movs	r5, #1
 8004954:	e7bf      	b.n	80048d6 <_scanf_float+0x192>
 8004956:	2d03      	cmp	r5, #3
 8004958:	d0e2      	beq.n	8004920 <_scanf_float+0x1dc>
 800495a:	2d05      	cmp	r5, #5
 800495c:	e7de      	b.n	800491c <_scanf_float+0x1d8>
 800495e:	2d02      	cmp	r5, #2
 8004960:	f47f af22 	bne.w	80047a8 <_scanf_float+0x64>
 8004964:	2503      	movs	r5, #3
 8004966:	e7b6      	b.n	80048d6 <_scanf_float+0x192>
 8004968:	2d06      	cmp	r5, #6
 800496a:	f47f af1d 	bne.w	80047a8 <_scanf_float+0x64>
 800496e:	2507      	movs	r5, #7
 8004970:	e7b1      	b.n	80048d6 <_scanf_float+0x192>
 8004972:	6822      	ldr	r2, [r4, #0]
 8004974:	0591      	lsls	r1, r2, #22
 8004976:	f57f af17 	bpl.w	80047a8 <_scanf_float+0x64>
 800497a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800497e:	6022      	str	r2, [r4, #0]
 8004980:	f8cd 9008 	str.w	r9, [sp, #8]
 8004984:	e7a7      	b.n	80048d6 <_scanf_float+0x192>
 8004986:	6822      	ldr	r2, [r4, #0]
 8004988:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800498c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004990:	d006      	beq.n	80049a0 <_scanf_float+0x25c>
 8004992:	0550      	lsls	r0, r2, #21
 8004994:	f57f af08 	bpl.w	80047a8 <_scanf_float+0x64>
 8004998:	f1b9 0f00 	cmp.w	r9, #0
 800499c:	f000 80de 	beq.w	8004b5c <_scanf_float+0x418>
 80049a0:	0591      	lsls	r1, r2, #22
 80049a2:	bf58      	it	pl
 80049a4:	9902      	ldrpl	r1, [sp, #8]
 80049a6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80049aa:	bf58      	it	pl
 80049ac:	eba9 0101 	subpl.w	r1, r9, r1
 80049b0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80049b4:	bf58      	it	pl
 80049b6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80049ba:	6022      	str	r2, [r4, #0]
 80049bc:	f04f 0900 	mov.w	r9, #0
 80049c0:	e789      	b.n	80048d6 <_scanf_float+0x192>
 80049c2:	f04f 0a03 	mov.w	sl, #3
 80049c6:	e786      	b.n	80048d6 <_scanf_float+0x192>
 80049c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80049cc:	4639      	mov	r1, r7
 80049ce:	4640      	mov	r0, r8
 80049d0:	4798      	blx	r3
 80049d2:	2800      	cmp	r0, #0
 80049d4:	f43f aedb 	beq.w	800478e <_scanf_float+0x4a>
 80049d8:	e6e6      	b.n	80047a8 <_scanf_float+0x64>
 80049da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80049de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80049e2:	463a      	mov	r2, r7
 80049e4:	4640      	mov	r0, r8
 80049e6:	4798      	blx	r3
 80049e8:	6923      	ldr	r3, [r4, #16]
 80049ea:	3b01      	subs	r3, #1
 80049ec:	6123      	str	r3, [r4, #16]
 80049ee:	e6e8      	b.n	80047c2 <_scanf_float+0x7e>
 80049f0:	1e6b      	subs	r3, r5, #1
 80049f2:	2b06      	cmp	r3, #6
 80049f4:	d824      	bhi.n	8004a40 <_scanf_float+0x2fc>
 80049f6:	2d02      	cmp	r5, #2
 80049f8:	d836      	bhi.n	8004a68 <_scanf_float+0x324>
 80049fa:	9b01      	ldr	r3, [sp, #4]
 80049fc:	429e      	cmp	r6, r3
 80049fe:	f67f aee4 	bls.w	80047ca <_scanf_float+0x86>
 8004a02:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004a06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004a0a:	463a      	mov	r2, r7
 8004a0c:	4640      	mov	r0, r8
 8004a0e:	4798      	blx	r3
 8004a10:	6923      	ldr	r3, [r4, #16]
 8004a12:	3b01      	subs	r3, #1
 8004a14:	6123      	str	r3, [r4, #16]
 8004a16:	e7f0      	b.n	80049fa <_scanf_float+0x2b6>
 8004a18:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004a1c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8004a20:	463a      	mov	r2, r7
 8004a22:	4640      	mov	r0, r8
 8004a24:	4798      	blx	r3
 8004a26:	6923      	ldr	r3, [r4, #16]
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	6123      	str	r3, [r4, #16]
 8004a2c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004a30:	fa5f fa8a 	uxtb.w	sl, sl
 8004a34:	f1ba 0f02 	cmp.w	sl, #2
 8004a38:	d1ee      	bne.n	8004a18 <_scanf_float+0x2d4>
 8004a3a:	3d03      	subs	r5, #3
 8004a3c:	b2ed      	uxtb	r5, r5
 8004a3e:	1b76      	subs	r6, r6, r5
 8004a40:	6823      	ldr	r3, [r4, #0]
 8004a42:	05da      	lsls	r2, r3, #23
 8004a44:	d530      	bpl.n	8004aa8 <_scanf_float+0x364>
 8004a46:	055b      	lsls	r3, r3, #21
 8004a48:	d511      	bpl.n	8004a6e <_scanf_float+0x32a>
 8004a4a:	9b01      	ldr	r3, [sp, #4]
 8004a4c:	429e      	cmp	r6, r3
 8004a4e:	f67f aebc 	bls.w	80047ca <_scanf_float+0x86>
 8004a52:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004a56:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004a5a:	463a      	mov	r2, r7
 8004a5c:	4640      	mov	r0, r8
 8004a5e:	4798      	blx	r3
 8004a60:	6923      	ldr	r3, [r4, #16]
 8004a62:	3b01      	subs	r3, #1
 8004a64:	6123      	str	r3, [r4, #16]
 8004a66:	e7f0      	b.n	8004a4a <_scanf_float+0x306>
 8004a68:	46aa      	mov	sl, r5
 8004a6a:	46b3      	mov	fp, r6
 8004a6c:	e7de      	b.n	8004a2c <_scanf_float+0x2e8>
 8004a6e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004a72:	6923      	ldr	r3, [r4, #16]
 8004a74:	2965      	cmp	r1, #101	@ 0x65
 8004a76:	f103 33ff 	add.w	r3, r3, #4294967295
 8004a7a:	f106 35ff 	add.w	r5, r6, #4294967295
 8004a7e:	6123      	str	r3, [r4, #16]
 8004a80:	d00c      	beq.n	8004a9c <_scanf_float+0x358>
 8004a82:	2945      	cmp	r1, #69	@ 0x45
 8004a84:	d00a      	beq.n	8004a9c <_scanf_float+0x358>
 8004a86:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004a8a:	463a      	mov	r2, r7
 8004a8c:	4640      	mov	r0, r8
 8004a8e:	4798      	blx	r3
 8004a90:	6923      	ldr	r3, [r4, #16]
 8004a92:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004a96:	3b01      	subs	r3, #1
 8004a98:	1eb5      	subs	r5, r6, #2
 8004a9a:	6123      	str	r3, [r4, #16]
 8004a9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004aa0:	463a      	mov	r2, r7
 8004aa2:	4640      	mov	r0, r8
 8004aa4:	4798      	blx	r3
 8004aa6:	462e      	mov	r6, r5
 8004aa8:	6822      	ldr	r2, [r4, #0]
 8004aaa:	f012 0210 	ands.w	r2, r2, #16
 8004aae:	d001      	beq.n	8004ab4 <_scanf_float+0x370>
 8004ab0:	2000      	movs	r0, #0
 8004ab2:	e68b      	b.n	80047cc <_scanf_float+0x88>
 8004ab4:	7032      	strb	r2, [r6, #0]
 8004ab6:	6823      	ldr	r3, [r4, #0]
 8004ab8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004abc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ac0:	d11c      	bne.n	8004afc <_scanf_float+0x3b8>
 8004ac2:	9b02      	ldr	r3, [sp, #8]
 8004ac4:	454b      	cmp	r3, r9
 8004ac6:	eba3 0209 	sub.w	r2, r3, r9
 8004aca:	d123      	bne.n	8004b14 <_scanf_float+0x3d0>
 8004acc:	9901      	ldr	r1, [sp, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	4640      	mov	r0, r8
 8004ad2:	f002 fc15 	bl	8007300 <_strtod_r>
 8004ad6:	9b03      	ldr	r3, [sp, #12]
 8004ad8:	6821      	ldr	r1, [r4, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f011 0f02 	tst.w	r1, #2
 8004ae0:	ec57 6b10 	vmov	r6, r7, d0
 8004ae4:	f103 0204 	add.w	r2, r3, #4
 8004ae8:	d01f      	beq.n	8004b2a <_scanf_float+0x3e6>
 8004aea:	9903      	ldr	r1, [sp, #12]
 8004aec:	600a      	str	r2, [r1, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	e9c3 6700 	strd	r6, r7, [r3]
 8004af4:	68e3      	ldr	r3, [r4, #12]
 8004af6:	3301      	adds	r3, #1
 8004af8:	60e3      	str	r3, [r4, #12]
 8004afa:	e7d9      	b.n	8004ab0 <_scanf_float+0x36c>
 8004afc:	9b04      	ldr	r3, [sp, #16]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d0e4      	beq.n	8004acc <_scanf_float+0x388>
 8004b02:	9905      	ldr	r1, [sp, #20]
 8004b04:	230a      	movs	r3, #10
 8004b06:	3101      	adds	r1, #1
 8004b08:	4640      	mov	r0, r8
 8004b0a:	f002 fc79 	bl	8007400 <_strtol_r>
 8004b0e:	9b04      	ldr	r3, [sp, #16]
 8004b10:	9e05      	ldr	r6, [sp, #20]
 8004b12:	1ac2      	subs	r2, r0, r3
 8004b14:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8004b18:	429e      	cmp	r6, r3
 8004b1a:	bf28      	it	cs
 8004b1c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004b20:	4910      	ldr	r1, [pc, #64]	@ (8004b64 <_scanf_float+0x420>)
 8004b22:	4630      	mov	r0, r6
 8004b24:	f000 f8e4 	bl	8004cf0 <siprintf>
 8004b28:	e7d0      	b.n	8004acc <_scanf_float+0x388>
 8004b2a:	f011 0f04 	tst.w	r1, #4
 8004b2e:	9903      	ldr	r1, [sp, #12]
 8004b30:	600a      	str	r2, [r1, #0]
 8004b32:	d1dc      	bne.n	8004aee <_scanf_float+0x3aa>
 8004b34:	681d      	ldr	r5, [r3, #0]
 8004b36:	4632      	mov	r2, r6
 8004b38:	463b      	mov	r3, r7
 8004b3a:	4630      	mov	r0, r6
 8004b3c:	4639      	mov	r1, r7
 8004b3e:	f7fb fff5 	bl	8000b2c <__aeabi_dcmpun>
 8004b42:	b128      	cbz	r0, 8004b50 <_scanf_float+0x40c>
 8004b44:	4808      	ldr	r0, [pc, #32]	@ (8004b68 <_scanf_float+0x424>)
 8004b46:	f000 f9b7 	bl	8004eb8 <nanf>
 8004b4a:	ed85 0a00 	vstr	s0, [r5]
 8004b4e:	e7d1      	b.n	8004af4 <_scanf_float+0x3b0>
 8004b50:	4630      	mov	r0, r6
 8004b52:	4639      	mov	r1, r7
 8004b54:	f7fc f848 	bl	8000be8 <__aeabi_d2f>
 8004b58:	6028      	str	r0, [r5, #0]
 8004b5a:	e7cb      	b.n	8004af4 <_scanf_float+0x3b0>
 8004b5c:	f04f 0900 	mov.w	r9, #0
 8004b60:	e629      	b.n	80047b6 <_scanf_float+0x72>
 8004b62:	bf00      	nop
 8004b64:	08008663 	.word	0x08008663
 8004b68:	080086a3 	.word	0x080086a3

08004b6c <std>:
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	b510      	push	{r4, lr}
 8004b70:	4604      	mov	r4, r0
 8004b72:	e9c0 3300 	strd	r3, r3, [r0]
 8004b76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b7a:	6083      	str	r3, [r0, #8]
 8004b7c:	8181      	strh	r1, [r0, #12]
 8004b7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004b80:	81c2      	strh	r2, [r0, #14]
 8004b82:	6183      	str	r3, [r0, #24]
 8004b84:	4619      	mov	r1, r3
 8004b86:	2208      	movs	r2, #8
 8004b88:	305c      	adds	r0, #92	@ 0x5c
 8004b8a:	f000 f914 	bl	8004db6 <memset>
 8004b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004bc4 <std+0x58>)
 8004b90:	6263      	str	r3, [r4, #36]	@ 0x24
 8004b92:	4b0d      	ldr	r3, [pc, #52]	@ (8004bc8 <std+0x5c>)
 8004b94:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004b96:	4b0d      	ldr	r3, [pc, #52]	@ (8004bcc <std+0x60>)
 8004b98:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8004bd0 <std+0x64>)
 8004b9c:	6323      	str	r3, [r4, #48]	@ 0x30
 8004b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8004bd4 <std+0x68>)
 8004ba0:	6224      	str	r4, [r4, #32]
 8004ba2:	429c      	cmp	r4, r3
 8004ba4:	d006      	beq.n	8004bb4 <std+0x48>
 8004ba6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004baa:	4294      	cmp	r4, r2
 8004bac:	d002      	beq.n	8004bb4 <std+0x48>
 8004bae:	33d0      	adds	r3, #208	@ 0xd0
 8004bb0:	429c      	cmp	r4, r3
 8004bb2:	d105      	bne.n	8004bc0 <std+0x54>
 8004bb4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bbc:	f000 b978 	b.w	8004eb0 <__retarget_lock_init_recursive>
 8004bc0:	bd10      	pop	{r4, pc}
 8004bc2:	bf00      	nop
 8004bc4:	08004d31 	.word	0x08004d31
 8004bc8:	08004d53 	.word	0x08004d53
 8004bcc:	08004d8b 	.word	0x08004d8b
 8004bd0:	08004daf 	.word	0x08004daf
 8004bd4:	200002ec 	.word	0x200002ec

08004bd8 <stdio_exit_handler>:
 8004bd8:	4a02      	ldr	r2, [pc, #8]	@ (8004be4 <stdio_exit_handler+0xc>)
 8004bda:	4903      	ldr	r1, [pc, #12]	@ (8004be8 <stdio_exit_handler+0x10>)
 8004bdc:	4803      	ldr	r0, [pc, #12]	@ (8004bec <stdio_exit_handler+0x14>)
 8004bde:	f000 b869 	b.w	8004cb4 <_fwalk_sglue>
 8004be2:	bf00      	nop
 8004be4:	20000010 	.word	0x20000010
 8004be8:	080077bd 	.word	0x080077bd
 8004bec:	20000020 	.word	0x20000020

08004bf0 <cleanup_stdio>:
 8004bf0:	6841      	ldr	r1, [r0, #4]
 8004bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8004c24 <cleanup_stdio+0x34>)
 8004bf4:	4299      	cmp	r1, r3
 8004bf6:	b510      	push	{r4, lr}
 8004bf8:	4604      	mov	r4, r0
 8004bfa:	d001      	beq.n	8004c00 <cleanup_stdio+0x10>
 8004bfc:	f002 fdde 	bl	80077bc <_fflush_r>
 8004c00:	68a1      	ldr	r1, [r4, #8]
 8004c02:	4b09      	ldr	r3, [pc, #36]	@ (8004c28 <cleanup_stdio+0x38>)
 8004c04:	4299      	cmp	r1, r3
 8004c06:	d002      	beq.n	8004c0e <cleanup_stdio+0x1e>
 8004c08:	4620      	mov	r0, r4
 8004c0a:	f002 fdd7 	bl	80077bc <_fflush_r>
 8004c0e:	68e1      	ldr	r1, [r4, #12]
 8004c10:	4b06      	ldr	r3, [pc, #24]	@ (8004c2c <cleanup_stdio+0x3c>)
 8004c12:	4299      	cmp	r1, r3
 8004c14:	d004      	beq.n	8004c20 <cleanup_stdio+0x30>
 8004c16:	4620      	mov	r0, r4
 8004c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c1c:	f002 bdce 	b.w	80077bc <_fflush_r>
 8004c20:	bd10      	pop	{r4, pc}
 8004c22:	bf00      	nop
 8004c24:	200002ec 	.word	0x200002ec
 8004c28:	20000354 	.word	0x20000354
 8004c2c:	200003bc 	.word	0x200003bc

08004c30 <global_stdio_init.part.0>:
 8004c30:	b510      	push	{r4, lr}
 8004c32:	4b0b      	ldr	r3, [pc, #44]	@ (8004c60 <global_stdio_init.part.0+0x30>)
 8004c34:	4c0b      	ldr	r4, [pc, #44]	@ (8004c64 <global_stdio_init.part.0+0x34>)
 8004c36:	4a0c      	ldr	r2, [pc, #48]	@ (8004c68 <global_stdio_init.part.0+0x38>)
 8004c38:	601a      	str	r2, [r3, #0]
 8004c3a:	4620      	mov	r0, r4
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	2104      	movs	r1, #4
 8004c40:	f7ff ff94 	bl	8004b6c <std>
 8004c44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004c48:	2201      	movs	r2, #1
 8004c4a:	2109      	movs	r1, #9
 8004c4c:	f7ff ff8e 	bl	8004b6c <std>
 8004c50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004c54:	2202      	movs	r2, #2
 8004c56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c5a:	2112      	movs	r1, #18
 8004c5c:	f7ff bf86 	b.w	8004b6c <std>
 8004c60:	20000424 	.word	0x20000424
 8004c64:	200002ec 	.word	0x200002ec
 8004c68:	08004bd9 	.word	0x08004bd9

08004c6c <__sfp_lock_acquire>:
 8004c6c:	4801      	ldr	r0, [pc, #4]	@ (8004c74 <__sfp_lock_acquire+0x8>)
 8004c6e:	f000 b920 	b.w	8004eb2 <__retarget_lock_acquire_recursive>
 8004c72:	bf00      	nop
 8004c74:	2000042d 	.word	0x2000042d

08004c78 <__sfp_lock_release>:
 8004c78:	4801      	ldr	r0, [pc, #4]	@ (8004c80 <__sfp_lock_release+0x8>)
 8004c7a:	f000 b91b 	b.w	8004eb4 <__retarget_lock_release_recursive>
 8004c7e:	bf00      	nop
 8004c80:	2000042d 	.word	0x2000042d

08004c84 <__sinit>:
 8004c84:	b510      	push	{r4, lr}
 8004c86:	4604      	mov	r4, r0
 8004c88:	f7ff fff0 	bl	8004c6c <__sfp_lock_acquire>
 8004c8c:	6a23      	ldr	r3, [r4, #32]
 8004c8e:	b11b      	cbz	r3, 8004c98 <__sinit+0x14>
 8004c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c94:	f7ff bff0 	b.w	8004c78 <__sfp_lock_release>
 8004c98:	4b04      	ldr	r3, [pc, #16]	@ (8004cac <__sinit+0x28>)
 8004c9a:	6223      	str	r3, [r4, #32]
 8004c9c:	4b04      	ldr	r3, [pc, #16]	@ (8004cb0 <__sinit+0x2c>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1f5      	bne.n	8004c90 <__sinit+0xc>
 8004ca4:	f7ff ffc4 	bl	8004c30 <global_stdio_init.part.0>
 8004ca8:	e7f2      	b.n	8004c90 <__sinit+0xc>
 8004caa:	bf00      	nop
 8004cac:	08004bf1 	.word	0x08004bf1
 8004cb0:	20000424 	.word	0x20000424

08004cb4 <_fwalk_sglue>:
 8004cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cb8:	4607      	mov	r7, r0
 8004cba:	4688      	mov	r8, r1
 8004cbc:	4614      	mov	r4, r2
 8004cbe:	2600      	movs	r6, #0
 8004cc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004cc4:	f1b9 0901 	subs.w	r9, r9, #1
 8004cc8:	d505      	bpl.n	8004cd6 <_fwalk_sglue+0x22>
 8004cca:	6824      	ldr	r4, [r4, #0]
 8004ccc:	2c00      	cmp	r4, #0
 8004cce:	d1f7      	bne.n	8004cc0 <_fwalk_sglue+0xc>
 8004cd0:	4630      	mov	r0, r6
 8004cd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cd6:	89ab      	ldrh	r3, [r5, #12]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d907      	bls.n	8004cec <_fwalk_sglue+0x38>
 8004cdc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	d003      	beq.n	8004cec <_fwalk_sglue+0x38>
 8004ce4:	4629      	mov	r1, r5
 8004ce6:	4638      	mov	r0, r7
 8004ce8:	47c0      	blx	r8
 8004cea:	4306      	orrs	r6, r0
 8004cec:	3568      	adds	r5, #104	@ 0x68
 8004cee:	e7e9      	b.n	8004cc4 <_fwalk_sglue+0x10>

08004cf0 <siprintf>:
 8004cf0:	b40e      	push	{r1, r2, r3}
 8004cf2:	b500      	push	{lr}
 8004cf4:	b09c      	sub	sp, #112	@ 0x70
 8004cf6:	ab1d      	add	r3, sp, #116	@ 0x74
 8004cf8:	9002      	str	r0, [sp, #8]
 8004cfa:	9006      	str	r0, [sp, #24]
 8004cfc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004d00:	4809      	ldr	r0, [pc, #36]	@ (8004d28 <siprintf+0x38>)
 8004d02:	9107      	str	r1, [sp, #28]
 8004d04:	9104      	str	r1, [sp, #16]
 8004d06:	4909      	ldr	r1, [pc, #36]	@ (8004d2c <siprintf+0x3c>)
 8004d08:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d0c:	9105      	str	r1, [sp, #20]
 8004d0e:	6800      	ldr	r0, [r0, #0]
 8004d10:	9301      	str	r3, [sp, #4]
 8004d12:	a902      	add	r1, sp, #8
 8004d14:	f002 fbd2 	bl	80074bc <_svfiprintf_r>
 8004d18:	9b02      	ldr	r3, [sp, #8]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	701a      	strb	r2, [r3, #0]
 8004d1e:	b01c      	add	sp, #112	@ 0x70
 8004d20:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d24:	b003      	add	sp, #12
 8004d26:	4770      	bx	lr
 8004d28:	2000001c 	.word	0x2000001c
 8004d2c:	ffff0208 	.word	0xffff0208

08004d30 <__sread>:
 8004d30:	b510      	push	{r4, lr}
 8004d32:	460c      	mov	r4, r1
 8004d34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d38:	f000 f86c 	bl	8004e14 <_read_r>
 8004d3c:	2800      	cmp	r0, #0
 8004d3e:	bfab      	itete	ge
 8004d40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004d42:	89a3      	ldrhlt	r3, [r4, #12]
 8004d44:	181b      	addge	r3, r3, r0
 8004d46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004d4a:	bfac      	ite	ge
 8004d4c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004d4e:	81a3      	strhlt	r3, [r4, #12]
 8004d50:	bd10      	pop	{r4, pc}

08004d52 <__swrite>:
 8004d52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d56:	461f      	mov	r7, r3
 8004d58:	898b      	ldrh	r3, [r1, #12]
 8004d5a:	05db      	lsls	r3, r3, #23
 8004d5c:	4605      	mov	r5, r0
 8004d5e:	460c      	mov	r4, r1
 8004d60:	4616      	mov	r6, r2
 8004d62:	d505      	bpl.n	8004d70 <__swrite+0x1e>
 8004d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d68:	2302      	movs	r3, #2
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f000 f840 	bl	8004df0 <_lseek_r>
 8004d70:	89a3      	ldrh	r3, [r4, #12]
 8004d72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d7a:	81a3      	strh	r3, [r4, #12]
 8004d7c:	4632      	mov	r2, r6
 8004d7e:	463b      	mov	r3, r7
 8004d80:	4628      	mov	r0, r5
 8004d82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d86:	f000 b857 	b.w	8004e38 <_write_r>

08004d8a <__sseek>:
 8004d8a:	b510      	push	{r4, lr}
 8004d8c:	460c      	mov	r4, r1
 8004d8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d92:	f000 f82d 	bl	8004df0 <_lseek_r>
 8004d96:	1c43      	adds	r3, r0, #1
 8004d98:	89a3      	ldrh	r3, [r4, #12]
 8004d9a:	bf15      	itete	ne
 8004d9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004d9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004da2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004da6:	81a3      	strheq	r3, [r4, #12]
 8004da8:	bf18      	it	ne
 8004daa:	81a3      	strhne	r3, [r4, #12]
 8004dac:	bd10      	pop	{r4, pc}

08004dae <__sclose>:
 8004dae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004db2:	f000 b80d 	b.w	8004dd0 <_close_r>

08004db6 <memset>:
 8004db6:	4402      	add	r2, r0
 8004db8:	4603      	mov	r3, r0
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d100      	bne.n	8004dc0 <memset+0xa>
 8004dbe:	4770      	bx	lr
 8004dc0:	f803 1b01 	strb.w	r1, [r3], #1
 8004dc4:	e7f9      	b.n	8004dba <memset+0x4>
	...

08004dc8 <_localeconv_r>:
 8004dc8:	4800      	ldr	r0, [pc, #0]	@ (8004dcc <_localeconv_r+0x4>)
 8004dca:	4770      	bx	lr
 8004dcc:	2000015c 	.word	0x2000015c

08004dd0 <_close_r>:
 8004dd0:	b538      	push	{r3, r4, r5, lr}
 8004dd2:	4d06      	ldr	r5, [pc, #24]	@ (8004dec <_close_r+0x1c>)
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	4604      	mov	r4, r0
 8004dd8:	4608      	mov	r0, r1
 8004dda:	602b      	str	r3, [r5, #0]
 8004ddc:	f7fc fae9 	bl	80013b2 <_close>
 8004de0:	1c43      	adds	r3, r0, #1
 8004de2:	d102      	bne.n	8004dea <_close_r+0x1a>
 8004de4:	682b      	ldr	r3, [r5, #0]
 8004de6:	b103      	cbz	r3, 8004dea <_close_r+0x1a>
 8004de8:	6023      	str	r3, [r4, #0]
 8004dea:	bd38      	pop	{r3, r4, r5, pc}
 8004dec:	20000428 	.word	0x20000428

08004df0 <_lseek_r>:
 8004df0:	b538      	push	{r3, r4, r5, lr}
 8004df2:	4d07      	ldr	r5, [pc, #28]	@ (8004e10 <_lseek_r+0x20>)
 8004df4:	4604      	mov	r4, r0
 8004df6:	4608      	mov	r0, r1
 8004df8:	4611      	mov	r1, r2
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	602a      	str	r2, [r5, #0]
 8004dfe:	461a      	mov	r2, r3
 8004e00:	f7fc fafe 	bl	8001400 <_lseek>
 8004e04:	1c43      	adds	r3, r0, #1
 8004e06:	d102      	bne.n	8004e0e <_lseek_r+0x1e>
 8004e08:	682b      	ldr	r3, [r5, #0]
 8004e0a:	b103      	cbz	r3, 8004e0e <_lseek_r+0x1e>
 8004e0c:	6023      	str	r3, [r4, #0]
 8004e0e:	bd38      	pop	{r3, r4, r5, pc}
 8004e10:	20000428 	.word	0x20000428

08004e14 <_read_r>:
 8004e14:	b538      	push	{r3, r4, r5, lr}
 8004e16:	4d07      	ldr	r5, [pc, #28]	@ (8004e34 <_read_r+0x20>)
 8004e18:	4604      	mov	r4, r0
 8004e1a:	4608      	mov	r0, r1
 8004e1c:	4611      	mov	r1, r2
 8004e1e:	2200      	movs	r2, #0
 8004e20:	602a      	str	r2, [r5, #0]
 8004e22:	461a      	mov	r2, r3
 8004e24:	f7fc fa8c 	bl	8001340 <_read>
 8004e28:	1c43      	adds	r3, r0, #1
 8004e2a:	d102      	bne.n	8004e32 <_read_r+0x1e>
 8004e2c:	682b      	ldr	r3, [r5, #0]
 8004e2e:	b103      	cbz	r3, 8004e32 <_read_r+0x1e>
 8004e30:	6023      	str	r3, [r4, #0]
 8004e32:	bd38      	pop	{r3, r4, r5, pc}
 8004e34:	20000428 	.word	0x20000428

08004e38 <_write_r>:
 8004e38:	b538      	push	{r3, r4, r5, lr}
 8004e3a:	4d07      	ldr	r5, [pc, #28]	@ (8004e58 <_write_r+0x20>)
 8004e3c:	4604      	mov	r4, r0
 8004e3e:	4608      	mov	r0, r1
 8004e40:	4611      	mov	r1, r2
 8004e42:	2200      	movs	r2, #0
 8004e44:	602a      	str	r2, [r5, #0]
 8004e46:	461a      	mov	r2, r3
 8004e48:	f7fc fa97 	bl	800137a <_write>
 8004e4c:	1c43      	adds	r3, r0, #1
 8004e4e:	d102      	bne.n	8004e56 <_write_r+0x1e>
 8004e50:	682b      	ldr	r3, [r5, #0]
 8004e52:	b103      	cbz	r3, 8004e56 <_write_r+0x1e>
 8004e54:	6023      	str	r3, [r4, #0]
 8004e56:	bd38      	pop	{r3, r4, r5, pc}
 8004e58:	20000428 	.word	0x20000428

08004e5c <__errno>:
 8004e5c:	4b01      	ldr	r3, [pc, #4]	@ (8004e64 <__errno+0x8>)
 8004e5e:	6818      	ldr	r0, [r3, #0]
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	2000001c 	.word	0x2000001c

08004e68 <__libc_init_array>:
 8004e68:	b570      	push	{r4, r5, r6, lr}
 8004e6a:	4d0d      	ldr	r5, [pc, #52]	@ (8004ea0 <__libc_init_array+0x38>)
 8004e6c:	4c0d      	ldr	r4, [pc, #52]	@ (8004ea4 <__libc_init_array+0x3c>)
 8004e6e:	1b64      	subs	r4, r4, r5
 8004e70:	10a4      	asrs	r4, r4, #2
 8004e72:	2600      	movs	r6, #0
 8004e74:	42a6      	cmp	r6, r4
 8004e76:	d109      	bne.n	8004e8c <__libc_init_array+0x24>
 8004e78:	4d0b      	ldr	r5, [pc, #44]	@ (8004ea8 <__libc_init_array+0x40>)
 8004e7a:	4c0c      	ldr	r4, [pc, #48]	@ (8004eac <__libc_init_array+0x44>)
 8004e7c:	f003 fb72 	bl	8008564 <_init>
 8004e80:	1b64      	subs	r4, r4, r5
 8004e82:	10a4      	asrs	r4, r4, #2
 8004e84:	2600      	movs	r6, #0
 8004e86:	42a6      	cmp	r6, r4
 8004e88:	d105      	bne.n	8004e96 <__libc_init_array+0x2e>
 8004e8a:	bd70      	pop	{r4, r5, r6, pc}
 8004e8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e90:	4798      	blx	r3
 8004e92:	3601      	adds	r6, #1
 8004e94:	e7ee      	b.n	8004e74 <__libc_init_array+0xc>
 8004e96:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e9a:	4798      	blx	r3
 8004e9c:	3601      	adds	r6, #1
 8004e9e:	e7f2      	b.n	8004e86 <__libc_init_array+0x1e>
 8004ea0:	08008a4c 	.word	0x08008a4c
 8004ea4:	08008a4c 	.word	0x08008a4c
 8004ea8:	08008a4c 	.word	0x08008a4c
 8004eac:	08008a50 	.word	0x08008a50

08004eb0 <__retarget_lock_init_recursive>:
 8004eb0:	4770      	bx	lr

08004eb2 <__retarget_lock_acquire_recursive>:
 8004eb2:	4770      	bx	lr

08004eb4 <__retarget_lock_release_recursive>:
 8004eb4:	4770      	bx	lr
	...

08004eb8 <nanf>:
 8004eb8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8004ec0 <nanf+0x8>
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	7fc00000 	.word	0x7fc00000

08004ec4 <__assert_func>:
 8004ec4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004ec6:	4614      	mov	r4, r2
 8004ec8:	461a      	mov	r2, r3
 8004eca:	4b09      	ldr	r3, [pc, #36]	@ (8004ef0 <__assert_func+0x2c>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4605      	mov	r5, r0
 8004ed0:	68d8      	ldr	r0, [r3, #12]
 8004ed2:	b954      	cbnz	r4, 8004eea <__assert_func+0x26>
 8004ed4:	4b07      	ldr	r3, [pc, #28]	@ (8004ef4 <__assert_func+0x30>)
 8004ed6:	461c      	mov	r4, r3
 8004ed8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004edc:	9100      	str	r1, [sp, #0]
 8004ede:	462b      	mov	r3, r5
 8004ee0:	4905      	ldr	r1, [pc, #20]	@ (8004ef8 <__assert_func+0x34>)
 8004ee2:	f002 fc93 	bl	800780c <fiprintf>
 8004ee6:	f002 fcf7 	bl	80078d8 <abort>
 8004eea:	4b04      	ldr	r3, [pc, #16]	@ (8004efc <__assert_func+0x38>)
 8004eec:	e7f4      	b.n	8004ed8 <__assert_func+0x14>
 8004eee:	bf00      	nop
 8004ef0:	2000001c 	.word	0x2000001c
 8004ef4:	080086a3 	.word	0x080086a3
 8004ef8:	08008675 	.word	0x08008675
 8004efc:	08008668 	.word	0x08008668

08004f00 <quorem>:
 8004f00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f04:	6903      	ldr	r3, [r0, #16]
 8004f06:	690c      	ldr	r4, [r1, #16]
 8004f08:	42a3      	cmp	r3, r4
 8004f0a:	4607      	mov	r7, r0
 8004f0c:	db7e      	blt.n	800500c <quorem+0x10c>
 8004f0e:	3c01      	subs	r4, #1
 8004f10:	f101 0814 	add.w	r8, r1, #20
 8004f14:	00a3      	lsls	r3, r4, #2
 8004f16:	f100 0514 	add.w	r5, r0, #20
 8004f1a:	9300      	str	r3, [sp, #0]
 8004f1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f20:	9301      	str	r3, [sp, #4]
 8004f22:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004f26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004f32:	fbb2 f6f3 	udiv	r6, r2, r3
 8004f36:	d32e      	bcc.n	8004f96 <quorem+0x96>
 8004f38:	f04f 0a00 	mov.w	sl, #0
 8004f3c:	46c4      	mov	ip, r8
 8004f3e:	46ae      	mov	lr, r5
 8004f40:	46d3      	mov	fp, sl
 8004f42:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004f46:	b298      	uxth	r0, r3
 8004f48:	fb06 a000 	mla	r0, r6, r0, sl
 8004f4c:	0c02      	lsrs	r2, r0, #16
 8004f4e:	0c1b      	lsrs	r3, r3, #16
 8004f50:	fb06 2303 	mla	r3, r6, r3, r2
 8004f54:	f8de 2000 	ldr.w	r2, [lr]
 8004f58:	b280      	uxth	r0, r0
 8004f5a:	b292      	uxth	r2, r2
 8004f5c:	1a12      	subs	r2, r2, r0
 8004f5e:	445a      	add	r2, fp
 8004f60:	f8de 0000 	ldr.w	r0, [lr]
 8004f64:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004f6e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004f72:	b292      	uxth	r2, r2
 8004f74:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004f78:	45e1      	cmp	r9, ip
 8004f7a:	f84e 2b04 	str.w	r2, [lr], #4
 8004f7e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004f82:	d2de      	bcs.n	8004f42 <quorem+0x42>
 8004f84:	9b00      	ldr	r3, [sp, #0]
 8004f86:	58eb      	ldr	r3, [r5, r3]
 8004f88:	b92b      	cbnz	r3, 8004f96 <quorem+0x96>
 8004f8a:	9b01      	ldr	r3, [sp, #4]
 8004f8c:	3b04      	subs	r3, #4
 8004f8e:	429d      	cmp	r5, r3
 8004f90:	461a      	mov	r2, r3
 8004f92:	d32f      	bcc.n	8004ff4 <quorem+0xf4>
 8004f94:	613c      	str	r4, [r7, #16]
 8004f96:	4638      	mov	r0, r7
 8004f98:	f001 f9c2 	bl	8006320 <__mcmp>
 8004f9c:	2800      	cmp	r0, #0
 8004f9e:	db25      	blt.n	8004fec <quorem+0xec>
 8004fa0:	4629      	mov	r1, r5
 8004fa2:	2000      	movs	r0, #0
 8004fa4:	f858 2b04 	ldr.w	r2, [r8], #4
 8004fa8:	f8d1 c000 	ldr.w	ip, [r1]
 8004fac:	fa1f fe82 	uxth.w	lr, r2
 8004fb0:	fa1f f38c 	uxth.w	r3, ip
 8004fb4:	eba3 030e 	sub.w	r3, r3, lr
 8004fb8:	4403      	add	r3, r0
 8004fba:	0c12      	lsrs	r2, r2, #16
 8004fbc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004fc0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004fca:	45c1      	cmp	r9, r8
 8004fcc:	f841 3b04 	str.w	r3, [r1], #4
 8004fd0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004fd4:	d2e6      	bcs.n	8004fa4 <quorem+0xa4>
 8004fd6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004fda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004fde:	b922      	cbnz	r2, 8004fea <quorem+0xea>
 8004fe0:	3b04      	subs	r3, #4
 8004fe2:	429d      	cmp	r5, r3
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	d30b      	bcc.n	8005000 <quorem+0x100>
 8004fe8:	613c      	str	r4, [r7, #16]
 8004fea:	3601      	adds	r6, #1
 8004fec:	4630      	mov	r0, r6
 8004fee:	b003      	add	sp, #12
 8004ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ff4:	6812      	ldr	r2, [r2, #0]
 8004ff6:	3b04      	subs	r3, #4
 8004ff8:	2a00      	cmp	r2, #0
 8004ffa:	d1cb      	bne.n	8004f94 <quorem+0x94>
 8004ffc:	3c01      	subs	r4, #1
 8004ffe:	e7c6      	b.n	8004f8e <quorem+0x8e>
 8005000:	6812      	ldr	r2, [r2, #0]
 8005002:	3b04      	subs	r3, #4
 8005004:	2a00      	cmp	r2, #0
 8005006:	d1ef      	bne.n	8004fe8 <quorem+0xe8>
 8005008:	3c01      	subs	r4, #1
 800500a:	e7ea      	b.n	8004fe2 <quorem+0xe2>
 800500c:	2000      	movs	r0, #0
 800500e:	e7ee      	b.n	8004fee <quorem+0xee>

08005010 <_dtoa_r>:
 8005010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005014:	69c7      	ldr	r7, [r0, #28]
 8005016:	b099      	sub	sp, #100	@ 0x64
 8005018:	ed8d 0b02 	vstr	d0, [sp, #8]
 800501c:	ec55 4b10 	vmov	r4, r5, d0
 8005020:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005022:	9109      	str	r1, [sp, #36]	@ 0x24
 8005024:	4683      	mov	fp, r0
 8005026:	920e      	str	r2, [sp, #56]	@ 0x38
 8005028:	9313      	str	r3, [sp, #76]	@ 0x4c
 800502a:	b97f      	cbnz	r7, 800504c <_dtoa_r+0x3c>
 800502c:	2010      	movs	r0, #16
 800502e:	f000 fdfd 	bl	8005c2c <malloc>
 8005032:	4602      	mov	r2, r0
 8005034:	f8cb 001c 	str.w	r0, [fp, #28]
 8005038:	b920      	cbnz	r0, 8005044 <_dtoa_r+0x34>
 800503a:	4ba7      	ldr	r3, [pc, #668]	@ (80052d8 <_dtoa_r+0x2c8>)
 800503c:	21ef      	movs	r1, #239	@ 0xef
 800503e:	48a7      	ldr	r0, [pc, #668]	@ (80052dc <_dtoa_r+0x2cc>)
 8005040:	f7ff ff40 	bl	8004ec4 <__assert_func>
 8005044:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005048:	6007      	str	r7, [r0, #0]
 800504a:	60c7      	str	r7, [r0, #12]
 800504c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005050:	6819      	ldr	r1, [r3, #0]
 8005052:	b159      	cbz	r1, 800506c <_dtoa_r+0x5c>
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	604a      	str	r2, [r1, #4]
 8005058:	2301      	movs	r3, #1
 800505a:	4093      	lsls	r3, r2
 800505c:	608b      	str	r3, [r1, #8]
 800505e:	4658      	mov	r0, fp
 8005060:	f000 feda 	bl	8005e18 <_Bfree>
 8005064:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005068:	2200      	movs	r2, #0
 800506a:	601a      	str	r2, [r3, #0]
 800506c:	1e2b      	subs	r3, r5, #0
 800506e:	bfb9      	ittee	lt
 8005070:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005074:	9303      	strlt	r3, [sp, #12]
 8005076:	2300      	movge	r3, #0
 8005078:	6033      	strge	r3, [r6, #0]
 800507a:	9f03      	ldr	r7, [sp, #12]
 800507c:	4b98      	ldr	r3, [pc, #608]	@ (80052e0 <_dtoa_r+0x2d0>)
 800507e:	bfbc      	itt	lt
 8005080:	2201      	movlt	r2, #1
 8005082:	6032      	strlt	r2, [r6, #0]
 8005084:	43bb      	bics	r3, r7
 8005086:	d112      	bne.n	80050ae <_dtoa_r+0x9e>
 8005088:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800508a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800508e:	6013      	str	r3, [r2, #0]
 8005090:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005094:	4323      	orrs	r3, r4
 8005096:	f000 854d 	beq.w	8005b34 <_dtoa_r+0xb24>
 800509a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800509c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80052f4 <_dtoa_r+0x2e4>
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f000 854f 	beq.w	8005b44 <_dtoa_r+0xb34>
 80050a6:	f10a 0303 	add.w	r3, sl, #3
 80050aa:	f000 bd49 	b.w	8005b40 <_dtoa_r+0xb30>
 80050ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 80050b2:	2200      	movs	r2, #0
 80050b4:	ec51 0b17 	vmov	r0, r1, d7
 80050b8:	2300      	movs	r3, #0
 80050ba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80050be:	f7fb fd03 	bl	8000ac8 <__aeabi_dcmpeq>
 80050c2:	4680      	mov	r8, r0
 80050c4:	b158      	cbz	r0, 80050de <_dtoa_r+0xce>
 80050c6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80050c8:	2301      	movs	r3, #1
 80050ca:	6013      	str	r3, [r2, #0]
 80050cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80050ce:	b113      	cbz	r3, 80050d6 <_dtoa_r+0xc6>
 80050d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80050d2:	4b84      	ldr	r3, [pc, #528]	@ (80052e4 <_dtoa_r+0x2d4>)
 80050d4:	6013      	str	r3, [r2, #0]
 80050d6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80052f8 <_dtoa_r+0x2e8>
 80050da:	f000 bd33 	b.w	8005b44 <_dtoa_r+0xb34>
 80050de:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80050e2:	aa16      	add	r2, sp, #88	@ 0x58
 80050e4:	a917      	add	r1, sp, #92	@ 0x5c
 80050e6:	4658      	mov	r0, fp
 80050e8:	f001 fa3a 	bl	8006560 <__d2b>
 80050ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80050f0:	4681      	mov	r9, r0
 80050f2:	2e00      	cmp	r6, #0
 80050f4:	d077      	beq.n	80051e6 <_dtoa_r+0x1d6>
 80050f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80050f8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80050fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005100:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005104:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005108:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800510c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005110:	4619      	mov	r1, r3
 8005112:	2200      	movs	r2, #0
 8005114:	4b74      	ldr	r3, [pc, #464]	@ (80052e8 <_dtoa_r+0x2d8>)
 8005116:	f7fb f8b7 	bl	8000288 <__aeabi_dsub>
 800511a:	a369      	add	r3, pc, #420	@ (adr r3, 80052c0 <_dtoa_r+0x2b0>)
 800511c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005120:	f7fb fa6a 	bl	80005f8 <__aeabi_dmul>
 8005124:	a368      	add	r3, pc, #416	@ (adr r3, 80052c8 <_dtoa_r+0x2b8>)
 8005126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512a:	f7fb f8af 	bl	800028c <__adddf3>
 800512e:	4604      	mov	r4, r0
 8005130:	4630      	mov	r0, r6
 8005132:	460d      	mov	r5, r1
 8005134:	f7fb f9f6 	bl	8000524 <__aeabi_i2d>
 8005138:	a365      	add	r3, pc, #404	@ (adr r3, 80052d0 <_dtoa_r+0x2c0>)
 800513a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513e:	f7fb fa5b 	bl	80005f8 <__aeabi_dmul>
 8005142:	4602      	mov	r2, r0
 8005144:	460b      	mov	r3, r1
 8005146:	4620      	mov	r0, r4
 8005148:	4629      	mov	r1, r5
 800514a:	f7fb f89f 	bl	800028c <__adddf3>
 800514e:	4604      	mov	r4, r0
 8005150:	460d      	mov	r5, r1
 8005152:	f7fb fd01 	bl	8000b58 <__aeabi_d2iz>
 8005156:	2200      	movs	r2, #0
 8005158:	4607      	mov	r7, r0
 800515a:	2300      	movs	r3, #0
 800515c:	4620      	mov	r0, r4
 800515e:	4629      	mov	r1, r5
 8005160:	f7fb fcbc 	bl	8000adc <__aeabi_dcmplt>
 8005164:	b140      	cbz	r0, 8005178 <_dtoa_r+0x168>
 8005166:	4638      	mov	r0, r7
 8005168:	f7fb f9dc 	bl	8000524 <__aeabi_i2d>
 800516c:	4622      	mov	r2, r4
 800516e:	462b      	mov	r3, r5
 8005170:	f7fb fcaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8005174:	b900      	cbnz	r0, 8005178 <_dtoa_r+0x168>
 8005176:	3f01      	subs	r7, #1
 8005178:	2f16      	cmp	r7, #22
 800517a:	d851      	bhi.n	8005220 <_dtoa_r+0x210>
 800517c:	4b5b      	ldr	r3, [pc, #364]	@ (80052ec <_dtoa_r+0x2dc>)
 800517e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005186:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800518a:	f7fb fca7 	bl	8000adc <__aeabi_dcmplt>
 800518e:	2800      	cmp	r0, #0
 8005190:	d048      	beq.n	8005224 <_dtoa_r+0x214>
 8005192:	3f01      	subs	r7, #1
 8005194:	2300      	movs	r3, #0
 8005196:	9312      	str	r3, [sp, #72]	@ 0x48
 8005198:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800519a:	1b9b      	subs	r3, r3, r6
 800519c:	1e5a      	subs	r2, r3, #1
 800519e:	bf44      	itt	mi
 80051a0:	f1c3 0801 	rsbmi	r8, r3, #1
 80051a4:	2300      	movmi	r3, #0
 80051a6:	9208      	str	r2, [sp, #32]
 80051a8:	bf54      	ite	pl
 80051aa:	f04f 0800 	movpl.w	r8, #0
 80051ae:	9308      	strmi	r3, [sp, #32]
 80051b0:	2f00      	cmp	r7, #0
 80051b2:	db39      	blt.n	8005228 <_dtoa_r+0x218>
 80051b4:	9b08      	ldr	r3, [sp, #32]
 80051b6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80051b8:	443b      	add	r3, r7
 80051ba:	9308      	str	r3, [sp, #32]
 80051bc:	2300      	movs	r3, #0
 80051be:	930a      	str	r3, [sp, #40]	@ 0x28
 80051c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051c2:	2b09      	cmp	r3, #9
 80051c4:	d864      	bhi.n	8005290 <_dtoa_r+0x280>
 80051c6:	2b05      	cmp	r3, #5
 80051c8:	bfc4      	itt	gt
 80051ca:	3b04      	subgt	r3, #4
 80051cc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80051ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051d0:	f1a3 0302 	sub.w	r3, r3, #2
 80051d4:	bfcc      	ite	gt
 80051d6:	2400      	movgt	r4, #0
 80051d8:	2401      	movle	r4, #1
 80051da:	2b03      	cmp	r3, #3
 80051dc:	d863      	bhi.n	80052a6 <_dtoa_r+0x296>
 80051de:	e8df f003 	tbb	[pc, r3]
 80051e2:	372a      	.short	0x372a
 80051e4:	5535      	.short	0x5535
 80051e6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80051ea:	441e      	add	r6, r3
 80051ec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80051f0:	2b20      	cmp	r3, #32
 80051f2:	bfc1      	itttt	gt
 80051f4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80051f8:	409f      	lslgt	r7, r3
 80051fa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80051fe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005202:	bfd6      	itet	le
 8005204:	f1c3 0320 	rsble	r3, r3, #32
 8005208:	ea47 0003 	orrgt.w	r0, r7, r3
 800520c:	fa04 f003 	lslle.w	r0, r4, r3
 8005210:	f7fb f978 	bl	8000504 <__aeabi_ui2d>
 8005214:	2201      	movs	r2, #1
 8005216:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800521a:	3e01      	subs	r6, #1
 800521c:	9214      	str	r2, [sp, #80]	@ 0x50
 800521e:	e777      	b.n	8005110 <_dtoa_r+0x100>
 8005220:	2301      	movs	r3, #1
 8005222:	e7b8      	b.n	8005196 <_dtoa_r+0x186>
 8005224:	9012      	str	r0, [sp, #72]	@ 0x48
 8005226:	e7b7      	b.n	8005198 <_dtoa_r+0x188>
 8005228:	427b      	negs	r3, r7
 800522a:	930a      	str	r3, [sp, #40]	@ 0x28
 800522c:	2300      	movs	r3, #0
 800522e:	eba8 0807 	sub.w	r8, r8, r7
 8005232:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005234:	e7c4      	b.n	80051c0 <_dtoa_r+0x1b0>
 8005236:	2300      	movs	r3, #0
 8005238:	930b      	str	r3, [sp, #44]	@ 0x2c
 800523a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800523c:	2b00      	cmp	r3, #0
 800523e:	dc35      	bgt.n	80052ac <_dtoa_r+0x29c>
 8005240:	2301      	movs	r3, #1
 8005242:	9300      	str	r3, [sp, #0]
 8005244:	9307      	str	r3, [sp, #28]
 8005246:	461a      	mov	r2, r3
 8005248:	920e      	str	r2, [sp, #56]	@ 0x38
 800524a:	e00b      	b.n	8005264 <_dtoa_r+0x254>
 800524c:	2301      	movs	r3, #1
 800524e:	e7f3      	b.n	8005238 <_dtoa_r+0x228>
 8005250:	2300      	movs	r3, #0
 8005252:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005254:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005256:	18fb      	adds	r3, r7, r3
 8005258:	9300      	str	r3, [sp, #0]
 800525a:	3301      	adds	r3, #1
 800525c:	2b01      	cmp	r3, #1
 800525e:	9307      	str	r3, [sp, #28]
 8005260:	bfb8      	it	lt
 8005262:	2301      	movlt	r3, #1
 8005264:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005268:	2100      	movs	r1, #0
 800526a:	2204      	movs	r2, #4
 800526c:	f102 0514 	add.w	r5, r2, #20
 8005270:	429d      	cmp	r5, r3
 8005272:	d91f      	bls.n	80052b4 <_dtoa_r+0x2a4>
 8005274:	6041      	str	r1, [r0, #4]
 8005276:	4658      	mov	r0, fp
 8005278:	f000 fd8e 	bl	8005d98 <_Balloc>
 800527c:	4682      	mov	sl, r0
 800527e:	2800      	cmp	r0, #0
 8005280:	d13c      	bne.n	80052fc <_dtoa_r+0x2ec>
 8005282:	4b1b      	ldr	r3, [pc, #108]	@ (80052f0 <_dtoa_r+0x2e0>)
 8005284:	4602      	mov	r2, r0
 8005286:	f240 11af 	movw	r1, #431	@ 0x1af
 800528a:	e6d8      	b.n	800503e <_dtoa_r+0x2e>
 800528c:	2301      	movs	r3, #1
 800528e:	e7e0      	b.n	8005252 <_dtoa_r+0x242>
 8005290:	2401      	movs	r4, #1
 8005292:	2300      	movs	r3, #0
 8005294:	9309      	str	r3, [sp, #36]	@ 0x24
 8005296:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005298:	f04f 33ff 	mov.w	r3, #4294967295
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	9307      	str	r3, [sp, #28]
 80052a0:	2200      	movs	r2, #0
 80052a2:	2312      	movs	r3, #18
 80052a4:	e7d0      	b.n	8005248 <_dtoa_r+0x238>
 80052a6:	2301      	movs	r3, #1
 80052a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80052aa:	e7f5      	b.n	8005298 <_dtoa_r+0x288>
 80052ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80052ae:	9300      	str	r3, [sp, #0]
 80052b0:	9307      	str	r3, [sp, #28]
 80052b2:	e7d7      	b.n	8005264 <_dtoa_r+0x254>
 80052b4:	3101      	adds	r1, #1
 80052b6:	0052      	lsls	r2, r2, #1
 80052b8:	e7d8      	b.n	800526c <_dtoa_r+0x25c>
 80052ba:	bf00      	nop
 80052bc:	f3af 8000 	nop.w
 80052c0:	636f4361 	.word	0x636f4361
 80052c4:	3fd287a7 	.word	0x3fd287a7
 80052c8:	8b60c8b3 	.word	0x8b60c8b3
 80052cc:	3fc68a28 	.word	0x3fc68a28
 80052d0:	509f79fb 	.word	0x509f79fb
 80052d4:	3fd34413 	.word	0x3fd34413
 80052d8:	080085c0 	.word	0x080085c0
 80052dc:	080086b1 	.word	0x080086b1
 80052e0:	7ff00000 	.word	0x7ff00000
 80052e4:	08008640 	.word	0x08008640
 80052e8:	3ff80000 	.word	0x3ff80000
 80052ec:	080087a8 	.word	0x080087a8
 80052f0:	08008709 	.word	0x08008709
 80052f4:	080086ad 	.word	0x080086ad
 80052f8:	0800863f 	.word	0x0800863f
 80052fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005300:	6018      	str	r0, [r3, #0]
 8005302:	9b07      	ldr	r3, [sp, #28]
 8005304:	2b0e      	cmp	r3, #14
 8005306:	f200 80a4 	bhi.w	8005452 <_dtoa_r+0x442>
 800530a:	2c00      	cmp	r4, #0
 800530c:	f000 80a1 	beq.w	8005452 <_dtoa_r+0x442>
 8005310:	2f00      	cmp	r7, #0
 8005312:	dd33      	ble.n	800537c <_dtoa_r+0x36c>
 8005314:	4bad      	ldr	r3, [pc, #692]	@ (80055cc <_dtoa_r+0x5bc>)
 8005316:	f007 020f 	and.w	r2, r7, #15
 800531a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800531e:	ed93 7b00 	vldr	d7, [r3]
 8005322:	05f8      	lsls	r0, r7, #23
 8005324:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005328:	ea4f 1427 	mov.w	r4, r7, asr #4
 800532c:	d516      	bpl.n	800535c <_dtoa_r+0x34c>
 800532e:	4ba8      	ldr	r3, [pc, #672]	@ (80055d0 <_dtoa_r+0x5c0>)
 8005330:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005334:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005338:	f7fb fa88 	bl	800084c <__aeabi_ddiv>
 800533c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005340:	f004 040f 	and.w	r4, r4, #15
 8005344:	2603      	movs	r6, #3
 8005346:	4da2      	ldr	r5, [pc, #648]	@ (80055d0 <_dtoa_r+0x5c0>)
 8005348:	b954      	cbnz	r4, 8005360 <_dtoa_r+0x350>
 800534a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800534e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005352:	f7fb fa7b 	bl	800084c <__aeabi_ddiv>
 8005356:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800535a:	e028      	b.n	80053ae <_dtoa_r+0x39e>
 800535c:	2602      	movs	r6, #2
 800535e:	e7f2      	b.n	8005346 <_dtoa_r+0x336>
 8005360:	07e1      	lsls	r1, r4, #31
 8005362:	d508      	bpl.n	8005376 <_dtoa_r+0x366>
 8005364:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005368:	e9d5 2300 	ldrd	r2, r3, [r5]
 800536c:	f7fb f944 	bl	80005f8 <__aeabi_dmul>
 8005370:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005374:	3601      	adds	r6, #1
 8005376:	1064      	asrs	r4, r4, #1
 8005378:	3508      	adds	r5, #8
 800537a:	e7e5      	b.n	8005348 <_dtoa_r+0x338>
 800537c:	f000 80d2 	beq.w	8005524 <_dtoa_r+0x514>
 8005380:	427c      	negs	r4, r7
 8005382:	4b92      	ldr	r3, [pc, #584]	@ (80055cc <_dtoa_r+0x5bc>)
 8005384:	4d92      	ldr	r5, [pc, #584]	@ (80055d0 <_dtoa_r+0x5c0>)
 8005386:	f004 020f 	and.w	r2, r4, #15
 800538a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800538e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005392:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005396:	f7fb f92f 	bl	80005f8 <__aeabi_dmul>
 800539a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800539e:	1124      	asrs	r4, r4, #4
 80053a0:	2300      	movs	r3, #0
 80053a2:	2602      	movs	r6, #2
 80053a4:	2c00      	cmp	r4, #0
 80053a6:	f040 80b2 	bne.w	800550e <_dtoa_r+0x4fe>
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1d3      	bne.n	8005356 <_dtoa_r+0x346>
 80053ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80053b0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f000 80b7 	beq.w	8005528 <_dtoa_r+0x518>
 80053ba:	4b86      	ldr	r3, [pc, #536]	@ (80055d4 <_dtoa_r+0x5c4>)
 80053bc:	2200      	movs	r2, #0
 80053be:	4620      	mov	r0, r4
 80053c0:	4629      	mov	r1, r5
 80053c2:	f7fb fb8b 	bl	8000adc <__aeabi_dcmplt>
 80053c6:	2800      	cmp	r0, #0
 80053c8:	f000 80ae 	beq.w	8005528 <_dtoa_r+0x518>
 80053cc:	9b07      	ldr	r3, [sp, #28]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f000 80aa 	beq.w	8005528 <_dtoa_r+0x518>
 80053d4:	9b00      	ldr	r3, [sp, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	dd37      	ble.n	800544a <_dtoa_r+0x43a>
 80053da:	1e7b      	subs	r3, r7, #1
 80053dc:	9304      	str	r3, [sp, #16]
 80053de:	4620      	mov	r0, r4
 80053e0:	4b7d      	ldr	r3, [pc, #500]	@ (80055d8 <_dtoa_r+0x5c8>)
 80053e2:	2200      	movs	r2, #0
 80053e4:	4629      	mov	r1, r5
 80053e6:	f7fb f907 	bl	80005f8 <__aeabi_dmul>
 80053ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053ee:	9c00      	ldr	r4, [sp, #0]
 80053f0:	3601      	adds	r6, #1
 80053f2:	4630      	mov	r0, r6
 80053f4:	f7fb f896 	bl	8000524 <__aeabi_i2d>
 80053f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053fc:	f7fb f8fc 	bl	80005f8 <__aeabi_dmul>
 8005400:	4b76      	ldr	r3, [pc, #472]	@ (80055dc <_dtoa_r+0x5cc>)
 8005402:	2200      	movs	r2, #0
 8005404:	f7fa ff42 	bl	800028c <__adddf3>
 8005408:	4605      	mov	r5, r0
 800540a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800540e:	2c00      	cmp	r4, #0
 8005410:	f040 808d 	bne.w	800552e <_dtoa_r+0x51e>
 8005414:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005418:	4b71      	ldr	r3, [pc, #452]	@ (80055e0 <_dtoa_r+0x5d0>)
 800541a:	2200      	movs	r2, #0
 800541c:	f7fa ff34 	bl	8000288 <__aeabi_dsub>
 8005420:	4602      	mov	r2, r0
 8005422:	460b      	mov	r3, r1
 8005424:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005428:	462a      	mov	r2, r5
 800542a:	4633      	mov	r3, r6
 800542c:	f7fb fb74 	bl	8000b18 <__aeabi_dcmpgt>
 8005430:	2800      	cmp	r0, #0
 8005432:	f040 828b 	bne.w	800594c <_dtoa_r+0x93c>
 8005436:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800543a:	462a      	mov	r2, r5
 800543c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005440:	f7fb fb4c 	bl	8000adc <__aeabi_dcmplt>
 8005444:	2800      	cmp	r0, #0
 8005446:	f040 8128 	bne.w	800569a <_dtoa_r+0x68a>
 800544a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800544e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005452:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005454:	2b00      	cmp	r3, #0
 8005456:	f2c0 815a 	blt.w	800570e <_dtoa_r+0x6fe>
 800545a:	2f0e      	cmp	r7, #14
 800545c:	f300 8157 	bgt.w	800570e <_dtoa_r+0x6fe>
 8005460:	4b5a      	ldr	r3, [pc, #360]	@ (80055cc <_dtoa_r+0x5bc>)
 8005462:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005466:	ed93 7b00 	vldr	d7, [r3]
 800546a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800546c:	2b00      	cmp	r3, #0
 800546e:	ed8d 7b00 	vstr	d7, [sp]
 8005472:	da03      	bge.n	800547c <_dtoa_r+0x46c>
 8005474:	9b07      	ldr	r3, [sp, #28]
 8005476:	2b00      	cmp	r3, #0
 8005478:	f340 8101 	ble.w	800567e <_dtoa_r+0x66e>
 800547c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005480:	4656      	mov	r6, sl
 8005482:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005486:	4620      	mov	r0, r4
 8005488:	4629      	mov	r1, r5
 800548a:	f7fb f9df 	bl	800084c <__aeabi_ddiv>
 800548e:	f7fb fb63 	bl	8000b58 <__aeabi_d2iz>
 8005492:	4680      	mov	r8, r0
 8005494:	f7fb f846 	bl	8000524 <__aeabi_i2d>
 8005498:	e9dd 2300 	ldrd	r2, r3, [sp]
 800549c:	f7fb f8ac 	bl	80005f8 <__aeabi_dmul>
 80054a0:	4602      	mov	r2, r0
 80054a2:	460b      	mov	r3, r1
 80054a4:	4620      	mov	r0, r4
 80054a6:	4629      	mov	r1, r5
 80054a8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80054ac:	f7fa feec 	bl	8000288 <__aeabi_dsub>
 80054b0:	f806 4b01 	strb.w	r4, [r6], #1
 80054b4:	9d07      	ldr	r5, [sp, #28]
 80054b6:	eba6 040a 	sub.w	r4, r6, sl
 80054ba:	42a5      	cmp	r5, r4
 80054bc:	4602      	mov	r2, r0
 80054be:	460b      	mov	r3, r1
 80054c0:	f040 8117 	bne.w	80056f2 <_dtoa_r+0x6e2>
 80054c4:	f7fa fee2 	bl	800028c <__adddf3>
 80054c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80054cc:	4604      	mov	r4, r0
 80054ce:	460d      	mov	r5, r1
 80054d0:	f7fb fb22 	bl	8000b18 <__aeabi_dcmpgt>
 80054d4:	2800      	cmp	r0, #0
 80054d6:	f040 80f9 	bne.w	80056cc <_dtoa_r+0x6bc>
 80054da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80054de:	4620      	mov	r0, r4
 80054e0:	4629      	mov	r1, r5
 80054e2:	f7fb faf1 	bl	8000ac8 <__aeabi_dcmpeq>
 80054e6:	b118      	cbz	r0, 80054f0 <_dtoa_r+0x4e0>
 80054e8:	f018 0f01 	tst.w	r8, #1
 80054ec:	f040 80ee 	bne.w	80056cc <_dtoa_r+0x6bc>
 80054f0:	4649      	mov	r1, r9
 80054f2:	4658      	mov	r0, fp
 80054f4:	f000 fc90 	bl	8005e18 <_Bfree>
 80054f8:	2300      	movs	r3, #0
 80054fa:	7033      	strb	r3, [r6, #0]
 80054fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80054fe:	3701      	adds	r7, #1
 8005500:	601f      	str	r7, [r3, #0]
 8005502:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005504:	2b00      	cmp	r3, #0
 8005506:	f000 831d 	beq.w	8005b44 <_dtoa_r+0xb34>
 800550a:	601e      	str	r6, [r3, #0]
 800550c:	e31a      	b.n	8005b44 <_dtoa_r+0xb34>
 800550e:	07e2      	lsls	r2, r4, #31
 8005510:	d505      	bpl.n	800551e <_dtoa_r+0x50e>
 8005512:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005516:	f7fb f86f 	bl	80005f8 <__aeabi_dmul>
 800551a:	3601      	adds	r6, #1
 800551c:	2301      	movs	r3, #1
 800551e:	1064      	asrs	r4, r4, #1
 8005520:	3508      	adds	r5, #8
 8005522:	e73f      	b.n	80053a4 <_dtoa_r+0x394>
 8005524:	2602      	movs	r6, #2
 8005526:	e742      	b.n	80053ae <_dtoa_r+0x39e>
 8005528:	9c07      	ldr	r4, [sp, #28]
 800552a:	9704      	str	r7, [sp, #16]
 800552c:	e761      	b.n	80053f2 <_dtoa_r+0x3e2>
 800552e:	4b27      	ldr	r3, [pc, #156]	@ (80055cc <_dtoa_r+0x5bc>)
 8005530:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005532:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005536:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800553a:	4454      	add	r4, sl
 800553c:	2900      	cmp	r1, #0
 800553e:	d053      	beq.n	80055e8 <_dtoa_r+0x5d8>
 8005540:	4928      	ldr	r1, [pc, #160]	@ (80055e4 <_dtoa_r+0x5d4>)
 8005542:	2000      	movs	r0, #0
 8005544:	f7fb f982 	bl	800084c <__aeabi_ddiv>
 8005548:	4633      	mov	r3, r6
 800554a:	462a      	mov	r2, r5
 800554c:	f7fa fe9c 	bl	8000288 <__aeabi_dsub>
 8005550:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005554:	4656      	mov	r6, sl
 8005556:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800555a:	f7fb fafd 	bl	8000b58 <__aeabi_d2iz>
 800555e:	4605      	mov	r5, r0
 8005560:	f7fa ffe0 	bl	8000524 <__aeabi_i2d>
 8005564:	4602      	mov	r2, r0
 8005566:	460b      	mov	r3, r1
 8005568:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800556c:	f7fa fe8c 	bl	8000288 <__aeabi_dsub>
 8005570:	3530      	adds	r5, #48	@ 0x30
 8005572:	4602      	mov	r2, r0
 8005574:	460b      	mov	r3, r1
 8005576:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800557a:	f806 5b01 	strb.w	r5, [r6], #1
 800557e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005582:	f7fb faab 	bl	8000adc <__aeabi_dcmplt>
 8005586:	2800      	cmp	r0, #0
 8005588:	d171      	bne.n	800566e <_dtoa_r+0x65e>
 800558a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800558e:	4911      	ldr	r1, [pc, #68]	@ (80055d4 <_dtoa_r+0x5c4>)
 8005590:	2000      	movs	r0, #0
 8005592:	f7fa fe79 	bl	8000288 <__aeabi_dsub>
 8005596:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800559a:	f7fb fa9f 	bl	8000adc <__aeabi_dcmplt>
 800559e:	2800      	cmp	r0, #0
 80055a0:	f040 8095 	bne.w	80056ce <_dtoa_r+0x6be>
 80055a4:	42a6      	cmp	r6, r4
 80055a6:	f43f af50 	beq.w	800544a <_dtoa_r+0x43a>
 80055aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80055ae:	4b0a      	ldr	r3, [pc, #40]	@ (80055d8 <_dtoa_r+0x5c8>)
 80055b0:	2200      	movs	r2, #0
 80055b2:	f7fb f821 	bl	80005f8 <__aeabi_dmul>
 80055b6:	4b08      	ldr	r3, [pc, #32]	@ (80055d8 <_dtoa_r+0x5c8>)
 80055b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80055bc:	2200      	movs	r2, #0
 80055be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055c2:	f7fb f819 	bl	80005f8 <__aeabi_dmul>
 80055c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055ca:	e7c4      	b.n	8005556 <_dtoa_r+0x546>
 80055cc:	080087a8 	.word	0x080087a8
 80055d0:	08008780 	.word	0x08008780
 80055d4:	3ff00000 	.word	0x3ff00000
 80055d8:	40240000 	.word	0x40240000
 80055dc:	401c0000 	.word	0x401c0000
 80055e0:	40140000 	.word	0x40140000
 80055e4:	3fe00000 	.word	0x3fe00000
 80055e8:	4631      	mov	r1, r6
 80055ea:	4628      	mov	r0, r5
 80055ec:	f7fb f804 	bl	80005f8 <__aeabi_dmul>
 80055f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80055f4:	9415      	str	r4, [sp, #84]	@ 0x54
 80055f6:	4656      	mov	r6, sl
 80055f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055fc:	f7fb faac 	bl	8000b58 <__aeabi_d2iz>
 8005600:	4605      	mov	r5, r0
 8005602:	f7fa ff8f 	bl	8000524 <__aeabi_i2d>
 8005606:	4602      	mov	r2, r0
 8005608:	460b      	mov	r3, r1
 800560a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800560e:	f7fa fe3b 	bl	8000288 <__aeabi_dsub>
 8005612:	3530      	adds	r5, #48	@ 0x30
 8005614:	f806 5b01 	strb.w	r5, [r6], #1
 8005618:	4602      	mov	r2, r0
 800561a:	460b      	mov	r3, r1
 800561c:	42a6      	cmp	r6, r4
 800561e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005622:	f04f 0200 	mov.w	r2, #0
 8005626:	d124      	bne.n	8005672 <_dtoa_r+0x662>
 8005628:	4bac      	ldr	r3, [pc, #688]	@ (80058dc <_dtoa_r+0x8cc>)
 800562a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800562e:	f7fa fe2d 	bl	800028c <__adddf3>
 8005632:	4602      	mov	r2, r0
 8005634:	460b      	mov	r3, r1
 8005636:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800563a:	f7fb fa6d 	bl	8000b18 <__aeabi_dcmpgt>
 800563e:	2800      	cmp	r0, #0
 8005640:	d145      	bne.n	80056ce <_dtoa_r+0x6be>
 8005642:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005646:	49a5      	ldr	r1, [pc, #660]	@ (80058dc <_dtoa_r+0x8cc>)
 8005648:	2000      	movs	r0, #0
 800564a:	f7fa fe1d 	bl	8000288 <__aeabi_dsub>
 800564e:	4602      	mov	r2, r0
 8005650:	460b      	mov	r3, r1
 8005652:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005656:	f7fb fa41 	bl	8000adc <__aeabi_dcmplt>
 800565a:	2800      	cmp	r0, #0
 800565c:	f43f aef5 	beq.w	800544a <_dtoa_r+0x43a>
 8005660:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005662:	1e73      	subs	r3, r6, #1
 8005664:	9315      	str	r3, [sp, #84]	@ 0x54
 8005666:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800566a:	2b30      	cmp	r3, #48	@ 0x30
 800566c:	d0f8      	beq.n	8005660 <_dtoa_r+0x650>
 800566e:	9f04      	ldr	r7, [sp, #16]
 8005670:	e73e      	b.n	80054f0 <_dtoa_r+0x4e0>
 8005672:	4b9b      	ldr	r3, [pc, #620]	@ (80058e0 <_dtoa_r+0x8d0>)
 8005674:	f7fa ffc0 	bl	80005f8 <__aeabi_dmul>
 8005678:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800567c:	e7bc      	b.n	80055f8 <_dtoa_r+0x5e8>
 800567e:	d10c      	bne.n	800569a <_dtoa_r+0x68a>
 8005680:	4b98      	ldr	r3, [pc, #608]	@ (80058e4 <_dtoa_r+0x8d4>)
 8005682:	2200      	movs	r2, #0
 8005684:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005688:	f7fa ffb6 	bl	80005f8 <__aeabi_dmul>
 800568c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005690:	f7fb fa38 	bl	8000b04 <__aeabi_dcmpge>
 8005694:	2800      	cmp	r0, #0
 8005696:	f000 8157 	beq.w	8005948 <_dtoa_r+0x938>
 800569a:	2400      	movs	r4, #0
 800569c:	4625      	mov	r5, r4
 800569e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80056a0:	43db      	mvns	r3, r3
 80056a2:	9304      	str	r3, [sp, #16]
 80056a4:	4656      	mov	r6, sl
 80056a6:	2700      	movs	r7, #0
 80056a8:	4621      	mov	r1, r4
 80056aa:	4658      	mov	r0, fp
 80056ac:	f000 fbb4 	bl	8005e18 <_Bfree>
 80056b0:	2d00      	cmp	r5, #0
 80056b2:	d0dc      	beq.n	800566e <_dtoa_r+0x65e>
 80056b4:	b12f      	cbz	r7, 80056c2 <_dtoa_r+0x6b2>
 80056b6:	42af      	cmp	r7, r5
 80056b8:	d003      	beq.n	80056c2 <_dtoa_r+0x6b2>
 80056ba:	4639      	mov	r1, r7
 80056bc:	4658      	mov	r0, fp
 80056be:	f000 fbab 	bl	8005e18 <_Bfree>
 80056c2:	4629      	mov	r1, r5
 80056c4:	4658      	mov	r0, fp
 80056c6:	f000 fba7 	bl	8005e18 <_Bfree>
 80056ca:	e7d0      	b.n	800566e <_dtoa_r+0x65e>
 80056cc:	9704      	str	r7, [sp, #16]
 80056ce:	4633      	mov	r3, r6
 80056d0:	461e      	mov	r6, r3
 80056d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80056d6:	2a39      	cmp	r2, #57	@ 0x39
 80056d8:	d107      	bne.n	80056ea <_dtoa_r+0x6da>
 80056da:	459a      	cmp	sl, r3
 80056dc:	d1f8      	bne.n	80056d0 <_dtoa_r+0x6c0>
 80056de:	9a04      	ldr	r2, [sp, #16]
 80056e0:	3201      	adds	r2, #1
 80056e2:	9204      	str	r2, [sp, #16]
 80056e4:	2230      	movs	r2, #48	@ 0x30
 80056e6:	f88a 2000 	strb.w	r2, [sl]
 80056ea:	781a      	ldrb	r2, [r3, #0]
 80056ec:	3201      	adds	r2, #1
 80056ee:	701a      	strb	r2, [r3, #0]
 80056f0:	e7bd      	b.n	800566e <_dtoa_r+0x65e>
 80056f2:	4b7b      	ldr	r3, [pc, #492]	@ (80058e0 <_dtoa_r+0x8d0>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	f7fa ff7f 	bl	80005f8 <__aeabi_dmul>
 80056fa:	2200      	movs	r2, #0
 80056fc:	2300      	movs	r3, #0
 80056fe:	4604      	mov	r4, r0
 8005700:	460d      	mov	r5, r1
 8005702:	f7fb f9e1 	bl	8000ac8 <__aeabi_dcmpeq>
 8005706:	2800      	cmp	r0, #0
 8005708:	f43f aebb 	beq.w	8005482 <_dtoa_r+0x472>
 800570c:	e6f0      	b.n	80054f0 <_dtoa_r+0x4e0>
 800570e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005710:	2a00      	cmp	r2, #0
 8005712:	f000 80db 	beq.w	80058cc <_dtoa_r+0x8bc>
 8005716:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005718:	2a01      	cmp	r2, #1
 800571a:	f300 80bf 	bgt.w	800589c <_dtoa_r+0x88c>
 800571e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005720:	2a00      	cmp	r2, #0
 8005722:	f000 80b7 	beq.w	8005894 <_dtoa_r+0x884>
 8005726:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800572a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800572c:	4646      	mov	r6, r8
 800572e:	9a08      	ldr	r2, [sp, #32]
 8005730:	2101      	movs	r1, #1
 8005732:	441a      	add	r2, r3
 8005734:	4658      	mov	r0, fp
 8005736:	4498      	add	r8, r3
 8005738:	9208      	str	r2, [sp, #32]
 800573a:	f000 fc6b 	bl	8006014 <__i2b>
 800573e:	4605      	mov	r5, r0
 8005740:	b15e      	cbz	r6, 800575a <_dtoa_r+0x74a>
 8005742:	9b08      	ldr	r3, [sp, #32]
 8005744:	2b00      	cmp	r3, #0
 8005746:	dd08      	ble.n	800575a <_dtoa_r+0x74a>
 8005748:	42b3      	cmp	r3, r6
 800574a:	9a08      	ldr	r2, [sp, #32]
 800574c:	bfa8      	it	ge
 800574e:	4633      	movge	r3, r6
 8005750:	eba8 0803 	sub.w	r8, r8, r3
 8005754:	1af6      	subs	r6, r6, r3
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	9308      	str	r3, [sp, #32]
 800575a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800575c:	b1f3      	cbz	r3, 800579c <_dtoa_r+0x78c>
 800575e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005760:	2b00      	cmp	r3, #0
 8005762:	f000 80b7 	beq.w	80058d4 <_dtoa_r+0x8c4>
 8005766:	b18c      	cbz	r4, 800578c <_dtoa_r+0x77c>
 8005768:	4629      	mov	r1, r5
 800576a:	4622      	mov	r2, r4
 800576c:	4658      	mov	r0, fp
 800576e:	f000 fd11 	bl	8006194 <__pow5mult>
 8005772:	464a      	mov	r2, r9
 8005774:	4601      	mov	r1, r0
 8005776:	4605      	mov	r5, r0
 8005778:	4658      	mov	r0, fp
 800577a:	f000 fc61 	bl	8006040 <__multiply>
 800577e:	4649      	mov	r1, r9
 8005780:	9004      	str	r0, [sp, #16]
 8005782:	4658      	mov	r0, fp
 8005784:	f000 fb48 	bl	8005e18 <_Bfree>
 8005788:	9b04      	ldr	r3, [sp, #16]
 800578a:	4699      	mov	r9, r3
 800578c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800578e:	1b1a      	subs	r2, r3, r4
 8005790:	d004      	beq.n	800579c <_dtoa_r+0x78c>
 8005792:	4649      	mov	r1, r9
 8005794:	4658      	mov	r0, fp
 8005796:	f000 fcfd 	bl	8006194 <__pow5mult>
 800579a:	4681      	mov	r9, r0
 800579c:	2101      	movs	r1, #1
 800579e:	4658      	mov	r0, fp
 80057a0:	f000 fc38 	bl	8006014 <__i2b>
 80057a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80057a6:	4604      	mov	r4, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f000 81cf 	beq.w	8005b4c <_dtoa_r+0xb3c>
 80057ae:	461a      	mov	r2, r3
 80057b0:	4601      	mov	r1, r0
 80057b2:	4658      	mov	r0, fp
 80057b4:	f000 fcee 	bl	8006194 <__pow5mult>
 80057b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	4604      	mov	r4, r0
 80057be:	f300 8095 	bgt.w	80058ec <_dtoa_r+0x8dc>
 80057c2:	9b02      	ldr	r3, [sp, #8]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f040 8087 	bne.w	80058d8 <_dtoa_r+0x8c8>
 80057ca:	9b03      	ldr	r3, [sp, #12]
 80057cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f040 8089 	bne.w	80058e8 <_dtoa_r+0x8d8>
 80057d6:	9b03      	ldr	r3, [sp, #12]
 80057d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80057dc:	0d1b      	lsrs	r3, r3, #20
 80057de:	051b      	lsls	r3, r3, #20
 80057e0:	b12b      	cbz	r3, 80057ee <_dtoa_r+0x7de>
 80057e2:	9b08      	ldr	r3, [sp, #32]
 80057e4:	3301      	adds	r3, #1
 80057e6:	9308      	str	r3, [sp, #32]
 80057e8:	f108 0801 	add.w	r8, r8, #1
 80057ec:	2301      	movs	r3, #1
 80057ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80057f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f000 81b0 	beq.w	8005b58 <_dtoa_r+0xb48>
 80057f8:	6923      	ldr	r3, [r4, #16]
 80057fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80057fe:	6918      	ldr	r0, [r3, #16]
 8005800:	f000 fbbc 	bl	8005f7c <__hi0bits>
 8005804:	f1c0 0020 	rsb	r0, r0, #32
 8005808:	9b08      	ldr	r3, [sp, #32]
 800580a:	4418      	add	r0, r3
 800580c:	f010 001f 	ands.w	r0, r0, #31
 8005810:	d077      	beq.n	8005902 <_dtoa_r+0x8f2>
 8005812:	f1c0 0320 	rsb	r3, r0, #32
 8005816:	2b04      	cmp	r3, #4
 8005818:	dd6b      	ble.n	80058f2 <_dtoa_r+0x8e2>
 800581a:	9b08      	ldr	r3, [sp, #32]
 800581c:	f1c0 001c 	rsb	r0, r0, #28
 8005820:	4403      	add	r3, r0
 8005822:	4480      	add	r8, r0
 8005824:	4406      	add	r6, r0
 8005826:	9308      	str	r3, [sp, #32]
 8005828:	f1b8 0f00 	cmp.w	r8, #0
 800582c:	dd05      	ble.n	800583a <_dtoa_r+0x82a>
 800582e:	4649      	mov	r1, r9
 8005830:	4642      	mov	r2, r8
 8005832:	4658      	mov	r0, fp
 8005834:	f000 fd08 	bl	8006248 <__lshift>
 8005838:	4681      	mov	r9, r0
 800583a:	9b08      	ldr	r3, [sp, #32]
 800583c:	2b00      	cmp	r3, #0
 800583e:	dd05      	ble.n	800584c <_dtoa_r+0x83c>
 8005840:	4621      	mov	r1, r4
 8005842:	461a      	mov	r2, r3
 8005844:	4658      	mov	r0, fp
 8005846:	f000 fcff 	bl	8006248 <__lshift>
 800584a:	4604      	mov	r4, r0
 800584c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800584e:	2b00      	cmp	r3, #0
 8005850:	d059      	beq.n	8005906 <_dtoa_r+0x8f6>
 8005852:	4621      	mov	r1, r4
 8005854:	4648      	mov	r0, r9
 8005856:	f000 fd63 	bl	8006320 <__mcmp>
 800585a:	2800      	cmp	r0, #0
 800585c:	da53      	bge.n	8005906 <_dtoa_r+0x8f6>
 800585e:	1e7b      	subs	r3, r7, #1
 8005860:	9304      	str	r3, [sp, #16]
 8005862:	4649      	mov	r1, r9
 8005864:	2300      	movs	r3, #0
 8005866:	220a      	movs	r2, #10
 8005868:	4658      	mov	r0, fp
 800586a:	f000 faf7 	bl	8005e5c <__multadd>
 800586e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005870:	4681      	mov	r9, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	f000 8172 	beq.w	8005b5c <_dtoa_r+0xb4c>
 8005878:	2300      	movs	r3, #0
 800587a:	4629      	mov	r1, r5
 800587c:	220a      	movs	r2, #10
 800587e:	4658      	mov	r0, fp
 8005880:	f000 faec 	bl	8005e5c <__multadd>
 8005884:	9b00      	ldr	r3, [sp, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	4605      	mov	r5, r0
 800588a:	dc67      	bgt.n	800595c <_dtoa_r+0x94c>
 800588c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800588e:	2b02      	cmp	r3, #2
 8005890:	dc41      	bgt.n	8005916 <_dtoa_r+0x906>
 8005892:	e063      	b.n	800595c <_dtoa_r+0x94c>
 8005894:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005896:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800589a:	e746      	b.n	800572a <_dtoa_r+0x71a>
 800589c:	9b07      	ldr	r3, [sp, #28]
 800589e:	1e5c      	subs	r4, r3, #1
 80058a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80058a2:	42a3      	cmp	r3, r4
 80058a4:	bfbf      	itttt	lt
 80058a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80058a8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80058aa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80058ac:	1ae3      	sublt	r3, r4, r3
 80058ae:	bfb4      	ite	lt
 80058b0:	18d2      	addlt	r2, r2, r3
 80058b2:	1b1c      	subge	r4, r3, r4
 80058b4:	9b07      	ldr	r3, [sp, #28]
 80058b6:	bfbc      	itt	lt
 80058b8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80058ba:	2400      	movlt	r4, #0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	bfb5      	itete	lt
 80058c0:	eba8 0603 	sublt.w	r6, r8, r3
 80058c4:	9b07      	ldrge	r3, [sp, #28]
 80058c6:	2300      	movlt	r3, #0
 80058c8:	4646      	movge	r6, r8
 80058ca:	e730      	b.n	800572e <_dtoa_r+0x71e>
 80058cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80058ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80058d0:	4646      	mov	r6, r8
 80058d2:	e735      	b.n	8005740 <_dtoa_r+0x730>
 80058d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80058d6:	e75c      	b.n	8005792 <_dtoa_r+0x782>
 80058d8:	2300      	movs	r3, #0
 80058da:	e788      	b.n	80057ee <_dtoa_r+0x7de>
 80058dc:	3fe00000 	.word	0x3fe00000
 80058e0:	40240000 	.word	0x40240000
 80058e4:	40140000 	.word	0x40140000
 80058e8:	9b02      	ldr	r3, [sp, #8]
 80058ea:	e780      	b.n	80057ee <_dtoa_r+0x7de>
 80058ec:	2300      	movs	r3, #0
 80058ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80058f0:	e782      	b.n	80057f8 <_dtoa_r+0x7e8>
 80058f2:	d099      	beq.n	8005828 <_dtoa_r+0x818>
 80058f4:	9a08      	ldr	r2, [sp, #32]
 80058f6:	331c      	adds	r3, #28
 80058f8:	441a      	add	r2, r3
 80058fa:	4498      	add	r8, r3
 80058fc:	441e      	add	r6, r3
 80058fe:	9208      	str	r2, [sp, #32]
 8005900:	e792      	b.n	8005828 <_dtoa_r+0x818>
 8005902:	4603      	mov	r3, r0
 8005904:	e7f6      	b.n	80058f4 <_dtoa_r+0x8e4>
 8005906:	9b07      	ldr	r3, [sp, #28]
 8005908:	9704      	str	r7, [sp, #16]
 800590a:	2b00      	cmp	r3, #0
 800590c:	dc20      	bgt.n	8005950 <_dtoa_r+0x940>
 800590e:	9300      	str	r3, [sp, #0]
 8005910:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005912:	2b02      	cmp	r3, #2
 8005914:	dd1e      	ble.n	8005954 <_dtoa_r+0x944>
 8005916:	9b00      	ldr	r3, [sp, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	f47f aec0 	bne.w	800569e <_dtoa_r+0x68e>
 800591e:	4621      	mov	r1, r4
 8005920:	2205      	movs	r2, #5
 8005922:	4658      	mov	r0, fp
 8005924:	f000 fa9a 	bl	8005e5c <__multadd>
 8005928:	4601      	mov	r1, r0
 800592a:	4604      	mov	r4, r0
 800592c:	4648      	mov	r0, r9
 800592e:	f000 fcf7 	bl	8006320 <__mcmp>
 8005932:	2800      	cmp	r0, #0
 8005934:	f77f aeb3 	ble.w	800569e <_dtoa_r+0x68e>
 8005938:	4656      	mov	r6, sl
 800593a:	2331      	movs	r3, #49	@ 0x31
 800593c:	f806 3b01 	strb.w	r3, [r6], #1
 8005940:	9b04      	ldr	r3, [sp, #16]
 8005942:	3301      	adds	r3, #1
 8005944:	9304      	str	r3, [sp, #16]
 8005946:	e6ae      	b.n	80056a6 <_dtoa_r+0x696>
 8005948:	9c07      	ldr	r4, [sp, #28]
 800594a:	9704      	str	r7, [sp, #16]
 800594c:	4625      	mov	r5, r4
 800594e:	e7f3      	b.n	8005938 <_dtoa_r+0x928>
 8005950:	9b07      	ldr	r3, [sp, #28]
 8005952:	9300      	str	r3, [sp, #0]
 8005954:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005956:	2b00      	cmp	r3, #0
 8005958:	f000 8104 	beq.w	8005b64 <_dtoa_r+0xb54>
 800595c:	2e00      	cmp	r6, #0
 800595e:	dd05      	ble.n	800596c <_dtoa_r+0x95c>
 8005960:	4629      	mov	r1, r5
 8005962:	4632      	mov	r2, r6
 8005964:	4658      	mov	r0, fp
 8005966:	f000 fc6f 	bl	8006248 <__lshift>
 800596a:	4605      	mov	r5, r0
 800596c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800596e:	2b00      	cmp	r3, #0
 8005970:	d05a      	beq.n	8005a28 <_dtoa_r+0xa18>
 8005972:	6869      	ldr	r1, [r5, #4]
 8005974:	4658      	mov	r0, fp
 8005976:	f000 fa0f 	bl	8005d98 <_Balloc>
 800597a:	4606      	mov	r6, r0
 800597c:	b928      	cbnz	r0, 800598a <_dtoa_r+0x97a>
 800597e:	4b84      	ldr	r3, [pc, #528]	@ (8005b90 <_dtoa_r+0xb80>)
 8005980:	4602      	mov	r2, r0
 8005982:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005986:	f7ff bb5a 	b.w	800503e <_dtoa_r+0x2e>
 800598a:	692a      	ldr	r2, [r5, #16]
 800598c:	3202      	adds	r2, #2
 800598e:	0092      	lsls	r2, r2, #2
 8005990:	f105 010c 	add.w	r1, r5, #12
 8005994:	300c      	adds	r0, #12
 8005996:	f001 ff87 	bl	80078a8 <memcpy>
 800599a:	2201      	movs	r2, #1
 800599c:	4631      	mov	r1, r6
 800599e:	4658      	mov	r0, fp
 80059a0:	f000 fc52 	bl	8006248 <__lshift>
 80059a4:	f10a 0301 	add.w	r3, sl, #1
 80059a8:	9307      	str	r3, [sp, #28]
 80059aa:	9b00      	ldr	r3, [sp, #0]
 80059ac:	4453      	add	r3, sl
 80059ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80059b0:	9b02      	ldr	r3, [sp, #8]
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	462f      	mov	r7, r5
 80059b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80059ba:	4605      	mov	r5, r0
 80059bc:	9b07      	ldr	r3, [sp, #28]
 80059be:	4621      	mov	r1, r4
 80059c0:	3b01      	subs	r3, #1
 80059c2:	4648      	mov	r0, r9
 80059c4:	9300      	str	r3, [sp, #0]
 80059c6:	f7ff fa9b 	bl	8004f00 <quorem>
 80059ca:	4639      	mov	r1, r7
 80059cc:	9002      	str	r0, [sp, #8]
 80059ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80059d2:	4648      	mov	r0, r9
 80059d4:	f000 fca4 	bl	8006320 <__mcmp>
 80059d8:	462a      	mov	r2, r5
 80059da:	9008      	str	r0, [sp, #32]
 80059dc:	4621      	mov	r1, r4
 80059de:	4658      	mov	r0, fp
 80059e0:	f000 fcba 	bl	8006358 <__mdiff>
 80059e4:	68c2      	ldr	r2, [r0, #12]
 80059e6:	4606      	mov	r6, r0
 80059e8:	bb02      	cbnz	r2, 8005a2c <_dtoa_r+0xa1c>
 80059ea:	4601      	mov	r1, r0
 80059ec:	4648      	mov	r0, r9
 80059ee:	f000 fc97 	bl	8006320 <__mcmp>
 80059f2:	4602      	mov	r2, r0
 80059f4:	4631      	mov	r1, r6
 80059f6:	4658      	mov	r0, fp
 80059f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80059fa:	f000 fa0d 	bl	8005e18 <_Bfree>
 80059fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a00:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005a02:	9e07      	ldr	r6, [sp, #28]
 8005a04:	ea43 0102 	orr.w	r1, r3, r2
 8005a08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a0a:	4319      	orrs	r1, r3
 8005a0c:	d110      	bne.n	8005a30 <_dtoa_r+0xa20>
 8005a0e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005a12:	d029      	beq.n	8005a68 <_dtoa_r+0xa58>
 8005a14:	9b08      	ldr	r3, [sp, #32]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	dd02      	ble.n	8005a20 <_dtoa_r+0xa10>
 8005a1a:	9b02      	ldr	r3, [sp, #8]
 8005a1c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005a20:	9b00      	ldr	r3, [sp, #0]
 8005a22:	f883 8000 	strb.w	r8, [r3]
 8005a26:	e63f      	b.n	80056a8 <_dtoa_r+0x698>
 8005a28:	4628      	mov	r0, r5
 8005a2a:	e7bb      	b.n	80059a4 <_dtoa_r+0x994>
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	e7e1      	b.n	80059f4 <_dtoa_r+0x9e4>
 8005a30:	9b08      	ldr	r3, [sp, #32]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	db04      	blt.n	8005a40 <_dtoa_r+0xa30>
 8005a36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005a38:	430b      	orrs	r3, r1
 8005a3a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005a3c:	430b      	orrs	r3, r1
 8005a3e:	d120      	bne.n	8005a82 <_dtoa_r+0xa72>
 8005a40:	2a00      	cmp	r2, #0
 8005a42:	dded      	ble.n	8005a20 <_dtoa_r+0xa10>
 8005a44:	4649      	mov	r1, r9
 8005a46:	2201      	movs	r2, #1
 8005a48:	4658      	mov	r0, fp
 8005a4a:	f000 fbfd 	bl	8006248 <__lshift>
 8005a4e:	4621      	mov	r1, r4
 8005a50:	4681      	mov	r9, r0
 8005a52:	f000 fc65 	bl	8006320 <__mcmp>
 8005a56:	2800      	cmp	r0, #0
 8005a58:	dc03      	bgt.n	8005a62 <_dtoa_r+0xa52>
 8005a5a:	d1e1      	bne.n	8005a20 <_dtoa_r+0xa10>
 8005a5c:	f018 0f01 	tst.w	r8, #1
 8005a60:	d0de      	beq.n	8005a20 <_dtoa_r+0xa10>
 8005a62:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005a66:	d1d8      	bne.n	8005a1a <_dtoa_r+0xa0a>
 8005a68:	9a00      	ldr	r2, [sp, #0]
 8005a6a:	2339      	movs	r3, #57	@ 0x39
 8005a6c:	7013      	strb	r3, [r2, #0]
 8005a6e:	4633      	mov	r3, r6
 8005a70:	461e      	mov	r6, r3
 8005a72:	3b01      	subs	r3, #1
 8005a74:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005a78:	2a39      	cmp	r2, #57	@ 0x39
 8005a7a:	d052      	beq.n	8005b22 <_dtoa_r+0xb12>
 8005a7c:	3201      	adds	r2, #1
 8005a7e:	701a      	strb	r2, [r3, #0]
 8005a80:	e612      	b.n	80056a8 <_dtoa_r+0x698>
 8005a82:	2a00      	cmp	r2, #0
 8005a84:	dd07      	ble.n	8005a96 <_dtoa_r+0xa86>
 8005a86:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005a8a:	d0ed      	beq.n	8005a68 <_dtoa_r+0xa58>
 8005a8c:	9a00      	ldr	r2, [sp, #0]
 8005a8e:	f108 0301 	add.w	r3, r8, #1
 8005a92:	7013      	strb	r3, [r2, #0]
 8005a94:	e608      	b.n	80056a8 <_dtoa_r+0x698>
 8005a96:	9b07      	ldr	r3, [sp, #28]
 8005a98:	9a07      	ldr	r2, [sp, #28]
 8005a9a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005a9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d028      	beq.n	8005af6 <_dtoa_r+0xae6>
 8005aa4:	4649      	mov	r1, r9
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	220a      	movs	r2, #10
 8005aaa:	4658      	mov	r0, fp
 8005aac:	f000 f9d6 	bl	8005e5c <__multadd>
 8005ab0:	42af      	cmp	r7, r5
 8005ab2:	4681      	mov	r9, r0
 8005ab4:	f04f 0300 	mov.w	r3, #0
 8005ab8:	f04f 020a 	mov.w	r2, #10
 8005abc:	4639      	mov	r1, r7
 8005abe:	4658      	mov	r0, fp
 8005ac0:	d107      	bne.n	8005ad2 <_dtoa_r+0xac2>
 8005ac2:	f000 f9cb 	bl	8005e5c <__multadd>
 8005ac6:	4607      	mov	r7, r0
 8005ac8:	4605      	mov	r5, r0
 8005aca:	9b07      	ldr	r3, [sp, #28]
 8005acc:	3301      	adds	r3, #1
 8005ace:	9307      	str	r3, [sp, #28]
 8005ad0:	e774      	b.n	80059bc <_dtoa_r+0x9ac>
 8005ad2:	f000 f9c3 	bl	8005e5c <__multadd>
 8005ad6:	4629      	mov	r1, r5
 8005ad8:	4607      	mov	r7, r0
 8005ada:	2300      	movs	r3, #0
 8005adc:	220a      	movs	r2, #10
 8005ade:	4658      	mov	r0, fp
 8005ae0:	f000 f9bc 	bl	8005e5c <__multadd>
 8005ae4:	4605      	mov	r5, r0
 8005ae6:	e7f0      	b.n	8005aca <_dtoa_r+0xaba>
 8005ae8:	9b00      	ldr	r3, [sp, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	bfcc      	ite	gt
 8005aee:	461e      	movgt	r6, r3
 8005af0:	2601      	movle	r6, #1
 8005af2:	4456      	add	r6, sl
 8005af4:	2700      	movs	r7, #0
 8005af6:	4649      	mov	r1, r9
 8005af8:	2201      	movs	r2, #1
 8005afa:	4658      	mov	r0, fp
 8005afc:	f000 fba4 	bl	8006248 <__lshift>
 8005b00:	4621      	mov	r1, r4
 8005b02:	4681      	mov	r9, r0
 8005b04:	f000 fc0c 	bl	8006320 <__mcmp>
 8005b08:	2800      	cmp	r0, #0
 8005b0a:	dcb0      	bgt.n	8005a6e <_dtoa_r+0xa5e>
 8005b0c:	d102      	bne.n	8005b14 <_dtoa_r+0xb04>
 8005b0e:	f018 0f01 	tst.w	r8, #1
 8005b12:	d1ac      	bne.n	8005a6e <_dtoa_r+0xa5e>
 8005b14:	4633      	mov	r3, r6
 8005b16:	461e      	mov	r6, r3
 8005b18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b1c:	2a30      	cmp	r2, #48	@ 0x30
 8005b1e:	d0fa      	beq.n	8005b16 <_dtoa_r+0xb06>
 8005b20:	e5c2      	b.n	80056a8 <_dtoa_r+0x698>
 8005b22:	459a      	cmp	sl, r3
 8005b24:	d1a4      	bne.n	8005a70 <_dtoa_r+0xa60>
 8005b26:	9b04      	ldr	r3, [sp, #16]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	9304      	str	r3, [sp, #16]
 8005b2c:	2331      	movs	r3, #49	@ 0x31
 8005b2e:	f88a 3000 	strb.w	r3, [sl]
 8005b32:	e5b9      	b.n	80056a8 <_dtoa_r+0x698>
 8005b34:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005b36:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005b94 <_dtoa_r+0xb84>
 8005b3a:	b11b      	cbz	r3, 8005b44 <_dtoa_r+0xb34>
 8005b3c:	f10a 0308 	add.w	r3, sl, #8
 8005b40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005b42:	6013      	str	r3, [r2, #0]
 8005b44:	4650      	mov	r0, sl
 8005b46:	b019      	add	sp, #100	@ 0x64
 8005b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	f77f ae37 	ble.w	80057c2 <_dtoa_r+0x7b2>
 8005b54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b56:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b58:	2001      	movs	r0, #1
 8005b5a:	e655      	b.n	8005808 <_dtoa_r+0x7f8>
 8005b5c:	9b00      	ldr	r3, [sp, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f77f aed6 	ble.w	8005910 <_dtoa_r+0x900>
 8005b64:	4656      	mov	r6, sl
 8005b66:	4621      	mov	r1, r4
 8005b68:	4648      	mov	r0, r9
 8005b6a:	f7ff f9c9 	bl	8004f00 <quorem>
 8005b6e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005b72:	f806 8b01 	strb.w	r8, [r6], #1
 8005b76:	9b00      	ldr	r3, [sp, #0]
 8005b78:	eba6 020a 	sub.w	r2, r6, sl
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	ddb3      	ble.n	8005ae8 <_dtoa_r+0xad8>
 8005b80:	4649      	mov	r1, r9
 8005b82:	2300      	movs	r3, #0
 8005b84:	220a      	movs	r2, #10
 8005b86:	4658      	mov	r0, fp
 8005b88:	f000 f968 	bl	8005e5c <__multadd>
 8005b8c:	4681      	mov	r9, r0
 8005b8e:	e7ea      	b.n	8005b66 <_dtoa_r+0xb56>
 8005b90:	08008709 	.word	0x08008709
 8005b94:	080086a4 	.word	0x080086a4

08005b98 <_free_r>:
 8005b98:	b538      	push	{r3, r4, r5, lr}
 8005b9a:	4605      	mov	r5, r0
 8005b9c:	2900      	cmp	r1, #0
 8005b9e:	d041      	beq.n	8005c24 <_free_r+0x8c>
 8005ba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ba4:	1f0c      	subs	r4, r1, #4
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	bfb8      	it	lt
 8005baa:	18e4      	addlt	r4, r4, r3
 8005bac:	f000 f8e8 	bl	8005d80 <__malloc_lock>
 8005bb0:	4a1d      	ldr	r2, [pc, #116]	@ (8005c28 <_free_r+0x90>)
 8005bb2:	6813      	ldr	r3, [r2, #0]
 8005bb4:	b933      	cbnz	r3, 8005bc4 <_free_r+0x2c>
 8005bb6:	6063      	str	r3, [r4, #4]
 8005bb8:	6014      	str	r4, [r2, #0]
 8005bba:	4628      	mov	r0, r5
 8005bbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bc0:	f000 b8e4 	b.w	8005d8c <__malloc_unlock>
 8005bc4:	42a3      	cmp	r3, r4
 8005bc6:	d908      	bls.n	8005bda <_free_r+0x42>
 8005bc8:	6820      	ldr	r0, [r4, #0]
 8005bca:	1821      	adds	r1, r4, r0
 8005bcc:	428b      	cmp	r3, r1
 8005bce:	bf01      	itttt	eq
 8005bd0:	6819      	ldreq	r1, [r3, #0]
 8005bd2:	685b      	ldreq	r3, [r3, #4]
 8005bd4:	1809      	addeq	r1, r1, r0
 8005bd6:	6021      	streq	r1, [r4, #0]
 8005bd8:	e7ed      	b.n	8005bb6 <_free_r+0x1e>
 8005bda:	461a      	mov	r2, r3
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	b10b      	cbz	r3, 8005be4 <_free_r+0x4c>
 8005be0:	42a3      	cmp	r3, r4
 8005be2:	d9fa      	bls.n	8005bda <_free_r+0x42>
 8005be4:	6811      	ldr	r1, [r2, #0]
 8005be6:	1850      	adds	r0, r2, r1
 8005be8:	42a0      	cmp	r0, r4
 8005bea:	d10b      	bne.n	8005c04 <_free_r+0x6c>
 8005bec:	6820      	ldr	r0, [r4, #0]
 8005bee:	4401      	add	r1, r0
 8005bf0:	1850      	adds	r0, r2, r1
 8005bf2:	4283      	cmp	r3, r0
 8005bf4:	6011      	str	r1, [r2, #0]
 8005bf6:	d1e0      	bne.n	8005bba <_free_r+0x22>
 8005bf8:	6818      	ldr	r0, [r3, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	6053      	str	r3, [r2, #4]
 8005bfe:	4408      	add	r0, r1
 8005c00:	6010      	str	r0, [r2, #0]
 8005c02:	e7da      	b.n	8005bba <_free_r+0x22>
 8005c04:	d902      	bls.n	8005c0c <_free_r+0x74>
 8005c06:	230c      	movs	r3, #12
 8005c08:	602b      	str	r3, [r5, #0]
 8005c0a:	e7d6      	b.n	8005bba <_free_r+0x22>
 8005c0c:	6820      	ldr	r0, [r4, #0]
 8005c0e:	1821      	adds	r1, r4, r0
 8005c10:	428b      	cmp	r3, r1
 8005c12:	bf04      	itt	eq
 8005c14:	6819      	ldreq	r1, [r3, #0]
 8005c16:	685b      	ldreq	r3, [r3, #4]
 8005c18:	6063      	str	r3, [r4, #4]
 8005c1a:	bf04      	itt	eq
 8005c1c:	1809      	addeq	r1, r1, r0
 8005c1e:	6021      	streq	r1, [r4, #0]
 8005c20:	6054      	str	r4, [r2, #4]
 8005c22:	e7ca      	b.n	8005bba <_free_r+0x22>
 8005c24:	bd38      	pop	{r3, r4, r5, pc}
 8005c26:	bf00      	nop
 8005c28:	20000434 	.word	0x20000434

08005c2c <malloc>:
 8005c2c:	4b02      	ldr	r3, [pc, #8]	@ (8005c38 <malloc+0xc>)
 8005c2e:	4601      	mov	r1, r0
 8005c30:	6818      	ldr	r0, [r3, #0]
 8005c32:	f000 b825 	b.w	8005c80 <_malloc_r>
 8005c36:	bf00      	nop
 8005c38:	2000001c 	.word	0x2000001c

08005c3c <sbrk_aligned>:
 8005c3c:	b570      	push	{r4, r5, r6, lr}
 8005c3e:	4e0f      	ldr	r6, [pc, #60]	@ (8005c7c <sbrk_aligned+0x40>)
 8005c40:	460c      	mov	r4, r1
 8005c42:	6831      	ldr	r1, [r6, #0]
 8005c44:	4605      	mov	r5, r0
 8005c46:	b911      	cbnz	r1, 8005c4e <sbrk_aligned+0x12>
 8005c48:	f001 fe1e 	bl	8007888 <_sbrk_r>
 8005c4c:	6030      	str	r0, [r6, #0]
 8005c4e:	4621      	mov	r1, r4
 8005c50:	4628      	mov	r0, r5
 8005c52:	f001 fe19 	bl	8007888 <_sbrk_r>
 8005c56:	1c43      	adds	r3, r0, #1
 8005c58:	d103      	bne.n	8005c62 <sbrk_aligned+0x26>
 8005c5a:	f04f 34ff 	mov.w	r4, #4294967295
 8005c5e:	4620      	mov	r0, r4
 8005c60:	bd70      	pop	{r4, r5, r6, pc}
 8005c62:	1cc4      	adds	r4, r0, #3
 8005c64:	f024 0403 	bic.w	r4, r4, #3
 8005c68:	42a0      	cmp	r0, r4
 8005c6a:	d0f8      	beq.n	8005c5e <sbrk_aligned+0x22>
 8005c6c:	1a21      	subs	r1, r4, r0
 8005c6e:	4628      	mov	r0, r5
 8005c70:	f001 fe0a 	bl	8007888 <_sbrk_r>
 8005c74:	3001      	adds	r0, #1
 8005c76:	d1f2      	bne.n	8005c5e <sbrk_aligned+0x22>
 8005c78:	e7ef      	b.n	8005c5a <sbrk_aligned+0x1e>
 8005c7a:	bf00      	nop
 8005c7c:	20000430 	.word	0x20000430

08005c80 <_malloc_r>:
 8005c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c84:	1ccd      	adds	r5, r1, #3
 8005c86:	f025 0503 	bic.w	r5, r5, #3
 8005c8a:	3508      	adds	r5, #8
 8005c8c:	2d0c      	cmp	r5, #12
 8005c8e:	bf38      	it	cc
 8005c90:	250c      	movcc	r5, #12
 8005c92:	2d00      	cmp	r5, #0
 8005c94:	4606      	mov	r6, r0
 8005c96:	db01      	blt.n	8005c9c <_malloc_r+0x1c>
 8005c98:	42a9      	cmp	r1, r5
 8005c9a:	d904      	bls.n	8005ca6 <_malloc_r+0x26>
 8005c9c:	230c      	movs	r3, #12
 8005c9e:	6033      	str	r3, [r6, #0]
 8005ca0:	2000      	movs	r0, #0
 8005ca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ca6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d7c <_malloc_r+0xfc>
 8005caa:	f000 f869 	bl	8005d80 <__malloc_lock>
 8005cae:	f8d8 3000 	ldr.w	r3, [r8]
 8005cb2:	461c      	mov	r4, r3
 8005cb4:	bb44      	cbnz	r4, 8005d08 <_malloc_r+0x88>
 8005cb6:	4629      	mov	r1, r5
 8005cb8:	4630      	mov	r0, r6
 8005cba:	f7ff ffbf 	bl	8005c3c <sbrk_aligned>
 8005cbe:	1c43      	adds	r3, r0, #1
 8005cc0:	4604      	mov	r4, r0
 8005cc2:	d158      	bne.n	8005d76 <_malloc_r+0xf6>
 8005cc4:	f8d8 4000 	ldr.w	r4, [r8]
 8005cc8:	4627      	mov	r7, r4
 8005cca:	2f00      	cmp	r7, #0
 8005ccc:	d143      	bne.n	8005d56 <_malloc_r+0xd6>
 8005cce:	2c00      	cmp	r4, #0
 8005cd0:	d04b      	beq.n	8005d6a <_malloc_r+0xea>
 8005cd2:	6823      	ldr	r3, [r4, #0]
 8005cd4:	4639      	mov	r1, r7
 8005cd6:	4630      	mov	r0, r6
 8005cd8:	eb04 0903 	add.w	r9, r4, r3
 8005cdc:	f001 fdd4 	bl	8007888 <_sbrk_r>
 8005ce0:	4581      	cmp	r9, r0
 8005ce2:	d142      	bne.n	8005d6a <_malloc_r+0xea>
 8005ce4:	6821      	ldr	r1, [r4, #0]
 8005ce6:	1a6d      	subs	r5, r5, r1
 8005ce8:	4629      	mov	r1, r5
 8005cea:	4630      	mov	r0, r6
 8005cec:	f7ff ffa6 	bl	8005c3c <sbrk_aligned>
 8005cf0:	3001      	adds	r0, #1
 8005cf2:	d03a      	beq.n	8005d6a <_malloc_r+0xea>
 8005cf4:	6823      	ldr	r3, [r4, #0]
 8005cf6:	442b      	add	r3, r5
 8005cf8:	6023      	str	r3, [r4, #0]
 8005cfa:	f8d8 3000 	ldr.w	r3, [r8]
 8005cfe:	685a      	ldr	r2, [r3, #4]
 8005d00:	bb62      	cbnz	r2, 8005d5c <_malloc_r+0xdc>
 8005d02:	f8c8 7000 	str.w	r7, [r8]
 8005d06:	e00f      	b.n	8005d28 <_malloc_r+0xa8>
 8005d08:	6822      	ldr	r2, [r4, #0]
 8005d0a:	1b52      	subs	r2, r2, r5
 8005d0c:	d420      	bmi.n	8005d50 <_malloc_r+0xd0>
 8005d0e:	2a0b      	cmp	r2, #11
 8005d10:	d917      	bls.n	8005d42 <_malloc_r+0xc2>
 8005d12:	1961      	adds	r1, r4, r5
 8005d14:	42a3      	cmp	r3, r4
 8005d16:	6025      	str	r5, [r4, #0]
 8005d18:	bf18      	it	ne
 8005d1a:	6059      	strne	r1, [r3, #4]
 8005d1c:	6863      	ldr	r3, [r4, #4]
 8005d1e:	bf08      	it	eq
 8005d20:	f8c8 1000 	streq.w	r1, [r8]
 8005d24:	5162      	str	r2, [r4, r5]
 8005d26:	604b      	str	r3, [r1, #4]
 8005d28:	4630      	mov	r0, r6
 8005d2a:	f000 f82f 	bl	8005d8c <__malloc_unlock>
 8005d2e:	f104 000b 	add.w	r0, r4, #11
 8005d32:	1d23      	adds	r3, r4, #4
 8005d34:	f020 0007 	bic.w	r0, r0, #7
 8005d38:	1ac2      	subs	r2, r0, r3
 8005d3a:	bf1c      	itt	ne
 8005d3c:	1a1b      	subne	r3, r3, r0
 8005d3e:	50a3      	strne	r3, [r4, r2]
 8005d40:	e7af      	b.n	8005ca2 <_malloc_r+0x22>
 8005d42:	6862      	ldr	r2, [r4, #4]
 8005d44:	42a3      	cmp	r3, r4
 8005d46:	bf0c      	ite	eq
 8005d48:	f8c8 2000 	streq.w	r2, [r8]
 8005d4c:	605a      	strne	r2, [r3, #4]
 8005d4e:	e7eb      	b.n	8005d28 <_malloc_r+0xa8>
 8005d50:	4623      	mov	r3, r4
 8005d52:	6864      	ldr	r4, [r4, #4]
 8005d54:	e7ae      	b.n	8005cb4 <_malloc_r+0x34>
 8005d56:	463c      	mov	r4, r7
 8005d58:	687f      	ldr	r7, [r7, #4]
 8005d5a:	e7b6      	b.n	8005cca <_malloc_r+0x4a>
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	42a3      	cmp	r3, r4
 8005d62:	d1fb      	bne.n	8005d5c <_malloc_r+0xdc>
 8005d64:	2300      	movs	r3, #0
 8005d66:	6053      	str	r3, [r2, #4]
 8005d68:	e7de      	b.n	8005d28 <_malloc_r+0xa8>
 8005d6a:	230c      	movs	r3, #12
 8005d6c:	6033      	str	r3, [r6, #0]
 8005d6e:	4630      	mov	r0, r6
 8005d70:	f000 f80c 	bl	8005d8c <__malloc_unlock>
 8005d74:	e794      	b.n	8005ca0 <_malloc_r+0x20>
 8005d76:	6005      	str	r5, [r0, #0]
 8005d78:	e7d6      	b.n	8005d28 <_malloc_r+0xa8>
 8005d7a:	bf00      	nop
 8005d7c:	20000434 	.word	0x20000434

08005d80 <__malloc_lock>:
 8005d80:	4801      	ldr	r0, [pc, #4]	@ (8005d88 <__malloc_lock+0x8>)
 8005d82:	f7ff b896 	b.w	8004eb2 <__retarget_lock_acquire_recursive>
 8005d86:	bf00      	nop
 8005d88:	2000042c 	.word	0x2000042c

08005d8c <__malloc_unlock>:
 8005d8c:	4801      	ldr	r0, [pc, #4]	@ (8005d94 <__malloc_unlock+0x8>)
 8005d8e:	f7ff b891 	b.w	8004eb4 <__retarget_lock_release_recursive>
 8005d92:	bf00      	nop
 8005d94:	2000042c 	.word	0x2000042c

08005d98 <_Balloc>:
 8005d98:	b570      	push	{r4, r5, r6, lr}
 8005d9a:	69c6      	ldr	r6, [r0, #28]
 8005d9c:	4604      	mov	r4, r0
 8005d9e:	460d      	mov	r5, r1
 8005da0:	b976      	cbnz	r6, 8005dc0 <_Balloc+0x28>
 8005da2:	2010      	movs	r0, #16
 8005da4:	f7ff ff42 	bl	8005c2c <malloc>
 8005da8:	4602      	mov	r2, r0
 8005daa:	61e0      	str	r0, [r4, #28]
 8005dac:	b920      	cbnz	r0, 8005db8 <_Balloc+0x20>
 8005dae:	4b18      	ldr	r3, [pc, #96]	@ (8005e10 <_Balloc+0x78>)
 8005db0:	4818      	ldr	r0, [pc, #96]	@ (8005e14 <_Balloc+0x7c>)
 8005db2:	216b      	movs	r1, #107	@ 0x6b
 8005db4:	f7ff f886 	bl	8004ec4 <__assert_func>
 8005db8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005dbc:	6006      	str	r6, [r0, #0]
 8005dbe:	60c6      	str	r6, [r0, #12]
 8005dc0:	69e6      	ldr	r6, [r4, #28]
 8005dc2:	68f3      	ldr	r3, [r6, #12]
 8005dc4:	b183      	cbz	r3, 8005de8 <_Balloc+0x50>
 8005dc6:	69e3      	ldr	r3, [r4, #28]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005dce:	b9b8      	cbnz	r0, 8005e00 <_Balloc+0x68>
 8005dd0:	2101      	movs	r1, #1
 8005dd2:	fa01 f605 	lsl.w	r6, r1, r5
 8005dd6:	1d72      	adds	r2, r6, #5
 8005dd8:	0092      	lsls	r2, r2, #2
 8005dda:	4620      	mov	r0, r4
 8005ddc:	f001 fd83 	bl	80078e6 <_calloc_r>
 8005de0:	b160      	cbz	r0, 8005dfc <_Balloc+0x64>
 8005de2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005de6:	e00e      	b.n	8005e06 <_Balloc+0x6e>
 8005de8:	2221      	movs	r2, #33	@ 0x21
 8005dea:	2104      	movs	r1, #4
 8005dec:	4620      	mov	r0, r4
 8005dee:	f001 fd7a 	bl	80078e6 <_calloc_r>
 8005df2:	69e3      	ldr	r3, [r4, #28]
 8005df4:	60f0      	str	r0, [r6, #12]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d1e4      	bne.n	8005dc6 <_Balloc+0x2e>
 8005dfc:	2000      	movs	r0, #0
 8005dfe:	bd70      	pop	{r4, r5, r6, pc}
 8005e00:	6802      	ldr	r2, [r0, #0]
 8005e02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005e06:	2300      	movs	r3, #0
 8005e08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005e0c:	e7f7      	b.n	8005dfe <_Balloc+0x66>
 8005e0e:	bf00      	nop
 8005e10:	080085c0 	.word	0x080085c0
 8005e14:	0800871a 	.word	0x0800871a

08005e18 <_Bfree>:
 8005e18:	b570      	push	{r4, r5, r6, lr}
 8005e1a:	69c6      	ldr	r6, [r0, #28]
 8005e1c:	4605      	mov	r5, r0
 8005e1e:	460c      	mov	r4, r1
 8005e20:	b976      	cbnz	r6, 8005e40 <_Bfree+0x28>
 8005e22:	2010      	movs	r0, #16
 8005e24:	f7ff ff02 	bl	8005c2c <malloc>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	61e8      	str	r0, [r5, #28]
 8005e2c:	b920      	cbnz	r0, 8005e38 <_Bfree+0x20>
 8005e2e:	4b09      	ldr	r3, [pc, #36]	@ (8005e54 <_Bfree+0x3c>)
 8005e30:	4809      	ldr	r0, [pc, #36]	@ (8005e58 <_Bfree+0x40>)
 8005e32:	218f      	movs	r1, #143	@ 0x8f
 8005e34:	f7ff f846 	bl	8004ec4 <__assert_func>
 8005e38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005e3c:	6006      	str	r6, [r0, #0]
 8005e3e:	60c6      	str	r6, [r0, #12]
 8005e40:	b13c      	cbz	r4, 8005e52 <_Bfree+0x3a>
 8005e42:	69eb      	ldr	r3, [r5, #28]
 8005e44:	6862      	ldr	r2, [r4, #4]
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e4c:	6021      	str	r1, [r4, #0]
 8005e4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005e52:	bd70      	pop	{r4, r5, r6, pc}
 8005e54:	080085c0 	.word	0x080085c0
 8005e58:	0800871a 	.word	0x0800871a

08005e5c <__multadd>:
 8005e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e60:	690d      	ldr	r5, [r1, #16]
 8005e62:	4607      	mov	r7, r0
 8005e64:	460c      	mov	r4, r1
 8005e66:	461e      	mov	r6, r3
 8005e68:	f101 0c14 	add.w	ip, r1, #20
 8005e6c:	2000      	movs	r0, #0
 8005e6e:	f8dc 3000 	ldr.w	r3, [ip]
 8005e72:	b299      	uxth	r1, r3
 8005e74:	fb02 6101 	mla	r1, r2, r1, r6
 8005e78:	0c1e      	lsrs	r6, r3, #16
 8005e7a:	0c0b      	lsrs	r3, r1, #16
 8005e7c:	fb02 3306 	mla	r3, r2, r6, r3
 8005e80:	b289      	uxth	r1, r1
 8005e82:	3001      	adds	r0, #1
 8005e84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005e88:	4285      	cmp	r5, r0
 8005e8a:	f84c 1b04 	str.w	r1, [ip], #4
 8005e8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005e92:	dcec      	bgt.n	8005e6e <__multadd+0x12>
 8005e94:	b30e      	cbz	r6, 8005eda <__multadd+0x7e>
 8005e96:	68a3      	ldr	r3, [r4, #8]
 8005e98:	42ab      	cmp	r3, r5
 8005e9a:	dc19      	bgt.n	8005ed0 <__multadd+0x74>
 8005e9c:	6861      	ldr	r1, [r4, #4]
 8005e9e:	4638      	mov	r0, r7
 8005ea0:	3101      	adds	r1, #1
 8005ea2:	f7ff ff79 	bl	8005d98 <_Balloc>
 8005ea6:	4680      	mov	r8, r0
 8005ea8:	b928      	cbnz	r0, 8005eb6 <__multadd+0x5a>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	4b0c      	ldr	r3, [pc, #48]	@ (8005ee0 <__multadd+0x84>)
 8005eae:	480d      	ldr	r0, [pc, #52]	@ (8005ee4 <__multadd+0x88>)
 8005eb0:	21ba      	movs	r1, #186	@ 0xba
 8005eb2:	f7ff f807 	bl	8004ec4 <__assert_func>
 8005eb6:	6922      	ldr	r2, [r4, #16]
 8005eb8:	3202      	adds	r2, #2
 8005eba:	f104 010c 	add.w	r1, r4, #12
 8005ebe:	0092      	lsls	r2, r2, #2
 8005ec0:	300c      	adds	r0, #12
 8005ec2:	f001 fcf1 	bl	80078a8 <memcpy>
 8005ec6:	4621      	mov	r1, r4
 8005ec8:	4638      	mov	r0, r7
 8005eca:	f7ff ffa5 	bl	8005e18 <_Bfree>
 8005ece:	4644      	mov	r4, r8
 8005ed0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005ed4:	3501      	adds	r5, #1
 8005ed6:	615e      	str	r6, [r3, #20]
 8005ed8:	6125      	str	r5, [r4, #16]
 8005eda:	4620      	mov	r0, r4
 8005edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ee0:	08008709 	.word	0x08008709
 8005ee4:	0800871a 	.word	0x0800871a

08005ee8 <__s2b>:
 8005ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005eec:	460c      	mov	r4, r1
 8005eee:	4615      	mov	r5, r2
 8005ef0:	461f      	mov	r7, r3
 8005ef2:	2209      	movs	r2, #9
 8005ef4:	3308      	adds	r3, #8
 8005ef6:	4606      	mov	r6, r0
 8005ef8:	fb93 f3f2 	sdiv	r3, r3, r2
 8005efc:	2100      	movs	r1, #0
 8005efe:	2201      	movs	r2, #1
 8005f00:	429a      	cmp	r2, r3
 8005f02:	db09      	blt.n	8005f18 <__s2b+0x30>
 8005f04:	4630      	mov	r0, r6
 8005f06:	f7ff ff47 	bl	8005d98 <_Balloc>
 8005f0a:	b940      	cbnz	r0, 8005f1e <__s2b+0x36>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	4b19      	ldr	r3, [pc, #100]	@ (8005f74 <__s2b+0x8c>)
 8005f10:	4819      	ldr	r0, [pc, #100]	@ (8005f78 <__s2b+0x90>)
 8005f12:	21d3      	movs	r1, #211	@ 0xd3
 8005f14:	f7fe ffd6 	bl	8004ec4 <__assert_func>
 8005f18:	0052      	lsls	r2, r2, #1
 8005f1a:	3101      	adds	r1, #1
 8005f1c:	e7f0      	b.n	8005f00 <__s2b+0x18>
 8005f1e:	9b08      	ldr	r3, [sp, #32]
 8005f20:	6143      	str	r3, [r0, #20]
 8005f22:	2d09      	cmp	r5, #9
 8005f24:	f04f 0301 	mov.w	r3, #1
 8005f28:	6103      	str	r3, [r0, #16]
 8005f2a:	dd16      	ble.n	8005f5a <__s2b+0x72>
 8005f2c:	f104 0909 	add.w	r9, r4, #9
 8005f30:	46c8      	mov	r8, r9
 8005f32:	442c      	add	r4, r5
 8005f34:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005f38:	4601      	mov	r1, r0
 8005f3a:	3b30      	subs	r3, #48	@ 0x30
 8005f3c:	220a      	movs	r2, #10
 8005f3e:	4630      	mov	r0, r6
 8005f40:	f7ff ff8c 	bl	8005e5c <__multadd>
 8005f44:	45a0      	cmp	r8, r4
 8005f46:	d1f5      	bne.n	8005f34 <__s2b+0x4c>
 8005f48:	f1a5 0408 	sub.w	r4, r5, #8
 8005f4c:	444c      	add	r4, r9
 8005f4e:	1b2d      	subs	r5, r5, r4
 8005f50:	1963      	adds	r3, r4, r5
 8005f52:	42bb      	cmp	r3, r7
 8005f54:	db04      	blt.n	8005f60 <__s2b+0x78>
 8005f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f5a:	340a      	adds	r4, #10
 8005f5c:	2509      	movs	r5, #9
 8005f5e:	e7f6      	b.n	8005f4e <__s2b+0x66>
 8005f60:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005f64:	4601      	mov	r1, r0
 8005f66:	3b30      	subs	r3, #48	@ 0x30
 8005f68:	220a      	movs	r2, #10
 8005f6a:	4630      	mov	r0, r6
 8005f6c:	f7ff ff76 	bl	8005e5c <__multadd>
 8005f70:	e7ee      	b.n	8005f50 <__s2b+0x68>
 8005f72:	bf00      	nop
 8005f74:	08008709 	.word	0x08008709
 8005f78:	0800871a 	.word	0x0800871a

08005f7c <__hi0bits>:
 8005f7c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005f80:	4603      	mov	r3, r0
 8005f82:	bf36      	itet	cc
 8005f84:	0403      	lslcc	r3, r0, #16
 8005f86:	2000      	movcs	r0, #0
 8005f88:	2010      	movcc	r0, #16
 8005f8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f8e:	bf3c      	itt	cc
 8005f90:	021b      	lslcc	r3, r3, #8
 8005f92:	3008      	addcc	r0, #8
 8005f94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f98:	bf3c      	itt	cc
 8005f9a:	011b      	lslcc	r3, r3, #4
 8005f9c:	3004      	addcc	r0, #4
 8005f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fa2:	bf3c      	itt	cc
 8005fa4:	009b      	lslcc	r3, r3, #2
 8005fa6:	3002      	addcc	r0, #2
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	db05      	blt.n	8005fb8 <__hi0bits+0x3c>
 8005fac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005fb0:	f100 0001 	add.w	r0, r0, #1
 8005fb4:	bf08      	it	eq
 8005fb6:	2020      	moveq	r0, #32
 8005fb8:	4770      	bx	lr

08005fba <__lo0bits>:
 8005fba:	6803      	ldr	r3, [r0, #0]
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	f013 0007 	ands.w	r0, r3, #7
 8005fc2:	d00b      	beq.n	8005fdc <__lo0bits+0x22>
 8005fc4:	07d9      	lsls	r1, r3, #31
 8005fc6:	d421      	bmi.n	800600c <__lo0bits+0x52>
 8005fc8:	0798      	lsls	r0, r3, #30
 8005fca:	bf49      	itett	mi
 8005fcc:	085b      	lsrmi	r3, r3, #1
 8005fce:	089b      	lsrpl	r3, r3, #2
 8005fd0:	2001      	movmi	r0, #1
 8005fd2:	6013      	strmi	r3, [r2, #0]
 8005fd4:	bf5c      	itt	pl
 8005fd6:	6013      	strpl	r3, [r2, #0]
 8005fd8:	2002      	movpl	r0, #2
 8005fda:	4770      	bx	lr
 8005fdc:	b299      	uxth	r1, r3
 8005fde:	b909      	cbnz	r1, 8005fe4 <__lo0bits+0x2a>
 8005fe0:	0c1b      	lsrs	r3, r3, #16
 8005fe2:	2010      	movs	r0, #16
 8005fe4:	b2d9      	uxtb	r1, r3
 8005fe6:	b909      	cbnz	r1, 8005fec <__lo0bits+0x32>
 8005fe8:	3008      	adds	r0, #8
 8005fea:	0a1b      	lsrs	r3, r3, #8
 8005fec:	0719      	lsls	r1, r3, #28
 8005fee:	bf04      	itt	eq
 8005ff0:	091b      	lsreq	r3, r3, #4
 8005ff2:	3004      	addeq	r0, #4
 8005ff4:	0799      	lsls	r1, r3, #30
 8005ff6:	bf04      	itt	eq
 8005ff8:	089b      	lsreq	r3, r3, #2
 8005ffa:	3002      	addeq	r0, #2
 8005ffc:	07d9      	lsls	r1, r3, #31
 8005ffe:	d403      	bmi.n	8006008 <__lo0bits+0x4e>
 8006000:	085b      	lsrs	r3, r3, #1
 8006002:	f100 0001 	add.w	r0, r0, #1
 8006006:	d003      	beq.n	8006010 <__lo0bits+0x56>
 8006008:	6013      	str	r3, [r2, #0]
 800600a:	4770      	bx	lr
 800600c:	2000      	movs	r0, #0
 800600e:	4770      	bx	lr
 8006010:	2020      	movs	r0, #32
 8006012:	4770      	bx	lr

08006014 <__i2b>:
 8006014:	b510      	push	{r4, lr}
 8006016:	460c      	mov	r4, r1
 8006018:	2101      	movs	r1, #1
 800601a:	f7ff febd 	bl	8005d98 <_Balloc>
 800601e:	4602      	mov	r2, r0
 8006020:	b928      	cbnz	r0, 800602e <__i2b+0x1a>
 8006022:	4b05      	ldr	r3, [pc, #20]	@ (8006038 <__i2b+0x24>)
 8006024:	4805      	ldr	r0, [pc, #20]	@ (800603c <__i2b+0x28>)
 8006026:	f240 1145 	movw	r1, #325	@ 0x145
 800602a:	f7fe ff4b 	bl	8004ec4 <__assert_func>
 800602e:	2301      	movs	r3, #1
 8006030:	6144      	str	r4, [r0, #20]
 8006032:	6103      	str	r3, [r0, #16]
 8006034:	bd10      	pop	{r4, pc}
 8006036:	bf00      	nop
 8006038:	08008709 	.word	0x08008709
 800603c:	0800871a 	.word	0x0800871a

08006040 <__multiply>:
 8006040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006044:	4614      	mov	r4, r2
 8006046:	690a      	ldr	r2, [r1, #16]
 8006048:	6923      	ldr	r3, [r4, #16]
 800604a:	429a      	cmp	r2, r3
 800604c:	bfa8      	it	ge
 800604e:	4623      	movge	r3, r4
 8006050:	460f      	mov	r7, r1
 8006052:	bfa4      	itt	ge
 8006054:	460c      	movge	r4, r1
 8006056:	461f      	movge	r7, r3
 8006058:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800605c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006060:	68a3      	ldr	r3, [r4, #8]
 8006062:	6861      	ldr	r1, [r4, #4]
 8006064:	eb0a 0609 	add.w	r6, sl, r9
 8006068:	42b3      	cmp	r3, r6
 800606a:	b085      	sub	sp, #20
 800606c:	bfb8      	it	lt
 800606e:	3101      	addlt	r1, #1
 8006070:	f7ff fe92 	bl	8005d98 <_Balloc>
 8006074:	b930      	cbnz	r0, 8006084 <__multiply+0x44>
 8006076:	4602      	mov	r2, r0
 8006078:	4b44      	ldr	r3, [pc, #272]	@ (800618c <__multiply+0x14c>)
 800607a:	4845      	ldr	r0, [pc, #276]	@ (8006190 <__multiply+0x150>)
 800607c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006080:	f7fe ff20 	bl	8004ec4 <__assert_func>
 8006084:	f100 0514 	add.w	r5, r0, #20
 8006088:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800608c:	462b      	mov	r3, r5
 800608e:	2200      	movs	r2, #0
 8006090:	4543      	cmp	r3, r8
 8006092:	d321      	bcc.n	80060d8 <__multiply+0x98>
 8006094:	f107 0114 	add.w	r1, r7, #20
 8006098:	f104 0214 	add.w	r2, r4, #20
 800609c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80060a0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80060a4:	9302      	str	r3, [sp, #8]
 80060a6:	1b13      	subs	r3, r2, r4
 80060a8:	3b15      	subs	r3, #21
 80060aa:	f023 0303 	bic.w	r3, r3, #3
 80060ae:	3304      	adds	r3, #4
 80060b0:	f104 0715 	add.w	r7, r4, #21
 80060b4:	42ba      	cmp	r2, r7
 80060b6:	bf38      	it	cc
 80060b8:	2304      	movcc	r3, #4
 80060ba:	9301      	str	r3, [sp, #4]
 80060bc:	9b02      	ldr	r3, [sp, #8]
 80060be:	9103      	str	r1, [sp, #12]
 80060c0:	428b      	cmp	r3, r1
 80060c2:	d80c      	bhi.n	80060de <__multiply+0x9e>
 80060c4:	2e00      	cmp	r6, #0
 80060c6:	dd03      	ble.n	80060d0 <__multiply+0x90>
 80060c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d05b      	beq.n	8006188 <__multiply+0x148>
 80060d0:	6106      	str	r6, [r0, #16]
 80060d2:	b005      	add	sp, #20
 80060d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060d8:	f843 2b04 	str.w	r2, [r3], #4
 80060dc:	e7d8      	b.n	8006090 <__multiply+0x50>
 80060de:	f8b1 a000 	ldrh.w	sl, [r1]
 80060e2:	f1ba 0f00 	cmp.w	sl, #0
 80060e6:	d024      	beq.n	8006132 <__multiply+0xf2>
 80060e8:	f104 0e14 	add.w	lr, r4, #20
 80060ec:	46a9      	mov	r9, r5
 80060ee:	f04f 0c00 	mov.w	ip, #0
 80060f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80060f6:	f8d9 3000 	ldr.w	r3, [r9]
 80060fa:	fa1f fb87 	uxth.w	fp, r7
 80060fe:	b29b      	uxth	r3, r3
 8006100:	fb0a 330b 	mla	r3, sl, fp, r3
 8006104:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006108:	f8d9 7000 	ldr.w	r7, [r9]
 800610c:	4463      	add	r3, ip
 800610e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006112:	fb0a c70b 	mla	r7, sl, fp, ip
 8006116:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800611a:	b29b      	uxth	r3, r3
 800611c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006120:	4572      	cmp	r2, lr
 8006122:	f849 3b04 	str.w	r3, [r9], #4
 8006126:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800612a:	d8e2      	bhi.n	80060f2 <__multiply+0xb2>
 800612c:	9b01      	ldr	r3, [sp, #4]
 800612e:	f845 c003 	str.w	ip, [r5, r3]
 8006132:	9b03      	ldr	r3, [sp, #12]
 8006134:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006138:	3104      	adds	r1, #4
 800613a:	f1b9 0f00 	cmp.w	r9, #0
 800613e:	d021      	beq.n	8006184 <__multiply+0x144>
 8006140:	682b      	ldr	r3, [r5, #0]
 8006142:	f104 0c14 	add.w	ip, r4, #20
 8006146:	46ae      	mov	lr, r5
 8006148:	f04f 0a00 	mov.w	sl, #0
 800614c:	f8bc b000 	ldrh.w	fp, [ip]
 8006150:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006154:	fb09 770b 	mla	r7, r9, fp, r7
 8006158:	4457      	add	r7, sl
 800615a:	b29b      	uxth	r3, r3
 800615c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006160:	f84e 3b04 	str.w	r3, [lr], #4
 8006164:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006168:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800616c:	f8be 3000 	ldrh.w	r3, [lr]
 8006170:	fb09 330a 	mla	r3, r9, sl, r3
 8006174:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006178:	4562      	cmp	r2, ip
 800617a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800617e:	d8e5      	bhi.n	800614c <__multiply+0x10c>
 8006180:	9f01      	ldr	r7, [sp, #4]
 8006182:	51eb      	str	r3, [r5, r7]
 8006184:	3504      	adds	r5, #4
 8006186:	e799      	b.n	80060bc <__multiply+0x7c>
 8006188:	3e01      	subs	r6, #1
 800618a:	e79b      	b.n	80060c4 <__multiply+0x84>
 800618c:	08008709 	.word	0x08008709
 8006190:	0800871a 	.word	0x0800871a

08006194 <__pow5mult>:
 8006194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006198:	4615      	mov	r5, r2
 800619a:	f012 0203 	ands.w	r2, r2, #3
 800619e:	4607      	mov	r7, r0
 80061a0:	460e      	mov	r6, r1
 80061a2:	d007      	beq.n	80061b4 <__pow5mult+0x20>
 80061a4:	4c25      	ldr	r4, [pc, #148]	@ (800623c <__pow5mult+0xa8>)
 80061a6:	3a01      	subs	r2, #1
 80061a8:	2300      	movs	r3, #0
 80061aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80061ae:	f7ff fe55 	bl	8005e5c <__multadd>
 80061b2:	4606      	mov	r6, r0
 80061b4:	10ad      	asrs	r5, r5, #2
 80061b6:	d03d      	beq.n	8006234 <__pow5mult+0xa0>
 80061b8:	69fc      	ldr	r4, [r7, #28]
 80061ba:	b97c      	cbnz	r4, 80061dc <__pow5mult+0x48>
 80061bc:	2010      	movs	r0, #16
 80061be:	f7ff fd35 	bl	8005c2c <malloc>
 80061c2:	4602      	mov	r2, r0
 80061c4:	61f8      	str	r0, [r7, #28]
 80061c6:	b928      	cbnz	r0, 80061d4 <__pow5mult+0x40>
 80061c8:	4b1d      	ldr	r3, [pc, #116]	@ (8006240 <__pow5mult+0xac>)
 80061ca:	481e      	ldr	r0, [pc, #120]	@ (8006244 <__pow5mult+0xb0>)
 80061cc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80061d0:	f7fe fe78 	bl	8004ec4 <__assert_func>
 80061d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80061d8:	6004      	str	r4, [r0, #0]
 80061da:	60c4      	str	r4, [r0, #12]
 80061dc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80061e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80061e4:	b94c      	cbnz	r4, 80061fa <__pow5mult+0x66>
 80061e6:	f240 2171 	movw	r1, #625	@ 0x271
 80061ea:	4638      	mov	r0, r7
 80061ec:	f7ff ff12 	bl	8006014 <__i2b>
 80061f0:	2300      	movs	r3, #0
 80061f2:	f8c8 0008 	str.w	r0, [r8, #8]
 80061f6:	4604      	mov	r4, r0
 80061f8:	6003      	str	r3, [r0, #0]
 80061fa:	f04f 0900 	mov.w	r9, #0
 80061fe:	07eb      	lsls	r3, r5, #31
 8006200:	d50a      	bpl.n	8006218 <__pow5mult+0x84>
 8006202:	4631      	mov	r1, r6
 8006204:	4622      	mov	r2, r4
 8006206:	4638      	mov	r0, r7
 8006208:	f7ff ff1a 	bl	8006040 <__multiply>
 800620c:	4631      	mov	r1, r6
 800620e:	4680      	mov	r8, r0
 8006210:	4638      	mov	r0, r7
 8006212:	f7ff fe01 	bl	8005e18 <_Bfree>
 8006216:	4646      	mov	r6, r8
 8006218:	106d      	asrs	r5, r5, #1
 800621a:	d00b      	beq.n	8006234 <__pow5mult+0xa0>
 800621c:	6820      	ldr	r0, [r4, #0]
 800621e:	b938      	cbnz	r0, 8006230 <__pow5mult+0x9c>
 8006220:	4622      	mov	r2, r4
 8006222:	4621      	mov	r1, r4
 8006224:	4638      	mov	r0, r7
 8006226:	f7ff ff0b 	bl	8006040 <__multiply>
 800622a:	6020      	str	r0, [r4, #0]
 800622c:	f8c0 9000 	str.w	r9, [r0]
 8006230:	4604      	mov	r4, r0
 8006232:	e7e4      	b.n	80061fe <__pow5mult+0x6a>
 8006234:	4630      	mov	r0, r6
 8006236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800623a:	bf00      	nop
 800623c:	08008774 	.word	0x08008774
 8006240:	080085c0 	.word	0x080085c0
 8006244:	0800871a 	.word	0x0800871a

08006248 <__lshift>:
 8006248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800624c:	460c      	mov	r4, r1
 800624e:	6849      	ldr	r1, [r1, #4]
 8006250:	6923      	ldr	r3, [r4, #16]
 8006252:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006256:	68a3      	ldr	r3, [r4, #8]
 8006258:	4607      	mov	r7, r0
 800625a:	4691      	mov	r9, r2
 800625c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006260:	f108 0601 	add.w	r6, r8, #1
 8006264:	42b3      	cmp	r3, r6
 8006266:	db0b      	blt.n	8006280 <__lshift+0x38>
 8006268:	4638      	mov	r0, r7
 800626a:	f7ff fd95 	bl	8005d98 <_Balloc>
 800626e:	4605      	mov	r5, r0
 8006270:	b948      	cbnz	r0, 8006286 <__lshift+0x3e>
 8006272:	4602      	mov	r2, r0
 8006274:	4b28      	ldr	r3, [pc, #160]	@ (8006318 <__lshift+0xd0>)
 8006276:	4829      	ldr	r0, [pc, #164]	@ (800631c <__lshift+0xd4>)
 8006278:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800627c:	f7fe fe22 	bl	8004ec4 <__assert_func>
 8006280:	3101      	adds	r1, #1
 8006282:	005b      	lsls	r3, r3, #1
 8006284:	e7ee      	b.n	8006264 <__lshift+0x1c>
 8006286:	2300      	movs	r3, #0
 8006288:	f100 0114 	add.w	r1, r0, #20
 800628c:	f100 0210 	add.w	r2, r0, #16
 8006290:	4618      	mov	r0, r3
 8006292:	4553      	cmp	r3, sl
 8006294:	db33      	blt.n	80062fe <__lshift+0xb6>
 8006296:	6920      	ldr	r0, [r4, #16]
 8006298:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800629c:	f104 0314 	add.w	r3, r4, #20
 80062a0:	f019 091f 	ands.w	r9, r9, #31
 80062a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80062a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80062ac:	d02b      	beq.n	8006306 <__lshift+0xbe>
 80062ae:	f1c9 0e20 	rsb	lr, r9, #32
 80062b2:	468a      	mov	sl, r1
 80062b4:	2200      	movs	r2, #0
 80062b6:	6818      	ldr	r0, [r3, #0]
 80062b8:	fa00 f009 	lsl.w	r0, r0, r9
 80062bc:	4310      	orrs	r0, r2
 80062be:	f84a 0b04 	str.w	r0, [sl], #4
 80062c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80062c6:	459c      	cmp	ip, r3
 80062c8:	fa22 f20e 	lsr.w	r2, r2, lr
 80062cc:	d8f3      	bhi.n	80062b6 <__lshift+0x6e>
 80062ce:	ebac 0304 	sub.w	r3, ip, r4
 80062d2:	3b15      	subs	r3, #21
 80062d4:	f023 0303 	bic.w	r3, r3, #3
 80062d8:	3304      	adds	r3, #4
 80062da:	f104 0015 	add.w	r0, r4, #21
 80062de:	4584      	cmp	ip, r0
 80062e0:	bf38      	it	cc
 80062e2:	2304      	movcc	r3, #4
 80062e4:	50ca      	str	r2, [r1, r3]
 80062e6:	b10a      	cbz	r2, 80062ec <__lshift+0xa4>
 80062e8:	f108 0602 	add.w	r6, r8, #2
 80062ec:	3e01      	subs	r6, #1
 80062ee:	4638      	mov	r0, r7
 80062f0:	612e      	str	r6, [r5, #16]
 80062f2:	4621      	mov	r1, r4
 80062f4:	f7ff fd90 	bl	8005e18 <_Bfree>
 80062f8:	4628      	mov	r0, r5
 80062fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8006302:	3301      	adds	r3, #1
 8006304:	e7c5      	b.n	8006292 <__lshift+0x4a>
 8006306:	3904      	subs	r1, #4
 8006308:	f853 2b04 	ldr.w	r2, [r3], #4
 800630c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006310:	459c      	cmp	ip, r3
 8006312:	d8f9      	bhi.n	8006308 <__lshift+0xc0>
 8006314:	e7ea      	b.n	80062ec <__lshift+0xa4>
 8006316:	bf00      	nop
 8006318:	08008709 	.word	0x08008709
 800631c:	0800871a 	.word	0x0800871a

08006320 <__mcmp>:
 8006320:	690a      	ldr	r2, [r1, #16]
 8006322:	4603      	mov	r3, r0
 8006324:	6900      	ldr	r0, [r0, #16]
 8006326:	1a80      	subs	r0, r0, r2
 8006328:	b530      	push	{r4, r5, lr}
 800632a:	d10e      	bne.n	800634a <__mcmp+0x2a>
 800632c:	3314      	adds	r3, #20
 800632e:	3114      	adds	r1, #20
 8006330:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006334:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006338:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800633c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006340:	4295      	cmp	r5, r2
 8006342:	d003      	beq.n	800634c <__mcmp+0x2c>
 8006344:	d205      	bcs.n	8006352 <__mcmp+0x32>
 8006346:	f04f 30ff 	mov.w	r0, #4294967295
 800634a:	bd30      	pop	{r4, r5, pc}
 800634c:	42a3      	cmp	r3, r4
 800634e:	d3f3      	bcc.n	8006338 <__mcmp+0x18>
 8006350:	e7fb      	b.n	800634a <__mcmp+0x2a>
 8006352:	2001      	movs	r0, #1
 8006354:	e7f9      	b.n	800634a <__mcmp+0x2a>
	...

08006358 <__mdiff>:
 8006358:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800635c:	4689      	mov	r9, r1
 800635e:	4606      	mov	r6, r0
 8006360:	4611      	mov	r1, r2
 8006362:	4648      	mov	r0, r9
 8006364:	4614      	mov	r4, r2
 8006366:	f7ff ffdb 	bl	8006320 <__mcmp>
 800636a:	1e05      	subs	r5, r0, #0
 800636c:	d112      	bne.n	8006394 <__mdiff+0x3c>
 800636e:	4629      	mov	r1, r5
 8006370:	4630      	mov	r0, r6
 8006372:	f7ff fd11 	bl	8005d98 <_Balloc>
 8006376:	4602      	mov	r2, r0
 8006378:	b928      	cbnz	r0, 8006386 <__mdiff+0x2e>
 800637a:	4b3f      	ldr	r3, [pc, #252]	@ (8006478 <__mdiff+0x120>)
 800637c:	f240 2137 	movw	r1, #567	@ 0x237
 8006380:	483e      	ldr	r0, [pc, #248]	@ (800647c <__mdiff+0x124>)
 8006382:	f7fe fd9f 	bl	8004ec4 <__assert_func>
 8006386:	2301      	movs	r3, #1
 8006388:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800638c:	4610      	mov	r0, r2
 800638e:	b003      	add	sp, #12
 8006390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006394:	bfbc      	itt	lt
 8006396:	464b      	movlt	r3, r9
 8006398:	46a1      	movlt	r9, r4
 800639a:	4630      	mov	r0, r6
 800639c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80063a0:	bfba      	itte	lt
 80063a2:	461c      	movlt	r4, r3
 80063a4:	2501      	movlt	r5, #1
 80063a6:	2500      	movge	r5, #0
 80063a8:	f7ff fcf6 	bl	8005d98 <_Balloc>
 80063ac:	4602      	mov	r2, r0
 80063ae:	b918      	cbnz	r0, 80063b8 <__mdiff+0x60>
 80063b0:	4b31      	ldr	r3, [pc, #196]	@ (8006478 <__mdiff+0x120>)
 80063b2:	f240 2145 	movw	r1, #581	@ 0x245
 80063b6:	e7e3      	b.n	8006380 <__mdiff+0x28>
 80063b8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80063bc:	6926      	ldr	r6, [r4, #16]
 80063be:	60c5      	str	r5, [r0, #12]
 80063c0:	f109 0310 	add.w	r3, r9, #16
 80063c4:	f109 0514 	add.w	r5, r9, #20
 80063c8:	f104 0e14 	add.w	lr, r4, #20
 80063cc:	f100 0b14 	add.w	fp, r0, #20
 80063d0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80063d4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80063d8:	9301      	str	r3, [sp, #4]
 80063da:	46d9      	mov	r9, fp
 80063dc:	f04f 0c00 	mov.w	ip, #0
 80063e0:	9b01      	ldr	r3, [sp, #4]
 80063e2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80063e6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80063ea:	9301      	str	r3, [sp, #4]
 80063ec:	fa1f f38a 	uxth.w	r3, sl
 80063f0:	4619      	mov	r1, r3
 80063f2:	b283      	uxth	r3, r0
 80063f4:	1acb      	subs	r3, r1, r3
 80063f6:	0c00      	lsrs	r0, r0, #16
 80063f8:	4463      	add	r3, ip
 80063fa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80063fe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006402:	b29b      	uxth	r3, r3
 8006404:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006408:	4576      	cmp	r6, lr
 800640a:	f849 3b04 	str.w	r3, [r9], #4
 800640e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006412:	d8e5      	bhi.n	80063e0 <__mdiff+0x88>
 8006414:	1b33      	subs	r3, r6, r4
 8006416:	3b15      	subs	r3, #21
 8006418:	f023 0303 	bic.w	r3, r3, #3
 800641c:	3415      	adds	r4, #21
 800641e:	3304      	adds	r3, #4
 8006420:	42a6      	cmp	r6, r4
 8006422:	bf38      	it	cc
 8006424:	2304      	movcc	r3, #4
 8006426:	441d      	add	r5, r3
 8006428:	445b      	add	r3, fp
 800642a:	461e      	mov	r6, r3
 800642c:	462c      	mov	r4, r5
 800642e:	4544      	cmp	r4, r8
 8006430:	d30e      	bcc.n	8006450 <__mdiff+0xf8>
 8006432:	f108 0103 	add.w	r1, r8, #3
 8006436:	1b49      	subs	r1, r1, r5
 8006438:	f021 0103 	bic.w	r1, r1, #3
 800643c:	3d03      	subs	r5, #3
 800643e:	45a8      	cmp	r8, r5
 8006440:	bf38      	it	cc
 8006442:	2100      	movcc	r1, #0
 8006444:	440b      	add	r3, r1
 8006446:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800644a:	b191      	cbz	r1, 8006472 <__mdiff+0x11a>
 800644c:	6117      	str	r7, [r2, #16]
 800644e:	e79d      	b.n	800638c <__mdiff+0x34>
 8006450:	f854 1b04 	ldr.w	r1, [r4], #4
 8006454:	46e6      	mov	lr, ip
 8006456:	0c08      	lsrs	r0, r1, #16
 8006458:	fa1c fc81 	uxtah	ip, ip, r1
 800645c:	4471      	add	r1, lr
 800645e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006462:	b289      	uxth	r1, r1
 8006464:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006468:	f846 1b04 	str.w	r1, [r6], #4
 800646c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006470:	e7dd      	b.n	800642e <__mdiff+0xd6>
 8006472:	3f01      	subs	r7, #1
 8006474:	e7e7      	b.n	8006446 <__mdiff+0xee>
 8006476:	bf00      	nop
 8006478:	08008709 	.word	0x08008709
 800647c:	0800871a 	.word	0x0800871a

08006480 <__ulp>:
 8006480:	b082      	sub	sp, #8
 8006482:	ed8d 0b00 	vstr	d0, [sp]
 8006486:	9a01      	ldr	r2, [sp, #4]
 8006488:	4b0f      	ldr	r3, [pc, #60]	@ (80064c8 <__ulp+0x48>)
 800648a:	4013      	ands	r3, r2
 800648c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006490:	2b00      	cmp	r3, #0
 8006492:	dc08      	bgt.n	80064a6 <__ulp+0x26>
 8006494:	425b      	negs	r3, r3
 8006496:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800649a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800649e:	da04      	bge.n	80064aa <__ulp+0x2a>
 80064a0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80064a4:	4113      	asrs	r3, r2
 80064a6:	2200      	movs	r2, #0
 80064a8:	e008      	b.n	80064bc <__ulp+0x3c>
 80064aa:	f1a2 0314 	sub.w	r3, r2, #20
 80064ae:	2b1e      	cmp	r3, #30
 80064b0:	bfda      	itte	le
 80064b2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80064b6:	40da      	lsrle	r2, r3
 80064b8:	2201      	movgt	r2, #1
 80064ba:	2300      	movs	r3, #0
 80064bc:	4619      	mov	r1, r3
 80064be:	4610      	mov	r0, r2
 80064c0:	ec41 0b10 	vmov	d0, r0, r1
 80064c4:	b002      	add	sp, #8
 80064c6:	4770      	bx	lr
 80064c8:	7ff00000 	.word	0x7ff00000

080064cc <__b2d>:
 80064cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064d0:	6906      	ldr	r6, [r0, #16]
 80064d2:	f100 0814 	add.w	r8, r0, #20
 80064d6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80064da:	1f37      	subs	r7, r6, #4
 80064dc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80064e0:	4610      	mov	r0, r2
 80064e2:	f7ff fd4b 	bl	8005f7c <__hi0bits>
 80064e6:	f1c0 0320 	rsb	r3, r0, #32
 80064ea:	280a      	cmp	r0, #10
 80064ec:	600b      	str	r3, [r1, #0]
 80064ee:	491b      	ldr	r1, [pc, #108]	@ (800655c <__b2d+0x90>)
 80064f0:	dc15      	bgt.n	800651e <__b2d+0x52>
 80064f2:	f1c0 0c0b 	rsb	ip, r0, #11
 80064f6:	fa22 f30c 	lsr.w	r3, r2, ip
 80064fa:	45b8      	cmp	r8, r7
 80064fc:	ea43 0501 	orr.w	r5, r3, r1
 8006500:	bf34      	ite	cc
 8006502:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006506:	2300      	movcs	r3, #0
 8006508:	3015      	adds	r0, #21
 800650a:	fa02 f000 	lsl.w	r0, r2, r0
 800650e:	fa23 f30c 	lsr.w	r3, r3, ip
 8006512:	4303      	orrs	r3, r0
 8006514:	461c      	mov	r4, r3
 8006516:	ec45 4b10 	vmov	d0, r4, r5
 800651a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800651e:	45b8      	cmp	r8, r7
 8006520:	bf3a      	itte	cc
 8006522:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006526:	f1a6 0708 	subcc.w	r7, r6, #8
 800652a:	2300      	movcs	r3, #0
 800652c:	380b      	subs	r0, #11
 800652e:	d012      	beq.n	8006556 <__b2d+0x8a>
 8006530:	f1c0 0120 	rsb	r1, r0, #32
 8006534:	fa23 f401 	lsr.w	r4, r3, r1
 8006538:	4082      	lsls	r2, r0
 800653a:	4322      	orrs	r2, r4
 800653c:	4547      	cmp	r7, r8
 800653e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8006542:	bf8c      	ite	hi
 8006544:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006548:	2200      	movls	r2, #0
 800654a:	4083      	lsls	r3, r0
 800654c:	40ca      	lsrs	r2, r1
 800654e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006552:	4313      	orrs	r3, r2
 8006554:	e7de      	b.n	8006514 <__b2d+0x48>
 8006556:	ea42 0501 	orr.w	r5, r2, r1
 800655a:	e7db      	b.n	8006514 <__b2d+0x48>
 800655c:	3ff00000 	.word	0x3ff00000

08006560 <__d2b>:
 8006560:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006564:	460f      	mov	r7, r1
 8006566:	2101      	movs	r1, #1
 8006568:	ec59 8b10 	vmov	r8, r9, d0
 800656c:	4616      	mov	r6, r2
 800656e:	f7ff fc13 	bl	8005d98 <_Balloc>
 8006572:	4604      	mov	r4, r0
 8006574:	b930      	cbnz	r0, 8006584 <__d2b+0x24>
 8006576:	4602      	mov	r2, r0
 8006578:	4b23      	ldr	r3, [pc, #140]	@ (8006608 <__d2b+0xa8>)
 800657a:	4824      	ldr	r0, [pc, #144]	@ (800660c <__d2b+0xac>)
 800657c:	f240 310f 	movw	r1, #783	@ 0x30f
 8006580:	f7fe fca0 	bl	8004ec4 <__assert_func>
 8006584:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006588:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800658c:	b10d      	cbz	r5, 8006592 <__d2b+0x32>
 800658e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006592:	9301      	str	r3, [sp, #4]
 8006594:	f1b8 0300 	subs.w	r3, r8, #0
 8006598:	d023      	beq.n	80065e2 <__d2b+0x82>
 800659a:	4668      	mov	r0, sp
 800659c:	9300      	str	r3, [sp, #0]
 800659e:	f7ff fd0c 	bl	8005fba <__lo0bits>
 80065a2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80065a6:	b1d0      	cbz	r0, 80065de <__d2b+0x7e>
 80065a8:	f1c0 0320 	rsb	r3, r0, #32
 80065ac:	fa02 f303 	lsl.w	r3, r2, r3
 80065b0:	430b      	orrs	r3, r1
 80065b2:	40c2      	lsrs	r2, r0
 80065b4:	6163      	str	r3, [r4, #20]
 80065b6:	9201      	str	r2, [sp, #4]
 80065b8:	9b01      	ldr	r3, [sp, #4]
 80065ba:	61a3      	str	r3, [r4, #24]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	bf0c      	ite	eq
 80065c0:	2201      	moveq	r2, #1
 80065c2:	2202      	movne	r2, #2
 80065c4:	6122      	str	r2, [r4, #16]
 80065c6:	b1a5      	cbz	r5, 80065f2 <__d2b+0x92>
 80065c8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80065cc:	4405      	add	r5, r0
 80065ce:	603d      	str	r5, [r7, #0]
 80065d0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80065d4:	6030      	str	r0, [r6, #0]
 80065d6:	4620      	mov	r0, r4
 80065d8:	b003      	add	sp, #12
 80065da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80065de:	6161      	str	r1, [r4, #20]
 80065e0:	e7ea      	b.n	80065b8 <__d2b+0x58>
 80065e2:	a801      	add	r0, sp, #4
 80065e4:	f7ff fce9 	bl	8005fba <__lo0bits>
 80065e8:	9b01      	ldr	r3, [sp, #4]
 80065ea:	6163      	str	r3, [r4, #20]
 80065ec:	3020      	adds	r0, #32
 80065ee:	2201      	movs	r2, #1
 80065f0:	e7e8      	b.n	80065c4 <__d2b+0x64>
 80065f2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80065f6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80065fa:	6038      	str	r0, [r7, #0]
 80065fc:	6918      	ldr	r0, [r3, #16]
 80065fe:	f7ff fcbd 	bl	8005f7c <__hi0bits>
 8006602:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006606:	e7e5      	b.n	80065d4 <__d2b+0x74>
 8006608:	08008709 	.word	0x08008709
 800660c:	0800871a 	.word	0x0800871a

08006610 <__ratio>:
 8006610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006614:	b085      	sub	sp, #20
 8006616:	e9cd 1000 	strd	r1, r0, [sp]
 800661a:	a902      	add	r1, sp, #8
 800661c:	f7ff ff56 	bl	80064cc <__b2d>
 8006620:	9800      	ldr	r0, [sp, #0]
 8006622:	a903      	add	r1, sp, #12
 8006624:	ec55 4b10 	vmov	r4, r5, d0
 8006628:	f7ff ff50 	bl	80064cc <__b2d>
 800662c:	9b01      	ldr	r3, [sp, #4]
 800662e:	6919      	ldr	r1, [r3, #16]
 8006630:	9b00      	ldr	r3, [sp, #0]
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	1ac9      	subs	r1, r1, r3
 8006636:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800663a:	1a9b      	subs	r3, r3, r2
 800663c:	ec5b ab10 	vmov	sl, fp, d0
 8006640:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006644:	2b00      	cmp	r3, #0
 8006646:	bfce      	itee	gt
 8006648:	462a      	movgt	r2, r5
 800664a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800664e:	465a      	movle	r2, fp
 8006650:	462f      	mov	r7, r5
 8006652:	46d9      	mov	r9, fp
 8006654:	bfcc      	ite	gt
 8006656:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800665a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800665e:	464b      	mov	r3, r9
 8006660:	4652      	mov	r2, sl
 8006662:	4620      	mov	r0, r4
 8006664:	4639      	mov	r1, r7
 8006666:	f7fa f8f1 	bl	800084c <__aeabi_ddiv>
 800666a:	ec41 0b10 	vmov	d0, r0, r1
 800666e:	b005      	add	sp, #20
 8006670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006674 <__copybits>:
 8006674:	3901      	subs	r1, #1
 8006676:	b570      	push	{r4, r5, r6, lr}
 8006678:	1149      	asrs	r1, r1, #5
 800667a:	6914      	ldr	r4, [r2, #16]
 800667c:	3101      	adds	r1, #1
 800667e:	f102 0314 	add.w	r3, r2, #20
 8006682:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006686:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800668a:	1f05      	subs	r5, r0, #4
 800668c:	42a3      	cmp	r3, r4
 800668e:	d30c      	bcc.n	80066aa <__copybits+0x36>
 8006690:	1aa3      	subs	r3, r4, r2
 8006692:	3b11      	subs	r3, #17
 8006694:	f023 0303 	bic.w	r3, r3, #3
 8006698:	3211      	adds	r2, #17
 800669a:	42a2      	cmp	r2, r4
 800669c:	bf88      	it	hi
 800669e:	2300      	movhi	r3, #0
 80066a0:	4418      	add	r0, r3
 80066a2:	2300      	movs	r3, #0
 80066a4:	4288      	cmp	r0, r1
 80066a6:	d305      	bcc.n	80066b4 <__copybits+0x40>
 80066a8:	bd70      	pop	{r4, r5, r6, pc}
 80066aa:	f853 6b04 	ldr.w	r6, [r3], #4
 80066ae:	f845 6f04 	str.w	r6, [r5, #4]!
 80066b2:	e7eb      	b.n	800668c <__copybits+0x18>
 80066b4:	f840 3b04 	str.w	r3, [r0], #4
 80066b8:	e7f4      	b.n	80066a4 <__copybits+0x30>

080066ba <__any_on>:
 80066ba:	f100 0214 	add.w	r2, r0, #20
 80066be:	6900      	ldr	r0, [r0, #16]
 80066c0:	114b      	asrs	r3, r1, #5
 80066c2:	4298      	cmp	r0, r3
 80066c4:	b510      	push	{r4, lr}
 80066c6:	db11      	blt.n	80066ec <__any_on+0x32>
 80066c8:	dd0a      	ble.n	80066e0 <__any_on+0x26>
 80066ca:	f011 011f 	ands.w	r1, r1, #31
 80066ce:	d007      	beq.n	80066e0 <__any_on+0x26>
 80066d0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80066d4:	fa24 f001 	lsr.w	r0, r4, r1
 80066d8:	fa00 f101 	lsl.w	r1, r0, r1
 80066dc:	428c      	cmp	r4, r1
 80066de:	d10b      	bne.n	80066f8 <__any_on+0x3e>
 80066e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d803      	bhi.n	80066f0 <__any_on+0x36>
 80066e8:	2000      	movs	r0, #0
 80066ea:	bd10      	pop	{r4, pc}
 80066ec:	4603      	mov	r3, r0
 80066ee:	e7f7      	b.n	80066e0 <__any_on+0x26>
 80066f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80066f4:	2900      	cmp	r1, #0
 80066f6:	d0f5      	beq.n	80066e4 <__any_on+0x2a>
 80066f8:	2001      	movs	r0, #1
 80066fa:	e7f6      	b.n	80066ea <__any_on+0x30>

080066fc <sulp>:
 80066fc:	b570      	push	{r4, r5, r6, lr}
 80066fe:	4604      	mov	r4, r0
 8006700:	460d      	mov	r5, r1
 8006702:	ec45 4b10 	vmov	d0, r4, r5
 8006706:	4616      	mov	r6, r2
 8006708:	f7ff feba 	bl	8006480 <__ulp>
 800670c:	ec51 0b10 	vmov	r0, r1, d0
 8006710:	b17e      	cbz	r6, 8006732 <sulp+0x36>
 8006712:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006716:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800671a:	2b00      	cmp	r3, #0
 800671c:	dd09      	ble.n	8006732 <sulp+0x36>
 800671e:	051b      	lsls	r3, r3, #20
 8006720:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006724:	2400      	movs	r4, #0
 8006726:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800672a:	4622      	mov	r2, r4
 800672c:	462b      	mov	r3, r5
 800672e:	f7f9 ff63 	bl	80005f8 <__aeabi_dmul>
 8006732:	ec41 0b10 	vmov	d0, r0, r1
 8006736:	bd70      	pop	{r4, r5, r6, pc}

08006738 <_strtod_l>:
 8006738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800673c:	b09f      	sub	sp, #124	@ 0x7c
 800673e:	460c      	mov	r4, r1
 8006740:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006742:	2200      	movs	r2, #0
 8006744:	921a      	str	r2, [sp, #104]	@ 0x68
 8006746:	9005      	str	r0, [sp, #20]
 8006748:	f04f 0a00 	mov.w	sl, #0
 800674c:	f04f 0b00 	mov.w	fp, #0
 8006750:	460a      	mov	r2, r1
 8006752:	9219      	str	r2, [sp, #100]	@ 0x64
 8006754:	7811      	ldrb	r1, [r2, #0]
 8006756:	292b      	cmp	r1, #43	@ 0x2b
 8006758:	d04a      	beq.n	80067f0 <_strtod_l+0xb8>
 800675a:	d838      	bhi.n	80067ce <_strtod_l+0x96>
 800675c:	290d      	cmp	r1, #13
 800675e:	d832      	bhi.n	80067c6 <_strtod_l+0x8e>
 8006760:	2908      	cmp	r1, #8
 8006762:	d832      	bhi.n	80067ca <_strtod_l+0x92>
 8006764:	2900      	cmp	r1, #0
 8006766:	d03b      	beq.n	80067e0 <_strtod_l+0xa8>
 8006768:	2200      	movs	r2, #0
 800676a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800676c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800676e:	782a      	ldrb	r2, [r5, #0]
 8006770:	2a30      	cmp	r2, #48	@ 0x30
 8006772:	f040 80b3 	bne.w	80068dc <_strtod_l+0x1a4>
 8006776:	786a      	ldrb	r2, [r5, #1]
 8006778:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800677c:	2a58      	cmp	r2, #88	@ 0x58
 800677e:	d16e      	bne.n	800685e <_strtod_l+0x126>
 8006780:	9302      	str	r3, [sp, #8]
 8006782:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006784:	9301      	str	r3, [sp, #4]
 8006786:	ab1a      	add	r3, sp, #104	@ 0x68
 8006788:	9300      	str	r3, [sp, #0]
 800678a:	4a8e      	ldr	r2, [pc, #568]	@ (80069c4 <_strtod_l+0x28c>)
 800678c:	9805      	ldr	r0, [sp, #20]
 800678e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006790:	a919      	add	r1, sp, #100	@ 0x64
 8006792:	f001 f923 	bl	80079dc <__gethex>
 8006796:	f010 060f 	ands.w	r6, r0, #15
 800679a:	4604      	mov	r4, r0
 800679c:	d005      	beq.n	80067aa <_strtod_l+0x72>
 800679e:	2e06      	cmp	r6, #6
 80067a0:	d128      	bne.n	80067f4 <_strtod_l+0xbc>
 80067a2:	3501      	adds	r5, #1
 80067a4:	2300      	movs	r3, #0
 80067a6:	9519      	str	r5, [sp, #100]	@ 0x64
 80067a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80067aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	f040 858e 	bne.w	80072ce <_strtod_l+0xb96>
 80067b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067b4:	b1cb      	cbz	r3, 80067ea <_strtod_l+0xb2>
 80067b6:	4652      	mov	r2, sl
 80067b8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80067bc:	ec43 2b10 	vmov	d0, r2, r3
 80067c0:	b01f      	add	sp, #124	@ 0x7c
 80067c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067c6:	2920      	cmp	r1, #32
 80067c8:	d1ce      	bne.n	8006768 <_strtod_l+0x30>
 80067ca:	3201      	adds	r2, #1
 80067cc:	e7c1      	b.n	8006752 <_strtod_l+0x1a>
 80067ce:	292d      	cmp	r1, #45	@ 0x2d
 80067d0:	d1ca      	bne.n	8006768 <_strtod_l+0x30>
 80067d2:	2101      	movs	r1, #1
 80067d4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80067d6:	1c51      	adds	r1, r2, #1
 80067d8:	9119      	str	r1, [sp, #100]	@ 0x64
 80067da:	7852      	ldrb	r2, [r2, #1]
 80067dc:	2a00      	cmp	r2, #0
 80067de:	d1c5      	bne.n	800676c <_strtod_l+0x34>
 80067e0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80067e2:	9419      	str	r4, [sp, #100]	@ 0x64
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f040 8570 	bne.w	80072ca <_strtod_l+0xb92>
 80067ea:	4652      	mov	r2, sl
 80067ec:	465b      	mov	r3, fp
 80067ee:	e7e5      	b.n	80067bc <_strtod_l+0x84>
 80067f0:	2100      	movs	r1, #0
 80067f2:	e7ef      	b.n	80067d4 <_strtod_l+0x9c>
 80067f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80067f6:	b13a      	cbz	r2, 8006808 <_strtod_l+0xd0>
 80067f8:	2135      	movs	r1, #53	@ 0x35
 80067fa:	a81c      	add	r0, sp, #112	@ 0x70
 80067fc:	f7ff ff3a 	bl	8006674 <__copybits>
 8006800:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006802:	9805      	ldr	r0, [sp, #20]
 8006804:	f7ff fb08 	bl	8005e18 <_Bfree>
 8006808:	3e01      	subs	r6, #1
 800680a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800680c:	2e04      	cmp	r6, #4
 800680e:	d806      	bhi.n	800681e <_strtod_l+0xe6>
 8006810:	e8df f006 	tbb	[pc, r6]
 8006814:	201d0314 	.word	0x201d0314
 8006818:	14          	.byte	0x14
 8006819:	00          	.byte	0x00
 800681a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800681e:	05e1      	lsls	r1, r4, #23
 8006820:	bf48      	it	mi
 8006822:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006826:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800682a:	0d1b      	lsrs	r3, r3, #20
 800682c:	051b      	lsls	r3, r3, #20
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1bb      	bne.n	80067aa <_strtod_l+0x72>
 8006832:	f7fe fb13 	bl	8004e5c <__errno>
 8006836:	2322      	movs	r3, #34	@ 0x22
 8006838:	6003      	str	r3, [r0, #0]
 800683a:	e7b6      	b.n	80067aa <_strtod_l+0x72>
 800683c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006840:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006844:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006848:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800684c:	e7e7      	b.n	800681e <_strtod_l+0xe6>
 800684e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80069cc <_strtod_l+0x294>
 8006852:	e7e4      	b.n	800681e <_strtod_l+0xe6>
 8006854:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006858:	f04f 3aff 	mov.w	sl, #4294967295
 800685c:	e7df      	b.n	800681e <_strtod_l+0xe6>
 800685e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006860:	1c5a      	adds	r2, r3, #1
 8006862:	9219      	str	r2, [sp, #100]	@ 0x64
 8006864:	785b      	ldrb	r3, [r3, #1]
 8006866:	2b30      	cmp	r3, #48	@ 0x30
 8006868:	d0f9      	beq.n	800685e <_strtod_l+0x126>
 800686a:	2b00      	cmp	r3, #0
 800686c:	d09d      	beq.n	80067aa <_strtod_l+0x72>
 800686e:	2301      	movs	r3, #1
 8006870:	9309      	str	r3, [sp, #36]	@ 0x24
 8006872:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006874:	930c      	str	r3, [sp, #48]	@ 0x30
 8006876:	2300      	movs	r3, #0
 8006878:	9308      	str	r3, [sp, #32]
 800687a:	930a      	str	r3, [sp, #40]	@ 0x28
 800687c:	461f      	mov	r7, r3
 800687e:	220a      	movs	r2, #10
 8006880:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006882:	7805      	ldrb	r5, [r0, #0]
 8006884:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006888:	b2d9      	uxtb	r1, r3
 800688a:	2909      	cmp	r1, #9
 800688c:	d928      	bls.n	80068e0 <_strtod_l+0x1a8>
 800688e:	494e      	ldr	r1, [pc, #312]	@ (80069c8 <_strtod_l+0x290>)
 8006890:	2201      	movs	r2, #1
 8006892:	f000 ffe7 	bl	8007864 <strncmp>
 8006896:	2800      	cmp	r0, #0
 8006898:	d032      	beq.n	8006900 <_strtod_l+0x1c8>
 800689a:	2000      	movs	r0, #0
 800689c:	462a      	mov	r2, r5
 800689e:	4681      	mov	r9, r0
 80068a0:	463d      	mov	r5, r7
 80068a2:	4603      	mov	r3, r0
 80068a4:	2a65      	cmp	r2, #101	@ 0x65
 80068a6:	d001      	beq.n	80068ac <_strtod_l+0x174>
 80068a8:	2a45      	cmp	r2, #69	@ 0x45
 80068aa:	d114      	bne.n	80068d6 <_strtod_l+0x19e>
 80068ac:	b91d      	cbnz	r5, 80068b6 <_strtod_l+0x17e>
 80068ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068b0:	4302      	orrs	r2, r0
 80068b2:	d095      	beq.n	80067e0 <_strtod_l+0xa8>
 80068b4:	2500      	movs	r5, #0
 80068b6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80068b8:	1c62      	adds	r2, r4, #1
 80068ba:	9219      	str	r2, [sp, #100]	@ 0x64
 80068bc:	7862      	ldrb	r2, [r4, #1]
 80068be:	2a2b      	cmp	r2, #43	@ 0x2b
 80068c0:	d077      	beq.n	80069b2 <_strtod_l+0x27a>
 80068c2:	2a2d      	cmp	r2, #45	@ 0x2d
 80068c4:	d07b      	beq.n	80069be <_strtod_l+0x286>
 80068c6:	f04f 0c00 	mov.w	ip, #0
 80068ca:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80068ce:	2909      	cmp	r1, #9
 80068d0:	f240 8082 	bls.w	80069d8 <_strtod_l+0x2a0>
 80068d4:	9419      	str	r4, [sp, #100]	@ 0x64
 80068d6:	f04f 0800 	mov.w	r8, #0
 80068da:	e0a2      	b.n	8006a22 <_strtod_l+0x2ea>
 80068dc:	2300      	movs	r3, #0
 80068de:	e7c7      	b.n	8006870 <_strtod_l+0x138>
 80068e0:	2f08      	cmp	r7, #8
 80068e2:	bfd5      	itete	le
 80068e4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80068e6:	9908      	ldrgt	r1, [sp, #32]
 80068e8:	fb02 3301 	mlale	r3, r2, r1, r3
 80068ec:	fb02 3301 	mlagt	r3, r2, r1, r3
 80068f0:	f100 0001 	add.w	r0, r0, #1
 80068f4:	bfd4      	ite	le
 80068f6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80068f8:	9308      	strgt	r3, [sp, #32]
 80068fa:	3701      	adds	r7, #1
 80068fc:	9019      	str	r0, [sp, #100]	@ 0x64
 80068fe:	e7bf      	b.n	8006880 <_strtod_l+0x148>
 8006900:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006902:	1c5a      	adds	r2, r3, #1
 8006904:	9219      	str	r2, [sp, #100]	@ 0x64
 8006906:	785a      	ldrb	r2, [r3, #1]
 8006908:	b37f      	cbz	r7, 800696a <_strtod_l+0x232>
 800690a:	4681      	mov	r9, r0
 800690c:	463d      	mov	r5, r7
 800690e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006912:	2b09      	cmp	r3, #9
 8006914:	d912      	bls.n	800693c <_strtod_l+0x204>
 8006916:	2301      	movs	r3, #1
 8006918:	e7c4      	b.n	80068a4 <_strtod_l+0x16c>
 800691a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800691c:	1c5a      	adds	r2, r3, #1
 800691e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006920:	785a      	ldrb	r2, [r3, #1]
 8006922:	3001      	adds	r0, #1
 8006924:	2a30      	cmp	r2, #48	@ 0x30
 8006926:	d0f8      	beq.n	800691a <_strtod_l+0x1e2>
 8006928:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800692c:	2b08      	cmp	r3, #8
 800692e:	f200 84d3 	bhi.w	80072d8 <_strtod_l+0xba0>
 8006932:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006934:	930c      	str	r3, [sp, #48]	@ 0x30
 8006936:	4681      	mov	r9, r0
 8006938:	2000      	movs	r0, #0
 800693a:	4605      	mov	r5, r0
 800693c:	3a30      	subs	r2, #48	@ 0x30
 800693e:	f100 0301 	add.w	r3, r0, #1
 8006942:	d02a      	beq.n	800699a <_strtod_l+0x262>
 8006944:	4499      	add	r9, r3
 8006946:	eb00 0c05 	add.w	ip, r0, r5
 800694a:	462b      	mov	r3, r5
 800694c:	210a      	movs	r1, #10
 800694e:	4563      	cmp	r3, ip
 8006950:	d10d      	bne.n	800696e <_strtod_l+0x236>
 8006952:	1c69      	adds	r1, r5, #1
 8006954:	4401      	add	r1, r0
 8006956:	4428      	add	r0, r5
 8006958:	2808      	cmp	r0, #8
 800695a:	dc16      	bgt.n	800698a <_strtod_l+0x252>
 800695c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800695e:	230a      	movs	r3, #10
 8006960:	fb03 2300 	mla	r3, r3, r0, r2
 8006964:	930a      	str	r3, [sp, #40]	@ 0x28
 8006966:	2300      	movs	r3, #0
 8006968:	e018      	b.n	800699c <_strtod_l+0x264>
 800696a:	4638      	mov	r0, r7
 800696c:	e7da      	b.n	8006924 <_strtod_l+0x1ec>
 800696e:	2b08      	cmp	r3, #8
 8006970:	f103 0301 	add.w	r3, r3, #1
 8006974:	dc03      	bgt.n	800697e <_strtod_l+0x246>
 8006976:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006978:	434e      	muls	r6, r1
 800697a:	960a      	str	r6, [sp, #40]	@ 0x28
 800697c:	e7e7      	b.n	800694e <_strtod_l+0x216>
 800697e:	2b10      	cmp	r3, #16
 8006980:	bfde      	ittt	le
 8006982:	9e08      	ldrle	r6, [sp, #32]
 8006984:	434e      	mulle	r6, r1
 8006986:	9608      	strle	r6, [sp, #32]
 8006988:	e7e1      	b.n	800694e <_strtod_l+0x216>
 800698a:	280f      	cmp	r0, #15
 800698c:	dceb      	bgt.n	8006966 <_strtod_l+0x22e>
 800698e:	9808      	ldr	r0, [sp, #32]
 8006990:	230a      	movs	r3, #10
 8006992:	fb03 2300 	mla	r3, r3, r0, r2
 8006996:	9308      	str	r3, [sp, #32]
 8006998:	e7e5      	b.n	8006966 <_strtod_l+0x22e>
 800699a:	4629      	mov	r1, r5
 800699c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800699e:	1c50      	adds	r0, r2, #1
 80069a0:	9019      	str	r0, [sp, #100]	@ 0x64
 80069a2:	7852      	ldrb	r2, [r2, #1]
 80069a4:	4618      	mov	r0, r3
 80069a6:	460d      	mov	r5, r1
 80069a8:	e7b1      	b.n	800690e <_strtod_l+0x1d6>
 80069aa:	f04f 0900 	mov.w	r9, #0
 80069ae:	2301      	movs	r3, #1
 80069b0:	e77d      	b.n	80068ae <_strtod_l+0x176>
 80069b2:	f04f 0c00 	mov.w	ip, #0
 80069b6:	1ca2      	adds	r2, r4, #2
 80069b8:	9219      	str	r2, [sp, #100]	@ 0x64
 80069ba:	78a2      	ldrb	r2, [r4, #2]
 80069bc:	e785      	b.n	80068ca <_strtod_l+0x192>
 80069be:	f04f 0c01 	mov.w	ip, #1
 80069c2:	e7f8      	b.n	80069b6 <_strtod_l+0x27e>
 80069c4:	08008888 	.word	0x08008888
 80069c8:	08008870 	.word	0x08008870
 80069cc:	7ff00000 	.word	0x7ff00000
 80069d0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80069d2:	1c51      	adds	r1, r2, #1
 80069d4:	9119      	str	r1, [sp, #100]	@ 0x64
 80069d6:	7852      	ldrb	r2, [r2, #1]
 80069d8:	2a30      	cmp	r2, #48	@ 0x30
 80069da:	d0f9      	beq.n	80069d0 <_strtod_l+0x298>
 80069dc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80069e0:	2908      	cmp	r1, #8
 80069e2:	f63f af78 	bhi.w	80068d6 <_strtod_l+0x19e>
 80069e6:	3a30      	subs	r2, #48	@ 0x30
 80069e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80069ea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80069ec:	920f      	str	r2, [sp, #60]	@ 0x3c
 80069ee:	f04f 080a 	mov.w	r8, #10
 80069f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80069f4:	1c56      	adds	r6, r2, #1
 80069f6:	9619      	str	r6, [sp, #100]	@ 0x64
 80069f8:	7852      	ldrb	r2, [r2, #1]
 80069fa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80069fe:	f1be 0f09 	cmp.w	lr, #9
 8006a02:	d939      	bls.n	8006a78 <_strtod_l+0x340>
 8006a04:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006a06:	1a76      	subs	r6, r6, r1
 8006a08:	2e08      	cmp	r6, #8
 8006a0a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006a0e:	dc03      	bgt.n	8006a18 <_strtod_l+0x2e0>
 8006a10:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006a12:	4588      	cmp	r8, r1
 8006a14:	bfa8      	it	ge
 8006a16:	4688      	movge	r8, r1
 8006a18:	f1bc 0f00 	cmp.w	ip, #0
 8006a1c:	d001      	beq.n	8006a22 <_strtod_l+0x2ea>
 8006a1e:	f1c8 0800 	rsb	r8, r8, #0
 8006a22:	2d00      	cmp	r5, #0
 8006a24:	d14e      	bne.n	8006ac4 <_strtod_l+0x38c>
 8006a26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006a28:	4308      	orrs	r0, r1
 8006a2a:	f47f aebe 	bne.w	80067aa <_strtod_l+0x72>
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	f47f aed6 	bne.w	80067e0 <_strtod_l+0xa8>
 8006a34:	2a69      	cmp	r2, #105	@ 0x69
 8006a36:	d028      	beq.n	8006a8a <_strtod_l+0x352>
 8006a38:	dc25      	bgt.n	8006a86 <_strtod_l+0x34e>
 8006a3a:	2a49      	cmp	r2, #73	@ 0x49
 8006a3c:	d025      	beq.n	8006a8a <_strtod_l+0x352>
 8006a3e:	2a4e      	cmp	r2, #78	@ 0x4e
 8006a40:	f47f aece 	bne.w	80067e0 <_strtod_l+0xa8>
 8006a44:	499b      	ldr	r1, [pc, #620]	@ (8006cb4 <_strtod_l+0x57c>)
 8006a46:	a819      	add	r0, sp, #100	@ 0x64
 8006a48:	f001 f9ea 	bl	8007e20 <__match>
 8006a4c:	2800      	cmp	r0, #0
 8006a4e:	f43f aec7 	beq.w	80067e0 <_strtod_l+0xa8>
 8006a52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	2b28      	cmp	r3, #40	@ 0x28
 8006a58:	d12e      	bne.n	8006ab8 <_strtod_l+0x380>
 8006a5a:	4997      	ldr	r1, [pc, #604]	@ (8006cb8 <_strtod_l+0x580>)
 8006a5c:	aa1c      	add	r2, sp, #112	@ 0x70
 8006a5e:	a819      	add	r0, sp, #100	@ 0x64
 8006a60:	f001 f9f2 	bl	8007e48 <__hexnan>
 8006a64:	2805      	cmp	r0, #5
 8006a66:	d127      	bne.n	8006ab8 <_strtod_l+0x380>
 8006a68:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006a6a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006a6e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006a72:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006a76:	e698      	b.n	80067aa <_strtod_l+0x72>
 8006a78:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006a7a:	fb08 2101 	mla	r1, r8, r1, r2
 8006a7e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006a82:	920e      	str	r2, [sp, #56]	@ 0x38
 8006a84:	e7b5      	b.n	80069f2 <_strtod_l+0x2ba>
 8006a86:	2a6e      	cmp	r2, #110	@ 0x6e
 8006a88:	e7da      	b.n	8006a40 <_strtod_l+0x308>
 8006a8a:	498c      	ldr	r1, [pc, #560]	@ (8006cbc <_strtod_l+0x584>)
 8006a8c:	a819      	add	r0, sp, #100	@ 0x64
 8006a8e:	f001 f9c7 	bl	8007e20 <__match>
 8006a92:	2800      	cmp	r0, #0
 8006a94:	f43f aea4 	beq.w	80067e0 <_strtod_l+0xa8>
 8006a98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a9a:	4989      	ldr	r1, [pc, #548]	@ (8006cc0 <_strtod_l+0x588>)
 8006a9c:	3b01      	subs	r3, #1
 8006a9e:	a819      	add	r0, sp, #100	@ 0x64
 8006aa0:	9319      	str	r3, [sp, #100]	@ 0x64
 8006aa2:	f001 f9bd 	bl	8007e20 <__match>
 8006aa6:	b910      	cbnz	r0, 8006aae <_strtod_l+0x376>
 8006aa8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006aaa:	3301      	adds	r3, #1
 8006aac:	9319      	str	r3, [sp, #100]	@ 0x64
 8006aae:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8006cd0 <_strtod_l+0x598>
 8006ab2:	f04f 0a00 	mov.w	sl, #0
 8006ab6:	e678      	b.n	80067aa <_strtod_l+0x72>
 8006ab8:	4882      	ldr	r0, [pc, #520]	@ (8006cc4 <_strtod_l+0x58c>)
 8006aba:	f000 ff05 	bl	80078c8 <nan>
 8006abe:	ec5b ab10 	vmov	sl, fp, d0
 8006ac2:	e672      	b.n	80067aa <_strtod_l+0x72>
 8006ac4:	eba8 0309 	sub.w	r3, r8, r9
 8006ac8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006aca:	9309      	str	r3, [sp, #36]	@ 0x24
 8006acc:	2f00      	cmp	r7, #0
 8006ace:	bf08      	it	eq
 8006ad0:	462f      	moveq	r7, r5
 8006ad2:	2d10      	cmp	r5, #16
 8006ad4:	462c      	mov	r4, r5
 8006ad6:	bfa8      	it	ge
 8006ad8:	2410      	movge	r4, #16
 8006ada:	f7f9 fd13 	bl	8000504 <__aeabi_ui2d>
 8006ade:	2d09      	cmp	r5, #9
 8006ae0:	4682      	mov	sl, r0
 8006ae2:	468b      	mov	fp, r1
 8006ae4:	dc13      	bgt.n	8006b0e <_strtod_l+0x3d6>
 8006ae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	f43f ae5e 	beq.w	80067aa <_strtod_l+0x72>
 8006aee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006af0:	dd78      	ble.n	8006be4 <_strtod_l+0x4ac>
 8006af2:	2b16      	cmp	r3, #22
 8006af4:	dc5f      	bgt.n	8006bb6 <_strtod_l+0x47e>
 8006af6:	4974      	ldr	r1, [pc, #464]	@ (8006cc8 <_strtod_l+0x590>)
 8006af8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006afc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b00:	4652      	mov	r2, sl
 8006b02:	465b      	mov	r3, fp
 8006b04:	f7f9 fd78 	bl	80005f8 <__aeabi_dmul>
 8006b08:	4682      	mov	sl, r0
 8006b0a:	468b      	mov	fp, r1
 8006b0c:	e64d      	b.n	80067aa <_strtod_l+0x72>
 8006b0e:	4b6e      	ldr	r3, [pc, #440]	@ (8006cc8 <_strtod_l+0x590>)
 8006b10:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006b14:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006b18:	f7f9 fd6e 	bl	80005f8 <__aeabi_dmul>
 8006b1c:	4682      	mov	sl, r0
 8006b1e:	9808      	ldr	r0, [sp, #32]
 8006b20:	468b      	mov	fp, r1
 8006b22:	f7f9 fcef 	bl	8000504 <__aeabi_ui2d>
 8006b26:	4602      	mov	r2, r0
 8006b28:	460b      	mov	r3, r1
 8006b2a:	4650      	mov	r0, sl
 8006b2c:	4659      	mov	r1, fp
 8006b2e:	f7f9 fbad 	bl	800028c <__adddf3>
 8006b32:	2d0f      	cmp	r5, #15
 8006b34:	4682      	mov	sl, r0
 8006b36:	468b      	mov	fp, r1
 8006b38:	ddd5      	ble.n	8006ae6 <_strtod_l+0x3ae>
 8006b3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b3c:	1b2c      	subs	r4, r5, r4
 8006b3e:	441c      	add	r4, r3
 8006b40:	2c00      	cmp	r4, #0
 8006b42:	f340 8096 	ble.w	8006c72 <_strtod_l+0x53a>
 8006b46:	f014 030f 	ands.w	r3, r4, #15
 8006b4a:	d00a      	beq.n	8006b62 <_strtod_l+0x42a>
 8006b4c:	495e      	ldr	r1, [pc, #376]	@ (8006cc8 <_strtod_l+0x590>)
 8006b4e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006b52:	4652      	mov	r2, sl
 8006b54:	465b      	mov	r3, fp
 8006b56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b5a:	f7f9 fd4d 	bl	80005f8 <__aeabi_dmul>
 8006b5e:	4682      	mov	sl, r0
 8006b60:	468b      	mov	fp, r1
 8006b62:	f034 040f 	bics.w	r4, r4, #15
 8006b66:	d073      	beq.n	8006c50 <_strtod_l+0x518>
 8006b68:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006b6c:	dd48      	ble.n	8006c00 <_strtod_l+0x4c8>
 8006b6e:	2400      	movs	r4, #0
 8006b70:	46a0      	mov	r8, r4
 8006b72:	940a      	str	r4, [sp, #40]	@ 0x28
 8006b74:	46a1      	mov	r9, r4
 8006b76:	9a05      	ldr	r2, [sp, #20]
 8006b78:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8006cd0 <_strtod_l+0x598>
 8006b7c:	2322      	movs	r3, #34	@ 0x22
 8006b7e:	6013      	str	r3, [r2, #0]
 8006b80:	f04f 0a00 	mov.w	sl, #0
 8006b84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	f43f ae0f 	beq.w	80067aa <_strtod_l+0x72>
 8006b8c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006b8e:	9805      	ldr	r0, [sp, #20]
 8006b90:	f7ff f942 	bl	8005e18 <_Bfree>
 8006b94:	9805      	ldr	r0, [sp, #20]
 8006b96:	4649      	mov	r1, r9
 8006b98:	f7ff f93e 	bl	8005e18 <_Bfree>
 8006b9c:	9805      	ldr	r0, [sp, #20]
 8006b9e:	4641      	mov	r1, r8
 8006ba0:	f7ff f93a 	bl	8005e18 <_Bfree>
 8006ba4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006ba6:	9805      	ldr	r0, [sp, #20]
 8006ba8:	f7ff f936 	bl	8005e18 <_Bfree>
 8006bac:	9805      	ldr	r0, [sp, #20]
 8006bae:	4621      	mov	r1, r4
 8006bb0:	f7ff f932 	bl	8005e18 <_Bfree>
 8006bb4:	e5f9      	b.n	80067aa <_strtod_l+0x72>
 8006bb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006bb8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	dbbc      	blt.n	8006b3a <_strtod_l+0x402>
 8006bc0:	4c41      	ldr	r4, [pc, #260]	@ (8006cc8 <_strtod_l+0x590>)
 8006bc2:	f1c5 050f 	rsb	r5, r5, #15
 8006bc6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006bca:	4652      	mov	r2, sl
 8006bcc:	465b      	mov	r3, fp
 8006bce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bd2:	f7f9 fd11 	bl	80005f8 <__aeabi_dmul>
 8006bd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bd8:	1b5d      	subs	r5, r3, r5
 8006bda:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006bde:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006be2:	e78f      	b.n	8006b04 <_strtod_l+0x3cc>
 8006be4:	3316      	adds	r3, #22
 8006be6:	dba8      	blt.n	8006b3a <_strtod_l+0x402>
 8006be8:	4b37      	ldr	r3, [pc, #220]	@ (8006cc8 <_strtod_l+0x590>)
 8006bea:	eba9 0808 	sub.w	r8, r9, r8
 8006bee:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006bf2:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006bf6:	4650      	mov	r0, sl
 8006bf8:	4659      	mov	r1, fp
 8006bfa:	f7f9 fe27 	bl	800084c <__aeabi_ddiv>
 8006bfe:	e783      	b.n	8006b08 <_strtod_l+0x3d0>
 8006c00:	4b32      	ldr	r3, [pc, #200]	@ (8006ccc <_strtod_l+0x594>)
 8006c02:	9308      	str	r3, [sp, #32]
 8006c04:	2300      	movs	r3, #0
 8006c06:	1124      	asrs	r4, r4, #4
 8006c08:	4650      	mov	r0, sl
 8006c0a:	4659      	mov	r1, fp
 8006c0c:	461e      	mov	r6, r3
 8006c0e:	2c01      	cmp	r4, #1
 8006c10:	dc21      	bgt.n	8006c56 <_strtod_l+0x51e>
 8006c12:	b10b      	cbz	r3, 8006c18 <_strtod_l+0x4e0>
 8006c14:	4682      	mov	sl, r0
 8006c16:	468b      	mov	fp, r1
 8006c18:	492c      	ldr	r1, [pc, #176]	@ (8006ccc <_strtod_l+0x594>)
 8006c1a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006c1e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006c22:	4652      	mov	r2, sl
 8006c24:	465b      	mov	r3, fp
 8006c26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c2a:	f7f9 fce5 	bl	80005f8 <__aeabi_dmul>
 8006c2e:	4b28      	ldr	r3, [pc, #160]	@ (8006cd0 <_strtod_l+0x598>)
 8006c30:	460a      	mov	r2, r1
 8006c32:	400b      	ands	r3, r1
 8006c34:	4927      	ldr	r1, [pc, #156]	@ (8006cd4 <_strtod_l+0x59c>)
 8006c36:	428b      	cmp	r3, r1
 8006c38:	4682      	mov	sl, r0
 8006c3a:	d898      	bhi.n	8006b6e <_strtod_l+0x436>
 8006c3c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006c40:	428b      	cmp	r3, r1
 8006c42:	bf86      	itte	hi
 8006c44:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8006cd8 <_strtod_l+0x5a0>
 8006c48:	f04f 3aff 	movhi.w	sl, #4294967295
 8006c4c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006c50:	2300      	movs	r3, #0
 8006c52:	9308      	str	r3, [sp, #32]
 8006c54:	e07a      	b.n	8006d4c <_strtod_l+0x614>
 8006c56:	07e2      	lsls	r2, r4, #31
 8006c58:	d505      	bpl.n	8006c66 <_strtod_l+0x52e>
 8006c5a:	9b08      	ldr	r3, [sp, #32]
 8006c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c60:	f7f9 fcca 	bl	80005f8 <__aeabi_dmul>
 8006c64:	2301      	movs	r3, #1
 8006c66:	9a08      	ldr	r2, [sp, #32]
 8006c68:	3208      	adds	r2, #8
 8006c6a:	3601      	adds	r6, #1
 8006c6c:	1064      	asrs	r4, r4, #1
 8006c6e:	9208      	str	r2, [sp, #32]
 8006c70:	e7cd      	b.n	8006c0e <_strtod_l+0x4d6>
 8006c72:	d0ed      	beq.n	8006c50 <_strtod_l+0x518>
 8006c74:	4264      	negs	r4, r4
 8006c76:	f014 020f 	ands.w	r2, r4, #15
 8006c7a:	d00a      	beq.n	8006c92 <_strtod_l+0x55a>
 8006c7c:	4b12      	ldr	r3, [pc, #72]	@ (8006cc8 <_strtod_l+0x590>)
 8006c7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c82:	4650      	mov	r0, sl
 8006c84:	4659      	mov	r1, fp
 8006c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8a:	f7f9 fddf 	bl	800084c <__aeabi_ddiv>
 8006c8e:	4682      	mov	sl, r0
 8006c90:	468b      	mov	fp, r1
 8006c92:	1124      	asrs	r4, r4, #4
 8006c94:	d0dc      	beq.n	8006c50 <_strtod_l+0x518>
 8006c96:	2c1f      	cmp	r4, #31
 8006c98:	dd20      	ble.n	8006cdc <_strtod_l+0x5a4>
 8006c9a:	2400      	movs	r4, #0
 8006c9c:	46a0      	mov	r8, r4
 8006c9e:	940a      	str	r4, [sp, #40]	@ 0x28
 8006ca0:	46a1      	mov	r9, r4
 8006ca2:	9a05      	ldr	r2, [sp, #20]
 8006ca4:	2322      	movs	r3, #34	@ 0x22
 8006ca6:	f04f 0a00 	mov.w	sl, #0
 8006caa:	f04f 0b00 	mov.w	fp, #0
 8006cae:	6013      	str	r3, [r2, #0]
 8006cb0:	e768      	b.n	8006b84 <_strtod_l+0x44c>
 8006cb2:	bf00      	nop
 8006cb4:	0800863c 	.word	0x0800863c
 8006cb8:	08008874 	.word	0x08008874
 8006cbc:	08008634 	.word	0x08008634
 8006cc0:	080086a7 	.word	0x080086a7
 8006cc4:	080086a3 	.word	0x080086a3
 8006cc8:	080087a8 	.word	0x080087a8
 8006ccc:	08008780 	.word	0x08008780
 8006cd0:	7ff00000 	.word	0x7ff00000
 8006cd4:	7ca00000 	.word	0x7ca00000
 8006cd8:	7fefffff 	.word	0x7fefffff
 8006cdc:	f014 0310 	ands.w	r3, r4, #16
 8006ce0:	bf18      	it	ne
 8006ce2:	236a      	movne	r3, #106	@ 0x6a
 8006ce4:	4ea9      	ldr	r6, [pc, #676]	@ (8006f8c <_strtod_l+0x854>)
 8006ce6:	9308      	str	r3, [sp, #32]
 8006ce8:	4650      	mov	r0, sl
 8006cea:	4659      	mov	r1, fp
 8006cec:	2300      	movs	r3, #0
 8006cee:	07e2      	lsls	r2, r4, #31
 8006cf0:	d504      	bpl.n	8006cfc <_strtod_l+0x5c4>
 8006cf2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006cf6:	f7f9 fc7f 	bl	80005f8 <__aeabi_dmul>
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	1064      	asrs	r4, r4, #1
 8006cfe:	f106 0608 	add.w	r6, r6, #8
 8006d02:	d1f4      	bne.n	8006cee <_strtod_l+0x5b6>
 8006d04:	b10b      	cbz	r3, 8006d0a <_strtod_l+0x5d2>
 8006d06:	4682      	mov	sl, r0
 8006d08:	468b      	mov	fp, r1
 8006d0a:	9b08      	ldr	r3, [sp, #32]
 8006d0c:	b1b3      	cbz	r3, 8006d3c <_strtod_l+0x604>
 8006d0e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006d12:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	4659      	mov	r1, fp
 8006d1a:	dd0f      	ble.n	8006d3c <_strtod_l+0x604>
 8006d1c:	2b1f      	cmp	r3, #31
 8006d1e:	dd55      	ble.n	8006dcc <_strtod_l+0x694>
 8006d20:	2b34      	cmp	r3, #52	@ 0x34
 8006d22:	bfde      	ittt	le
 8006d24:	f04f 33ff 	movle.w	r3, #4294967295
 8006d28:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006d2c:	4093      	lslle	r3, r2
 8006d2e:	f04f 0a00 	mov.w	sl, #0
 8006d32:	bfcc      	ite	gt
 8006d34:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006d38:	ea03 0b01 	andle.w	fp, r3, r1
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	2300      	movs	r3, #0
 8006d40:	4650      	mov	r0, sl
 8006d42:	4659      	mov	r1, fp
 8006d44:	f7f9 fec0 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d48:	2800      	cmp	r0, #0
 8006d4a:	d1a6      	bne.n	8006c9a <_strtod_l+0x562>
 8006d4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d4e:	9300      	str	r3, [sp, #0]
 8006d50:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006d52:	9805      	ldr	r0, [sp, #20]
 8006d54:	462b      	mov	r3, r5
 8006d56:	463a      	mov	r2, r7
 8006d58:	f7ff f8c6 	bl	8005ee8 <__s2b>
 8006d5c:	900a      	str	r0, [sp, #40]	@ 0x28
 8006d5e:	2800      	cmp	r0, #0
 8006d60:	f43f af05 	beq.w	8006b6e <_strtod_l+0x436>
 8006d64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d66:	2a00      	cmp	r2, #0
 8006d68:	eba9 0308 	sub.w	r3, r9, r8
 8006d6c:	bfa8      	it	ge
 8006d6e:	2300      	movge	r3, #0
 8006d70:	9312      	str	r3, [sp, #72]	@ 0x48
 8006d72:	2400      	movs	r4, #0
 8006d74:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006d78:	9316      	str	r3, [sp, #88]	@ 0x58
 8006d7a:	46a0      	mov	r8, r4
 8006d7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d7e:	9805      	ldr	r0, [sp, #20]
 8006d80:	6859      	ldr	r1, [r3, #4]
 8006d82:	f7ff f809 	bl	8005d98 <_Balloc>
 8006d86:	4681      	mov	r9, r0
 8006d88:	2800      	cmp	r0, #0
 8006d8a:	f43f aef4 	beq.w	8006b76 <_strtod_l+0x43e>
 8006d8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d90:	691a      	ldr	r2, [r3, #16]
 8006d92:	3202      	adds	r2, #2
 8006d94:	f103 010c 	add.w	r1, r3, #12
 8006d98:	0092      	lsls	r2, r2, #2
 8006d9a:	300c      	adds	r0, #12
 8006d9c:	f000 fd84 	bl	80078a8 <memcpy>
 8006da0:	ec4b ab10 	vmov	d0, sl, fp
 8006da4:	9805      	ldr	r0, [sp, #20]
 8006da6:	aa1c      	add	r2, sp, #112	@ 0x70
 8006da8:	a91b      	add	r1, sp, #108	@ 0x6c
 8006daa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006dae:	f7ff fbd7 	bl	8006560 <__d2b>
 8006db2:	901a      	str	r0, [sp, #104]	@ 0x68
 8006db4:	2800      	cmp	r0, #0
 8006db6:	f43f aede 	beq.w	8006b76 <_strtod_l+0x43e>
 8006dba:	9805      	ldr	r0, [sp, #20]
 8006dbc:	2101      	movs	r1, #1
 8006dbe:	f7ff f929 	bl	8006014 <__i2b>
 8006dc2:	4680      	mov	r8, r0
 8006dc4:	b948      	cbnz	r0, 8006dda <_strtod_l+0x6a2>
 8006dc6:	f04f 0800 	mov.w	r8, #0
 8006dca:	e6d4      	b.n	8006b76 <_strtod_l+0x43e>
 8006dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8006dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd4:	ea03 0a0a 	and.w	sl, r3, sl
 8006dd8:	e7b0      	b.n	8006d3c <_strtod_l+0x604>
 8006dda:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006ddc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006dde:	2d00      	cmp	r5, #0
 8006de0:	bfab      	itete	ge
 8006de2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006de4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006de6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006de8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006dea:	bfac      	ite	ge
 8006dec:	18ef      	addge	r7, r5, r3
 8006dee:	1b5e      	sublt	r6, r3, r5
 8006df0:	9b08      	ldr	r3, [sp, #32]
 8006df2:	1aed      	subs	r5, r5, r3
 8006df4:	4415      	add	r5, r2
 8006df6:	4b66      	ldr	r3, [pc, #408]	@ (8006f90 <_strtod_l+0x858>)
 8006df8:	3d01      	subs	r5, #1
 8006dfa:	429d      	cmp	r5, r3
 8006dfc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006e00:	da50      	bge.n	8006ea4 <_strtod_l+0x76c>
 8006e02:	1b5b      	subs	r3, r3, r5
 8006e04:	2b1f      	cmp	r3, #31
 8006e06:	eba2 0203 	sub.w	r2, r2, r3
 8006e0a:	f04f 0101 	mov.w	r1, #1
 8006e0e:	dc3d      	bgt.n	8006e8c <_strtod_l+0x754>
 8006e10:	fa01 f303 	lsl.w	r3, r1, r3
 8006e14:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006e16:	2300      	movs	r3, #0
 8006e18:	9310      	str	r3, [sp, #64]	@ 0x40
 8006e1a:	18bd      	adds	r5, r7, r2
 8006e1c:	9b08      	ldr	r3, [sp, #32]
 8006e1e:	42af      	cmp	r7, r5
 8006e20:	4416      	add	r6, r2
 8006e22:	441e      	add	r6, r3
 8006e24:	463b      	mov	r3, r7
 8006e26:	bfa8      	it	ge
 8006e28:	462b      	movge	r3, r5
 8006e2a:	42b3      	cmp	r3, r6
 8006e2c:	bfa8      	it	ge
 8006e2e:	4633      	movge	r3, r6
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	bfc2      	ittt	gt
 8006e34:	1aed      	subgt	r5, r5, r3
 8006e36:	1af6      	subgt	r6, r6, r3
 8006e38:	1aff      	subgt	r7, r7, r3
 8006e3a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	dd16      	ble.n	8006e6e <_strtod_l+0x736>
 8006e40:	4641      	mov	r1, r8
 8006e42:	9805      	ldr	r0, [sp, #20]
 8006e44:	461a      	mov	r2, r3
 8006e46:	f7ff f9a5 	bl	8006194 <__pow5mult>
 8006e4a:	4680      	mov	r8, r0
 8006e4c:	2800      	cmp	r0, #0
 8006e4e:	d0ba      	beq.n	8006dc6 <_strtod_l+0x68e>
 8006e50:	4601      	mov	r1, r0
 8006e52:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006e54:	9805      	ldr	r0, [sp, #20]
 8006e56:	f7ff f8f3 	bl	8006040 <__multiply>
 8006e5a:	900e      	str	r0, [sp, #56]	@ 0x38
 8006e5c:	2800      	cmp	r0, #0
 8006e5e:	f43f ae8a 	beq.w	8006b76 <_strtod_l+0x43e>
 8006e62:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006e64:	9805      	ldr	r0, [sp, #20]
 8006e66:	f7fe ffd7 	bl	8005e18 <_Bfree>
 8006e6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e6c:	931a      	str	r3, [sp, #104]	@ 0x68
 8006e6e:	2d00      	cmp	r5, #0
 8006e70:	dc1d      	bgt.n	8006eae <_strtod_l+0x776>
 8006e72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	dd23      	ble.n	8006ec0 <_strtod_l+0x788>
 8006e78:	4649      	mov	r1, r9
 8006e7a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006e7c:	9805      	ldr	r0, [sp, #20]
 8006e7e:	f7ff f989 	bl	8006194 <__pow5mult>
 8006e82:	4681      	mov	r9, r0
 8006e84:	b9e0      	cbnz	r0, 8006ec0 <_strtod_l+0x788>
 8006e86:	f04f 0900 	mov.w	r9, #0
 8006e8a:	e674      	b.n	8006b76 <_strtod_l+0x43e>
 8006e8c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006e90:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006e94:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006e98:	35e2      	adds	r5, #226	@ 0xe2
 8006e9a:	fa01 f305 	lsl.w	r3, r1, r5
 8006e9e:	9310      	str	r3, [sp, #64]	@ 0x40
 8006ea0:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006ea2:	e7ba      	b.n	8006e1a <_strtod_l+0x6e2>
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	9310      	str	r3, [sp, #64]	@ 0x40
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006eac:	e7b5      	b.n	8006e1a <_strtod_l+0x6e2>
 8006eae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006eb0:	9805      	ldr	r0, [sp, #20]
 8006eb2:	462a      	mov	r2, r5
 8006eb4:	f7ff f9c8 	bl	8006248 <__lshift>
 8006eb8:	901a      	str	r0, [sp, #104]	@ 0x68
 8006eba:	2800      	cmp	r0, #0
 8006ebc:	d1d9      	bne.n	8006e72 <_strtod_l+0x73a>
 8006ebe:	e65a      	b.n	8006b76 <_strtod_l+0x43e>
 8006ec0:	2e00      	cmp	r6, #0
 8006ec2:	dd07      	ble.n	8006ed4 <_strtod_l+0x79c>
 8006ec4:	4649      	mov	r1, r9
 8006ec6:	9805      	ldr	r0, [sp, #20]
 8006ec8:	4632      	mov	r2, r6
 8006eca:	f7ff f9bd 	bl	8006248 <__lshift>
 8006ece:	4681      	mov	r9, r0
 8006ed0:	2800      	cmp	r0, #0
 8006ed2:	d0d8      	beq.n	8006e86 <_strtod_l+0x74e>
 8006ed4:	2f00      	cmp	r7, #0
 8006ed6:	dd08      	ble.n	8006eea <_strtod_l+0x7b2>
 8006ed8:	4641      	mov	r1, r8
 8006eda:	9805      	ldr	r0, [sp, #20]
 8006edc:	463a      	mov	r2, r7
 8006ede:	f7ff f9b3 	bl	8006248 <__lshift>
 8006ee2:	4680      	mov	r8, r0
 8006ee4:	2800      	cmp	r0, #0
 8006ee6:	f43f ae46 	beq.w	8006b76 <_strtod_l+0x43e>
 8006eea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006eec:	9805      	ldr	r0, [sp, #20]
 8006eee:	464a      	mov	r2, r9
 8006ef0:	f7ff fa32 	bl	8006358 <__mdiff>
 8006ef4:	4604      	mov	r4, r0
 8006ef6:	2800      	cmp	r0, #0
 8006ef8:	f43f ae3d 	beq.w	8006b76 <_strtod_l+0x43e>
 8006efc:	68c3      	ldr	r3, [r0, #12]
 8006efe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006f00:	2300      	movs	r3, #0
 8006f02:	60c3      	str	r3, [r0, #12]
 8006f04:	4641      	mov	r1, r8
 8006f06:	f7ff fa0b 	bl	8006320 <__mcmp>
 8006f0a:	2800      	cmp	r0, #0
 8006f0c:	da46      	bge.n	8006f9c <_strtod_l+0x864>
 8006f0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f10:	ea53 030a 	orrs.w	r3, r3, sl
 8006f14:	d16c      	bne.n	8006ff0 <_strtod_l+0x8b8>
 8006f16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d168      	bne.n	8006ff0 <_strtod_l+0x8b8>
 8006f1e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006f22:	0d1b      	lsrs	r3, r3, #20
 8006f24:	051b      	lsls	r3, r3, #20
 8006f26:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006f2a:	d961      	bls.n	8006ff0 <_strtod_l+0x8b8>
 8006f2c:	6963      	ldr	r3, [r4, #20]
 8006f2e:	b913      	cbnz	r3, 8006f36 <_strtod_l+0x7fe>
 8006f30:	6923      	ldr	r3, [r4, #16]
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	dd5c      	ble.n	8006ff0 <_strtod_l+0x8b8>
 8006f36:	4621      	mov	r1, r4
 8006f38:	2201      	movs	r2, #1
 8006f3a:	9805      	ldr	r0, [sp, #20]
 8006f3c:	f7ff f984 	bl	8006248 <__lshift>
 8006f40:	4641      	mov	r1, r8
 8006f42:	4604      	mov	r4, r0
 8006f44:	f7ff f9ec 	bl	8006320 <__mcmp>
 8006f48:	2800      	cmp	r0, #0
 8006f4a:	dd51      	ble.n	8006ff0 <_strtod_l+0x8b8>
 8006f4c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006f50:	9a08      	ldr	r2, [sp, #32]
 8006f52:	0d1b      	lsrs	r3, r3, #20
 8006f54:	051b      	lsls	r3, r3, #20
 8006f56:	2a00      	cmp	r2, #0
 8006f58:	d06b      	beq.n	8007032 <_strtod_l+0x8fa>
 8006f5a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006f5e:	d868      	bhi.n	8007032 <_strtod_l+0x8fa>
 8006f60:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006f64:	f67f ae9d 	bls.w	8006ca2 <_strtod_l+0x56a>
 8006f68:	4b0a      	ldr	r3, [pc, #40]	@ (8006f94 <_strtod_l+0x85c>)
 8006f6a:	4650      	mov	r0, sl
 8006f6c:	4659      	mov	r1, fp
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f7f9 fb42 	bl	80005f8 <__aeabi_dmul>
 8006f74:	4b08      	ldr	r3, [pc, #32]	@ (8006f98 <_strtod_l+0x860>)
 8006f76:	400b      	ands	r3, r1
 8006f78:	4682      	mov	sl, r0
 8006f7a:	468b      	mov	fp, r1
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	f47f ae05 	bne.w	8006b8c <_strtod_l+0x454>
 8006f82:	9a05      	ldr	r2, [sp, #20]
 8006f84:	2322      	movs	r3, #34	@ 0x22
 8006f86:	6013      	str	r3, [r2, #0]
 8006f88:	e600      	b.n	8006b8c <_strtod_l+0x454>
 8006f8a:	bf00      	nop
 8006f8c:	080088a0 	.word	0x080088a0
 8006f90:	fffffc02 	.word	0xfffffc02
 8006f94:	39500000 	.word	0x39500000
 8006f98:	7ff00000 	.word	0x7ff00000
 8006f9c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006fa0:	d165      	bne.n	800706e <_strtod_l+0x936>
 8006fa2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006fa4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006fa8:	b35a      	cbz	r2, 8007002 <_strtod_l+0x8ca>
 8006faa:	4a9f      	ldr	r2, [pc, #636]	@ (8007228 <_strtod_l+0xaf0>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d12b      	bne.n	8007008 <_strtod_l+0x8d0>
 8006fb0:	9b08      	ldr	r3, [sp, #32]
 8006fb2:	4651      	mov	r1, sl
 8006fb4:	b303      	cbz	r3, 8006ff8 <_strtod_l+0x8c0>
 8006fb6:	4b9d      	ldr	r3, [pc, #628]	@ (800722c <_strtod_l+0xaf4>)
 8006fb8:	465a      	mov	r2, fp
 8006fba:	4013      	ands	r3, r2
 8006fbc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8006fc4:	d81b      	bhi.n	8006ffe <_strtod_l+0x8c6>
 8006fc6:	0d1b      	lsrs	r3, r3, #20
 8006fc8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd0:	4299      	cmp	r1, r3
 8006fd2:	d119      	bne.n	8007008 <_strtod_l+0x8d0>
 8006fd4:	4b96      	ldr	r3, [pc, #600]	@ (8007230 <_strtod_l+0xaf8>)
 8006fd6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d102      	bne.n	8006fe2 <_strtod_l+0x8aa>
 8006fdc:	3101      	adds	r1, #1
 8006fde:	f43f adca 	beq.w	8006b76 <_strtod_l+0x43e>
 8006fe2:	4b92      	ldr	r3, [pc, #584]	@ (800722c <_strtod_l+0xaf4>)
 8006fe4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006fe6:	401a      	ands	r2, r3
 8006fe8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006fec:	f04f 0a00 	mov.w	sl, #0
 8006ff0:	9b08      	ldr	r3, [sp, #32]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d1b8      	bne.n	8006f68 <_strtod_l+0x830>
 8006ff6:	e5c9      	b.n	8006b8c <_strtod_l+0x454>
 8006ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8006ffc:	e7e8      	b.n	8006fd0 <_strtod_l+0x898>
 8006ffe:	4613      	mov	r3, r2
 8007000:	e7e6      	b.n	8006fd0 <_strtod_l+0x898>
 8007002:	ea53 030a 	orrs.w	r3, r3, sl
 8007006:	d0a1      	beq.n	8006f4c <_strtod_l+0x814>
 8007008:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800700a:	b1db      	cbz	r3, 8007044 <_strtod_l+0x90c>
 800700c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800700e:	4213      	tst	r3, r2
 8007010:	d0ee      	beq.n	8006ff0 <_strtod_l+0x8b8>
 8007012:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007014:	9a08      	ldr	r2, [sp, #32]
 8007016:	4650      	mov	r0, sl
 8007018:	4659      	mov	r1, fp
 800701a:	b1bb      	cbz	r3, 800704c <_strtod_l+0x914>
 800701c:	f7ff fb6e 	bl	80066fc <sulp>
 8007020:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007024:	ec53 2b10 	vmov	r2, r3, d0
 8007028:	f7f9 f930 	bl	800028c <__adddf3>
 800702c:	4682      	mov	sl, r0
 800702e:	468b      	mov	fp, r1
 8007030:	e7de      	b.n	8006ff0 <_strtod_l+0x8b8>
 8007032:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007036:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800703a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800703e:	f04f 3aff 	mov.w	sl, #4294967295
 8007042:	e7d5      	b.n	8006ff0 <_strtod_l+0x8b8>
 8007044:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007046:	ea13 0f0a 	tst.w	r3, sl
 800704a:	e7e1      	b.n	8007010 <_strtod_l+0x8d8>
 800704c:	f7ff fb56 	bl	80066fc <sulp>
 8007050:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007054:	ec53 2b10 	vmov	r2, r3, d0
 8007058:	f7f9 f916 	bl	8000288 <__aeabi_dsub>
 800705c:	2200      	movs	r2, #0
 800705e:	2300      	movs	r3, #0
 8007060:	4682      	mov	sl, r0
 8007062:	468b      	mov	fp, r1
 8007064:	f7f9 fd30 	bl	8000ac8 <__aeabi_dcmpeq>
 8007068:	2800      	cmp	r0, #0
 800706a:	d0c1      	beq.n	8006ff0 <_strtod_l+0x8b8>
 800706c:	e619      	b.n	8006ca2 <_strtod_l+0x56a>
 800706e:	4641      	mov	r1, r8
 8007070:	4620      	mov	r0, r4
 8007072:	f7ff facd 	bl	8006610 <__ratio>
 8007076:	ec57 6b10 	vmov	r6, r7, d0
 800707a:	2200      	movs	r2, #0
 800707c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007080:	4630      	mov	r0, r6
 8007082:	4639      	mov	r1, r7
 8007084:	f7f9 fd34 	bl	8000af0 <__aeabi_dcmple>
 8007088:	2800      	cmp	r0, #0
 800708a:	d06f      	beq.n	800716c <_strtod_l+0xa34>
 800708c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800708e:	2b00      	cmp	r3, #0
 8007090:	d17a      	bne.n	8007188 <_strtod_l+0xa50>
 8007092:	f1ba 0f00 	cmp.w	sl, #0
 8007096:	d158      	bne.n	800714a <_strtod_l+0xa12>
 8007098:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800709a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d15a      	bne.n	8007158 <_strtod_l+0xa20>
 80070a2:	4b64      	ldr	r3, [pc, #400]	@ (8007234 <_strtod_l+0xafc>)
 80070a4:	2200      	movs	r2, #0
 80070a6:	4630      	mov	r0, r6
 80070a8:	4639      	mov	r1, r7
 80070aa:	f7f9 fd17 	bl	8000adc <__aeabi_dcmplt>
 80070ae:	2800      	cmp	r0, #0
 80070b0:	d159      	bne.n	8007166 <_strtod_l+0xa2e>
 80070b2:	4630      	mov	r0, r6
 80070b4:	4639      	mov	r1, r7
 80070b6:	4b60      	ldr	r3, [pc, #384]	@ (8007238 <_strtod_l+0xb00>)
 80070b8:	2200      	movs	r2, #0
 80070ba:	f7f9 fa9d 	bl	80005f8 <__aeabi_dmul>
 80070be:	4606      	mov	r6, r0
 80070c0:	460f      	mov	r7, r1
 80070c2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80070c6:	9606      	str	r6, [sp, #24]
 80070c8:	9307      	str	r3, [sp, #28]
 80070ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80070ce:	4d57      	ldr	r5, [pc, #348]	@ (800722c <_strtod_l+0xaf4>)
 80070d0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80070d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070d6:	401d      	ands	r5, r3
 80070d8:	4b58      	ldr	r3, [pc, #352]	@ (800723c <_strtod_l+0xb04>)
 80070da:	429d      	cmp	r5, r3
 80070dc:	f040 80b2 	bne.w	8007244 <_strtod_l+0xb0c>
 80070e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070e2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80070e6:	ec4b ab10 	vmov	d0, sl, fp
 80070ea:	f7ff f9c9 	bl	8006480 <__ulp>
 80070ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80070f2:	ec51 0b10 	vmov	r0, r1, d0
 80070f6:	f7f9 fa7f 	bl	80005f8 <__aeabi_dmul>
 80070fa:	4652      	mov	r2, sl
 80070fc:	465b      	mov	r3, fp
 80070fe:	f7f9 f8c5 	bl	800028c <__adddf3>
 8007102:	460b      	mov	r3, r1
 8007104:	4949      	ldr	r1, [pc, #292]	@ (800722c <_strtod_l+0xaf4>)
 8007106:	4a4e      	ldr	r2, [pc, #312]	@ (8007240 <_strtod_l+0xb08>)
 8007108:	4019      	ands	r1, r3
 800710a:	4291      	cmp	r1, r2
 800710c:	4682      	mov	sl, r0
 800710e:	d942      	bls.n	8007196 <_strtod_l+0xa5e>
 8007110:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007112:	4b47      	ldr	r3, [pc, #284]	@ (8007230 <_strtod_l+0xaf8>)
 8007114:	429a      	cmp	r2, r3
 8007116:	d103      	bne.n	8007120 <_strtod_l+0x9e8>
 8007118:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800711a:	3301      	adds	r3, #1
 800711c:	f43f ad2b 	beq.w	8006b76 <_strtod_l+0x43e>
 8007120:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007230 <_strtod_l+0xaf8>
 8007124:	f04f 3aff 	mov.w	sl, #4294967295
 8007128:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800712a:	9805      	ldr	r0, [sp, #20]
 800712c:	f7fe fe74 	bl	8005e18 <_Bfree>
 8007130:	9805      	ldr	r0, [sp, #20]
 8007132:	4649      	mov	r1, r9
 8007134:	f7fe fe70 	bl	8005e18 <_Bfree>
 8007138:	9805      	ldr	r0, [sp, #20]
 800713a:	4641      	mov	r1, r8
 800713c:	f7fe fe6c 	bl	8005e18 <_Bfree>
 8007140:	9805      	ldr	r0, [sp, #20]
 8007142:	4621      	mov	r1, r4
 8007144:	f7fe fe68 	bl	8005e18 <_Bfree>
 8007148:	e618      	b.n	8006d7c <_strtod_l+0x644>
 800714a:	f1ba 0f01 	cmp.w	sl, #1
 800714e:	d103      	bne.n	8007158 <_strtod_l+0xa20>
 8007150:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007152:	2b00      	cmp	r3, #0
 8007154:	f43f ada5 	beq.w	8006ca2 <_strtod_l+0x56a>
 8007158:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007208 <_strtod_l+0xad0>
 800715c:	4f35      	ldr	r7, [pc, #212]	@ (8007234 <_strtod_l+0xafc>)
 800715e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007162:	2600      	movs	r6, #0
 8007164:	e7b1      	b.n	80070ca <_strtod_l+0x992>
 8007166:	4f34      	ldr	r7, [pc, #208]	@ (8007238 <_strtod_l+0xb00>)
 8007168:	2600      	movs	r6, #0
 800716a:	e7aa      	b.n	80070c2 <_strtod_l+0x98a>
 800716c:	4b32      	ldr	r3, [pc, #200]	@ (8007238 <_strtod_l+0xb00>)
 800716e:	4630      	mov	r0, r6
 8007170:	4639      	mov	r1, r7
 8007172:	2200      	movs	r2, #0
 8007174:	f7f9 fa40 	bl	80005f8 <__aeabi_dmul>
 8007178:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800717a:	4606      	mov	r6, r0
 800717c:	460f      	mov	r7, r1
 800717e:	2b00      	cmp	r3, #0
 8007180:	d09f      	beq.n	80070c2 <_strtod_l+0x98a>
 8007182:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007186:	e7a0      	b.n	80070ca <_strtod_l+0x992>
 8007188:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007210 <_strtod_l+0xad8>
 800718c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007190:	ec57 6b17 	vmov	r6, r7, d7
 8007194:	e799      	b.n	80070ca <_strtod_l+0x992>
 8007196:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800719a:	9b08      	ldr	r3, [sp, #32]
 800719c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d1c1      	bne.n	8007128 <_strtod_l+0x9f0>
 80071a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80071a8:	0d1b      	lsrs	r3, r3, #20
 80071aa:	051b      	lsls	r3, r3, #20
 80071ac:	429d      	cmp	r5, r3
 80071ae:	d1bb      	bne.n	8007128 <_strtod_l+0x9f0>
 80071b0:	4630      	mov	r0, r6
 80071b2:	4639      	mov	r1, r7
 80071b4:	f7f9 fd68 	bl	8000c88 <__aeabi_d2lz>
 80071b8:	f7f9 f9f0 	bl	800059c <__aeabi_l2d>
 80071bc:	4602      	mov	r2, r0
 80071be:	460b      	mov	r3, r1
 80071c0:	4630      	mov	r0, r6
 80071c2:	4639      	mov	r1, r7
 80071c4:	f7f9 f860 	bl	8000288 <__aeabi_dsub>
 80071c8:	460b      	mov	r3, r1
 80071ca:	4602      	mov	r2, r0
 80071cc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80071d0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80071d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071d6:	ea46 060a 	orr.w	r6, r6, sl
 80071da:	431e      	orrs	r6, r3
 80071dc:	d06f      	beq.n	80072be <_strtod_l+0xb86>
 80071de:	a30e      	add	r3, pc, #56	@ (adr r3, 8007218 <_strtod_l+0xae0>)
 80071e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e4:	f7f9 fc7a 	bl	8000adc <__aeabi_dcmplt>
 80071e8:	2800      	cmp	r0, #0
 80071ea:	f47f accf 	bne.w	8006b8c <_strtod_l+0x454>
 80071ee:	a30c      	add	r3, pc, #48	@ (adr r3, 8007220 <_strtod_l+0xae8>)
 80071f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071f8:	f7f9 fc8e 	bl	8000b18 <__aeabi_dcmpgt>
 80071fc:	2800      	cmp	r0, #0
 80071fe:	d093      	beq.n	8007128 <_strtod_l+0x9f0>
 8007200:	e4c4      	b.n	8006b8c <_strtod_l+0x454>
 8007202:	bf00      	nop
 8007204:	f3af 8000 	nop.w
 8007208:	00000000 	.word	0x00000000
 800720c:	bff00000 	.word	0xbff00000
 8007210:	00000000 	.word	0x00000000
 8007214:	3ff00000 	.word	0x3ff00000
 8007218:	94a03595 	.word	0x94a03595
 800721c:	3fdfffff 	.word	0x3fdfffff
 8007220:	35afe535 	.word	0x35afe535
 8007224:	3fe00000 	.word	0x3fe00000
 8007228:	000fffff 	.word	0x000fffff
 800722c:	7ff00000 	.word	0x7ff00000
 8007230:	7fefffff 	.word	0x7fefffff
 8007234:	3ff00000 	.word	0x3ff00000
 8007238:	3fe00000 	.word	0x3fe00000
 800723c:	7fe00000 	.word	0x7fe00000
 8007240:	7c9fffff 	.word	0x7c9fffff
 8007244:	9b08      	ldr	r3, [sp, #32]
 8007246:	b323      	cbz	r3, 8007292 <_strtod_l+0xb5a>
 8007248:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800724c:	d821      	bhi.n	8007292 <_strtod_l+0xb5a>
 800724e:	a328      	add	r3, pc, #160	@ (adr r3, 80072f0 <_strtod_l+0xbb8>)
 8007250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007254:	4630      	mov	r0, r6
 8007256:	4639      	mov	r1, r7
 8007258:	f7f9 fc4a 	bl	8000af0 <__aeabi_dcmple>
 800725c:	b1a0      	cbz	r0, 8007288 <_strtod_l+0xb50>
 800725e:	4639      	mov	r1, r7
 8007260:	4630      	mov	r0, r6
 8007262:	f7f9 fca1 	bl	8000ba8 <__aeabi_d2uiz>
 8007266:	2801      	cmp	r0, #1
 8007268:	bf38      	it	cc
 800726a:	2001      	movcc	r0, #1
 800726c:	f7f9 f94a 	bl	8000504 <__aeabi_ui2d>
 8007270:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007272:	4606      	mov	r6, r0
 8007274:	460f      	mov	r7, r1
 8007276:	b9fb      	cbnz	r3, 80072b8 <_strtod_l+0xb80>
 8007278:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800727c:	9014      	str	r0, [sp, #80]	@ 0x50
 800727e:	9315      	str	r3, [sp, #84]	@ 0x54
 8007280:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007284:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007288:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800728a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800728e:	1b5b      	subs	r3, r3, r5
 8007290:	9311      	str	r3, [sp, #68]	@ 0x44
 8007292:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007296:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800729a:	f7ff f8f1 	bl	8006480 <__ulp>
 800729e:	4650      	mov	r0, sl
 80072a0:	ec53 2b10 	vmov	r2, r3, d0
 80072a4:	4659      	mov	r1, fp
 80072a6:	f7f9 f9a7 	bl	80005f8 <__aeabi_dmul>
 80072aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80072ae:	f7f8 ffed 	bl	800028c <__adddf3>
 80072b2:	4682      	mov	sl, r0
 80072b4:	468b      	mov	fp, r1
 80072b6:	e770      	b.n	800719a <_strtod_l+0xa62>
 80072b8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80072bc:	e7e0      	b.n	8007280 <_strtod_l+0xb48>
 80072be:	a30e      	add	r3, pc, #56	@ (adr r3, 80072f8 <_strtod_l+0xbc0>)
 80072c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c4:	f7f9 fc0a 	bl	8000adc <__aeabi_dcmplt>
 80072c8:	e798      	b.n	80071fc <_strtod_l+0xac4>
 80072ca:	2300      	movs	r3, #0
 80072cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80072ce:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80072d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80072d2:	6013      	str	r3, [r2, #0]
 80072d4:	f7ff ba6d 	b.w	80067b2 <_strtod_l+0x7a>
 80072d8:	2a65      	cmp	r2, #101	@ 0x65
 80072da:	f43f ab66 	beq.w	80069aa <_strtod_l+0x272>
 80072de:	2a45      	cmp	r2, #69	@ 0x45
 80072e0:	f43f ab63 	beq.w	80069aa <_strtod_l+0x272>
 80072e4:	2301      	movs	r3, #1
 80072e6:	f7ff bb9e 	b.w	8006a26 <_strtod_l+0x2ee>
 80072ea:	bf00      	nop
 80072ec:	f3af 8000 	nop.w
 80072f0:	ffc00000 	.word	0xffc00000
 80072f4:	41dfffff 	.word	0x41dfffff
 80072f8:	94a03595 	.word	0x94a03595
 80072fc:	3fcfffff 	.word	0x3fcfffff

08007300 <_strtod_r>:
 8007300:	4b01      	ldr	r3, [pc, #4]	@ (8007308 <_strtod_r+0x8>)
 8007302:	f7ff ba19 	b.w	8006738 <_strtod_l>
 8007306:	bf00      	nop
 8007308:	2000006c 	.word	0x2000006c

0800730c <_strtol_l.constprop.0>:
 800730c:	2b24      	cmp	r3, #36	@ 0x24
 800730e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007312:	4686      	mov	lr, r0
 8007314:	4690      	mov	r8, r2
 8007316:	d801      	bhi.n	800731c <_strtol_l.constprop.0+0x10>
 8007318:	2b01      	cmp	r3, #1
 800731a:	d106      	bne.n	800732a <_strtol_l.constprop.0+0x1e>
 800731c:	f7fd fd9e 	bl	8004e5c <__errno>
 8007320:	2316      	movs	r3, #22
 8007322:	6003      	str	r3, [r0, #0]
 8007324:	2000      	movs	r0, #0
 8007326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800732a:	4834      	ldr	r0, [pc, #208]	@ (80073fc <_strtol_l.constprop.0+0xf0>)
 800732c:	460d      	mov	r5, r1
 800732e:	462a      	mov	r2, r5
 8007330:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007334:	5d06      	ldrb	r6, [r0, r4]
 8007336:	f016 0608 	ands.w	r6, r6, #8
 800733a:	d1f8      	bne.n	800732e <_strtol_l.constprop.0+0x22>
 800733c:	2c2d      	cmp	r4, #45	@ 0x2d
 800733e:	d12d      	bne.n	800739c <_strtol_l.constprop.0+0x90>
 8007340:	782c      	ldrb	r4, [r5, #0]
 8007342:	2601      	movs	r6, #1
 8007344:	1c95      	adds	r5, r2, #2
 8007346:	f033 0210 	bics.w	r2, r3, #16
 800734a:	d109      	bne.n	8007360 <_strtol_l.constprop.0+0x54>
 800734c:	2c30      	cmp	r4, #48	@ 0x30
 800734e:	d12a      	bne.n	80073a6 <_strtol_l.constprop.0+0x9a>
 8007350:	782a      	ldrb	r2, [r5, #0]
 8007352:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007356:	2a58      	cmp	r2, #88	@ 0x58
 8007358:	d125      	bne.n	80073a6 <_strtol_l.constprop.0+0x9a>
 800735a:	786c      	ldrb	r4, [r5, #1]
 800735c:	2310      	movs	r3, #16
 800735e:	3502      	adds	r5, #2
 8007360:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007364:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007368:	2200      	movs	r2, #0
 800736a:	fbbc f9f3 	udiv	r9, ip, r3
 800736e:	4610      	mov	r0, r2
 8007370:	fb03 ca19 	mls	sl, r3, r9, ip
 8007374:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007378:	2f09      	cmp	r7, #9
 800737a:	d81b      	bhi.n	80073b4 <_strtol_l.constprop.0+0xa8>
 800737c:	463c      	mov	r4, r7
 800737e:	42a3      	cmp	r3, r4
 8007380:	dd27      	ble.n	80073d2 <_strtol_l.constprop.0+0xc6>
 8007382:	1c57      	adds	r7, r2, #1
 8007384:	d007      	beq.n	8007396 <_strtol_l.constprop.0+0x8a>
 8007386:	4581      	cmp	r9, r0
 8007388:	d320      	bcc.n	80073cc <_strtol_l.constprop.0+0xc0>
 800738a:	d101      	bne.n	8007390 <_strtol_l.constprop.0+0x84>
 800738c:	45a2      	cmp	sl, r4
 800738e:	db1d      	blt.n	80073cc <_strtol_l.constprop.0+0xc0>
 8007390:	fb00 4003 	mla	r0, r0, r3, r4
 8007394:	2201      	movs	r2, #1
 8007396:	f815 4b01 	ldrb.w	r4, [r5], #1
 800739a:	e7eb      	b.n	8007374 <_strtol_l.constprop.0+0x68>
 800739c:	2c2b      	cmp	r4, #43	@ 0x2b
 800739e:	bf04      	itt	eq
 80073a0:	782c      	ldrbeq	r4, [r5, #0]
 80073a2:	1c95      	addeq	r5, r2, #2
 80073a4:	e7cf      	b.n	8007346 <_strtol_l.constprop.0+0x3a>
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1da      	bne.n	8007360 <_strtol_l.constprop.0+0x54>
 80073aa:	2c30      	cmp	r4, #48	@ 0x30
 80073ac:	bf0c      	ite	eq
 80073ae:	2308      	moveq	r3, #8
 80073b0:	230a      	movne	r3, #10
 80073b2:	e7d5      	b.n	8007360 <_strtol_l.constprop.0+0x54>
 80073b4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80073b8:	2f19      	cmp	r7, #25
 80073ba:	d801      	bhi.n	80073c0 <_strtol_l.constprop.0+0xb4>
 80073bc:	3c37      	subs	r4, #55	@ 0x37
 80073be:	e7de      	b.n	800737e <_strtol_l.constprop.0+0x72>
 80073c0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80073c4:	2f19      	cmp	r7, #25
 80073c6:	d804      	bhi.n	80073d2 <_strtol_l.constprop.0+0xc6>
 80073c8:	3c57      	subs	r4, #87	@ 0x57
 80073ca:	e7d8      	b.n	800737e <_strtol_l.constprop.0+0x72>
 80073cc:	f04f 32ff 	mov.w	r2, #4294967295
 80073d0:	e7e1      	b.n	8007396 <_strtol_l.constprop.0+0x8a>
 80073d2:	1c53      	adds	r3, r2, #1
 80073d4:	d108      	bne.n	80073e8 <_strtol_l.constprop.0+0xdc>
 80073d6:	2322      	movs	r3, #34	@ 0x22
 80073d8:	f8ce 3000 	str.w	r3, [lr]
 80073dc:	4660      	mov	r0, ip
 80073de:	f1b8 0f00 	cmp.w	r8, #0
 80073e2:	d0a0      	beq.n	8007326 <_strtol_l.constprop.0+0x1a>
 80073e4:	1e69      	subs	r1, r5, #1
 80073e6:	e006      	b.n	80073f6 <_strtol_l.constprop.0+0xea>
 80073e8:	b106      	cbz	r6, 80073ec <_strtol_l.constprop.0+0xe0>
 80073ea:	4240      	negs	r0, r0
 80073ec:	f1b8 0f00 	cmp.w	r8, #0
 80073f0:	d099      	beq.n	8007326 <_strtol_l.constprop.0+0x1a>
 80073f2:	2a00      	cmp	r2, #0
 80073f4:	d1f6      	bne.n	80073e4 <_strtol_l.constprop.0+0xd8>
 80073f6:	f8c8 1000 	str.w	r1, [r8]
 80073fa:	e794      	b.n	8007326 <_strtol_l.constprop.0+0x1a>
 80073fc:	080088c9 	.word	0x080088c9

08007400 <_strtol_r>:
 8007400:	f7ff bf84 	b.w	800730c <_strtol_l.constprop.0>

08007404 <__ssputs_r>:
 8007404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007408:	688e      	ldr	r6, [r1, #8]
 800740a:	461f      	mov	r7, r3
 800740c:	42be      	cmp	r6, r7
 800740e:	680b      	ldr	r3, [r1, #0]
 8007410:	4682      	mov	sl, r0
 8007412:	460c      	mov	r4, r1
 8007414:	4690      	mov	r8, r2
 8007416:	d82d      	bhi.n	8007474 <__ssputs_r+0x70>
 8007418:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800741c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007420:	d026      	beq.n	8007470 <__ssputs_r+0x6c>
 8007422:	6965      	ldr	r5, [r4, #20]
 8007424:	6909      	ldr	r1, [r1, #16]
 8007426:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800742a:	eba3 0901 	sub.w	r9, r3, r1
 800742e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007432:	1c7b      	adds	r3, r7, #1
 8007434:	444b      	add	r3, r9
 8007436:	106d      	asrs	r5, r5, #1
 8007438:	429d      	cmp	r5, r3
 800743a:	bf38      	it	cc
 800743c:	461d      	movcc	r5, r3
 800743e:	0553      	lsls	r3, r2, #21
 8007440:	d527      	bpl.n	8007492 <__ssputs_r+0x8e>
 8007442:	4629      	mov	r1, r5
 8007444:	f7fe fc1c 	bl	8005c80 <_malloc_r>
 8007448:	4606      	mov	r6, r0
 800744a:	b360      	cbz	r0, 80074a6 <__ssputs_r+0xa2>
 800744c:	6921      	ldr	r1, [r4, #16]
 800744e:	464a      	mov	r2, r9
 8007450:	f000 fa2a 	bl	80078a8 <memcpy>
 8007454:	89a3      	ldrh	r3, [r4, #12]
 8007456:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800745a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800745e:	81a3      	strh	r3, [r4, #12]
 8007460:	6126      	str	r6, [r4, #16]
 8007462:	6165      	str	r5, [r4, #20]
 8007464:	444e      	add	r6, r9
 8007466:	eba5 0509 	sub.w	r5, r5, r9
 800746a:	6026      	str	r6, [r4, #0]
 800746c:	60a5      	str	r5, [r4, #8]
 800746e:	463e      	mov	r6, r7
 8007470:	42be      	cmp	r6, r7
 8007472:	d900      	bls.n	8007476 <__ssputs_r+0x72>
 8007474:	463e      	mov	r6, r7
 8007476:	6820      	ldr	r0, [r4, #0]
 8007478:	4632      	mov	r2, r6
 800747a:	4641      	mov	r1, r8
 800747c:	f000 f9d8 	bl	8007830 <memmove>
 8007480:	68a3      	ldr	r3, [r4, #8]
 8007482:	1b9b      	subs	r3, r3, r6
 8007484:	60a3      	str	r3, [r4, #8]
 8007486:	6823      	ldr	r3, [r4, #0]
 8007488:	4433      	add	r3, r6
 800748a:	6023      	str	r3, [r4, #0]
 800748c:	2000      	movs	r0, #0
 800748e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007492:	462a      	mov	r2, r5
 8007494:	f000 fd85 	bl	8007fa2 <_realloc_r>
 8007498:	4606      	mov	r6, r0
 800749a:	2800      	cmp	r0, #0
 800749c:	d1e0      	bne.n	8007460 <__ssputs_r+0x5c>
 800749e:	6921      	ldr	r1, [r4, #16]
 80074a0:	4650      	mov	r0, sl
 80074a2:	f7fe fb79 	bl	8005b98 <_free_r>
 80074a6:	230c      	movs	r3, #12
 80074a8:	f8ca 3000 	str.w	r3, [sl]
 80074ac:	89a3      	ldrh	r3, [r4, #12]
 80074ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074b2:	81a3      	strh	r3, [r4, #12]
 80074b4:	f04f 30ff 	mov.w	r0, #4294967295
 80074b8:	e7e9      	b.n	800748e <__ssputs_r+0x8a>
	...

080074bc <_svfiprintf_r>:
 80074bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074c0:	4698      	mov	r8, r3
 80074c2:	898b      	ldrh	r3, [r1, #12]
 80074c4:	061b      	lsls	r3, r3, #24
 80074c6:	b09d      	sub	sp, #116	@ 0x74
 80074c8:	4607      	mov	r7, r0
 80074ca:	460d      	mov	r5, r1
 80074cc:	4614      	mov	r4, r2
 80074ce:	d510      	bpl.n	80074f2 <_svfiprintf_r+0x36>
 80074d0:	690b      	ldr	r3, [r1, #16]
 80074d2:	b973      	cbnz	r3, 80074f2 <_svfiprintf_r+0x36>
 80074d4:	2140      	movs	r1, #64	@ 0x40
 80074d6:	f7fe fbd3 	bl	8005c80 <_malloc_r>
 80074da:	6028      	str	r0, [r5, #0]
 80074dc:	6128      	str	r0, [r5, #16]
 80074de:	b930      	cbnz	r0, 80074ee <_svfiprintf_r+0x32>
 80074e0:	230c      	movs	r3, #12
 80074e2:	603b      	str	r3, [r7, #0]
 80074e4:	f04f 30ff 	mov.w	r0, #4294967295
 80074e8:	b01d      	add	sp, #116	@ 0x74
 80074ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ee:	2340      	movs	r3, #64	@ 0x40
 80074f0:	616b      	str	r3, [r5, #20]
 80074f2:	2300      	movs	r3, #0
 80074f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80074f6:	2320      	movs	r3, #32
 80074f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80074fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007500:	2330      	movs	r3, #48	@ 0x30
 8007502:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80076a0 <_svfiprintf_r+0x1e4>
 8007506:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800750a:	f04f 0901 	mov.w	r9, #1
 800750e:	4623      	mov	r3, r4
 8007510:	469a      	mov	sl, r3
 8007512:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007516:	b10a      	cbz	r2, 800751c <_svfiprintf_r+0x60>
 8007518:	2a25      	cmp	r2, #37	@ 0x25
 800751a:	d1f9      	bne.n	8007510 <_svfiprintf_r+0x54>
 800751c:	ebba 0b04 	subs.w	fp, sl, r4
 8007520:	d00b      	beq.n	800753a <_svfiprintf_r+0x7e>
 8007522:	465b      	mov	r3, fp
 8007524:	4622      	mov	r2, r4
 8007526:	4629      	mov	r1, r5
 8007528:	4638      	mov	r0, r7
 800752a:	f7ff ff6b 	bl	8007404 <__ssputs_r>
 800752e:	3001      	adds	r0, #1
 8007530:	f000 80a7 	beq.w	8007682 <_svfiprintf_r+0x1c6>
 8007534:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007536:	445a      	add	r2, fp
 8007538:	9209      	str	r2, [sp, #36]	@ 0x24
 800753a:	f89a 3000 	ldrb.w	r3, [sl]
 800753e:	2b00      	cmp	r3, #0
 8007540:	f000 809f 	beq.w	8007682 <_svfiprintf_r+0x1c6>
 8007544:	2300      	movs	r3, #0
 8007546:	f04f 32ff 	mov.w	r2, #4294967295
 800754a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800754e:	f10a 0a01 	add.w	sl, sl, #1
 8007552:	9304      	str	r3, [sp, #16]
 8007554:	9307      	str	r3, [sp, #28]
 8007556:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800755a:	931a      	str	r3, [sp, #104]	@ 0x68
 800755c:	4654      	mov	r4, sl
 800755e:	2205      	movs	r2, #5
 8007560:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007564:	484e      	ldr	r0, [pc, #312]	@ (80076a0 <_svfiprintf_r+0x1e4>)
 8007566:	f7f8 fe33 	bl	80001d0 <memchr>
 800756a:	9a04      	ldr	r2, [sp, #16]
 800756c:	b9d8      	cbnz	r0, 80075a6 <_svfiprintf_r+0xea>
 800756e:	06d0      	lsls	r0, r2, #27
 8007570:	bf44      	itt	mi
 8007572:	2320      	movmi	r3, #32
 8007574:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007578:	0711      	lsls	r1, r2, #28
 800757a:	bf44      	itt	mi
 800757c:	232b      	movmi	r3, #43	@ 0x2b
 800757e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007582:	f89a 3000 	ldrb.w	r3, [sl]
 8007586:	2b2a      	cmp	r3, #42	@ 0x2a
 8007588:	d015      	beq.n	80075b6 <_svfiprintf_r+0xfa>
 800758a:	9a07      	ldr	r2, [sp, #28]
 800758c:	4654      	mov	r4, sl
 800758e:	2000      	movs	r0, #0
 8007590:	f04f 0c0a 	mov.w	ip, #10
 8007594:	4621      	mov	r1, r4
 8007596:	f811 3b01 	ldrb.w	r3, [r1], #1
 800759a:	3b30      	subs	r3, #48	@ 0x30
 800759c:	2b09      	cmp	r3, #9
 800759e:	d94b      	bls.n	8007638 <_svfiprintf_r+0x17c>
 80075a0:	b1b0      	cbz	r0, 80075d0 <_svfiprintf_r+0x114>
 80075a2:	9207      	str	r2, [sp, #28]
 80075a4:	e014      	b.n	80075d0 <_svfiprintf_r+0x114>
 80075a6:	eba0 0308 	sub.w	r3, r0, r8
 80075aa:	fa09 f303 	lsl.w	r3, r9, r3
 80075ae:	4313      	orrs	r3, r2
 80075b0:	9304      	str	r3, [sp, #16]
 80075b2:	46a2      	mov	sl, r4
 80075b4:	e7d2      	b.n	800755c <_svfiprintf_r+0xa0>
 80075b6:	9b03      	ldr	r3, [sp, #12]
 80075b8:	1d19      	adds	r1, r3, #4
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	9103      	str	r1, [sp, #12]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	bfbb      	ittet	lt
 80075c2:	425b      	neglt	r3, r3
 80075c4:	f042 0202 	orrlt.w	r2, r2, #2
 80075c8:	9307      	strge	r3, [sp, #28]
 80075ca:	9307      	strlt	r3, [sp, #28]
 80075cc:	bfb8      	it	lt
 80075ce:	9204      	strlt	r2, [sp, #16]
 80075d0:	7823      	ldrb	r3, [r4, #0]
 80075d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80075d4:	d10a      	bne.n	80075ec <_svfiprintf_r+0x130>
 80075d6:	7863      	ldrb	r3, [r4, #1]
 80075d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80075da:	d132      	bne.n	8007642 <_svfiprintf_r+0x186>
 80075dc:	9b03      	ldr	r3, [sp, #12]
 80075de:	1d1a      	adds	r2, r3, #4
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	9203      	str	r2, [sp, #12]
 80075e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80075e8:	3402      	adds	r4, #2
 80075ea:	9305      	str	r3, [sp, #20]
 80075ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80076b0 <_svfiprintf_r+0x1f4>
 80075f0:	7821      	ldrb	r1, [r4, #0]
 80075f2:	2203      	movs	r2, #3
 80075f4:	4650      	mov	r0, sl
 80075f6:	f7f8 fdeb 	bl	80001d0 <memchr>
 80075fa:	b138      	cbz	r0, 800760c <_svfiprintf_r+0x150>
 80075fc:	9b04      	ldr	r3, [sp, #16]
 80075fe:	eba0 000a 	sub.w	r0, r0, sl
 8007602:	2240      	movs	r2, #64	@ 0x40
 8007604:	4082      	lsls	r2, r0
 8007606:	4313      	orrs	r3, r2
 8007608:	3401      	adds	r4, #1
 800760a:	9304      	str	r3, [sp, #16]
 800760c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007610:	4824      	ldr	r0, [pc, #144]	@ (80076a4 <_svfiprintf_r+0x1e8>)
 8007612:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007616:	2206      	movs	r2, #6
 8007618:	f7f8 fdda 	bl	80001d0 <memchr>
 800761c:	2800      	cmp	r0, #0
 800761e:	d036      	beq.n	800768e <_svfiprintf_r+0x1d2>
 8007620:	4b21      	ldr	r3, [pc, #132]	@ (80076a8 <_svfiprintf_r+0x1ec>)
 8007622:	bb1b      	cbnz	r3, 800766c <_svfiprintf_r+0x1b0>
 8007624:	9b03      	ldr	r3, [sp, #12]
 8007626:	3307      	adds	r3, #7
 8007628:	f023 0307 	bic.w	r3, r3, #7
 800762c:	3308      	adds	r3, #8
 800762e:	9303      	str	r3, [sp, #12]
 8007630:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007632:	4433      	add	r3, r6
 8007634:	9309      	str	r3, [sp, #36]	@ 0x24
 8007636:	e76a      	b.n	800750e <_svfiprintf_r+0x52>
 8007638:	fb0c 3202 	mla	r2, ip, r2, r3
 800763c:	460c      	mov	r4, r1
 800763e:	2001      	movs	r0, #1
 8007640:	e7a8      	b.n	8007594 <_svfiprintf_r+0xd8>
 8007642:	2300      	movs	r3, #0
 8007644:	3401      	adds	r4, #1
 8007646:	9305      	str	r3, [sp, #20]
 8007648:	4619      	mov	r1, r3
 800764a:	f04f 0c0a 	mov.w	ip, #10
 800764e:	4620      	mov	r0, r4
 8007650:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007654:	3a30      	subs	r2, #48	@ 0x30
 8007656:	2a09      	cmp	r2, #9
 8007658:	d903      	bls.n	8007662 <_svfiprintf_r+0x1a6>
 800765a:	2b00      	cmp	r3, #0
 800765c:	d0c6      	beq.n	80075ec <_svfiprintf_r+0x130>
 800765e:	9105      	str	r1, [sp, #20]
 8007660:	e7c4      	b.n	80075ec <_svfiprintf_r+0x130>
 8007662:	fb0c 2101 	mla	r1, ip, r1, r2
 8007666:	4604      	mov	r4, r0
 8007668:	2301      	movs	r3, #1
 800766a:	e7f0      	b.n	800764e <_svfiprintf_r+0x192>
 800766c:	ab03      	add	r3, sp, #12
 800766e:	9300      	str	r3, [sp, #0]
 8007670:	462a      	mov	r2, r5
 8007672:	4b0e      	ldr	r3, [pc, #56]	@ (80076ac <_svfiprintf_r+0x1f0>)
 8007674:	a904      	add	r1, sp, #16
 8007676:	4638      	mov	r0, r7
 8007678:	f7fc fcac 	bl	8003fd4 <_printf_float>
 800767c:	1c42      	adds	r2, r0, #1
 800767e:	4606      	mov	r6, r0
 8007680:	d1d6      	bne.n	8007630 <_svfiprintf_r+0x174>
 8007682:	89ab      	ldrh	r3, [r5, #12]
 8007684:	065b      	lsls	r3, r3, #25
 8007686:	f53f af2d 	bmi.w	80074e4 <_svfiprintf_r+0x28>
 800768a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800768c:	e72c      	b.n	80074e8 <_svfiprintf_r+0x2c>
 800768e:	ab03      	add	r3, sp, #12
 8007690:	9300      	str	r3, [sp, #0]
 8007692:	462a      	mov	r2, r5
 8007694:	4b05      	ldr	r3, [pc, #20]	@ (80076ac <_svfiprintf_r+0x1f0>)
 8007696:	a904      	add	r1, sp, #16
 8007698:	4638      	mov	r0, r7
 800769a:	f7fc ff33 	bl	8004504 <_printf_i>
 800769e:	e7ed      	b.n	800767c <_svfiprintf_r+0x1c0>
 80076a0:	080089c9 	.word	0x080089c9
 80076a4:	080089d3 	.word	0x080089d3
 80076a8:	08003fd5 	.word	0x08003fd5
 80076ac:	08007405 	.word	0x08007405
 80076b0:	080089cf 	.word	0x080089cf

080076b4 <__sflush_r>:
 80076b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80076b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076bc:	0716      	lsls	r6, r2, #28
 80076be:	4605      	mov	r5, r0
 80076c0:	460c      	mov	r4, r1
 80076c2:	d454      	bmi.n	800776e <__sflush_r+0xba>
 80076c4:	684b      	ldr	r3, [r1, #4]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	dc02      	bgt.n	80076d0 <__sflush_r+0x1c>
 80076ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	dd48      	ble.n	8007762 <__sflush_r+0xae>
 80076d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80076d2:	2e00      	cmp	r6, #0
 80076d4:	d045      	beq.n	8007762 <__sflush_r+0xae>
 80076d6:	2300      	movs	r3, #0
 80076d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80076dc:	682f      	ldr	r7, [r5, #0]
 80076de:	6a21      	ldr	r1, [r4, #32]
 80076e0:	602b      	str	r3, [r5, #0]
 80076e2:	d030      	beq.n	8007746 <__sflush_r+0x92>
 80076e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80076e6:	89a3      	ldrh	r3, [r4, #12]
 80076e8:	0759      	lsls	r1, r3, #29
 80076ea:	d505      	bpl.n	80076f8 <__sflush_r+0x44>
 80076ec:	6863      	ldr	r3, [r4, #4]
 80076ee:	1ad2      	subs	r2, r2, r3
 80076f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80076f2:	b10b      	cbz	r3, 80076f8 <__sflush_r+0x44>
 80076f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80076f6:	1ad2      	subs	r2, r2, r3
 80076f8:	2300      	movs	r3, #0
 80076fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80076fc:	6a21      	ldr	r1, [r4, #32]
 80076fe:	4628      	mov	r0, r5
 8007700:	47b0      	blx	r6
 8007702:	1c43      	adds	r3, r0, #1
 8007704:	89a3      	ldrh	r3, [r4, #12]
 8007706:	d106      	bne.n	8007716 <__sflush_r+0x62>
 8007708:	6829      	ldr	r1, [r5, #0]
 800770a:	291d      	cmp	r1, #29
 800770c:	d82b      	bhi.n	8007766 <__sflush_r+0xb2>
 800770e:	4a2a      	ldr	r2, [pc, #168]	@ (80077b8 <__sflush_r+0x104>)
 8007710:	410a      	asrs	r2, r1
 8007712:	07d6      	lsls	r6, r2, #31
 8007714:	d427      	bmi.n	8007766 <__sflush_r+0xb2>
 8007716:	2200      	movs	r2, #0
 8007718:	6062      	str	r2, [r4, #4]
 800771a:	04d9      	lsls	r1, r3, #19
 800771c:	6922      	ldr	r2, [r4, #16]
 800771e:	6022      	str	r2, [r4, #0]
 8007720:	d504      	bpl.n	800772c <__sflush_r+0x78>
 8007722:	1c42      	adds	r2, r0, #1
 8007724:	d101      	bne.n	800772a <__sflush_r+0x76>
 8007726:	682b      	ldr	r3, [r5, #0]
 8007728:	b903      	cbnz	r3, 800772c <__sflush_r+0x78>
 800772a:	6560      	str	r0, [r4, #84]	@ 0x54
 800772c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800772e:	602f      	str	r7, [r5, #0]
 8007730:	b1b9      	cbz	r1, 8007762 <__sflush_r+0xae>
 8007732:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007736:	4299      	cmp	r1, r3
 8007738:	d002      	beq.n	8007740 <__sflush_r+0x8c>
 800773a:	4628      	mov	r0, r5
 800773c:	f7fe fa2c 	bl	8005b98 <_free_r>
 8007740:	2300      	movs	r3, #0
 8007742:	6363      	str	r3, [r4, #52]	@ 0x34
 8007744:	e00d      	b.n	8007762 <__sflush_r+0xae>
 8007746:	2301      	movs	r3, #1
 8007748:	4628      	mov	r0, r5
 800774a:	47b0      	blx	r6
 800774c:	4602      	mov	r2, r0
 800774e:	1c50      	adds	r0, r2, #1
 8007750:	d1c9      	bne.n	80076e6 <__sflush_r+0x32>
 8007752:	682b      	ldr	r3, [r5, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d0c6      	beq.n	80076e6 <__sflush_r+0x32>
 8007758:	2b1d      	cmp	r3, #29
 800775a:	d001      	beq.n	8007760 <__sflush_r+0xac>
 800775c:	2b16      	cmp	r3, #22
 800775e:	d11e      	bne.n	800779e <__sflush_r+0xea>
 8007760:	602f      	str	r7, [r5, #0]
 8007762:	2000      	movs	r0, #0
 8007764:	e022      	b.n	80077ac <__sflush_r+0xf8>
 8007766:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800776a:	b21b      	sxth	r3, r3
 800776c:	e01b      	b.n	80077a6 <__sflush_r+0xf2>
 800776e:	690f      	ldr	r7, [r1, #16]
 8007770:	2f00      	cmp	r7, #0
 8007772:	d0f6      	beq.n	8007762 <__sflush_r+0xae>
 8007774:	0793      	lsls	r3, r2, #30
 8007776:	680e      	ldr	r6, [r1, #0]
 8007778:	bf08      	it	eq
 800777a:	694b      	ldreq	r3, [r1, #20]
 800777c:	600f      	str	r7, [r1, #0]
 800777e:	bf18      	it	ne
 8007780:	2300      	movne	r3, #0
 8007782:	eba6 0807 	sub.w	r8, r6, r7
 8007786:	608b      	str	r3, [r1, #8]
 8007788:	f1b8 0f00 	cmp.w	r8, #0
 800778c:	dde9      	ble.n	8007762 <__sflush_r+0xae>
 800778e:	6a21      	ldr	r1, [r4, #32]
 8007790:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007792:	4643      	mov	r3, r8
 8007794:	463a      	mov	r2, r7
 8007796:	4628      	mov	r0, r5
 8007798:	47b0      	blx	r6
 800779a:	2800      	cmp	r0, #0
 800779c:	dc08      	bgt.n	80077b0 <__sflush_r+0xfc>
 800779e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077a6:	81a3      	strh	r3, [r4, #12]
 80077a8:	f04f 30ff 	mov.w	r0, #4294967295
 80077ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077b0:	4407      	add	r7, r0
 80077b2:	eba8 0800 	sub.w	r8, r8, r0
 80077b6:	e7e7      	b.n	8007788 <__sflush_r+0xd4>
 80077b8:	dfbffffe 	.word	0xdfbffffe

080077bc <_fflush_r>:
 80077bc:	b538      	push	{r3, r4, r5, lr}
 80077be:	690b      	ldr	r3, [r1, #16]
 80077c0:	4605      	mov	r5, r0
 80077c2:	460c      	mov	r4, r1
 80077c4:	b913      	cbnz	r3, 80077cc <_fflush_r+0x10>
 80077c6:	2500      	movs	r5, #0
 80077c8:	4628      	mov	r0, r5
 80077ca:	bd38      	pop	{r3, r4, r5, pc}
 80077cc:	b118      	cbz	r0, 80077d6 <_fflush_r+0x1a>
 80077ce:	6a03      	ldr	r3, [r0, #32]
 80077d0:	b90b      	cbnz	r3, 80077d6 <_fflush_r+0x1a>
 80077d2:	f7fd fa57 	bl	8004c84 <__sinit>
 80077d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d0f3      	beq.n	80077c6 <_fflush_r+0xa>
 80077de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80077e0:	07d0      	lsls	r0, r2, #31
 80077e2:	d404      	bmi.n	80077ee <_fflush_r+0x32>
 80077e4:	0599      	lsls	r1, r3, #22
 80077e6:	d402      	bmi.n	80077ee <_fflush_r+0x32>
 80077e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80077ea:	f7fd fb62 	bl	8004eb2 <__retarget_lock_acquire_recursive>
 80077ee:	4628      	mov	r0, r5
 80077f0:	4621      	mov	r1, r4
 80077f2:	f7ff ff5f 	bl	80076b4 <__sflush_r>
 80077f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80077f8:	07da      	lsls	r2, r3, #31
 80077fa:	4605      	mov	r5, r0
 80077fc:	d4e4      	bmi.n	80077c8 <_fflush_r+0xc>
 80077fe:	89a3      	ldrh	r3, [r4, #12]
 8007800:	059b      	lsls	r3, r3, #22
 8007802:	d4e1      	bmi.n	80077c8 <_fflush_r+0xc>
 8007804:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007806:	f7fd fb55 	bl	8004eb4 <__retarget_lock_release_recursive>
 800780a:	e7dd      	b.n	80077c8 <_fflush_r+0xc>

0800780c <fiprintf>:
 800780c:	b40e      	push	{r1, r2, r3}
 800780e:	b503      	push	{r0, r1, lr}
 8007810:	4601      	mov	r1, r0
 8007812:	ab03      	add	r3, sp, #12
 8007814:	4805      	ldr	r0, [pc, #20]	@ (800782c <fiprintf+0x20>)
 8007816:	f853 2b04 	ldr.w	r2, [r3], #4
 800781a:	6800      	ldr	r0, [r0, #0]
 800781c:	9301      	str	r3, [sp, #4]
 800781e:	f000 fc25 	bl	800806c <_vfiprintf_r>
 8007822:	b002      	add	sp, #8
 8007824:	f85d eb04 	ldr.w	lr, [sp], #4
 8007828:	b003      	add	sp, #12
 800782a:	4770      	bx	lr
 800782c:	2000001c 	.word	0x2000001c

08007830 <memmove>:
 8007830:	4288      	cmp	r0, r1
 8007832:	b510      	push	{r4, lr}
 8007834:	eb01 0402 	add.w	r4, r1, r2
 8007838:	d902      	bls.n	8007840 <memmove+0x10>
 800783a:	4284      	cmp	r4, r0
 800783c:	4623      	mov	r3, r4
 800783e:	d807      	bhi.n	8007850 <memmove+0x20>
 8007840:	1e43      	subs	r3, r0, #1
 8007842:	42a1      	cmp	r1, r4
 8007844:	d008      	beq.n	8007858 <memmove+0x28>
 8007846:	f811 2b01 	ldrb.w	r2, [r1], #1
 800784a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800784e:	e7f8      	b.n	8007842 <memmove+0x12>
 8007850:	4402      	add	r2, r0
 8007852:	4601      	mov	r1, r0
 8007854:	428a      	cmp	r2, r1
 8007856:	d100      	bne.n	800785a <memmove+0x2a>
 8007858:	bd10      	pop	{r4, pc}
 800785a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800785e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007862:	e7f7      	b.n	8007854 <memmove+0x24>

08007864 <strncmp>:
 8007864:	b510      	push	{r4, lr}
 8007866:	b16a      	cbz	r2, 8007884 <strncmp+0x20>
 8007868:	3901      	subs	r1, #1
 800786a:	1884      	adds	r4, r0, r2
 800786c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007870:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007874:	429a      	cmp	r2, r3
 8007876:	d103      	bne.n	8007880 <strncmp+0x1c>
 8007878:	42a0      	cmp	r0, r4
 800787a:	d001      	beq.n	8007880 <strncmp+0x1c>
 800787c:	2a00      	cmp	r2, #0
 800787e:	d1f5      	bne.n	800786c <strncmp+0x8>
 8007880:	1ad0      	subs	r0, r2, r3
 8007882:	bd10      	pop	{r4, pc}
 8007884:	4610      	mov	r0, r2
 8007886:	e7fc      	b.n	8007882 <strncmp+0x1e>

08007888 <_sbrk_r>:
 8007888:	b538      	push	{r3, r4, r5, lr}
 800788a:	4d06      	ldr	r5, [pc, #24]	@ (80078a4 <_sbrk_r+0x1c>)
 800788c:	2300      	movs	r3, #0
 800788e:	4604      	mov	r4, r0
 8007890:	4608      	mov	r0, r1
 8007892:	602b      	str	r3, [r5, #0]
 8007894:	f7f9 fdc2 	bl	800141c <_sbrk>
 8007898:	1c43      	adds	r3, r0, #1
 800789a:	d102      	bne.n	80078a2 <_sbrk_r+0x1a>
 800789c:	682b      	ldr	r3, [r5, #0]
 800789e:	b103      	cbz	r3, 80078a2 <_sbrk_r+0x1a>
 80078a0:	6023      	str	r3, [r4, #0]
 80078a2:	bd38      	pop	{r3, r4, r5, pc}
 80078a4:	20000428 	.word	0x20000428

080078a8 <memcpy>:
 80078a8:	440a      	add	r2, r1
 80078aa:	4291      	cmp	r1, r2
 80078ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80078b0:	d100      	bne.n	80078b4 <memcpy+0xc>
 80078b2:	4770      	bx	lr
 80078b4:	b510      	push	{r4, lr}
 80078b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078be:	4291      	cmp	r1, r2
 80078c0:	d1f9      	bne.n	80078b6 <memcpy+0xe>
 80078c2:	bd10      	pop	{r4, pc}
 80078c4:	0000      	movs	r0, r0
	...

080078c8 <nan>:
 80078c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80078d0 <nan+0x8>
 80078cc:	4770      	bx	lr
 80078ce:	bf00      	nop
 80078d0:	00000000 	.word	0x00000000
 80078d4:	7ff80000 	.word	0x7ff80000

080078d8 <abort>:
 80078d8:	b508      	push	{r3, lr}
 80078da:	2006      	movs	r0, #6
 80078dc:	f000 fd9a 	bl	8008414 <raise>
 80078e0:	2001      	movs	r0, #1
 80078e2:	f7f9 fd22 	bl	800132a <_exit>

080078e6 <_calloc_r>:
 80078e6:	b570      	push	{r4, r5, r6, lr}
 80078e8:	fba1 5402 	umull	r5, r4, r1, r2
 80078ec:	b93c      	cbnz	r4, 80078fe <_calloc_r+0x18>
 80078ee:	4629      	mov	r1, r5
 80078f0:	f7fe f9c6 	bl	8005c80 <_malloc_r>
 80078f4:	4606      	mov	r6, r0
 80078f6:	b928      	cbnz	r0, 8007904 <_calloc_r+0x1e>
 80078f8:	2600      	movs	r6, #0
 80078fa:	4630      	mov	r0, r6
 80078fc:	bd70      	pop	{r4, r5, r6, pc}
 80078fe:	220c      	movs	r2, #12
 8007900:	6002      	str	r2, [r0, #0]
 8007902:	e7f9      	b.n	80078f8 <_calloc_r+0x12>
 8007904:	462a      	mov	r2, r5
 8007906:	4621      	mov	r1, r4
 8007908:	f7fd fa55 	bl	8004db6 <memset>
 800790c:	e7f5      	b.n	80078fa <_calloc_r+0x14>

0800790e <rshift>:
 800790e:	6903      	ldr	r3, [r0, #16]
 8007910:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007914:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007918:	ea4f 1261 	mov.w	r2, r1, asr #5
 800791c:	f100 0414 	add.w	r4, r0, #20
 8007920:	dd45      	ble.n	80079ae <rshift+0xa0>
 8007922:	f011 011f 	ands.w	r1, r1, #31
 8007926:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800792a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800792e:	d10c      	bne.n	800794a <rshift+0x3c>
 8007930:	f100 0710 	add.w	r7, r0, #16
 8007934:	4629      	mov	r1, r5
 8007936:	42b1      	cmp	r1, r6
 8007938:	d334      	bcc.n	80079a4 <rshift+0x96>
 800793a:	1a9b      	subs	r3, r3, r2
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	1eea      	subs	r2, r5, #3
 8007940:	4296      	cmp	r6, r2
 8007942:	bf38      	it	cc
 8007944:	2300      	movcc	r3, #0
 8007946:	4423      	add	r3, r4
 8007948:	e015      	b.n	8007976 <rshift+0x68>
 800794a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800794e:	f1c1 0820 	rsb	r8, r1, #32
 8007952:	40cf      	lsrs	r7, r1
 8007954:	f105 0e04 	add.w	lr, r5, #4
 8007958:	46a1      	mov	r9, r4
 800795a:	4576      	cmp	r6, lr
 800795c:	46f4      	mov	ip, lr
 800795e:	d815      	bhi.n	800798c <rshift+0x7e>
 8007960:	1a9a      	subs	r2, r3, r2
 8007962:	0092      	lsls	r2, r2, #2
 8007964:	3a04      	subs	r2, #4
 8007966:	3501      	adds	r5, #1
 8007968:	42ae      	cmp	r6, r5
 800796a:	bf38      	it	cc
 800796c:	2200      	movcc	r2, #0
 800796e:	18a3      	adds	r3, r4, r2
 8007970:	50a7      	str	r7, [r4, r2]
 8007972:	b107      	cbz	r7, 8007976 <rshift+0x68>
 8007974:	3304      	adds	r3, #4
 8007976:	1b1a      	subs	r2, r3, r4
 8007978:	42a3      	cmp	r3, r4
 800797a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800797e:	bf08      	it	eq
 8007980:	2300      	moveq	r3, #0
 8007982:	6102      	str	r2, [r0, #16]
 8007984:	bf08      	it	eq
 8007986:	6143      	streq	r3, [r0, #20]
 8007988:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800798c:	f8dc c000 	ldr.w	ip, [ip]
 8007990:	fa0c fc08 	lsl.w	ip, ip, r8
 8007994:	ea4c 0707 	orr.w	r7, ip, r7
 8007998:	f849 7b04 	str.w	r7, [r9], #4
 800799c:	f85e 7b04 	ldr.w	r7, [lr], #4
 80079a0:	40cf      	lsrs	r7, r1
 80079a2:	e7da      	b.n	800795a <rshift+0x4c>
 80079a4:	f851 cb04 	ldr.w	ip, [r1], #4
 80079a8:	f847 cf04 	str.w	ip, [r7, #4]!
 80079ac:	e7c3      	b.n	8007936 <rshift+0x28>
 80079ae:	4623      	mov	r3, r4
 80079b0:	e7e1      	b.n	8007976 <rshift+0x68>

080079b2 <__hexdig_fun>:
 80079b2:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80079b6:	2b09      	cmp	r3, #9
 80079b8:	d802      	bhi.n	80079c0 <__hexdig_fun+0xe>
 80079ba:	3820      	subs	r0, #32
 80079bc:	b2c0      	uxtb	r0, r0
 80079be:	4770      	bx	lr
 80079c0:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80079c4:	2b05      	cmp	r3, #5
 80079c6:	d801      	bhi.n	80079cc <__hexdig_fun+0x1a>
 80079c8:	3847      	subs	r0, #71	@ 0x47
 80079ca:	e7f7      	b.n	80079bc <__hexdig_fun+0xa>
 80079cc:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80079d0:	2b05      	cmp	r3, #5
 80079d2:	d801      	bhi.n	80079d8 <__hexdig_fun+0x26>
 80079d4:	3827      	subs	r0, #39	@ 0x27
 80079d6:	e7f1      	b.n	80079bc <__hexdig_fun+0xa>
 80079d8:	2000      	movs	r0, #0
 80079da:	4770      	bx	lr

080079dc <__gethex>:
 80079dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e0:	b085      	sub	sp, #20
 80079e2:	468a      	mov	sl, r1
 80079e4:	9302      	str	r3, [sp, #8]
 80079e6:	680b      	ldr	r3, [r1, #0]
 80079e8:	9001      	str	r0, [sp, #4]
 80079ea:	4690      	mov	r8, r2
 80079ec:	1c9c      	adds	r4, r3, #2
 80079ee:	46a1      	mov	r9, r4
 80079f0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80079f4:	2830      	cmp	r0, #48	@ 0x30
 80079f6:	d0fa      	beq.n	80079ee <__gethex+0x12>
 80079f8:	eba9 0303 	sub.w	r3, r9, r3
 80079fc:	f1a3 0b02 	sub.w	fp, r3, #2
 8007a00:	f7ff ffd7 	bl	80079b2 <__hexdig_fun>
 8007a04:	4605      	mov	r5, r0
 8007a06:	2800      	cmp	r0, #0
 8007a08:	d168      	bne.n	8007adc <__gethex+0x100>
 8007a0a:	49a0      	ldr	r1, [pc, #640]	@ (8007c8c <__gethex+0x2b0>)
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	4648      	mov	r0, r9
 8007a10:	f7ff ff28 	bl	8007864 <strncmp>
 8007a14:	4607      	mov	r7, r0
 8007a16:	2800      	cmp	r0, #0
 8007a18:	d167      	bne.n	8007aea <__gethex+0x10e>
 8007a1a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007a1e:	4626      	mov	r6, r4
 8007a20:	f7ff ffc7 	bl	80079b2 <__hexdig_fun>
 8007a24:	2800      	cmp	r0, #0
 8007a26:	d062      	beq.n	8007aee <__gethex+0x112>
 8007a28:	4623      	mov	r3, r4
 8007a2a:	7818      	ldrb	r0, [r3, #0]
 8007a2c:	2830      	cmp	r0, #48	@ 0x30
 8007a2e:	4699      	mov	r9, r3
 8007a30:	f103 0301 	add.w	r3, r3, #1
 8007a34:	d0f9      	beq.n	8007a2a <__gethex+0x4e>
 8007a36:	f7ff ffbc 	bl	80079b2 <__hexdig_fun>
 8007a3a:	fab0 f580 	clz	r5, r0
 8007a3e:	096d      	lsrs	r5, r5, #5
 8007a40:	f04f 0b01 	mov.w	fp, #1
 8007a44:	464a      	mov	r2, r9
 8007a46:	4616      	mov	r6, r2
 8007a48:	3201      	adds	r2, #1
 8007a4a:	7830      	ldrb	r0, [r6, #0]
 8007a4c:	f7ff ffb1 	bl	80079b2 <__hexdig_fun>
 8007a50:	2800      	cmp	r0, #0
 8007a52:	d1f8      	bne.n	8007a46 <__gethex+0x6a>
 8007a54:	498d      	ldr	r1, [pc, #564]	@ (8007c8c <__gethex+0x2b0>)
 8007a56:	2201      	movs	r2, #1
 8007a58:	4630      	mov	r0, r6
 8007a5a:	f7ff ff03 	bl	8007864 <strncmp>
 8007a5e:	2800      	cmp	r0, #0
 8007a60:	d13f      	bne.n	8007ae2 <__gethex+0x106>
 8007a62:	b944      	cbnz	r4, 8007a76 <__gethex+0x9a>
 8007a64:	1c74      	adds	r4, r6, #1
 8007a66:	4622      	mov	r2, r4
 8007a68:	4616      	mov	r6, r2
 8007a6a:	3201      	adds	r2, #1
 8007a6c:	7830      	ldrb	r0, [r6, #0]
 8007a6e:	f7ff ffa0 	bl	80079b2 <__hexdig_fun>
 8007a72:	2800      	cmp	r0, #0
 8007a74:	d1f8      	bne.n	8007a68 <__gethex+0x8c>
 8007a76:	1ba4      	subs	r4, r4, r6
 8007a78:	00a7      	lsls	r7, r4, #2
 8007a7a:	7833      	ldrb	r3, [r6, #0]
 8007a7c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007a80:	2b50      	cmp	r3, #80	@ 0x50
 8007a82:	d13e      	bne.n	8007b02 <__gethex+0x126>
 8007a84:	7873      	ldrb	r3, [r6, #1]
 8007a86:	2b2b      	cmp	r3, #43	@ 0x2b
 8007a88:	d033      	beq.n	8007af2 <__gethex+0x116>
 8007a8a:	2b2d      	cmp	r3, #45	@ 0x2d
 8007a8c:	d034      	beq.n	8007af8 <__gethex+0x11c>
 8007a8e:	1c71      	adds	r1, r6, #1
 8007a90:	2400      	movs	r4, #0
 8007a92:	7808      	ldrb	r0, [r1, #0]
 8007a94:	f7ff ff8d 	bl	80079b2 <__hexdig_fun>
 8007a98:	1e43      	subs	r3, r0, #1
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	2b18      	cmp	r3, #24
 8007a9e:	d830      	bhi.n	8007b02 <__gethex+0x126>
 8007aa0:	f1a0 0210 	sub.w	r2, r0, #16
 8007aa4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007aa8:	f7ff ff83 	bl	80079b2 <__hexdig_fun>
 8007aac:	f100 3cff 	add.w	ip, r0, #4294967295
 8007ab0:	fa5f fc8c 	uxtb.w	ip, ip
 8007ab4:	f1bc 0f18 	cmp.w	ip, #24
 8007ab8:	f04f 030a 	mov.w	r3, #10
 8007abc:	d91e      	bls.n	8007afc <__gethex+0x120>
 8007abe:	b104      	cbz	r4, 8007ac2 <__gethex+0xe6>
 8007ac0:	4252      	negs	r2, r2
 8007ac2:	4417      	add	r7, r2
 8007ac4:	f8ca 1000 	str.w	r1, [sl]
 8007ac8:	b1ed      	cbz	r5, 8007b06 <__gethex+0x12a>
 8007aca:	f1bb 0f00 	cmp.w	fp, #0
 8007ace:	bf0c      	ite	eq
 8007ad0:	2506      	moveq	r5, #6
 8007ad2:	2500      	movne	r5, #0
 8007ad4:	4628      	mov	r0, r5
 8007ad6:	b005      	add	sp, #20
 8007ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007adc:	2500      	movs	r5, #0
 8007ade:	462c      	mov	r4, r5
 8007ae0:	e7b0      	b.n	8007a44 <__gethex+0x68>
 8007ae2:	2c00      	cmp	r4, #0
 8007ae4:	d1c7      	bne.n	8007a76 <__gethex+0x9a>
 8007ae6:	4627      	mov	r7, r4
 8007ae8:	e7c7      	b.n	8007a7a <__gethex+0x9e>
 8007aea:	464e      	mov	r6, r9
 8007aec:	462f      	mov	r7, r5
 8007aee:	2501      	movs	r5, #1
 8007af0:	e7c3      	b.n	8007a7a <__gethex+0x9e>
 8007af2:	2400      	movs	r4, #0
 8007af4:	1cb1      	adds	r1, r6, #2
 8007af6:	e7cc      	b.n	8007a92 <__gethex+0xb6>
 8007af8:	2401      	movs	r4, #1
 8007afa:	e7fb      	b.n	8007af4 <__gethex+0x118>
 8007afc:	fb03 0002 	mla	r0, r3, r2, r0
 8007b00:	e7ce      	b.n	8007aa0 <__gethex+0xc4>
 8007b02:	4631      	mov	r1, r6
 8007b04:	e7de      	b.n	8007ac4 <__gethex+0xe8>
 8007b06:	eba6 0309 	sub.w	r3, r6, r9
 8007b0a:	3b01      	subs	r3, #1
 8007b0c:	4629      	mov	r1, r5
 8007b0e:	2b07      	cmp	r3, #7
 8007b10:	dc0a      	bgt.n	8007b28 <__gethex+0x14c>
 8007b12:	9801      	ldr	r0, [sp, #4]
 8007b14:	f7fe f940 	bl	8005d98 <_Balloc>
 8007b18:	4604      	mov	r4, r0
 8007b1a:	b940      	cbnz	r0, 8007b2e <__gethex+0x152>
 8007b1c:	4b5c      	ldr	r3, [pc, #368]	@ (8007c90 <__gethex+0x2b4>)
 8007b1e:	4602      	mov	r2, r0
 8007b20:	21e4      	movs	r1, #228	@ 0xe4
 8007b22:	485c      	ldr	r0, [pc, #368]	@ (8007c94 <__gethex+0x2b8>)
 8007b24:	f7fd f9ce 	bl	8004ec4 <__assert_func>
 8007b28:	3101      	adds	r1, #1
 8007b2a:	105b      	asrs	r3, r3, #1
 8007b2c:	e7ef      	b.n	8007b0e <__gethex+0x132>
 8007b2e:	f100 0a14 	add.w	sl, r0, #20
 8007b32:	2300      	movs	r3, #0
 8007b34:	4655      	mov	r5, sl
 8007b36:	469b      	mov	fp, r3
 8007b38:	45b1      	cmp	r9, r6
 8007b3a:	d337      	bcc.n	8007bac <__gethex+0x1d0>
 8007b3c:	f845 bb04 	str.w	fp, [r5], #4
 8007b40:	eba5 050a 	sub.w	r5, r5, sl
 8007b44:	10ad      	asrs	r5, r5, #2
 8007b46:	6125      	str	r5, [r4, #16]
 8007b48:	4658      	mov	r0, fp
 8007b4a:	f7fe fa17 	bl	8005f7c <__hi0bits>
 8007b4e:	016d      	lsls	r5, r5, #5
 8007b50:	f8d8 6000 	ldr.w	r6, [r8]
 8007b54:	1a2d      	subs	r5, r5, r0
 8007b56:	42b5      	cmp	r5, r6
 8007b58:	dd54      	ble.n	8007c04 <__gethex+0x228>
 8007b5a:	1bad      	subs	r5, r5, r6
 8007b5c:	4629      	mov	r1, r5
 8007b5e:	4620      	mov	r0, r4
 8007b60:	f7fe fdab 	bl	80066ba <__any_on>
 8007b64:	4681      	mov	r9, r0
 8007b66:	b178      	cbz	r0, 8007b88 <__gethex+0x1ac>
 8007b68:	1e6b      	subs	r3, r5, #1
 8007b6a:	1159      	asrs	r1, r3, #5
 8007b6c:	f003 021f 	and.w	r2, r3, #31
 8007b70:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007b74:	f04f 0901 	mov.w	r9, #1
 8007b78:	fa09 f202 	lsl.w	r2, r9, r2
 8007b7c:	420a      	tst	r2, r1
 8007b7e:	d003      	beq.n	8007b88 <__gethex+0x1ac>
 8007b80:	454b      	cmp	r3, r9
 8007b82:	dc36      	bgt.n	8007bf2 <__gethex+0x216>
 8007b84:	f04f 0902 	mov.w	r9, #2
 8007b88:	4629      	mov	r1, r5
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	f7ff febf 	bl	800790e <rshift>
 8007b90:	442f      	add	r7, r5
 8007b92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007b96:	42bb      	cmp	r3, r7
 8007b98:	da42      	bge.n	8007c20 <__gethex+0x244>
 8007b9a:	9801      	ldr	r0, [sp, #4]
 8007b9c:	4621      	mov	r1, r4
 8007b9e:	f7fe f93b 	bl	8005e18 <_Bfree>
 8007ba2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	6013      	str	r3, [r2, #0]
 8007ba8:	25a3      	movs	r5, #163	@ 0xa3
 8007baa:	e793      	b.n	8007ad4 <__gethex+0xf8>
 8007bac:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007bb0:	2a2e      	cmp	r2, #46	@ 0x2e
 8007bb2:	d012      	beq.n	8007bda <__gethex+0x1fe>
 8007bb4:	2b20      	cmp	r3, #32
 8007bb6:	d104      	bne.n	8007bc2 <__gethex+0x1e6>
 8007bb8:	f845 bb04 	str.w	fp, [r5], #4
 8007bbc:	f04f 0b00 	mov.w	fp, #0
 8007bc0:	465b      	mov	r3, fp
 8007bc2:	7830      	ldrb	r0, [r6, #0]
 8007bc4:	9303      	str	r3, [sp, #12]
 8007bc6:	f7ff fef4 	bl	80079b2 <__hexdig_fun>
 8007bca:	9b03      	ldr	r3, [sp, #12]
 8007bcc:	f000 000f 	and.w	r0, r0, #15
 8007bd0:	4098      	lsls	r0, r3
 8007bd2:	ea4b 0b00 	orr.w	fp, fp, r0
 8007bd6:	3304      	adds	r3, #4
 8007bd8:	e7ae      	b.n	8007b38 <__gethex+0x15c>
 8007bda:	45b1      	cmp	r9, r6
 8007bdc:	d8ea      	bhi.n	8007bb4 <__gethex+0x1d8>
 8007bde:	492b      	ldr	r1, [pc, #172]	@ (8007c8c <__gethex+0x2b0>)
 8007be0:	9303      	str	r3, [sp, #12]
 8007be2:	2201      	movs	r2, #1
 8007be4:	4630      	mov	r0, r6
 8007be6:	f7ff fe3d 	bl	8007864 <strncmp>
 8007bea:	9b03      	ldr	r3, [sp, #12]
 8007bec:	2800      	cmp	r0, #0
 8007bee:	d1e1      	bne.n	8007bb4 <__gethex+0x1d8>
 8007bf0:	e7a2      	b.n	8007b38 <__gethex+0x15c>
 8007bf2:	1ea9      	subs	r1, r5, #2
 8007bf4:	4620      	mov	r0, r4
 8007bf6:	f7fe fd60 	bl	80066ba <__any_on>
 8007bfa:	2800      	cmp	r0, #0
 8007bfc:	d0c2      	beq.n	8007b84 <__gethex+0x1a8>
 8007bfe:	f04f 0903 	mov.w	r9, #3
 8007c02:	e7c1      	b.n	8007b88 <__gethex+0x1ac>
 8007c04:	da09      	bge.n	8007c1a <__gethex+0x23e>
 8007c06:	1b75      	subs	r5, r6, r5
 8007c08:	4621      	mov	r1, r4
 8007c0a:	9801      	ldr	r0, [sp, #4]
 8007c0c:	462a      	mov	r2, r5
 8007c0e:	f7fe fb1b 	bl	8006248 <__lshift>
 8007c12:	1b7f      	subs	r7, r7, r5
 8007c14:	4604      	mov	r4, r0
 8007c16:	f100 0a14 	add.w	sl, r0, #20
 8007c1a:	f04f 0900 	mov.w	r9, #0
 8007c1e:	e7b8      	b.n	8007b92 <__gethex+0x1b6>
 8007c20:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007c24:	42bd      	cmp	r5, r7
 8007c26:	dd6f      	ble.n	8007d08 <__gethex+0x32c>
 8007c28:	1bed      	subs	r5, r5, r7
 8007c2a:	42ae      	cmp	r6, r5
 8007c2c:	dc34      	bgt.n	8007c98 <__gethex+0x2bc>
 8007c2e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007c32:	2b02      	cmp	r3, #2
 8007c34:	d022      	beq.n	8007c7c <__gethex+0x2a0>
 8007c36:	2b03      	cmp	r3, #3
 8007c38:	d024      	beq.n	8007c84 <__gethex+0x2a8>
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d115      	bne.n	8007c6a <__gethex+0x28e>
 8007c3e:	42ae      	cmp	r6, r5
 8007c40:	d113      	bne.n	8007c6a <__gethex+0x28e>
 8007c42:	2e01      	cmp	r6, #1
 8007c44:	d10b      	bne.n	8007c5e <__gethex+0x282>
 8007c46:	9a02      	ldr	r2, [sp, #8]
 8007c48:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007c4c:	6013      	str	r3, [r2, #0]
 8007c4e:	2301      	movs	r3, #1
 8007c50:	6123      	str	r3, [r4, #16]
 8007c52:	f8ca 3000 	str.w	r3, [sl]
 8007c56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c58:	2562      	movs	r5, #98	@ 0x62
 8007c5a:	601c      	str	r4, [r3, #0]
 8007c5c:	e73a      	b.n	8007ad4 <__gethex+0xf8>
 8007c5e:	1e71      	subs	r1, r6, #1
 8007c60:	4620      	mov	r0, r4
 8007c62:	f7fe fd2a 	bl	80066ba <__any_on>
 8007c66:	2800      	cmp	r0, #0
 8007c68:	d1ed      	bne.n	8007c46 <__gethex+0x26a>
 8007c6a:	9801      	ldr	r0, [sp, #4]
 8007c6c:	4621      	mov	r1, r4
 8007c6e:	f7fe f8d3 	bl	8005e18 <_Bfree>
 8007c72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c74:	2300      	movs	r3, #0
 8007c76:	6013      	str	r3, [r2, #0]
 8007c78:	2550      	movs	r5, #80	@ 0x50
 8007c7a:	e72b      	b.n	8007ad4 <__gethex+0xf8>
 8007c7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d1f3      	bne.n	8007c6a <__gethex+0x28e>
 8007c82:	e7e0      	b.n	8007c46 <__gethex+0x26a>
 8007c84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1dd      	bne.n	8007c46 <__gethex+0x26a>
 8007c8a:	e7ee      	b.n	8007c6a <__gethex+0x28e>
 8007c8c:	08008870 	.word	0x08008870
 8007c90:	08008709 	.word	0x08008709
 8007c94:	080089e2 	.word	0x080089e2
 8007c98:	1e6f      	subs	r7, r5, #1
 8007c9a:	f1b9 0f00 	cmp.w	r9, #0
 8007c9e:	d130      	bne.n	8007d02 <__gethex+0x326>
 8007ca0:	b127      	cbz	r7, 8007cac <__gethex+0x2d0>
 8007ca2:	4639      	mov	r1, r7
 8007ca4:	4620      	mov	r0, r4
 8007ca6:	f7fe fd08 	bl	80066ba <__any_on>
 8007caa:	4681      	mov	r9, r0
 8007cac:	117a      	asrs	r2, r7, #5
 8007cae:	2301      	movs	r3, #1
 8007cb0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007cb4:	f007 071f 	and.w	r7, r7, #31
 8007cb8:	40bb      	lsls	r3, r7
 8007cba:	4213      	tst	r3, r2
 8007cbc:	4629      	mov	r1, r5
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	bf18      	it	ne
 8007cc2:	f049 0902 	orrne.w	r9, r9, #2
 8007cc6:	f7ff fe22 	bl	800790e <rshift>
 8007cca:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007cce:	1b76      	subs	r6, r6, r5
 8007cd0:	2502      	movs	r5, #2
 8007cd2:	f1b9 0f00 	cmp.w	r9, #0
 8007cd6:	d047      	beq.n	8007d68 <__gethex+0x38c>
 8007cd8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	d015      	beq.n	8007d0c <__gethex+0x330>
 8007ce0:	2b03      	cmp	r3, #3
 8007ce2:	d017      	beq.n	8007d14 <__gethex+0x338>
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d109      	bne.n	8007cfc <__gethex+0x320>
 8007ce8:	f019 0f02 	tst.w	r9, #2
 8007cec:	d006      	beq.n	8007cfc <__gethex+0x320>
 8007cee:	f8da 3000 	ldr.w	r3, [sl]
 8007cf2:	ea49 0903 	orr.w	r9, r9, r3
 8007cf6:	f019 0f01 	tst.w	r9, #1
 8007cfa:	d10e      	bne.n	8007d1a <__gethex+0x33e>
 8007cfc:	f045 0510 	orr.w	r5, r5, #16
 8007d00:	e032      	b.n	8007d68 <__gethex+0x38c>
 8007d02:	f04f 0901 	mov.w	r9, #1
 8007d06:	e7d1      	b.n	8007cac <__gethex+0x2d0>
 8007d08:	2501      	movs	r5, #1
 8007d0a:	e7e2      	b.n	8007cd2 <__gethex+0x2f6>
 8007d0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d0e:	f1c3 0301 	rsb	r3, r3, #1
 8007d12:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007d14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d0f0      	beq.n	8007cfc <__gethex+0x320>
 8007d1a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007d1e:	f104 0314 	add.w	r3, r4, #20
 8007d22:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007d26:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007d2a:	f04f 0c00 	mov.w	ip, #0
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d34:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007d38:	d01b      	beq.n	8007d72 <__gethex+0x396>
 8007d3a:	3201      	adds	r2, #1
 8007d3c:	6002      	str	r2, [r0, #0]
 8007d3e:	2d02      	cmp	r5, #2
 8007d40:	f104 0314 	add.w	r3, r4, #20
 8007d44:	d13c      	bne.n	8007dc0 <__gethex+0x3e4>
 8007d46:	f8d8 2000 	ldr.w	r2, [r8]
 8007d4a:	3a01      	subs	r2, #1
 8007d4c:	42b2      	cmp	r2, r6
 8007d4e:	d109      	bne.n	8007d64 <__gethex+0x388>
 8007d50:	1171      	asrs	r1, r6, #5
 8007d52:	2201      	movs	r2, #1
 8007d54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007d58:	f006 061f 	and.w	r6, r6, #31
 8007d5c:	fa02 f606 	lsl.w	r6, r2, r6
 8007d60:	421e      	tst	r6, r3
 8007d62:	d13a      	bne.n	8007dda <__gethex+0x3fe>
 8007d64:	f045 0520 	orr.w	r5, r5, #32
 8007d68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d6a:	601c      	str	r4, [r3, #0]
 8007d6c:	9b02      	ldr	r3, [sp, #8]
 8007d6e:	601f      	str	r7, [r3, #0]
 8007d70:	e6b0      	b.n	8007ad4 <__gethex+0xf8>
 8007d72:	4299      	cmp	r1, r3
 8007d74:	f843 cc04 	str.w	ip, [r3, #-4]
 8007d78:	d8d9      	bhi.n	8007d2e <__gethex+0x352>
 8007d7a:	68a3      	ldr	r3, [r4, #8]
 8007d7c:	459b      	cmp	fp, r3
 8007d7e:	db17      	blt.n	8007db0 <__gethex+0x3d4>
 8007d80:	6861      	ldr	r1, [r4, #4]
 8007d82:	9801      	ldr	r0, [sp, #4]
 8007d84:	3101      	adds	r1, #1
 8007d86:	f7fe f807 	bl	8005d98 <_Balloc>
 8007d8a:	4681      	mov	r9, r0
 8007d8c:	b918      	cbnz	r0, 8007d96 <__gethex+0x3ba>
 8007d8e:	4b1a      	ldr	r3, [pc, #104]	@ (8007df8 <__gethex+0x41c>)
 8007d90:	4602      	mov	r2, r0
 8007d92:	2184      	movs	r1, #132	@ 0x84
 8007d94:	e6c5      	b.n	8007b22 <__gethex+0x146>
 8007d96:	6922      	ldr	r2, [r4, #16]
 8007d98:	3202      	adds	r2, #2
 8007d9a:	f104 010c 	add.w	r1, r4, #12
 8007d9e:	0092      	lsls	r2, r2, #2
 8007da0:	300c      	adds	r0, #12
 8007da2:	f7ff fd81 	bl	80078a8 <memcpy>
 8007da6:	4621      	mov	r1, r4
 8007da8:	9801      	ldr	r0, [sp, #4]
 8007daa:	f7fe f835 	bl	8005e18 <_Bfree>
 8007dae:	464c      	mov	r4, r9
 8007db0:	6923      	ldr	r3, [r4, #16]
 8007db2:	1c5a      	adds	r2, r3, #1
 8007db4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007db8:	6122      	str	r2, [r4, #16]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	615a      	str	r2, [r3, #20]
 8007dbe:	e7be      	b.n	8007d3e <__gethex+0x362>
 8007dc0:	6922      	ldr	r2, [r4, #16]
 8007dc2:	455a      	cmp	r2, fp
 8007dc4:	dd0b      	ble.n	8007dde <__gethex+0x402>
 8007dc6:	2101      	movs	r1, #1
 8007dc8:	4620      	mov	r0, r4
 8007dca:	f7ff fda0 	bl	800790e <rshift>
 8007dce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007dd2:	3701      	adds	r7, #1
 8007dd4:	42bb      	cmp	r3, r7
 8007dd6:	f6ff aee0 	blt.w	8007b9a <__gethex+0x1be>
 8007dda:	2501      	movs	r5, #1
 8007ddc:	e7c2      	b.n	8007d64 <__gethex+0x388>
 8007dde:	f016 061f 	ands.w	r6, r6, #31
 8007de2:	d0fa      	beq.n	8007dda <__gethex+0x3fe>
 8007de4:	4453      	add	r3, sl
 8007de6:	f1c6 0620 	rsb	r6, r6, #32
 8007dea:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007dee:	f7fe f8c5 	bl	8005f7c <__hi0bits>
 8007df2:	42b0      	cmp	r0, r6
 8007df4:	dbe7      	blt.n	8007dc6 <__gethex+0x3ea>
 8007df6:	e7f0      	b.n	8007dda <__gethex+0x3fe>
 8007df8:	08008709 	.word	0x08008709

08007dfc <L_shift>:
 8007dfc:	f1c2 0208 	rsb	r2, r2, #8
 8007e00:	0092      	lsls	r2, r2, #2
 8007e02:	b570      	push	{r4, r5, r6, lr}
 8007e04:	f1c2 0620 	rsb	r6, r2, #32
 8007e08:	6843      	ldr	r3, [r0, #4]
 8007e0a:	6804      	ldr	r4, [r0, #0]
 8007e0c:	fa03 f506 	lsl.w	r5, r3, r6
 8007e10:	432c      	orrs	r4, r5
 8007e12:	40d3      	lsrs	r3, r2
 8007e14:	6004      	str	r4, [r0, #0]
 8007e16:	f840 3f04 	str.w	r3, [r0, #4]!
 8007e1a:	4288      	cmp	r0, r1
 8007e1c:	d3f4      	bcc.n	8007e08 <L_shift+0xc>
 8007e1e:	bd70      	pop	{r4, r5, r6, pc}

08007e20 <__match>:
 8007e20:	b530      	push	{r4, r5, lr}
 8007e22:	6803      	ldr	r3, [r0, #0]
 8007e24:	3301      	adds	r3, #1
 8007e26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e2a:	b914      	cbnz	r4, 8007e32 <__match+0x12>
 8007e2c:	6003      	str	r3, [r0, #0]
 8007e2e:	2001      	movs	r0, #1
 8007e30:	bd30      	pop	{r4, r5, pc}
 8007e32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e36:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007e3a:	2d19      	cmp	r5, #25
 8007e3c:	bf98      	it	ls
 8007e3e:	3220      	addls	r2, #32
 8007e40:	42a2      	cmp	r2, r4
 8007e42:	d0f0      	beq.n	8007e26 <__match+0x6>
 8007e44:	2000      	movs	r0, #0
 8007e46:	e7f3      	b.n	8007e30 <__match+0x10>

08007e48 <__hexnan>:
 8007e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e4c:	680b      	ldr	r3, [r1, #0]
 8007e4e:	6801      	ldr	r1, [r0, #0]
 8007e50:	115e      	asrs	r6, r3, #5
 8007e52:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007e56:	f013 031f 	ands.w	r3, r3, #31
 8007e5a:	b087      	sub	sp, #28
 8007e5c:	bf18      	it	ne
 8007e5e:	3604      	addne	r6, #4
 8007e60:	2500      	movs	r5, #0
 8007e62:	1f37      	subs	r7, r6, #4
 8007e64:	4682      	mov	sl, r0
 8007e66:	4690      	mov	r8, r2
 8007e68:	9301      	str	r3, [sp, #4]
 8007e6a:	f846 5c04 	str.w	r5, [r6, #-4]
 8007e6e:	46b9      	mov	r9, r7
 8007e70:	463c      	mov	r4, r7
 8007e72:	9502      	str	r5, [sp, #8]
 8007e74:	46ab      	mov	fp, r5
 8007e76:	784a      	ldrb	r2, [r1, #1]
 8007e78:	1c4b      	adds	r3, r1, #1
 8007e7a:	9303      	str	r3, [sp, #12]
 8007e7c:	b342      	cbz	r2, 8007ed0 <__hexnan+0x88>
 8007e7e:	4610      	mov	r0, r2
 8007e80:	9105      	str	r1, [sp, #20]
 8007e82:	9204      	str	r2, [sp, #16]
 8007e84:	f7ff fd95 	bl	80079b2 <__hexdig_fun>
 8007e88:	2800      	cmp	r0, #0
 8007e8a:	d151      	bne.n	8007f30 <__hexnan+0xe8>
 8007e8c:	9a04      	ldr	r2, [sp, #16]
 8007e8e:	9905      	ldr	r1, [sp, #20]
 8007e90:	2a20      	cmp	r2, #32
 8007e92:	d818      	bhi.n	8007ec6 <__hexnan+0x7e>
 8007e94:	9b02      	ldr	r3, [sp, #8]
 8007e96:	459b      	cmp	fp, r3
 8007e98:	dd13      	ble.n	8007ec2 <__hexnan+0x7a>
 8007e9a:	454c      	cmp	r4, r9
 8007e9c:	d206      	bcs.n	8007eac <__hexnan+0x64>
 8007e9e:	2d07      	cmp	r5, #7
 8007ea0:	dc04      	bgt.n	8007eac <__hexnan+0x64>
 8007ea2:	462a      	mov	r2, r5
 8007ea4:	4649      	mov	r1, r9
 8007ea6:	4620      	mov	r0, r4
 8007ea8:	f7ff ffa8 	bl	8007dfc <L_shift>
 8007eac:	4544      	cmp	r4, r8
 8007eae:	d952      	bls.n	8007f56 <__hexnan+0x10e>
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	f1a4 0904 	sub.w	r9, r4, #4
 8007eb6:	f844 3c04 	str.w	r3, [r4, #-4]
 8007eba:	f8cd b008 	str.w	fp, [sp, #8]
 8007ebe:	464c      	mov	r4, r9
 8007ec0:	461d      	mov	r5, r3
 8007ec2:	9903      	ldr	r1, [sp, #12]
 8007ec4:	e7d7      	b.n	8007e76 <__hexnan+0x2e>
 8007ec6:	2a29      	cmp	r2, #41	@ 0x29
 8007ec8:	d157      	bne.n	8007f7a <__hexnan+0x132>
 8007eca:	3102      	adds	r1, #2
 8007ecc:	f8ca 1000 	str.w	r1, [sl]
 8007ed0:	f1bb 0f00 	cmp.w	fp, #0
 8007ed4:	d051      	beq.n	8007f7a <__hexnan+0x132>
 8007ed6:	454c      	cmp	r4, r9
 8007ed8:	d206      	bcs.n	8007ee8 <__hexnan+0xa0>
 8007eda:	2d07      	cmp	r5, #7
 8007edc:	dc04      	bgt.n	8007ee8 <__hexnan+0xa0>
 8007ede:	462a      	mov	r2, r5
 8007ee0:	4649      	mov	r1, r9
 8007ee2:	4620      	mov	r0, r4
 8007ee4:	f7ff ff8a 	bl	8007dfc <L_shift>
 8007ee8:	4544      	cmp	r4, r8
 8007eea:	d936      	bls.n	8007f5a <__hexnan+0x112>
 8007eec:	f1a8 0204 	sub.w	r2, r8, #4
 8007ef0:	4623      	mov	r3, r4
 8007ef2:	f853 1b04 	ldr.w	r1, [r3], #4
 8007ef6:	f842 1f04 	str.w	r1, [r2, #4]!
 8007efa:	429f      	cmp	r7, r3
 8007efc:	d2f9      	bcs.n	8007ef2 <__hexnan+0xaa>
 8007efe:	1b3b      	subs	r3, r7, r4
 8007f00:	f023 0303 	bic.w	r3, r3, #3
 8007f04:	3304      	adds	r3, #4
 8007f06:	3401      	adds	r4, #1
 8007f08:	3e03      	subs	r6, #3
 8007f0a:	42b4      	cmp	r4, r6
 8007f0c:	bf88      	it	hi
 8007f0e:	2304      	movhi	r3, #4
 8007f10:	4443      	add	r3, r8
 8007f12:	2200      	movs	r2, #0
 8007f14:	f843 2b04 	str.w	r2, [r3], #4
 8007f18:	429f      	cmp	r7, r3
 8007f1a:	d2fb      	bcs.n	8007f14 <__hexnan+0xcc>
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	b91b      	cbnz	r3, 8007f28 <__hexnan+0xe0>
 8007f20:	4547      	cmp	r7, r8
 8007f22:	d128      	bne.n	8007f76 <__hexnan+0x12e>
 8007f24:	2301      	movs	r3, #1
 8007f26:	603b      	str	r3, [r7, #0]
 8007f28:	2005      	movs	r0, #5
 8007f2a:	b007      	add	sp, #28
 8007f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f30:	3501      	adds	r5, #1
 8007f32:	2d08      	cmp	r5, #8
 8007f34:	f10b 0b01 	add.w	fp, fp, #1
 8007f38:	dd06      	ble.n	8007f48 <__hexnan+0x100>
 8007f3a:	4544      	cmp	r4, r8
 8007f3c:	d9c1      	bls.n	8007ec2 <__hexnan+0x7a>
 8007f3e:	2300      	movs	r3, #0
 8007f40:	f844 3c04 	str.w	r3, [r4, #-4]
 8007f44:	2501      	movs	r5, #1
 8007f46:	3c04      	subs	r4, #4
 8007f48:	6822      	ldr	r2, [r4, #0]
 8007f4a:	f000 000f 	and.w	r0, r0, #15
 8007f4e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007f52:	6020      	str	r0, [r4, #0]
 8007f54:	e7b5      	b.n	8007ec2 <__hexnan+0x7a>
 8007f56:	2508      	movs	r5, #8
 8007f58:	e7b3      	b.n	8007ec2 <__hexnan+0x7a>
 8007f5a:	9b01      	ldr	r3, [sp, #4]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d0dd      	beq.n	8007f1c <__hexnan+0xd4>
 8007f60:	f1c3 0320 	rsb	r3, r3, #32
 8007f64:	f04f 32ff 	mov.w	r2, #4294967295
 8007f68:	40da      	lsrs	r2, r3
 8007f6a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007f6e:	4013      	ands	r3, r2
 8007f70:	f846 3c04 	str.w	r3, [r6, #-4]
 8007f74:	e7d2      	b.n	8007f1c <__hexnan+0xd4>
 8007f76:	3f04      	subs	r7, #4
 8007f78:	e7d0      	b.n	8007f1c <__hexnan+0xd4>
 8007f7a:	2004      	movs	r0, #4
 8007f7c:	e7d5      	b.n	8007f2a <__hexnan+0xe2>

08007f7e <__ascii_mbtowc>:
 8007f7e:	b082      	sub	sp, #8
 8007f80:	b901      	cbnz	r1, 8007f84 <__ascii_mbtowc+0x6>
 8007f82:	a901      	add	r1, sp, #4
 8007f84:	b142      	cbz	r2, 8007f98 <__ascii_mbtowc+0x1a>
 8007f86:	b14b      	cbz	r3, 8007f9c <__ascii_mbtowc+0x1e>
 8007f88:	7813      	ldrb	r3, [r2, #0]
 8007f8a:	600b      	str	r3, [r1, #0]
 8007f8c:	7812      	ldrb	r2, [r2, #0]
 8007f8e:	1e10      	subs	r0, r2, #0
 8007f90:	bf18      	it	ne
 8007f92:	2001      	movne	r0, #1
 8007f94:	b002      	add	sp, #8
 8007f96:	4770      	bx	lr
 8007f98:	4610      	mov	r0, r2
 8007f9a:	e7fb      	b.n	8007f94 <__ascii_mbtowc+0x16>
 8007f9c:	f06f 0001 	mvn.w	r0, #1
 8007fa0:	e7f8      	b.n	8007f94 <__ascii_mbtowc+0x16>

08007fa2 <_realloc_r>:
 8007fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fa6:	4680      	mov	r8, r0
 8007fa8:	4615      	mov	r5, r2
 8007faa:	460c      	mov	r4, r1
 8007fac:	b921      	cbnz	r1, 8007fb8 <_realloc_r+0x16>
 8007fae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fb2:	4611      	mov	r1, r2
 8007fb4:	f7fd be64 	b.w	8005c80 <_malloc_r>
 8007fb8:	b92a      	cbnz	r2, 8007fc6 <_realloc_r+0x24>
 8007fba:	f7fd fded 	bl	8005b98 <_free_r>
 8007fbe:	2400      	movs	r4, #0
 8007fc0:	4620      	mov	r0, r4
 8007fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fc6:	f000 fa41 	bl	800844c <_malloc_usable_size_r>
 8007fca:	4285      	cmp	r5, r0
 8007fcc:	4606      	mov	r6, r0
 8007fce:	d802      	bhi.n	8007fd6 <_realloc_r+0x34>
 8007fd0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007fd4:	d8f4      	bhi.n	8007fc0 <_realloc_r+0x1e>
 8007fd6:	4629      	mov	r1, r5
 8007fd8:	4640      	mov	r0, r8
 8007fda:	f7fd fe51 	bl	8005c80 <_malloc_r>
 8007fde:	4607      	mov	r7, r0
 8007fe0:	2800      	cmp	r0, #0
 8007fe2:	d0ec      	beq.n	8007fbe <_realloc_r+0x1c>
 8007fe4:	42b5      	cmp	r5, r6
 8007fe6:	462a      	mov	r2, r5
 8007fe8:	4621      	mov	r1, r4
 8007fea:	bf28      	it	cs
 8007fec:	4632      	movcs	r2, r6
 8007fee:	f7ff fc5b 	bl	80078a8 <memcpy>
 8007ff2:	4621      	mov	r1, r4
 8007ff4:	4640      	mov	r0, r8
 8007ff6:	f7fd fdcf 	bl	8005b98 <_free_r>
 8007ffa:	463c      	mov	r4, r7
 8007ffc:	e7e0      	b.n	8007fc0 <_realloc_r+0x1e>

08007ffe <__ascii_wctomb>:
 8007ffe:	4603      	mov	r3, r0
 8008000:	4608      	mov	r0, r1
 8008002:	b141      	cbz	r1, 8008016 <__ascii_wctomb+0x18>
 8008004:	2aff      	cmp	r2, #255	@ 0xff
 8008006:	d904      	bls.n	8008012 <__ascii_wctomb+0x14>
 8008008:	228a      	movs	r2, #138	@ 0x8a
 800800a:	601a      	str	r2, [r3, #0]
 800800c:	f04f 30ff 	mov.w	r0, #4294967295
 8008010:	4770      	bx	lr
 8008012:	700a      	strb	r2, [r1, #0]
 8008014:	2001      	movs	r0, #1
 8008016:	4770      	bx	lr

08008018 <__sfputc_r>:
 8008018:	6893      	ldr	r3, [r2, #8]
 800801a:	3b01      	subs	r3, #1
 800801c:	2b00      	cmp	r3, #0
 800801e:	b410      	push	{r4}
 8008020:	6093      	str	r3, [r2, #8]
 8008022:	da08      	bge.n	8008036 <__sfputc_r+0x1e>
 8008024:	6994      	ldr	r4, [r2, #24]
 8008026:	42a3      	cmp	r3, r4
 8008028:	db01      	blt.n	800802e <__sfputc_r+0x16>
 800802a:	290a      	cmp	r1, #10
 800802c:	d103      	bne.n	8008036 <__sfputc_r+0x1e>
 800802e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008032:	f000 b933 	b.w	800829c <__swbuf_r>
 8008036:	6813      	ldr	r3, [r2, #0]
 8008038:	1c58      	adds	r0, r3, #1
 800803a:	6010      	str	r0, [r2, #0]
 800803c:	7019      	strb	r1, [r3, #0]
 800803e:	4608      	mov	r0, r1
 8008040:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008044:	4770      	bx	lr

08008046 <__sfputs_r>:
 8008046:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008048:	4606      	mov	r6, r0
 800804a:	460f      	mov	r7, r1
 800804c:	4614      	mov	r4, r2
 800804e:	18d5      	adds	r5, r2, r3
 8008050:	42ac      	cmp	r4, r5
 8008052:	d101      	bne.n	8008058 <__sfputs_r+0x12>
 8008054:	2000      	movs	r0, #0
 8008056:	e007      	b.n	8008068 <__sfputs_r+0x22>
 8008058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800805c:	463a      	mov	r2, r7
 800805e:	4630      	mov	r0, r6
 8008060:	f7ff ffda 	bl	8008018 <__sfputc_r>
 8008064:	1c43      	adds	r3, r0, #1
 8008066:	d1f3      	bne.n	8008050 <__sfputs_r+0xa>
 8008068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800806c <_vfiprintf_r>:
 800806c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008070:	460d      	mov	r5, r1
 8008072:	b09d      	sub	sp, #116	@ 0x74
 8008074:	4614      	mov	r4, r2
 8008076:	4698      	mov	r8, r3
 8008078:	4606      	mov	r6, r0
 800807a:	b118      	cbz	r0, 8008084 <_vfiprintf_r+0x18>
 800807c:	6a03      	ldr	r3, [r0, #32]
 800807e:	b90b      	cbnz	r3, 8008084 <_vfiprintf_r+0x18>
 8008080:	f7fc fe00 	bl	8004c84 <__sinit>
 8008084:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008086:	07d9      	lsls	r1, r3, #31
 8008088:	d405      	bmi.n	8008096 <_vfiprintf_r+0x2a>
 800808a:	89ab      	ldrh	r3, [r5, #12]
 800808c:	059a      	lsls	r2, r3, #22
 800808e:	d402      	bmi.n	8008096 <_vfiprintf_r+0x2a>
 8008090:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008092:	f7fc ff0e 	bl	8004eb2 <__retarget_lock_acquire_recursive>
 8008096:	89ab      	ldrh	r3, [r5, #12]
 8008098:	071b      	lsls	r3, r3, #28
 800809a:	d501      	bpl.n	80080a0 <_vfiprintf_r+0x34>
 800809c:	692b      	ldr	r3, [r5, #16]
 800809e:	b99b      	cbnz	r3, 80080c8 <_vfiprintf_r+0x5c>
 80080a0:	4629      	mov	r1, r5
 80080a2:	4630      	mov	r0, r6
 80080a4:	f000 f938 	bl	8008318 <__swsetup_r>
 80080a8:	b170      	cbz	r0, 80080c8 <_vfiprintf_r+0x5c>
 80080aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80080ac:	07dc      	lsls	r4, r3, #31
 80080ae:	d504      	bpl.n	80080ba <_vfiprintf_r+0x4e>
 80080b0:	f04f 30ff 	mov.w	r0, #4294967295
 80080b4:	b01d      	add	sp, #116	@ 0x74
 80080b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ba:	89ab      	ldrh	r3, [r5, #12]
 80080bc:	0598      	lsls	r0, r3, #22
 80080be:	d4f7      	bmi.n	80080b0 <_vfiprintf_r+0x44>
 80080c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80080c2:	f7fc fef7 	bl	8004eb4 <__retarget_lock_release_recursive>
 80080c6:	e7f3      	b.n	80080b0 <_vfiprintf_r+0x44>
 80080c8:	2300      	movs	r3, #0
 80080ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80080cc:	2320      	movs	r3, #32
 80080ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80080d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80080d6:	2330      	movs	r3, #48	@ 0x30
 80080d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008288 <_vfiprintf_r+0x21c>
 80080dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80080e0:	f04f 0901 	mov.w	r9, #1
 80080e4:	4623      	mov	r3, r4
 80080e6:	469a      	mov	sl, r3
 80080e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080ec:	b10a      	cbz	r2, 80080f2 <_vfiprintf_r+0x86>
 80080ee:	2a25      	cmp	r2, #37	@ 0x25
 80080f0:	d1f9      	bne.n	80080e6 <_vfiprintf_r+0x7a>
 80080f2:	ebba 0b04 	subs.w	fp, sl, r4
 80080f6:	d00b      	beq.n	8008110 <_vfiprintf_r+0xa4>
 80080f8:	465b      	mov	r3, fp
 80080fa:	4622      	mov	r2, r4
 80080fc:	4629      	mov	r1, r5
 80080fe:	4630      	mov	r0, r6
 8008100:	f7ff ffa1 	bl	8008046 <__sfputs_r>
 8008104:	3001      	adds	r0, #1
 8008106:	f000 80a7 	beq.w	8008258 <_vfiprintf_r+0x1ec>
 800810a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800810c:	445a      	add	r2, fp
 800810e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008110:	f89a 3000 	ldrb.w	r3, [sl]
 8008114:	2b00      	cmp	r3, #0
 8008116:	f000 809f 	beq.w	8008258 <_vfiprintf_r+0x1ec>
 800811a:	2300      	movs	r3, #0
 800811c:	f04f 32ff 	mov.w	r2, #4294967295
 8008120:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008124:	f10a 0a01 	add.w	sl, sl, #1
 8008128:	9304      	str	r3, [sp, #16]
 800812a:	9307      	str	r3, [sp, #28]
 800812c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008130:	931a      	str	r3, [sp, #104]	@ 0x68
 8008132:	4654      	mov	r4, sl
 8008134:	2205      	movs	r2, #5
 8008136:	f814 1b01 	ldrb.w	r1, [r4], #1
 800813a:	4853      	ldr	r0, [pc, #332]	@ (8008288 <_vfiprintf_r+0x21c>)
 800813c:	f7f8 f848 	bl	80001d0 <memchr>
 8008140:	9a04      	ldr	r2, [sp, #16]
 8008142:	b9d8      	cbnz	r0, 800817c <_vfiprintf_r+0x110>
 8008144:	06d1      	lsls	r1, r2, #27
 8008146:	bf44      	itt	mi
 8008148:	2320      	movmi	r3, #32
 800814a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800814e:	0713      	lsls	r3, r2, #28
 8008150:	bf44      	itt	mi
 8008152:	232b      	movmi	r3, #43	@ 0x2b
 8008154:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008158:	f89a 3000 	ldrb.w	r3, [sl]
 800815c:	2b2a      	cmp	r3, #42	@ 0x2a
 800815e:	d015      	beq.n	800818c <_vfiprintf_r+0x120>
 8008160:	9a07      	ldr	r2, [sp, #28]
 8008162:	4654      	mov	r4, sl
 8008164:	2000      	movs	r0, #0
 8008166:	f04f 0c0a 	mov.w	ip, #10
 800816a:	4621      	mov	r1, r4
 800816c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008170:	3b30      	subs	r3, #48	@ 0x30
 8008172:	2b09      	cmp	r3, #9
 8008174:	d94b      	bls.n	800820e <_vfiprintf_r+0x1a2>
 8008176:	b1b0      	cbz	r0, 80081a6 <_vfiprintf_r+0x13a>
 8008178:	9207      	str	r2, [sp, #28]
 800817a:	e014      	b.n	80081a6 <_vfiprintf_r+0x13a>
 800817c:	eba0 0308 	sub.w	r3, r0, r8
 8008180:	fa09 f303 	lsl.w	r3, r9, r3
 8008184:	4313      	orrs	r3, r2
 8008186:	9304      	str	r3, [sp, #16]
 8008188:	46a2      	mov	sl, r4
 800818a:	e7d2      	b.n	8008132 <_vfiprintf_r+0xc6>
 800818c:	9b03      	ldr	r3, [sp, #12]
 800818e:	1d19      	adds	r1, r3, #4
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	9103      	str	r1, [sp, #12]
 8008194:	2b00      	cmp	r3, #0
 8008196:	bfbb      	ittet	lt
 8008198:	425b      	neglt	r3, r3
 800819a:	f042 0202 	orrlt.w	r2, r2, #2
 800819e:	9307      	strge	r3, [sp, #28]
 80081a0:	9307      	strlt	r3, [sp, #28]
 80081a2:	bfb8      	it	lt
 80081a4:	9204      	strlt	r2, [sp, #16]
 80081a6:	7823      	ldrb	r3, [r4, #0]
 80081a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80081aa:	d10a      	bne.n	80081c2 <_vfiprintf_r+0x156>
 80081ac:	7863      	ldrb	r3, [r4, #1]
 80081ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80081b0:	d132      	bne.n	8008218 <_vfiprintf_r+0x1ac>
 80081b2:	9b03      	ldr	r3, [sp, #12]
 80081b4:	1d1a      	adds	r2, r3, #4
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	9203      	str	r2, [sp, #12]
 80081ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80081be:	3402      	adds	r4, #2
 80081c0:	9305      	str	r3, [sp, #20]
 80081c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008298 <_vfiprintf_r+0x22c>
 80081c6:	7821      	ldrb	r1, [r4, #0]
 80081c8:	2203      	movs	r2, #3
 80081ca:	4650      	mov	r0, sl
 80081cc:	f7f8 f800 	bl	80001d0 <memchr>
 80081d0:	b138      	cbz	r0, 80081e2 <_vfiprintf_r+0x176>
 80081d2:	9b04      	ldr	r3, [sp, #16]
 80081d4:	eba0 000a 	sub.w	r0, r0, sl
 80081d8:	2240      	movs	r2, #64	@ 0x40
 80081da:	4082      	lsls	r2, r0
 80081dc:	4313      	orrs	r3, r2
 80081de:	3401      	adds	r4, #1
 80081e0:	9304      	str	r3, [sp, #16]
 80081e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081e6:	4829      	ldr	r0, [pc, #164]	@ (800828c <_vfiprintf_r+0x220>)
 80081e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80081ec:	2206      	movs	r2, #6
 80081ee:	f7f7 ffef 	bl	80001d0 <memchr>
 80081f2:	2800      	cmp	r0, #0
 80081f4:	d03f      	beq.n	8008276 <_vfiprintf_r+0x20a>
 80081f6:	4b26      	ldr	r3, [pc, #152]	@ (8008290 <_vfiprintf_r+0x224>)
 80081f8:	bb1b      	cbnz	r3, 8008242 <_vfiprintf_r+0x1d6>
 80081fa:	9b03      	ldr	r3, [sp, #12]
 80081fc:	3307      	adds	r3, #7
 80081fe:	f023 0307 	bic.w	r3, r3, #7
 8008202:	3308      	adds	r3, #8
 8008204:	9303      	str	r3, [sp, #12]
 8008206:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008208:	443b      	add	r3, r7
 800820a:	9309      	str	r3, [sp, #36]	@ 0x24
 800820c:	e76a      	b.n	80080e4 <_vfiprintf_r+0x78>
 800820e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008212:	460c      	mov	r4, r1
 8008214:	2001      	movs	r0, #1
 8008216:	e7a8      	b.n	800816a <_vfiprintf_r+0xfe>
 8008218:	2300      	movs	r3, #0
 800821a:	3401      	adds	r4, #1
 800821c:	9305      	str	r3, [sp, #20]
 800821e:	4619      	mov	r1, r3
 8008220:	f04f 0c0a 	mov.w	ip, #10
 8008224:	4620      	mov	r0, r4
 8008226:	f810 2b01 	ldrb.w	r2, [r0], #1
 800822a:	3a30      	subs	r2, #48	@ 0x30
 800822c:	2a09      	cmp	r2, #9
 800822e:	d903      	bls.n	8008238 <_vfiprintf_r+0x1cc>
 8008230:	2b00      	cmp	r3, #0
 8008232:	d0c6      	beq.n	80081c2 <_vfiprintf_r+0x156>
 8008234:	9105      	str	r1, [sp, #20]
 8008236:	e7c4      	b.n	80081c2 <_vfiprintf_r+0x156>
 8008238:	fb0c 2101 	mla	r1, ip, r1, r2
 800823c:	4604      	mov	r4, r0
 800823e:	2301      	movs	r3, #1
 8008240:	e7f0      	b.n	8008224 <_vfiprintf_r+0x1b8>
 8008242:	ab03      	add	r3, sp, #12
 8008244:	9300      	str	r3, [sp, #0]
 8008246:	462a      	mov	r2, r5
 8008248:	4b12      	ldr	r3, [pc, #72]	@ (8008294 <_vfiprintf_r+0x228>)
 800824a:	a904      	add	r1, sp, #16
 800824c:	4630      	mov	r0, r6
 800824e:	f7fb fec1 	bl	8003fd4 <_printf_float>
 8008252:	4607      	mov	r7, r0
 8008254:	1c78      	adds	r0, r7, #1
 8008256:	d1d6      	bne.n	8008206 <_vfiprintf_r+0x19a>
 8008258:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800825a:	07d9      	lsls	r1, r3, #31
 800825c:	d405      	bmi.n	800826a <_vfiprintf_r+0x1fe>
 800825e:	89ab      	ldrh	r3, [r5, #12]
 8008260:	059a      	lsls	r2, r3, #22
 8008262:	d402      	bmi.n	800826a <_vfiprintf_r+0x1fe>
 8008264:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008266:	f7fc fe25 	bl	8004eb4 <__retarget_lock_release_recursive>
 800826a:	89ab      	ldrh	r3, [r5, #12]
 800826c:	065b      	lsls	r3, r3, #25
 800826e:	f53f af1f 	bmi.w	80080b0 <_vfiprintf_r+0x44>
 8008272:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008274:	e71e      	b.n	80080b4 <_vfiprintf_r+0x48>
 8008276:	ab03      	add	r3, sp, #12
 8008278:	9300      	str	r3, [sp, #0]
 800827a:	462a      	mov	r2, r5
 800827c:	4b05      	ldr	r3, [pc, #20]	@ (8008294 <_vfiprintf_r+0x228>)
 800827e:	a904      	add	r1, sp, #16
 8008280:	4630      	mov	r0, r6
 8008282:	f7fc f93f 	bl	8004504 <_printf_i>
 8008286:	e7e4      	b.n	8008252 <_vfiprintf_r+0x1e6>
 8008288:	080089c9 	.word	0x080089c9
 800828c:	080089d3 	.word	0x080089d3
 8008290:	08003fd5 	.word	0x08003fd5
 8008294:	08008047 	.word	0x08008047
 8008298:	080089cf 	.word	0x080089cf

0800829c <__swbuf_r>:
 800829c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800829e:	460e      	mov	r6, r1
 80082a0:	4614      	mov	r4, r2
 80082a2:	4605      	mov	r5, r0
 80082a4:	b118      	cbz	r0, 80082ae <__swbuf_r+0x12>
 80082a6:	6a03      	ldr	r3, [r0, #32]
 80082a8:	b90b      	cbnz	r3, 80082ae <__swbuf_r+0x12>
 80082aa:	f7fc fceb 	bl	8004c84 <__sinit>
 80082ae:	69a3      	ldr	r3, [r4, #24]
 80082b0:	60a3      	str	r3, [r4, #8]
 80082b2:	89a3      	ldrh	r3, [r4, #12]
 80082b4:	071a      	lsls	r2, r3, #28
 80082b6:	d501      	bpl.n	80082bc <__swbuf_r+0x20>
 80082b8:	6923      	ldr	r3, [r4, #16]
 80082ba:	b943      	cbnz	r3, 80082ce <__swbuf_r+0x32>
 80082bc:	4621      	mov	r1, r4
 80082be:	4628      	mov	r0, r5
 80082c0:	f000 f82a 	bl	8008318 <__swsetup_r>
 80082c4:	b118      	cbz	r0, 80082ce <__swbuf_r+0x32>
 80082c6:	f04f 37ff 	mov.w	r7, #4294967295
 80082ca:	4638      	mov	r0, r7
 80082cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082ce:	6823      	ldr	r3, [r4, #0]
 80082d0:	6922      	ldr	r2, [r4, #16]
 80082d2:	1a98      	subs	r0, r3, r2
 80082d4:	6963      	ldr	r3, [r4, #20]
 80082d6:	b2f6      	uxtb	r6, r6
 80082d8:	4283      	cmp	r3, r0
 80082da:	4637      	mov	r7, r6
 80082dc:	dc05      	bgt.n	80082ea <__swbuf_r+0x4e>
 80082de:	4621      	mov	r1, r4
 80082e0:	4628      	mov	r0, r5
 80082e2:	f7ff fa6b 	bl	80077bc <_fflush_r>
 80082e6:	2800      	cmp	r0, #0
 80082e8:	d1ed      	bne.n	80082c6 <__swbuf_r+0x2a>
 80082ea:	68a3      	ldr	r3, [r4, #8]
 80082ec:	3b01      	subs	r3, #1
 80082ee:	60a3      	str	r3, [r4, #8]
 80082f0:	6823      	ldr	r3, [r4, #0]
 80082f2:	1c5a      	adds	r2, r3, #1
 80082f4:	6022      	str	r2, [r4, #0]
 80082f6:	701e      	strb	r6, [r3, #0]
 80082f8:	6962      	ldr	r2, [r4, #20]
 80082fa:	1c43      	adds	r3, r0, #1
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d004      	beq.n	800830a <__swbuf_r+0x6e>
 8008300:	89a3      	ldrh	r3, [r4, #12]
 8008302:	07db      	lsls	r3, r3, #31
 8008304:	d5e1      	bpl.n	80082ca <__swbuf_r+0x2e>
 8008306:	2e0a      	cmp	r6, #10
 8008308:	d1df      	bne.n	80082ca <__swbuf_r+0x2e>
 800830a:	4621      	mov	r1, r4
 800830c:	4628      	mov	r0, r5
 800830e:	f7ff fa55 	bl	80077bc <_fflush_r>
 8008312:	2800      	cmp	r0, #0
 8008314:	d0d9      	beq.n	80082ca <__swbuf_r+0x2e>
 8008316:	e7d6      	b.n	80082c6 <__swbuf_r+0x2a>

08008318 <__swsetup_r>:
 8008318:	b538      	push	{r3, r4, r5, lr}
 800831a:	4b29      	ldr	r3, [pc, #164]	@ (80083c0 <__swsetup_r+0xa8>)
 800831c:	4605      	mov	r5, r0
 800831e:	6818      	ldr	r0, [r3, #0]
 8008320:	460c      	mov	r4, r1
 8008322:	b118      	cbz	r0, 800832c <__swsetup_r+0x14>
 8008324:	6a03      	ldr	r3, [r0, #32]
 8008326:	b90b      	cbnz	r3, 800832c <__swsetup_r+0x14>
 8008328:	f7fc fcac 	bl	8004c84 <__sinit>
 800832c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008330:	0719      	lsls	r1, r3, #28
 8008332:	d422      	bmi.n	800837a <__swsetup_r+0x62>
 8008334:	06da      	lsls	r2, r3, #27
 8008336:	d407      	bmi.n	8008348 <__swsetup_r+0x30>
 8008338:	2209      	movs	r2, #9
 800833a:	602a      	str	r2, [r5, #0]
 800833c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008340:	81a3      	strh	r3, [r4, #12]
 8008342:	f04f 30ff 	mov.w	r0, #4294967295
 8008346:	e033      	b.n	80083b0 <__swsetup_r+0x98>
 8008348:	0758      	lsls	r0, r3, #29
 800834a:	d512      	bpl.n	8008372 <__swsetup_r+0x5a>
 800834c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800834e:	b141      	cbz	r1, 8008362 <__swsetup_r+0x4a>
 8008350:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008354:	4299      	cmp	r1, r3
 8008356:	d002      	beq.n	800835e <__swsetup_r+0x46>
 8008358:	4628      	mov	r0, r5
 800835a:	f7fd fc1d 	bl	8005b98 <_free_r>
 800835e:	2300      	movs	r3, #0
 8008360:	6363      	str	r3, [r4, #52]	@ 0x34
 8008362:	89a3      	ldrh	r3, [r4, #12]
 8008364:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008368:	81a3      	strh	r3, [r4, #12]
 800836a:	2300      	movs	r3, #0
 800836c:	6063      	str	r3, [r4, #4]
 800836e:	6923      	ldr	r3, [r4, #16]
 8008370:	6023      	str	r3, [r4, #0]
 8008372:	89a3      	ldrh	r3, [r4, #12]
 8008374:	f043 0308 	orr.w	r3, r3, #8
 8008378:	81a3      	strh	r3, [r4, #12]
 800837a:	6923      	ldr	r3, [r4, #16]
 800837c:	b94b      	cbnz	r3, 8008392 <__swsetup_r+0x7a>
 800837e:	89a3      	ldrh	r3, [r4, #12]
 8008380:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008384:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008388:	d003      	beq.n	8008392 <__swsetup_r+0x7a>
 800838a:	4621      	mov	r1, r4
 800838c:	4628      	mov	r0, r5
 800838e:	f000 f88b 	bl	80084a8 <__smakebuf_r>
 8008392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008396:	f013 0201 	ands.w	r2, r3, #1
 800839a:	d00a      	beq.n	80083b2 <__swsetup_r+0x9a>
 800839c:	2200      	movs	r2, #0
 800839e:	60a2      	str	r2, [r4, #8]
 80083a0:	6962      	ldr	r2, [r4, #20]
 80083a2:	4252      	negs	r2, r2
 80083a4:	61a2      	str	r2, [r4, #24]
 80083a6:	6922      	ldr	r2, [r4, #16]
 80083a8:	b942      	cbnz	r2, 80083bc <__swsetup_r+0xa4>
 80083aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80083ae:	d1c5      	bne.n	800833c <__swsetup_r+0x24>
 80083b0:	bd38      	pop	{r3, r4, r5, pc}
 80083b2:	0799      	lsls	r1, r3, #30
 80083b4:	bf58      	it	pl
 80083b6:	6962      	ldrpl	r2, [r4, #20]
 80083b8:	60a2      	str	r2, [r4, #8]
 80083ba:	e7f4      	b.n	80083a6 <__swsetup_r+0x8e>
 80083bc:	2000      	movs	r0, #0
 80083be:	e7f7      	b.n	80083b0 <__swsetup_r+0x98>
 80083c0:	2000001c 	.word	0x2000001c

080083c4 <_raise_r>:
 80083c4:	291f      	cmp	r1, #31
 80083c6:	b538      	push	{r3, r4, r5, lr}
 80083c8:	4605      	mov	r5, r0
 80083ca:	460c      	mov	r4, r1
 80083cc:	d904      	bls.n	80083d8 <_raise_r+0x14>
 80083ce:	2316      	movs	r3, #22
 80083d0:	6003      	str	r3, [r0, #0]
 80083d2:	f04f 30ff 	mov.w	r0, #4294967295
 80083d6:	bd38      	pop	{r3, r4, r5, pc}
 80083d8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80083da:	b112      	cbz	r2, 80083e2 <_raise_r+0x1e>
 80083dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80083e0:	b94b      	cbnz	r3, 80083f6 <_raise_r+0x32>
 80083e2:	4628      	mov	r0, r5
 80083e4:	f000 f830 	bl	8008448 <_getpid_r>
 80083e8:	4622      	mov	r2, r4
 80083ea:	4601      	mov	r1, r0
 80083ec:	4628      	mov	r0, r5
 80083ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083f2:	f000 b817 	b.w	8008424 <_kill_r>
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d00a      	beq.n	8008410 <_raise_r+0x4c>
 80083fa:	1c59      	adds	r1, r3, #1
 80083fc:	d103      	bne.n	8008406 <_raise_r+0x42>
 80083fe:	2316      	movs	r3, #22
 8008400:	6003      	str	r3, [r0, #0]
 8008402:	2001      	movs	r0, #1
 8008404:	e7e7      	b.n	80083d6 <_raise_r+0x12>
 8008406:	2100      	movs	r1, #0
 8008408:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800840c:	4620      	mov	r0, r4
 800840e:	4798      	blx	r3
 8008410:	2000      	movs	r0, #0
 8008412:	e7e0      	b.n	80083d6 <_raise_r+0x12>

08008414 <raise>:
 8008414:	4b02      	ldr	r3, [pc, #8]	@ (8008420 <raise+0xc>)
 8008416:	4601      	mov	r1, r0
 8008418:	6818      	ldr	r0, [r3, #0]
 800841a:	f7ff bfd3 	b.w	80083c4 <_raise_r>
 800841e:	bf00      	nop
 8008420:	2000001c 	.word	0x2000001c

08008424 <_kill_r>:
 8008424:	b538      	push	{r3, r4, r5, lr}
 8008426:	4d07      	ldr	r5, [pc, #28]	@ (8008444 <_kill_r+0x20>)
 8008428:	2300      	movs	r3, #0
 800842a:	4604      	mov	r4, r0
 800842c:	4608      	mov	r0, r1
 800842e:	4611      	mov	r1, r2
 8008430:	602b      	str	r3, [r5, #0]
 8008432:	f7f8 ff6a 	bl	800130a <_kill>
 8008436:	1c43      	adds	r3, r0, #1
 8008438:	d102      	bne.n	8008440 <_kill_r+0x1c>
 800843a:	682b      	ldr	r3, [r5, #0]
 800843c:	b103      	cbz	r3, 8008440 <_kill_r+0x1c>
 800843e:	6023      	str	r3, [r4, #0]
 8008440:	bd38      	pop	{r3, r4, r5, pc}
 8008442:	bf00      	nop
 8008444:	20000428 	.word	0x20000428

08008448 <_getpid_r>:
 8008448:	f7f8 bf57 	b.w	80012fa <_getpid>

0800844c <_malloc_usable_size_r>:
 800844c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008450:	1f18      	subs	r0, r3, #4
 8008452:	2b00      	cmp	r3, #0
 8008454:	bfbc      	itt	lt
 8008456:	580b      	ldrlt	r3, [r1, r0]
 8008458:	18c0      	addlt	r0, r0, r3
 800845a:	4770      	bx	lr

0800845c <__swhatbuf_r>:
 800845c:	b570      	push	{r4, r5, r6, lr}
 800845e:	460c      	mov	r4, r1
 8008460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008464:	2900      	cmp	r1, #0
 8008466:	b096      	sub	sp, #88	@ 0x58
 8008468:	4615      	mov	r5, r2
 800846a:	461e      	mov	r6, r3
 800846c:	da0d      	bge.n	800848a <__swhatbuf_r+0x2e>
 800846e:	89a3      	ldrh	r3, [r4, #12]
 8008470:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008474:	f04f 0100 	mov.w	r1, #0
 8008478:	bf14      	ite	ne
 800847a:	2340      	movne	r3, #64	@ 0x40
 800847c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008480:	2000      	movs	r0, #0
 8008482:	6031      	str	r1, [r6, #0]
 8008484:	602b      	str	r3, [r5, #0]
 8008486:	b016      	add	sp, #88	@ 0x58
 8008488:	bd70      	pop	{r4, r5, r6, pc}
 800848a:	466a      	mov	r2, sp
 800848c:	f000 f848 	bl	8008520 <_fstat_r>
 8008490:	2800      	cmp	r0, #0
 8008492:	dbec      	blt.n	800846e <__swhatbuf_r+0x12>
 8008494:	9901      	ldr	r1, [sp, #4]
 8008496:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800849a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800849e:	4259      	negs	r1, r3
 80084a0:	4159      	adcs	r1, r3
 80084a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80084a6:	e7eb      	b.n	8008480 <__swhatbuf_r+0x24>

080084a8 <__smakebuf_r>:
 80084a8:	898b      	ldrh	r3, [r1, #12]
 80084aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084ac:	079d      	lsls	r5, r3, #30
 80084ae:	4606      	mov	r6, r0
 80084b0:	460c      	mov	r4, r1
 80084b2:	d507      	bpl.n	80084c4 <__smakebuf_r+0x1c>
 80084b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80084b8:	6023      	str	r3, [r4, #0]
 80084ba:	6123      	str	r3, [r4, #16]
 80084bc:	2301      	movs	r3, #1
 80084be:	6163      	str	r3, [r4, #20]
 80084c0:	b003      	add	sp, #12
 80084c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084c4:	ab01      	add	r3, sp, #4
 80084c6:	466a      	mov	r2, sp
 80084c8:	f7ff ffc8 	bl	800845c <__swhatbuf_r>
 80084cc:	9f00      	ldr	r7, [sp, #0]
 80084ce:	4605      	mov	r5, r0
 80084d0:	4639      	mov	r1, r7
 80084d2:	4630      	mov	r0, r6
 80084d4:	f7fd fbd4 	bl	8005c80 <_malloc_r>
 80084d8:	b948      	cbnz	r0, 80084ee <__smakebuf_r+0x46>
 80084da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084de:	059a      	lsls	r2, r3, #22
 80084e0:	d4ee      	bmi.n	80084c0 <__smakebuf_r+0x18>
 80084e2:	f023 0303 	bic.w	r3, r3, #3
 80084e6:	f043 0302 	orr.w	r3, r3, #2
 80084ea:	81a3      	strh	r3, [r4, #12]
 80084ec:	e7e2      	b.n	80084b4 <__smakebuf_r+0xc>
 80084ee:	89a3      	ldrh	r3, [r4, #12]
 80084f0:	6020      	str	r0, [r4, #0]
 80084f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084f6:	81a3      	strh	r3, [r4, #12]
 80084f8:	9b01      	ldr	r3, [sp, #4]
 80084fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80084fe:	b15b      	cbz	r3, 8008518 <__smakebuf_r+0x70>
 8008500:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008504:	4630      	mov	r0, r6
 8008506:	f000 f81d 	bl	8008544 <_isatty_r>
 800850a:	b128      	cbz	r0, 8008518 <__smakebuf_r+0x70>
 800850c:	89a3      	ldrh	r3, [r4, #12]
 800850e:	f023 0303 	bic.w	r3, r3, #3
 8008512:	f043 0301 	orr.w	r3, r3, #1
 8008516:	81a3      	strh	r3, [r4, #12]
 8008518:	89a3      	ldrh	r3, [r4, #12]
 800851a:	431d      	orrs	r5, r3
 800851c:	81a5      	strh	r5, [r4, #12]
 800851e:	e7cf      	b.n	80084c0 <__smakebuf_r+0x18>

08008520 <_fstat_r>:
 8008520:	b538      	push	{r3, r4, r5, lr}
 8008522:	4d07      	ldr	r5, [pc, #28]	@ (8008540 <_fstat_r+0x20>)
 8008524:	2300      	movs	r3, #0
 8008526:	4604      	mov	r4, r0
 8008528:	4608      	mov	r0, r1
 800852a:	4611      	mov	r1, r2
 800852c:	602b      	str	r3, [r5, #0]
 800852e:	f7f8 ff4c 	bl	80013ca <_fstat>
 8008532:	1c43      	adds	r3, r0, #1
 8008534:	d102      	bne.n	800853c <_fstat_r+0x1c>
 8008536:	682b      	ldr	r3, [r5, #0]
 8008538:	b103      	cbz	r3, 800853c <_fstat_r+0x1c>
 800853a:	6023      	str	r3, [r4, #0]
 800853c:	bd38      	pop	{r3, r4, r5, pc}
 800853e:	bf00      	nop
 8008540:	20000428 	.word	0x20000428

08008544 <_isatty_r>:
 8008544:	b538      	push	{r3, r4, r5, lr}
 8008546:	4d06      	ldr	r5, [pc, #24]	@ (8008560 <_isatty_r+0x1c>)
 8008548:	2300      	movs	r3, #0
 800854a:	4604      	mov	r4, r0
 800854c:	4608      	mov	r0, r1
 800854e:	602b      	str	r3, [r5, #0]
 8008550:	f7f8 ff4b 	bl	80013ea <_isatty>
 8008554:	1c43      	adds	r3, r0, #1
 8008556:	d102      	bne.n	800855e <_isatty_r+0x1a>
 8008558:	682b      	ldr	r3, [r5, #0]
 800855a:	b103      	cbz	r3, 800855e <_isatty_r+0x1a>
 800855c:	6023      	str	r3, [r4, #0]
 800855e:	bd38      	pop	{r3, r4, r5, pc}
 8008560:	20000428 	.word	0x20000428

08008564 <_init>:
 8008564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008566:	bf00      	nop
 8008568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800856a:	bc08      	pop	{r3}
 800856c:	469e      	mov	lr, r3
 800856e:	4770      	bx	lr

08008570 <_fini>:
 8008570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008572:	bf00      	nop
 8008574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008576:	bc08      	pop	{r3}
 8008578:	469e      	mov	lr, r3
 800857a:	4770      	bx	lr
