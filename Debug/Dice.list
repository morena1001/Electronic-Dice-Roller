
Dice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098a4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  08009a38  08009a38  0000aa38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f14  08009f14  0000b1e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009f14  08009f14  0000af14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f1c  08009f1c  0000b1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f1c  08009f1c  0000af1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009f20  08009f20  0000af20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  08009f24  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  200001e4  0800a108  0000b1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004e4  0800a108  0000b4e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012276  00000000  00000000  0000b214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002568  00000000  00000000  0001d48a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  0001f9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d0c  00000000  00000000  00020a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d148  00000000  00000000  000217a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c40  00000000  00000000  0003e8ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9131  00000000  00000000  0005352c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fc65d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b60  00000000  00000000  000fc6a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00102200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009a1c 	.word	0x08009a1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08009a1c 	.word	0x08009a1c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000cfe:	4a38      	ldr	r2, [pc, #224]	@ (8000de0 <HD44780_Init+0xec>)
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000d04:	4b37      	ldr	r3, [pc, #220]	@ (8000de4 <HD44780_Init+0xf0>)
 8000d06:	2208      	movs	r2, #8
 8000d08:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000d0a:	4b37      	ldr	r3, [pc, #220]	@ (8000de8 <HD44780_Init+0xf4>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000d10:	4b33      	ldr	r3, [pc, #204]	@ (8000de0 <HD44780_Init+0xec>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d907      	bls.n	8000d28 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000d18:	4b33      	ldr	r3, [pc, #204]	@ (8000de8 <HD44780_Init+0xf4>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	f043 0308 	orr.w	r3, r3, #8
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	4b31      	ldr	r3, [pc, #196]	@ (8000de8 <HD44780_Init+0xf4>)
 8000d24:	701a      	strb	r2, [r3, #0]
 8000d26:	e006      	b.n	8000d36 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000d28:	4b2f      	ldr	r3, [pc, #188]	@ (8000de8 <HD44780_Init+0xf4>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	f043 0304 	orr.w	r3, r3, #4
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	4b2d      	ldr	r3, [pc, #180]	@ (8000de8 <HD44780_Init+0xf4>)
 8000d34:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000d36:	f000 f985 	bl	8001044 <DelayInit>
  HAL_Delay(50);
 8000d3a:	2032      	movs	r0, #50	@ 0x32
 8000d3c:	f000 fea8 	bl	8001a90 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000d40:	4b28      	ldr	r3, [pc, #160]	@ (8000de4 <HD44780_Init+0xf0>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f000 f943 	bl	8000fd0 <ExpanderWrite>
  HAL_Delay(1000);
 8000d4a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d4e:	f000 fe9f 	bl	8001a90 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000d52:	2030      	movs	r0, #48	@ 0x30
 8000d54:	f000 f92b 	bl	8000fae <Write4Bits>
  DelayUS(4500);
 8000d58:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000d5c:	f000 f99c 	bl	8001098 <DelayUS>

  Write4Bits(0x03 << 4);
 8000d60:	2030      	movs	r0, #48	@ 0x30
 8000d62:	f000 f924 	bl	8000fae <Write4Bits>
  DelayUS(4500);
 8000d66:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000d6a:	f000 f995 	bl	8001098 <DelayUS>

  Write4Bits(0x03 << 4);
 8000d6e:	2030      	movs	r0, #48	@ 0x30
 8000d70:	f000 f91d 	bl	8000fae <Write4Bits>
  DelayUS(4500);
 8000d74:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000d78:	f000 f98e 	bl	8001098 <DelayUS>

  Write4Bits(0x02 << 4);
 8000d7c:	2020      	movs	r0, #32
 8000d7e:	f000 f916 	bl	8000fae <Write4Bits>
  DelayUS(100);
 8000d82:	2064      	movs	r0, #100	@ 0x64
 8000d84:	f000 f988 	bl	8001098 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000d88:	4b17      	ldr	r3, [pc, #92]	@ (8000de8 <HD44780_Init+0xf4>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	f043 0320 	orr.w	r3, r3, #32
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 f8ce 	bl	8000f34 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000d98:	4b14      	ldr	r3, [pc, #80]	@ (8000dec <HD44780_Init+0xf8>)
 8000d9a:	2204      	movs	r2, #4
 8000d9c:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000d9e:	f000 f875 	bl	8000e8c <HD44780_Display>
  HD44780_Clear();
 8000da2:	f000 f82b 	bl	8000dfc <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000da6:	4b12      	ldr	r3, [pc, #72]	@ (8000df0 <HD44780_Init+0xfc>)
 8000da8:	2202      	movs	r2, #2
 8000daa:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000dac:	4b10      	ldr	r3, [pc, #64]	@ (8000df0 <HD44780_Init+0xfc>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	f043 0304 	orr.w	r3, r3, #4
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 f8bc 	bl	8000f34 <SendCommand>
  DelayUS(4500);
 8000dbc:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000dc0:	f000 f96a 	bl	8001098 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000dc4:	490b      	ldr	r1, [pc, #44]	@ (8000df4 <HD44780_Init+0x100>)
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	f000 f876 	bl	8000eb8 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000dcc:	490a      	ldr	r1, [pc, #40]	@ (8000df8 <HD44780_Init+0x104>)
 8000dce:	2001      	movs	r0, #1
 8000dd0:	f000 f872 	bl	8000eb8 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000dd4:	f000 f81d 	bl	8000e12 <HD44780_Home>
}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000203 	.word	0x20000203
 8000de4:	20000204 	.word	0x20000204
 8000de8:	20000200 	.word	0x20000200
 8000dec:	20000201 	.word	0x20000201
 8000df0:	20000202 	.word	0x20000202
 8000df4:	20000000 	.word	0x20000000
 8000df8:	20000008 	.word	0x20000008

08000dfc <HD44780_Clear>:

void HD44780_Clear()
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000e00:	2001      	movs	r0, #1
 8000e02:	f000 f897 	bl	8000f34 <SendCommand>
  DelayUS(2000);
 8000e06:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e0a:	f000 f945 	bl	8001098 <DelayUS>
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HD44780_Home>:

void HD44780_Home()
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000e16:	2002      	movs	r0, #2
 8000e18:	f000 f88c 	bl	8000f34 <SendCommand>
  DelayUS(2000);
 8000e1c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e20:	f000 f93a 	bl	8001098 <DelayUS>
}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000e28:	b590      	push	{r4, r7, lr}
 8000e2a:	b087      	sub	sp, #28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	460a      	mov	r2, r1
 8000e32:	71fb      	strb	r3, [r7, #7]
 8000e34:	4613      	mov	r3, r2
 8000e36:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000e38:	4b12      	ldr	r3, [pc, #72]	@ (8000e84 <HD44780_SetCursor+0x5c>)
 8000e3a:	f107 0408 	add.w	r4, r7, #8
 8000e3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000e44:	4b10      	ldr	r3, [pc, #64]	@ (8000e88 <HD44780_SetCursor+0x60>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	79ba      	ldrb	r2, [r7, #6]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d303      	bcc.n	8000e56 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e88 <HD44780_SetCursor+0x60>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000e56:	79bb      	ldrb	r3, [r7, #6]
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	3318      	adds	r3, #24
 8000e5c:	443b      	add	r3, r7
 8000e5e:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	4413      	add	r3, r2
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	b25b      	sxtb	r3, r3
 8000e6c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e70:	b25b      	sxtb	r3, r3
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	4618      	mov	r0, r3
 8000e76:	f000 f85d 	bl	8000f34 <SendCommand>
}
 8000e7a:	bf00      	nop
 8000e7c:	371c      	adds	r7, #28
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd90      	pop	{r4, r7, pc}
 8000e82:	bf00      	nop
 8000e84:	08009a38 	.word	0x08009a38
 8000e88:	20000203 	.word	0x20000203

08000e8c <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000e90:	4b08      	ldr	r3, [pc, #32]	@ (8000eb4 <HD44780_Display+0x28>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	f043 0304 	orr.w	r3, r3, #4
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	4b06      	ldr	r3, [pc, #24]	@ (8000eb4 <HD44780_Display+0x28>)
 8000e9c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000e9e:	4b05      	ldr	r3, [pc, #20]	@ (8000eb4 <HD44780_Display+0x28>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	f043 0308 	orr.w	r3, r3, #8
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 f843 	bl	8000f34 <SendCommand>
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000201 	.word	0x20000201

08000eb8 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	6039      	str	r1, [r7, #0]
 8000ec2:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	00db      	lsls	r3, r3, #3
 8000ed0:	b25b      	sxtb	r3, r3
 8000ed2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ed6:	b25b      	sxtb	r3, r3
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 f82a 	bl	8000f34 <SendCommand>
  for (int i=0; i<8; i++)
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	e009      	b.n	8000efa <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	683a      	ldr	r2, [r7, #0]
 8000eea:	4413      	add	r3, r2
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 f82e 	bl	8000f50 <SendChar>
  for (int i=0; i<8; i++)
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	2b07      	cmp	r3, #7
 8000efe:	ddf2      	ble.n	8000ee6 <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000f00:	bf00      	nop
 8000f02:	bf00      	nop
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000f12:	e006      	b.n	8000f22 <HD44780_PrintStr+0x18>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	1c5a      	adds	r2, r3, #1
 8000f18:	607a      	str	r2, [r7, #4]
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f000 f817 	bl	8000f50 <SendChar>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d1f4      	bne.n	8000f14 <HD44780_PrintStr+0xa>
}
 8000f2a:	bf00      	nop
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	2100      	movs	r1, #0
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 f812 	bl	8000f6c <Send>
}
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 f804 	bl	8000f6c <Send>
}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	460a      	mov	r2, r1
 8000f76:	71fb      	strb	r3, [r7, #7]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	f023 030f 	bic.w	r3, r3, #15
 8000f82:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	011b      	lsls	r3, r3, #4
 8000f88:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000f8a:	7bfa      	ldrb	r2, [r7, #15]
 8000f8c:	79bb      	ldrb	r3, [r7, #6]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 f80b 	bl	8000fae <Write4Bits>
  Write4Bits((lownib)|mode);
 8000f98:	7bba      	ldrb	r2, [r7, #14]
 8000f9a:	79bb      	ldrb	r3, [r7, #6]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 f804 	bl	8000fae <Write4Bits>
}
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 f808 	bl	8000fd0 <ExpanderWrite>
  PulseEnable(value);
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 f820 	bl	8001008 <PulseEnable>
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af02      	add	r7, sp, #8
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000fda:	4b09      	ldr	r3, [pc, #36]	@ (8001000 <ExpanderWrite+0x30>)
 8000fdc:	781a      	ldrb	r2, [r3, #0]
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000fe6:	f107 020f 	add.w	r2, r7, #15
 8000fea:	230a      	movs	r3, #10
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	2301      	movs	r3, #1
 8000ff0:	214e      	movs	r1, #78	@ 0x4e
 8000ff2:	4804      	ldr	r0, [pc, #16]	@ (8001004 <ExpanderWrite+0x34>)
 8000ff4:	f001 f8ca 	bl	800218c <HAL_I2C_Master_Transmit>
}
 8000ff8:	bf00      	nop
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000204 	.word	0x20000204
 8001004:	20000208 	.word	0x20000208

08001008 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	f043 0304 	orr.w	r3, r3, #4
 8001018:	b2db      	uxtb	r3, r3
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff ffd8 	bl	8000fd0 <ExpanderWrite>
  DelayUS(20);
 8001020:	2014      	movs	r0, #20
 8001022:	f000 f839 	bl	8001098 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	f023 0304 	bic.w	r3, r3, #4
 800102c:	b2db      	uxtb	r3, r3
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff ffce 	bl	8000fd0 <ExpanderWrite>
  DelayUS(20);
 8001034:	2014      	movs	r0, #20
 8001036:	f000 f82f 	bl	8001098 <DelayUS>
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <DelayInit>:

static void DelayInit(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001048:	4b11      	ldr	r3, [pc, #68]	@ (8001090 <DelayInit+0x4c>)
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	4a10      	ldr	r2, [pc, #64]	@ (8001090 <DelayInit+0x4c>)
 800104e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001052:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8001054:	4b0e      	ldr	r3, [pc, #56]	@ (8001090 <DelayInit+0x4c>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	4a0d      	ldr	r2, [pc, #52]	@ (8001090 <DelayInit+0x4c>)
 800105a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800105e:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001060:	4b0c      	ldr	r3, [pc, #48]	@ (8001094 <DelayInit+0x50>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0b      	ldr	r2, [pc, #44]	@ (8001094 <DelayInit+0x50>)
 8001066:	f023 0301 	bic.w	r3, r3, #1
 800106a:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800106c:	4b09      	ldr	r3, [pc, #36]	@ (8001094 <DelayInit+0x50>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a08      	ldr	r2, [pc, #32]	@ (8001094 <DelayInit+0x50>)
 8001072:	f043 0301 	orr.w	r3, r3, #1
 8001076:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8001078:	4b06      	ldr	r3, [pc, #24]	@ (8001094 <DelayInit+0x50>)
 800107a:	2200      	movs	r2, #0
 800107c:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800107e:	bf00      	nop
  __ASM volatile ("NOP");
 8001080:	bf00      	nop
  __ASM volatile ("NOP");
 8001082:	bf00      	nop
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	e000edf0 	.word	0xe000edf0
 8001094:	e0001000 	.word	0xe0001000

08001098 <DelayUS>:

static void DelayUS(uint32_t us) {
 8001098:	b480      	push	{r7}
 800109a:	b087      	sub	sp, #28
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80010a0:	4b0e      	ldr	r3, [pc, #56]	@ (80010dc <DelayUS+0x44>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a0e      	ldr	r2, [pc, #56]	@ (80010e0 <DelayUS+0x48>)
 80010a6:	fba2 2303 	umull	r2, r3, r2, r3
 80010aa:	0c9a      	lsrs	r2, r3, #18
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	fb02 f303 	mul.w	r3, r2, r3
 80010b2:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80010b4:	4b0b      	ldr	r3, [pc, #44]	@ (80010e4 <DelayUS+0x4c>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80010ba:	4b0a      	ldr	r3, [pc, #40]	@ (80010e4 <DelayUS+0x4c>)
 80010bc:	685a      	ldr	r2, [r3, #4]
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	697a      	ldr	r2, [r7, #20]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d8f6      	bhi.n	80010ba <DelayUS+0x22>
}
 80010cc:	bf00      	nop
 80010ce:	bf00      	nop
 80010d0:	371c      	adds	r7, #28
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	20000010 	.word	0x20000010
 80010e0:	431bde83 	.word	0x431bde83
 80010e4:	e0001000 	.word	0xe0001000

080010e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ec:	f000 fc6a 	bl	80019c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f0:	f000 f824 	bl	800113c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010f4:	f000 f974 	bl	80013e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010f8:	f000 f942 	bl	8001380 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80010fc:	f000 f8ba 	bl	8001274 <MX_TIM2_Init>
  MX_TIM6_Init();
 8001100:	f000 f906 	bl	8001310 <MX_TIM6_Init>
  MX_I2C1_Init();
 8001104:	f000 f876 	bl	80011f4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8001108:	480a      	ldr	r0, [pc, #40]	@ (8001134 <main+0x4c>)
 800110a:	f003 f851 	bl	80041b0 <HAL_TIM_Base_Start>
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800110e:	2200      	movs	r2, #0
 8001110:	2100      	movs	r1, #0
 8001112:	2036      	movs	r0, #54	@ 0x36
 8001114:	f000 fdbb 	bl	8001c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001118:	2036      	movs	r0, #54	@ 0x36
 800111a:	f000 fdd4 	bl	8001cc6 <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT(&htim6);
 800111e:	4806      	ldr	r0, [pc, #24]	@ (8001138 <main+0x50>)
 8001120:	f003 f892 	bl	8004248 <HAL_TIM_Base_Start_IT>

  HD44780_Init(2);
 8001124:	2002      	movs	r0, #2
 8001126:	f7ff fde5 	bl	8000cf4 <HD44780_Init>
  HD44780_Clear();
 800112a:	f7ff fe67 	bl	8000dfc <HD44780_Clear>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800112e:	bf00      	nop
 8001130:	e7fd      	b.n	800112e <main+0x46>
 8001132:	bf00      	nop
 8001134:	2000025c 	.word	0x2000025c
 8001138:	200002a8 	.word	0x200002a8

0800113c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b09c      	sub	sp, #112	@ 0x70
 8001140:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001142:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001146:	2228      	movs	r2, #40	@ 0x28
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f005 f88d 	bl	800626a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001150:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001160:	463b      	mov	r3, r7
 8001162:	2234      	movs	r2, #52	@ 0x34
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f005 f87f 	bl	800626a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800116c:	2303      	movs	r3, #3
 800116e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001170:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001174:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001176:	2300      	movs	r3, #0
 8001178:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800117a:	2301      	movs	r3, #1
 800117c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800117e:	2310      	movs	r3, #16
 8001180:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001182:	2302      	movs	r3, #2
 8001184:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001186:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800118a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800118c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001190:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001192:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001196:	4618      	mov	r0, r3
 8001198:	f001 fbc2 	bl	8002920 <HAL_RCC_OscConfig>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80011a2:	f000 f969 	bl	8001478 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a6:	230f      	movs	r3, #15
 80011a8:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011aa:	2302      	movs	r3, #2
 80011ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011b8:	2300      	movs	r3, #0
 80011ba:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011bc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80011c0:	2102      	movs	r1, #2
 80011c2:	4618      	mov	r0, r3
 80011c4:	f002 fbea 	bl	800399c <HAL_RCC_ClockConfig>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80011ce:	f000 f953 	bl	8001478 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80011d2:	2320      	movs	r3, #32
 80011d4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011da:	463b      	mov	r3, r7
 80011dc:	4618      	mov	r0, r3
 80011de:	f002 fdfd 	bl	8003ddc <HAL_RCCEx_PeriphCLKConfig>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80011e8:	f000 f946 	bl	8001478 <Error_Handler>
  }
}
 80011ec:	bf00      	nop
 80011ee:	3770      	adds	r7, #112	@ 0x70
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001268 <MX_I2C1_Init+0x74>)
 80011fa:	4a1c      	ldr	r2, [pc, #112]	@ (800126c <MX_I2C1_Init+0x78>)
 80011fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80011fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001268 <MX_I2C1_Init+0x74>)
 8001200:	4a1b      	ldr	r2, [pc, #108]	@ (8001270 <MX_I2C1_Init+0x7c>)
 8001202:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001204:	4b18      	ldr	r3, [pc, #96]	@ (8001268 <MX_I2C1_Init+0x74>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800120a:	4b17      	ldr	r3, [pc, #92]	@ (8001268 <MX_I2C1_Init+0x74>)
 800120c:	2201      	movs	r2, #1
 800120e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001210:	4b15      	ldr	r3, [pc, #84]	@ (8001268 <MX_I2C1_Init+0x74>)
 8001212:	2200      	movs	r2, #0
 8001214:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001216:	4b14      	ldr	r3, [pc, #80]	@ (8001268 <MX_I2C1_Init+0x74>)
 8001218:	2200      	movs	r2, #0
 800121a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800121c:	4b12      	ldr	r3, [pc, #72]	@ (8001268 <MX_I2C1_Init+0x74>)
 800121e:	2200      	movs	r2, #0
 8001220:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001222:	4b11      	ldr	r3, [pc, #68]	@ (8001268 <MX_I2C1_Init+0x74>)
 8001224:	2200      	movs	r2, #0
 8001226:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001228:	4b0f      	ldr	r3, [pc, #60]	@ (8001268 <MX_I2C1_Init+0x74>)
 800122a:	2200      	movs	r2, #0
 800122c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800122e:	480e      	ldr	r0, [pc, #56]	@ (8001268 <MX_I2C1_Init+0x74>)
 8001230:	f000 ff11 	bl	8002056 <HAL_I2C_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800123a:	f000 f91d 	bl	8001478 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800123e:	2100      	movs	r1, #0
 8001240:	4809      	ldr	r0, [pc, #36]	@ (8001268 <MX_I2C1_Init+0x74>)
 8001242:	f001 fad5 	bl	80027f0 <HAL_I2CEx_ConfigAnalogFilter>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800124c:	f000 f914 	bl	8001478 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001250:	2100      	movs	r1, #0
 8001252:	4805      	ldr	r0, [pc, #20]	@ (8001268 <MX_I2C1_Init+0x74>)
 8001254:	f001 fb17 	bl	8002886 <HAL_I2CEx_ConfigDigitalFilter>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800125e:	f000 f90b 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000208 	.word	0x20000208
 800126c:	40005400 	.word	0x40005400
 8001270:	2000090e 	.word	0x2000090e

08001274 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800127a:	f107 0310 	add.w	r3, r7, #16
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001288:	1d3b      	adds	r3, r7, #4
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001292:	4b1e      	ldr	r3, [pc, #120]	@ (800130c <MX_TIM2_Init+0x98>)
 8001294:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001298:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800129a:	4b1c      	ldr	r3, [pc, #112]	@ (800130c <MX_TIM2_Init+0x98>)
 800129c:	2200      	movs	r2, #0
 800129e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a0:	4b1a      	ldr	r3, [pc, #104]	@ (800130c <MX_TIM2_Init+0x98>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80012a6:	4b19      	ldr	r3, [pc, #100]	@ (800130c <MX_TIM2_Init+0x98>)
 80012a8:	f04f 32ff 	mov.w	r2, #4294967295
 80012ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ae:	4b17      	ldr	r3, [pc, #92]	@ (800130c <MX_TIM2_Init+0x98>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b4:	4b15      	ldr	r3, [pc, #84]	@ (800130c <MX_TIM2_Init+0x98>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012ba:	4814      	ldr	r0, [pc, #80]	@ (800130c <MX_TIM2_Init+0x98>)
 80012bc:	f002 ff20 	bl	8004100 <HAL_TIM_Base_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80012c6:	f000 f8d7 	bl	8001478 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012d0:	f107 0310 	add.w	r3, r7, #16
 80012d4:	4619      	mov	r1, r3
 80012d6:	480d      	ldr	r0, [pc, #52]	@ (800130c <MX_TIM2_Init+0x98>)
 80012d8:	f003 f90c 	bl	80044f4 <HAL_TIM_ConfigClockSource>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80012e2:	f000 f8c9 	bl	8001478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e6:	2300      	movs	r3, #0
 80012e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012ee:	1d3b      	adds	r3, r7, #4
 80012f0:	4619      	mov	r1, r3
 80012f2:	4806      	ldr	r0, [pc, #24]	@ (800130c <MX_TIM2_Init+0x98>)
 80012f4:	f003 fb0e 	bl	8004914 <HAL_TIMEx_MasterConfigSynchronization>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80012fe:	f000 f8bb 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001302:	bf00      	nop
 8001304:	3720      	adds	r7, #32
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	2000025c 	.word	0x2000025c

08001310 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001320:	4b15      	ldr	r3, [pc, #84]	@ (8001378 <MX_TIM6_Init+0x68>)
 8001322:	4a16      	ldr	r2, [pc, #88]	@ (800137c <MX_TIM6_Init+0x6c>)
 8001324:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 359;
 8001326:	4b14      	ldr	r3, [pc, #80]	@ (8001378 <MX_TIM6_Init+0x68>)
 8001328:	f240 1267 	movw	r2, #359	@ 0x167
 800132c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132e:	4b12      	ldr	r3, [pc, #72]	@ (8001378 <MX_TIM6_Init+0x68>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 799;
 8001334:	4b10      	ldr	r3, [pc, #64]	@ (8001378 <MX_TIM6_Init+0x68>)
 8001336:	f240 321f 	movw	r2, #799	@ 0x31f
 800133a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800133c:	4b0e      	ldr	r3, [pc, #56]	@ (8001378 <MX_TIM6_Init+0x68>)
 800133e:	2200      	movs	r2, #0
 8001340:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001342:	480d      	ldr	r0, [pc, #52]	@ (8001378 <MX_TIM6_Init+0x68>)
 8001344:	f002 fedc 	bl	8004100 <HAL_TIM_Base_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800134e:	f000 f893 	bl	8001478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001352:	2300      	movs	r3, #0
 8001354:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	4619      	mov	r1, r3
 800135e:	4806      	ldr	r0, [pc, #24]	@ (8001378 <MX_TIM6_Init+0x68>)
 8001360:	f003 fad8 	bl	8004914 <HAL_TIMEx_MasterConfigSynchronization>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800136a:	f000 f885 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800136e:	bf00      	nop
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	200002a8 	.word	0x200002a8
 800137c:	40001000 	.word	0x40001000

08001380 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001384:	4b14      	ldr	r3, [pc, #80]	@ (80013d8 <MX_USART2_UART_Init+0x58>)
 8001386:	4a15      	ldr	r2, [pc, #84]	@ (80013dc <MX_USART2_UART_Init+0x5c>)
 8001388:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800138a:	4b13      	ldr	r3, [pc, #76]	@ (80013d8 <MX_USART2_UART_Init+0x58>)
 800138c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001390:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001392:	4b11      	ldr	r3, [pc, #68]	@ (80013d8 <MX_USART2_UART_Init+0x58>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001398:	4b0f      	ldr	r3, [pc, #60]	@ (80013d8 <MX_USART2_UART_Init+0x58>)
 800139a:	2200      	movs	r2, #0
 800139c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800139e:	4b0e      	ldr	r3, [pc, #56]	@ (80013d8 <MX_USART2_UART_Init+0x58>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013a4:	4b0c      	ldr	r3, [pc, #48]	@ (80013d8 <MX_USART2_UART_Init+0x58>)
 80013a6:	220c      	movs	r2, #12
 80013a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013aa:	4b0b      	ldr	r3, [pc, #44]	@ (80013d8 <MX_USART2_UART_Init+0x58>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b0:	4b09      	ldr	r3, [pc, #36]	@ (80013d8 <MX_USART2_UART_Init+0x58>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013b6:	4b08      	ldr	r3, [pc, #32]	@ (80013d8 <MX_USART2_UART_Init+0x58>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013bc:	4b06      	ldr	r3, [pc, #24]	@ (80013d8 <MX_USART2_UART_Init+0x58>)
 80013be:	2200      	movs	r2, #0
 80013c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013c2:	4805      	ldr	r0, [pc, #20]	@ (80013d8 <MX_USART2_UART_Init+0x58>)
 80013c4:	f003 fb2a 	bl	8004a1c <HAL_UART_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013ce:	f000 f853 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	200002f4 	.word	0x200002f4
 80013dc:	40004400 	.word	0x40004400

080013e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b088      	sub	sp, #32
 80013e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e6:	f107 030c 	add.w	r3, r7, #12
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	609a      	str	r2, [r3, #8]
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001474 <MX_GPIO_Init+0x94>)
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	4a1e      	ldr	r2, [pc, #120]	@ (8001474 <MX_GPIO_Init+0x94>)
 80013fc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001400:	6153      	str	r3, [r2, #20]
 8001402:	4b1c      	ldr	r3, [pc, #112]	@ (8001474 <MX_GPIO_Init+0x94>)
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140e:	4b19      	ldr	r3, [pc, #100]	@ (8001474 <MX_GPIO_Init+0x94>)
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	4a18      	ldr	r2, [pc, #96]	@ (8001474 <MX_GPIO_Init+0x94>)
 8001414:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001418:	6153      	str	r3, [r2, #20]
 800141a:	4b16      	ldr	r3, [pc, #88]	@ (8001474 <MX_GPIO_Init+0x94>)
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	4b13      	ldr	r3, [pc, #76]	@ (8001474 <MX_GPIO_Init+0x94>)
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	4a12      	ldr	r2, [pc, #72]	@ (8001474 <MX_GPIO_Init+0x94>)
 800142c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001430:	6153      	str	r3, [r2, #20]
 8001432:	4b10      	ldr	r3, [pc, #64]	@ (8001474 <MX_GPIO_Init+0x94>)
 8001434:	695b      	ldr	r3, [r3, #20]
 8001436:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800143a:	603b      	str	r3, [r7, #0]
 800143c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : Roll_Pin */
  GPIO_InitStruct.Pin = Roll_Pin;
 800143e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001442:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001444:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001448:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800144a:	2301      	movs	r3, #1
 800144c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Roll_GPIO_Port, &GPIO_InitStruct);
 800144e:	f107 030c 	add.w	r3, r7, #12
 8001452:	4619      	mov	r1, r3
 8001454:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001458:	f000 fc50 	bl	8001cfc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800145c:	2200      	movs	r2, #0
 800145e:	2100      	movs	r1, #0
 8001460:	2028      	movs	r0, #40	@ 0x28
 8001462:	f000 fc14 	bl	8001c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001466:	2028      	movs	r0, #40	@ 0x28
 8001468:	f000 fc2d 	bl	8001cc6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800146c:	bf00      	nop
 800146e:	3720      	adds	r7, #32
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40021000 	.word	0x40021000

08001478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800147c:	b672      	cpsid	i
}
 800147e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <Error_Handler+0x8>

08001484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148a:	4b0f      	ldr	r3, [pc, #60]	@ (80014c8 <HAL_MspInit+0x44>)
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	4a0e      	ldr	r2, [pc, #56]	@ (80014c8 <HAL_MspInit+0x44>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6193      	str	r3, [r2, #24]
 8001496:	4b0c      	ldr	r3, [pc, #48]	@ (80014c8 <HAL_MspInit+0x44>)
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a2:	4b09      	ldr	r3, [pc, #36]	@ (80014c8 <HAL_MspInit+0x44>)
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	4a08      	ldr	r2, [pc, #32]	@ (80014c8 <HAL_MspInit+0x44>)
 80014a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014ac:	61d3      	str	r3, [r2, #28]
 80014ae:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <HAL_MspInit+0x44>)
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014b6:	603b      	str	r3, [r7, #0]
 80014b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	40021000 	.word	0x40021000

080014cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08a      	sub	sp, #40	@ 0x28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a17      	ldr	r2, [pc, #92]	@ (8001548 <HAL_I2C_MspInit+0x7c>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d128      	bne.n	8001540 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ee:	4b17      	ldr	r3, [pc, #92]	@ (800154c <HAL_I2C_MspInit+0x80>)
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	4a16      	ldr	r2, [pc, #88]	@ (800154c <HAL_I2C_MspInit+0x80>)
 80014f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014f8:	6153      	str	r3, [r2, #20]
 80014fa:	4b14      	ldr	r3, [pc, #80]	@ (800154c <HAL_I2C_MspInit+0x80>)
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001506:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800150a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800150c:	2312      	movs	r3, #18
 800150e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001514:	2303      	movs	r3, #3
 8001516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001518:	2304      	movs	r3, #4
 800151a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	4619      	mov	r1, r3
 8001522:	480b      	ldr	r0, [pc, #44]	@ (8001550 <HAL_I2C_MspInit+0x84>)
 8001524:	f000 fbea 	bl	8001cfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001528:	4b08      	ldr	r3, [pc, #32]	@ (800154c <HAL_I2C_MspInit+0x80>)
 800152a:	69db      	ldr	r3, [r3, #28]
 800152c:	4a07      	ldr	r2, [pc, #28]	@ (800154c <HAL_I2C_MspInit+0x80>)
 800152e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001532:	61d3      	str	r3, [r2, #28]
 8001534:	4b05      	ldr	r3, [pc, #20]	@ (800154c <HAL_I2C_MspInit+0x80>)
 8001536:	69db      	ldr	r3, [r3, #28]
 8001538:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001540:	bf00      	nop
 8001542:	3728      	adds	r7, #40	@ 0x28
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40005400 	.word	0x40005400
 800154c:	40021000 	.word	0x40021000
 8001550:	48000400 	.word	0x48000400

08001554 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001564:	d10c      	bne.n	8001580 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001566:	4b15      	ldr	r3, [pc, #84]	@ (80015bc <HAL_TIM_Base_MspInit+0x68>)
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	4a14      	ldr	r2, [pc, #80]	@ (80015bc <HAL_TIM_Base_MspInit+0x68>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	61d3      	str	r3, [r2, #28]
 8001572:	4b12      	ldr	r3, [pc, #72]	@ (80015bc <HAL_TIM_Base_MspInit+0x68>)
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800157e:	e018      	b.n	80015b2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM6)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a0e      	ldr	r2, [pc, #56]	@ (80015c0 <HAL_TIM_Base_MspInit+0x6c>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d113      	bne.n	80015b2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800158a:	4b0c      	ldr	r3, [pc, #48]	@ (80015bc <HAL_TIM_Base_MspInit+0x68>)
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	4a0b      	ldr	r2, [pc, #44]	@ (80015bc <HAL_TIM_Base_MspInit+0x68>)
 8001590:	f043 0310 	orr.w	r3, r3, #16
 8001594:	61d3      	str	r3, [r2, #28]
 8001596:	4b09      	ldr	r3, [pc, #36]	@ (80015bc <HAL_TIM_Base_MspInit+0x68>)
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	f003 0310 	and.w	r3, r3, #16
 800159e:	60bb      	str	r3, [r7, #8]
 80015a0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2100      	movs	r1, #0
 80015a6:	2036      	movs	r0, #54	@ 0x36
 80015a8:	f000 fb71 	bl	8001c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015ac:	2036      	movs	r0, #54	@ 0x36
 80015ae:	f000 fb8a 	bl	8001cc6 <HAL_NVIC_EnableIRQ>
}
 80015b2:	bf00      	nop
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40021000 	.word	0x40021000
 80015c0:	40001000 	.word	0x40001000

080015c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08a      	sub	sp, #40	@ 0x28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a17      	ldr	r2, [pc, #92]	@ (8001640 <HAL_UART_MspInit+0x7c>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d128      	bne.n	8001638 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015e6:	4b17      	ldr	r3, [pc, #92]	@ (8001644 <HAL_UART_MspInit+0x80>)
 80015e8:	69db      	ldr	r3, [r3, #28]
 80015ea:	4a16      	ldr	r2, [pc, #88]	@ (8001644 <HAL_UART_MspInit+0x80>)
 80015ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015f0:	61d3      	str	r3, [r2, #28]
 80015f2:	4b14      	ldr	r3, [pc, #80]	@ (8001644 <HAL_UART_MspInit+0x80>)
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fe:	4b11      	ldr	r3, [pc, #68]	@ (8001644 <HAL_UART_MspInit+0x80>)
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	4a10      	ldr	r2, [pc, #64]	@ (8001644 <HAL_UART_MspInit+0x80>)
 8001604:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001608:	6153      	str	r3, [r2, #20]
 800160a:	4b0e      	ldr	r3, [pc, #56]	@ (8001644 <HAL_UART_MspInit+0x80>)
 800160c:	695b      	ldr	r3, [r3, #20]
 800160e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001616:	230c      	movs	r3, #12
 8001618:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161a:	2302      	movs	r3, #2
 800161c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001622:	2303      	movs	r3, #3
 8001624:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001626:	2307      	movs	r3, #7
 8001628:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162a:	f107 0314 	add.w	r3, r7, #20
 800162e:	4619      	mov	r1, r3
 8001630:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001634:	f000 fb62 	bl	8001cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001638:	bf00      	nop
 800163a:	3728      	adds	r7, #40	@ 0x28
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40004400 	.word	0x40004400
 8001644:	40021000 	.word	0x40021000

08001648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800164c:	bf00      	nop
 800164e:	e7fd      	b.n	800164c <NMI_Handler+0x4>

08001650 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001654:	bf00      	nop
 8001656:	e7fd      	b.n	8001654 <HardFault_Handler+0x4>

08001658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800165c:	bf00      	nop
 800165e:	e7fd      	b.n	800165c <MemManage_Handler+0x4>

08001660 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001664:	bf00      	nop
 8001666:	e7fd      	b.n	8001664 <BusFault_Handler+0x4>

08001668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800166c:	bf00      	nop
 800166e:	e7fd      	b.n	800166c <UsageFault_Handler+0x4>

08001670 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800169e:	f000 f9d7 	bl	8001a50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Roll_Pin);
 80016aa:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80016ae:	f000 fcaf 	bl	8002010 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	if (!HAL_GPIO_ReadPin(Roll_GPIO_Port, Roll_Pin)) {
 80016bc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016c4:	f000 fc8c 	bl	8001fe0 <HAL_GPIO_ReadPin>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d15a      	bne.n	8001784 <TIM6_DAC_IRQHandler+0xcc>
		if (!toggle) {
 80016ce:	4b31      	ldr	r3, [pc, #196]	@ (8001794 <TIM6_DAC_IRQHandler+0xdc>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	f083 0301 	eor.w	r3, r3, #1
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d056      	beq.n	800178a <TIM6_DAC_IRQHandler+0xd2>
			toggle = true;
 80016dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001794 <TIM6_DAC_IRQHandler+0xdc>)
 80016de:	2201      	movs	r2, #1
 80016e0:	701a      	strb	r2, [r3, #0]

			srand(__HAL_TIM_GET_COUNTER(&htim2));
 80016e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001798 <TIM6_DAC_IRQHandler+0xe0>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e8:	4618      	mov	r0, r3
 80016ea:	f003 fdc1 	bl	8005270 <srand>
			generated_number = (rand() % 6) + 1;
 80016ee:	f003 fded 	bl	80052cc <rand>
 80016f2:	4602      	mov	r2, r0
 80016f4:	4b29      	ldr	r3, [pc, #164]	@ (800179c <TIM6_DAC_IRQHandler+0xe4>)
 80016f6:	fb83 3102 	smull	r3, r1, r3, r2
 80016fa:	17d3      	asrs	r3, r2, #31
 80016fc:	1ac9      	subs	r1, r1, r3
 80016fe:	460b      	mov	r3, r1
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	440b      	add	r3, r1
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	1ad1      	subs	r1, r2, r3
 8001708:	b2cb      	uxtb	r3, r1
 800170a:	3301      	adds	r3, #1
 800170c:	b2da      	uxtb	r2, r3
 800170e:	4b24      	ldr	r3, [pc, #144]	@ (80017a0 <TIM6_DAC_IRQHandler+0xe8>)
 8001710:	701a      	strb	r2, [r3, #0]

			while (generated_number == previous_generated_number) {
 8001712:	e011      	b.n	8001738 <TIM6_DAC_IRQHandler+0x80>
				generated_number = (rand() % 6) + 1;
 8001714:	f003 fdda 	bl	80052cc <rand>
 8001718:	4602      	mov	r2, r0
 800171a:	4b20      	ldr	r3, [pc, #128]	@ (800179c <TIM6_DAC_IRQHandler+0xe4>)
 800171c:	fb83 3102 	smull	r3, r1, r3, r2
 8001720:	17d3      	asrs	r3, r2, #31
 8001722:	1ac9      	subs	r1, r1, r3
 8001724:	460b      	mov	r3, r1
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	440b      	add	r3, r1
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	1ad1      	subs	r1, r2, r3
 800172e:	b2cb      	uxtb	r3, r1
 8001730:	3301      	adds	r3, #1
 8001732:	b2da      	uxtb	r2, r3
 8001734:	4b1a      	ldr	r3, [pc, #104]	@ (80017a0 <TIM6_DAC_IRQHandler+0xe8>)
 8001736:	701a      	strb	r2, [r3, #0]
			while (generated_number == previous_generated_number) {
 8001738:	4b19      	ldr	r3, [pc, #100]	@ (80017a0 <TIM6_DAC_IRQHandler+0xe8>)
 800173a:	781a      	ldrb	r2, [r3, #0]
 800173c:	4b19      	ldr	r3, [pc, #100]	@ (80017a4 <TIM6_DAC_IRQHandler+0xec>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	429a      	cmp	r2, r3
 8001742:	d0e7      	beq.n	8001714 <TIM6_DAC_IRQHandler+0x5c>
			}

			sprintf(uart_message, "%d\r\n", generated_number);
 8001744:	4b16      	ldr	r3, [pc, #88]	@ (80017a0 <TIM6_DAC_IRQHandler+0xe8>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	461a      	mov	r2, r3
 800174a:	4917      	ldr	r1, [pc, #92]	@ (80017a8 <TIM6_DAC_IRQHandler+0xf0>)
 800174c:	4817      	ldr	r0, [pc, #92]	@ (80017ac <TIM6_DAC_IRQHandler+0xf4>)
 800174e:	f004 fd29 	bl	80061a4 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) uart_message, 3, 100);
 8001752:	2364      	movs	r3, #100	@ 0x64
 8001754:	2203      	movs	r2, #3
 8001756:	4915      	ldr	r1, [pc, #84]	@ (80017ac <TIM6_DAC_IRQHandler+0xf4>)
 8001758:	4815      	ldr	r0, [pc, #84]	@ (80017b0 <TIM6_DAC_IRQHandler+0xf8>)
 800175a:	f003 f9ad 	bl	8004ab8 <HAL_UART_Transmit>

			sprintf(i2c_message, "%d", generated_number);
 800175e:	4b10      	ldr	r3, [pc, #64]	@ (80017a0 <TIM6_DAC_IRQHandler+0xe8>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	461a      	mov	r2, r3
 8001764:	4913      	ldr	r1, [pc, #76]	@ (80017b4 <TIM6_DAC_IRQHandler+0xfc>)
 8001766:	4814      	ldr	r0, [pc, #80]	@ (80017b8 <TIM6_DAC_IRQHandler+0x100>)
 8001768:	f004 fd1c 	bl	80061a4 <siprintf>
			HD44780_SetCursor(0, 0);
 800176c:	2100      	movs	r1, #0
 800176e:	2000      	movs	r0, #0
 8001770:	f7ff fb5a 	bl	8000e28 <HD44780_SetCursor>
			HD44780_PrintStr(&i2c_message[0]);
 8001774:	4810      	ldr	r0, [pc, #64]	@ (80017b8 <TIM6_DAC_IRQHandler+0x100>)
 8001776:	f7ff fbc8 	bl	8000f0a <HD44780_PrintStr>

			previous_generated_number = generated_number;
 800177a:	4b09      	ldr	r3, [pc, #36]	@ (80017a0 <TIM6_DAC_IRQHandler+0xe8>)
 800177c:	781a      	ldrb	r2, [r3, #0]
 800177e:	4b09      	ldr	r3, [pc, #36]	@ (80017a4 <TIM6_DAC_IRQHandler+0xec>)
 8001780:	701a      	strb	r2, [r3, #0]
 8001782:	e002      	b.n	800178a <TIM6_DAC_IRQHandler+0xd2>
		}
	} else {
		toggle = false;
 8001784:	4b03      	ldr	r3, [pc, #12]	@ (8001794 <TIM6_DAC_IRQHandler+0xdc>)
 8001786:	2200      	movs	r2, #0
 8001788:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800178a:	480c      	ldr	r0, [pc, #48]	@ (80017bc <TIM6_DAC_IRQHandler+0x104>)
 800178c:	f002 fdb0 	bl	80042f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}
 8001794:	2000038d 	.word	0x2000038d
 8001798:	2000025c 	.word	0x2000025c
 800179c:	2aaaaaab 	.word	0x2aaaaaab
 80017a0:	2000038e 	.word	0x2000038e
 80017a4:	2000038f 	.word	0x2000038f
 80017a8:	08009a48 	.word	0x08009a48
 80017ac:	2000037c 	.word	0x2000037c
 80017b0:	200002f4 	.word	0x200002f4
 80017b4:	08009a50 	.word	0x08009a50
 80017b8:	20000388 	.word	0x20000388
 80017bc:	200002a8 	.word	0x200002a8

080017c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return 1;
 80017c4:	2301      	movs	r3, #1
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <_kill>:

int _kill(int pid, int sig)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017da:	f004 fd99 	bl	8006310 <__errno>
 80017de:	4603      	mov	r3, r0
 80017e0:	2216      	movs	r2, #22
 80017e2:	601a      	str	r2, [r3, #0]
  return -1;
 80017e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <_exit>:

void _exit (int status)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017f8:	f04f 31ff 	mov.w	r1, #4294967295
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7ff ffe7 	bl	80017d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001802:	bf00      	nop
 8001804:	e7fd      	b.n	8001802 <_exit+0x12>

08001806 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b086      	sub	sp, #24
 800180a:	af00      	add	r7, sp, #0
 800180c:	60f8      	str	r0, [r7, #12]
 800180e:	60b9      	str	r1, [r7, #8]
 8001810:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
 8001816:	e00a      	b.n	800182e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001818:	f3af 8000 	nop.w
 800181c:	4601      	mov	r1, r0
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	1c5a      	adds	r2, r3, #1
 8001822:	60ba      	str	r2, [r7, #8]
 8001824:	b2ca      	uxtb	r2, r1
 8001826:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	3301      	adds	r3, #1
 800182c:	617b      	str	r3, [r7, #20]
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	429a      	cmp	r2, r3
 8001834:	dbf0      	blt.n	8001818 <_read+0x12>
  }

  return len;
 8001836:	687b      	ldr	r3, [r7, #4]
}
 8001838:	4618      	mov	r0, r3
 800183a:	3718      	adds	r7, #24
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	e009      	b.n	8001866 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	1c5a      	adds	r2, r3, #1
 8001856:	60ba      	str	r2, [r7, #8]
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	3301      	adds	r3, #1
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	697a      	ldr	r2, [r7, #20]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	429a      	cmp	r2, r3
 800186c:	dbf1      	blt.n	8001852 <_write+0x12>
  }
  return len;
 800186e:	687b      	ldr	r3, [r7, #4]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <_close>:

int _close(int file)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001880:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001884:	4618      	mov	r0, r3
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018a0:	605a      	str	r2, [r3, #4]
  return 0;
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <_isatty>:

int _isatty(int file)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018b8:	2301      	movs	r3, #1
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b085      	sub	sp, #20
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	60f8      	str	r0, [r7, #12]
 80018ce:	60b9      	str	r1, [r7, #8]
 80018d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018e8:	4a14      	ldr	r2, [pc, #80]	@ (800193c <_sbrk+0x5c>)
 80018ea:	4b15      	ldr	r3, [pc, #84]	@ (8001940 <_sbrk+0x60>)
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018f4:	4b13      	ldr	r3, [pc, #76]	@ (8001944 <_sbrk+0x64>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d102      	bne.n	8001902 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018fc:	4b11      	ldr	r3, [pc, #68]	@ (8001944 <_sbrk+0x64>)
 80018fe:	4a12      	ldr	r2, [pc, #72]	@ (8001948 <_sbrk+0x68>)
 8001900:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001902:	4b10      	ldr	r3, [pc, #64]	@ (8001944 <_sbrk+0x64>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4413      	add	r3, r2
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	429a      	cmp	r2, r3
 800190e:	d207      	bcs.n	8001920 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001910:	f004 fcfe 	bl	8006310 <__errno>
 8001914:	4603      	mov	r3, r0
 8001916:	220c      	movs	r2, #12
 8001918:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800191a:	f04f 33ff 	mov.w	r3, #4294967295
 800191e:	e009      	b.n	8001934 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001920:	4b08      	ldr	r3, [pc, #32]	@ (8001944 <_sbrk+0x64>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001926:	4b07      	ldr	r3, [pc, #28]	@ (8001944 <_sbrk+0x64>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4413      	add	r3, r2
 800192e:	4a05      	ldr	r2, [pc, #20]	@ (8001944 <_sbrk+0x64>)
 8001930:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001932:	68fb      	ldr	r3, [r7, #12]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20004000 	.word	0x20004000
 8001940:	00000400 	.word	0x00000400
 8001944:	20000390 	.word	0x20000390
 8001948:	200004e8 	.word	0x200004e8

0800194c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001950:	4b06      	ldr	r3, [pc, #24]	@ (800196c <SystemInit+0x20>)
 8001952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001956:	4a05      	ldr	r2, [pc, #20]	@ (800196c <SystemInit+0x20>)
 8001958:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800195c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001970:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019a8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001974:	f7ff ffea 	bl	800194c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001978:	480c      	ldr	r0, [pc, #48]	@ (80019ac <LoopForever+0x6>)
  ldr r1, =_edata
 800197a:	490d      	ldr	r1, [pc, #52]	@ (80019b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800197c:	4a0d      	ldr	r2, [pc, #52]	@ (80019b4 <LoopForever+0xe>)
  movs r3, #0
 800197e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001980:	e002      	b.n	8001988 <LoopCopyDataInit>

08001982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001986:	3304      	adds	r3, #4

08001988 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800198a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800198c:	d3f9      	bcc.n	8001982 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800198e:	4a0a      	ldr	r2, [pc, #40]	@ (80019b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001990:	4c0a      	ldr	r4, [pc, #40]	@ (80019bc <LoopForever+0x16>)
  movs r3, #0
 8001992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001994:	e001      	b.n	800199a <LoopFillZerobss>

08001996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001998:	3204      	adds	r2, #4

0800199a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800199a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800199c:	d3fb      	bcc.n	8001996 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800199e:	f004 fcbd 	bl	800631c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019a2:	f7ff fba1 	bl	80010e8 <main>

080019a6 <LoopForever>:

LoopForever:
    b LoopForever
 80019a6:	e7fe      	b.n	80019a6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80019a8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80019ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019b0:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80019b4:	08009f24 	.word	0x08009f24
  ldr r2, =_sbss
 80019b8:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80019bc:	200004e4 	.word	0x200004e4

080019c0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019c0:	e7fe      	b.n	80019c0 <ADC1_IRQHandler>
	...

080019c4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019c8:	4b08      	ldr	r3, [pc, #32]	@ (80019ec <HAL_Init+0x28>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a07      	ldr	r2, [pc, #28]	@ (80019ec <HAL_Init+0x28>)
 80019ce:	f043 0310 	orr.w	r3, r3, #16
 80019d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019d4:	2003      	movs	r0, #3
 80019d6:	f000 f94f 	bl	8001c78 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019da:	200f      	movs	r0, #15
 80019dc:	f000 f808 	bl	80019f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019e0:	f7ff fd50 	bl	8001484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40022000 	.word	0x40022000

080019f0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019f8:	4b12      	ldr	r3, [pc, #72]	@ (8001a44 <HAL_InitTick+0x54>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	4b12      	ldr	r3, [pc, #72]	@ (8001a48 <HAL_InitTick+0x58>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	4619      	mov	r1, r3
 8001a02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f000 f967 	bl	8001ce2 <HAL_SYSTICK_Config>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e00e      	b.n	8001a3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b0f      	cmp	r3, #15
 8001a22:	d80a      	bhi.n	8001a3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a24:	2200      	movs	r2, #0
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	f04f 30ff 	mov.w	r0, #4294967295
 8001a2c:	f000 f92f 	bl	8001c8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a30:	4a06      	ldr	r2, [pc, #24]	@ (8001a4c <HAL_InitTick+0x5c>)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
 8001a38:	e000      	b.n	8001a3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20000010 	.word	0x20000010
 8001a48:	20000018 	.word	0x20000018
 8001a4c:	20000014 	.word	0x20000014

08001a50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a54:	4b06      	ldr	r3, [pc, #24]	@ (8001a70 <HAL_IncTick+0x20>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4b06      	ldr	r3, [pc, #24]	@ (8001a74 <HAL_IncTick+0x24>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4413      	add	r3, r2
 8001a60:	4a04      	ldr	r2, [pc, #16]	@ (8001a74 <HAL_IncTick+0x24>)
 8001a62:	6013      	str	r3, [r2, #0]
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	20000018 	.word	0x20000018
 8001a74:	20000394 	.word	0x20000394

08001a78 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return uwTick;  
 8001a7c:	4b03      	ldr	r3, [pc, #12]	@ (8001a8c <HAL_GetTick+0x14>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	20000394 	.word	0x20000394

08001a90 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a98:	f7ff ffee 	bl	8001a78 <HAL_GetTick>
 8001a9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa8:	d005      	beq.n	8001ab6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad4 <HAL_Delay+0x44>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001ab6:	bf00      	nop
 8001ab8:	f7ff ffde 	bl	8001a78 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d8f7      	bhi.n	8001ab8 <HAL_Delay+0x28>
  {
  }
}
 8001ac8:	bf00      	nop
 8001aca:	bf00      	nop
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000018 	.word	0x20000018

08001ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b1c <__NVIC_SetPriorityGrouping+0x44>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001af4:	4013      	ands	r3, r2
 8001af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b0a:	4a04      	ldr	r2, [pc, #16]	@ (8001b1c <__NVIC_SetPriorityGrouping+0x44>)
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	60d3      	str	r3, [r2, #12]
}
 8001b10:	bf00      	nop
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b24:	4b04      	ldr	r3, [pc, #16]	@ (8001b38 <__NVIC_GetPriorityGrouping+0x18>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	0a1b      	lsrs	r3, r3, #8
 8001b2a:	f003 0307 	and.w	r3, r3, #7
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	db0b      	blt.n	8001b66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b4e:	79fb      	ldrb	r3, [r7, #7]
 8001b50:	f003 021f 	and.w	r2, r3, #31
 8001b54:	4907      	ldr	r1, [pc, #28]	@ (8001b74 <__NVIC_EnableIRQ+0x38>)
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	095b      	lsrs	r3, r3, #5
 8001b5c:	2001      	movs	r0, #1
 8001b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	e000e100 	.word	0xe000e100

08001b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	6039      	str	r1, [r7, #0]
 8001b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	db0a      	blt.n	8001ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	490c      	ldr	r1, [pc, #48]	@ (8001bc4 <__NVIC_SetPriority+0x4c>)
 8001b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b96:	0112      	lsls	r2, r2, #4
 8001b98:	b2d2      	uxtb	r2, r2
 8001b9a:	440b      	add	r3, r1
 8001b9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ba0:	e00a      	b.n	8001bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	4908      	ldr	r1, [pc, #32]	@ (8001bc8 <__NVIC_SetPriority+0x50>)
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
 8001baa:	f003 030f 	and.w	r3, r3, #15
 8001bae:	3b04      	subs	r3, #4
 8001bb0:	0112      	lsls	r2, r2, #4
 8001bb2:	b2d2      	uxtb	r2, r2
 8001bb4:	440b      	add	r3, r1
 8001bb6:	761a      	strb	r2, [r3, #24]
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	e000e100 	.word	0xe000e100
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b089      	sub	sp, #36	@ 0x24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	f1c3 0307 	rsb	r3, r3, #7
 8001be6:	2b04      	cmp	r3, #4
 8001be8:	bf28      	it	cs
 8001bea:	2304      	movcs	r3, #4
 8001bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	3304      	adds	r3, #4
 8001bf2:	2b06      	cmp	r3, #6
 8001bf4:	d902      	bls.n	8001bfc <NVIC_EncodePriority+0x30>
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	3b03      	subs	r3, #3
 8001bfa:	e000      	b.n	8001bfe <NVIC_EncodePriority+0x32>
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c00:	f04f 32ff 	mov.w	r2, #4294967295
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	43da      	mvns	r2, r3
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	401a      	ands	r2, r3
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c14:	f04f 31ff 	mov.w	r1, #4294967295
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1e:	43d9      	mvns	r1, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c24:	4313      	orrs	r3, r2
         );
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3724      	adds	r7, #36	@ 0x24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
	...

08001c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c44:	d301      	bcc.n	8001c4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c46:	2301      	movs	r3, #1
 8001c48:	e00f      	b.n	8001c6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c74 <SysTick_Config+0x40>)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c52:	210f      	movs	r1, #15
 8001c54:	f04f 30ff 	mov.w	r0, #4294967295
 8001c58:	f7ff ff8e 	bl	8001b78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c5c:	4b05      	ldr	r3, [pc, #20]	@ (8001c74 <SysTick_Config+0x40>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c62:	4b04      	ldr	r3, [pc, #16]	@ (8001c74 <SysTick_Config+0x40>)
 8001c64:	2207      	movs	r2, #7
 8001c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	e000e010 	.word	0xe000e010

08001c78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7ff ff29 	bl	8001ad8 <__NVIC_SetPriorityGrouping>
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b086      	sub	sp, #24
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	4603      	mov	r3, r0
 8001c96:	60b9      	str	r1, [r7, #8]
 8001c98:	607a      	str	r2, [r7, #4]
 8001c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ca0:	f7ff ff3e 	bl	8001b20 <__NVIC_GetPriorityGrouping>
 8001ca4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	68b9      	ldr	r1, [r7, #8]
 8001caa:	6978      	ldr	r0, [r7, #20]
 8001cac:	f7ff ff8e 	bl	8001bcc <NVIC_EncodePriority>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cb6:	4611      	mov	r1, r2
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff ff5d 	bl	8001b78 <__NVIC_SetPriority>
}
 8001cbe:	bf00      	nop
 8001cc0:	3718      	adds	r7, #24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	4603      	mov	r3, r0
 8001cce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff ff31 	bl	8001b3c <__NVIC_EnableIRQ>
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff ffa2 	bl	8001c34 <SysTick_Config>
 8001cf0:	4603      	mov	r3, r0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
	...

08001cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b087      	sub	sp, #28
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d0a:	e14e      	b.n	8001faa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	2101      	movs	r1, #1
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	fa01 f303 	lsl.w	r3, r1, r3
 8001d18:	4013      	ands	r3, r2
 8001d1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f000 8140 	beq.w	8001fa4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 0303 	and.w	r3, r3, #3
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d005      	beq.n	8001d3c <HAL_GPIO_Init+0x40>
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 0303 	and.w	r3, r3, #3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d130      	bne.n	8001d9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	2203      	movs	r2, #3
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	4013      	ands	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	68da      	ldr	r2, [r3, #12]
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d72:	2201      	movs	r2, #1
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	091b      	lsrs	r3, r3, #4
 8001d88:	f003 0201 	and.w	r2, r3, #1
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	2b03      	cmp	r3, #3
 8001da8:	d017      	beq.n	8001dda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	2203      	movs	r2, #3
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d123      	bne.n	8001e2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	08da      	lsrs	r2, r3, #3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3208      	adds	r2, #8
 8001dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	220f      	movs	r2, #15
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43db      	mvns	r3, r3
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	4013      	ands	r3, r2
 8001e08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	691a      	ldr	r2, [r3, #16]
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	08da      	lsrs	r2, r3, #3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3208      	adds	r2, #8
 8001e28:	6939      	ldr	r1, [r7, #16]
 8001e2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	2203      	movs	r2, #3
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4013      	ands	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f003 0203 	and.w	r2, r3, #3
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f000 809a 	beq.w	8001fa4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e70:	4b55      	ldr	r3, [pc, #340]	@ (8001fc8 <HAL_GPIO_Init+0x2cc>)
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	4a54      	ldr	r2, [pc, #336]	@ (8001fc8 <HAL_GPIO_Init+0x2cc>)
 8001e76:	f043 0301 	orr.w	r3, r3, #1
 8001e7a:	6193      	str	r3, [r2, #24]
 8001e7c:	4b52      	ldr	r3, [pc, #328]	@ (8001fc8 <HAL_GPIO_Init+0x2cc>)
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	60bb      	str	r3, [r7, #8]
 8001e86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e88:	4a50      	ldr	r2, [pc, #320]	@ (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	089b      	lsrs	r3, r3, #2
 8001e8e:	3302      	adds	r3, #2
 8001e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	f003 0303 	and.w	r3, r3, #3
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	220f      	movs	r2, #15
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001eb2:	d013      	beq.n	8001edc <HAL_GPIO_Init+0x1e0>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a46      	ldr	r2, [pc, #280]	@ (8001fd0 <HAL_GPIO_Init+0x2d4>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d00d      	beq.n	8001ed8 <HAL_GPIO_Init+0x1dc>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a45      	ldr	r2, [pc, #276]	@ (8001fd4 <HAL_GPIO_Init+0x2d8>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d007      	beq.n	8001ed4 <HAL_GPIO_Init+0x1d8>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a44      	ldr	r2, [pc, #272]	@ (8001fd8 <HAL_GPIO_Init+0x2dc>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d101      	bne.n	8001ed0 <HAL_GPIO_Init+0x1d4>
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e006      	b.n	8001ede <HAL_GPIO_Init+0x1e2>
 8001ed0:	2305      	movs	r3, #5
 8001ed2:	e004      	b.n	8001ede <HAL_GPIO_Init+0x1e2>
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	e002      	b.n	8001ede <HAL_GPIO_Init+0x1e2>
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e000      	b.n	8001ede <HAL_GPIO_Init+0x1e2>
 8001edc:	2300      	movs	r3, #0
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	f002 0203 	and.w	r2, r2, #3
 8001ee4:	0092      	lsls	r2, r2, #2
 8001ee6:	4093      	lsls	r3, r2
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001eee:	4937      	ldr	r1, [pc, #220]	@ (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	089b      	lsrs	r3, r3, #2
 8001ef4:	3302      	adds	r3, #2
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001efc:	4b37      	ldr	r3, [pc, #220]	@ (8001fdc <HAL_GPIO_Init+0x2e0>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	43db      	mvns	r3, r3
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f20:	4a2e      	ldr	r2, [pc, #184]	@ (8001fdc <HAL_GPIO_Init+0x2e0>)
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f26:	4b2d      	ldr	r3, [pc, #180]	@ (8001fdc <HAL_GPIO_Init+0x2e0>)
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	4013      	ands	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f4a:	4a24      	ldr	r2, [pc, #144]	@ (8001fdc <HAL_GPIO_Init+0x2e0>)
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f50:	4b22      	ldr	r3, [pc, #136]	@ (8001fdc <HAL_GPIO_Init+0x2e0>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f74:	4a19      	ldr	r2, [pc, #100]	@ (8001fdc <HAL_GPIO_Init+0x2e0>)
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f7a:	4b18      	ldr	r3, [pc, #96]	@ (8001fdc <HAL_GPIO_Init+0x2e0>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	43db      	mvns	r3, r3
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	4013      	ands	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f9e:	4a0f      	ldr	r2, [pc, #60]	@ (8001fdc <HAL_GPIO_Init+0x2e0>)
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f47f aea9 	bne.w	8001d0c <HAL_GPIO_Init+0x10>
  }
}
 8001fba:	bf00      	nop
 8001fbc:	bf00      	nop
 8001fbe:	371c      	adds	r7, #28
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	40010000 	.word	0x40010000
 8001fd0:	48000400 	.word	0x48000400
 8001fd4:	48000800 	.word	0x48000800
 8001fd8:	48000c00 	.word	0x48000c00
 8001fdc:	40010400 	.word	0x40010400

08001fe0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	691a      	ldr	r2, [r3, #16]
 8001ff0:	887b      	ldrh	r3, [r7, #2]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d002      	beq.n	8001ffe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	73fb      	strb	r3, [r7, #15]
 8001ffc:	e001      	b.n	8002002 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ffe:	2300      	movs	r3, #0
 8002000:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002002:	7bfb      	ldrb	r3, [r7, #15]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800201a:	4b08      	ldr	r3, [pc, #32]	@ (800203c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800201c:	695a      	ldr	r2, [r3, #20]
 800201e:	88fb      	ldrh	r3, [r7, #6]
 8002020:	4013      	ands	r3, r2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d006      	beq.n	8002034 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002026:	4a05      	ldr	r2, [pc, #20]	@ (800203c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002028:	88fb      	ldrh	r3, [r7, #6]
 800202a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800202c:	88fb      	ldrh	r3, [r7, #6]
 800202e:	4618      	mov	r0, r3
 8002030:	f000 f806 	bl	8002040 <HAL_GPIO_EXTI_Callback>
  }
}
 8002034:	bf00      	nop
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40010400 	.word	0x40010400

08002040 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b082      	sub	sp, #8
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d101      	bne.n	8002068 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e08d      	b.n	8002184 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b00      	cmp	r3, #0
 8002072:	d106      	bne.n	8002082 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f7ff fa25 	bl	80014cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2224      	movs	r2, #36	@ 0x24
 8002086:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 0201 	bic.w	r2, r2, #1
 8002098:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685a      	ldr	r2, [r3, #4]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80020a6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	689a      	ldr	r2, [r3, #8]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020b6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d107      	bne.n	80020d0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80020cc:	609a      	str	r2, [r3, #8]
 80020ce:	e006      	b.n	80020de <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80020dc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d108      	bne.n	80020f8 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	e007      	b.n	8002108 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002106:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	6812      	ldr	r2, [r2, #0]
 8002112:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002116:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800211a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68da      	ldr	r2, [r3, #12]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800212a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	691a      	ldr	r2, [r3, #16]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69d9      	ldr	r1, [r3, #28]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a1a      	ldr	r2, [r3, #32]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	430a      	orrs	r2, r1
 8002154:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f042 0201 	orr.w	r2, r2, #1
 8002164:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2220      	movs	r2, #32
 8002170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b088      	sub	sp, #32
 8002190:	af02      	add	r7, sp, #8
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	607a      	str	r2, [r7, #4]
 8002196:	461a      	mov	r2, r3
 8002198:	460b      	mov	r3, r1
 800219a:	817b      	strh	r3, [r7, #10]
 800219c:	4613      	mov	r3, r2
 800219e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b20      	cmp	r3, #32
 80021aa:	f040 80fd 	bne.w	80023a8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d101      	bne.n	80021bc <HAL_I2C_Master_Transmit+0x30>
 80021b8:	2302      	movs	r3, #2
 80021ba:	e0f6      	b.n	80023aa <HAL_I2C_Master_Transmit+0x21e>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80021c4:	f7ff fc58 	bl	8001a78 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	2319      	movs	r3, #25
 80021d0:	2201      	movs	r2, #1
 80021d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f000 f914 	bl	8002404 <I2C_WaitOnFlagUntilTimeout>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e0e1      	b.n	80023aa <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2221      	movs	r2, #33	@ 0x21
 80021ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2210      	movs	r2, #16
 80021f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	893a      	ldrh	r2, [r7, #8]
 8002206:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002212:	b29b      	uxth	r3, r3
 8002214:	2bff      	cmp	r3, #255	@ 0xff
 8002216:	d906      	bls.n	8002226 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	22ff      	movs	r2, #255	@ 0xff
 800221c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800221e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	e007      	b.n	8002236 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800222a:	b29a      	uxth	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002230:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002234:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800223a:	2b00      	cmp	r3, #0
 800223c:	d024      	beq.n	8002288 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002242:	781a      	ldrb	r2, [r3, #0]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224e:	1c5a      	adds	r2, r3, #1
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002258:	b29b      	uxth	r3, r3
 800225a:	3b01      	subs	r3, #1
 800225c:	b29a      	uxth	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002266:	3b01      	subs	r3, #1
 8002268:	b29a      	uxth	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002272:	b2db      	uxtb	r3, r3
 8002274:	3301      	adds	r3, #1
 8002276:	b2da      	uxtb	r2, r3
 8002278:	8979      	ldrh	r1, [r7, #10]
 800227a:	4b4e      	ldr	r3, [pc, #312]	@ (80023b4 <HAL_I2C_Master_Transmit+0x228>)
 800227c:	9300      	str	r3, [sp, #0]
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	68f8      	ldr	r0, [r7, #12]
 8002282:	f000 fa83 	bl	800278c <I2C_TransferConfig>
 8002286:	e066      	b.n	8002356 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800228c:	b2da      	uxtb	r2, r3
 800228e:	8979      	ldrh	r1, [r7, #10]
 8002290:	4b48      	ldr	r3, [pc, #288]	@ (80023b4 <HAL_I2C_Master_Transmit+0x228>)
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f000 fa78 	bl	800278c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800229c:	e05b      	b.n	8002356 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	6a39      	ldr	r1, [r7, #32]
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f000 f907 	bl	80024b6 <I2C_WaitOnTXISFlagUntilTimeout>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e07b      	b.n	80023aa <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b6:	781a      	ldrb	r2, [r3, #0]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c2:	1c5a      	adds	r2, r3, #1
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	3b01      	subs	r3, #1
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022da:	3b01      	subs	r3, #1
 80022dc:	b29a      	uxth	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d034      	beq.n	8002356 <HAL_I2C_Master_Transmit+0x1ca>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d130      	bne.n	8002356 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	6a3b      	ldr	r3, [r7, #32]
 80022fa:	2200      	movs	r2, #0
 80022fc:	2180      	movs	r1, #128	@ 0x80
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f000 f880 	bl	8002404 <I2C_WaitOnFlagUntilTimeout>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e04d      	b.n	80023aa <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002312:	b29b      	uxth	r3, r3
 8002314:	2bff      	cmp	r3, #255	@ 0xff
 8002316:	d90e      	bls.n	8002336 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	22ff      	movs	r2, #255	@ 0xff
 800231c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002322:	b2da      	uxtb	r2, r3
 8002324:	8979      	ldrh	r1, [r7, #10]
 8002326:	2300      	movs	r3, #0
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f000 fa2c 	bl	800278c <I2C_TransferConfig>
 8002334:	e00f      	b.n	8002356 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800233a:	b29a      	uxth	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002344:	b2da      	uxtb	r2, r3
 8002346:	8979      	ldrh	r1, [r7, #10]
 8002348:	2300      	movs	r3, #0
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f000 fa1b 	bl	800278c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800235a:	b29b      	uxth	r3, r3
 800235c:	2b00      	cmp	r3, #0
 800235e:	d19e      	bne.n	800229e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	6a39      	ldr	r1, [r7, #32]
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f000 f8ed 	bl	8002544 <I2C_WaitOnSTOPFlagUntilTimeout>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e01a      	b.n	80023aa <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2220      	movs	r2, #32
 800237a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6859      	ldr	r1, [r3, #4]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	4b0c      	ldr	r3, [pc, #48]	@ (80023b8 <HAL_I2C_Master_Transmit+0x22c>)
 8002388:	400b      	ands	r3, r1
 800238a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2220      	movs	r2, #32
 8002390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80023a4:	2300      	movs	r3, #0
 80023a6:	e000      	b.n	80023aa <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80023a8:	2302      	movs	r3, #2
  }
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3718      	adds	r7, #24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	80002000 	.word	0x80002000
 80023b8:	fe00e800 	.word	0xfe00e800

080023bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d103      	bne.n	80023da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2200      	movs	r2, #0
 80023d8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d007      	beq.n	80023f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	699a      	ldr	r2, [r3, #24]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 0201 	orr.w	r2, r2, #1
 80023f6:	619a      	str	r2, [r3, #24]
  }
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	603b      	str	r3, [r7, #0]
 8002410:	4613      	mov	r3, r2
 8002412:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002414:	e03b      	b.n	800248e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	6839      	ldr	r1, [r7, #0]
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 f8d6 	bl	80025cc <I2C_IsErrorOccurred>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e041      	b.n	80024ae <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002430:	d02d      	beq.n	800248e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002432:	f7ff fb21 	bl	8001a78 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	429a      	cmp	r2, r3
 8002440:	d302      	bcc.n	8002448 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d122      	bne.n	800248e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	699a      	ldr	r2, [r3, #24]
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	4013      	ands	r3, r2
 8002452:	68ba      	ldr	r2, [r7, #8]
 8002454:	429a      	cmp	r2, r3
 8002456:	bf0c      	ite	eq
 8002458:	2301      	moveq	r3, #1
 800245a:	2300      	movne	r3, #0
 800245c:	b2db      	uxtb	r3, r3
 800245e:	461a      	mov	r2, r3
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	429a      	cmp	r2, r3
 8002464:	d113      	bne.n	800248e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800246a:	f043 0220 	orr.w	r2, r3, #32
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2220      	movs	r2, #32
 8002476:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e00f      	b.n	80024ae <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	699a      	ldr	r2, [r3, #24]
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	4013      	ands	r3, r2
 8002498:	68ba      	ldr	r2, [r7, #8]
 800249a:	429a      	cmp	r2, r3
 800249c:	bf0c      	ite	eq
 800249e:	2301      	moveq	r3, #1
 80024a0:	2300      	movne	r3, #0
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	461a      	mov	r2, r3
 80024a6:	79fb      	ldrb	r3, [r7, #7]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d0b4      	beq.n	8002416 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b084      	sub	sp, #16
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	60f8      	str	r0, [r7, #12]
 80024be:	60b9      	str	r1, [r7, #8]
 80024c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024c2:	e033      	b.n	800252c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	68b9      	ldr	r1, [r7, #8]
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f000 f87f 	bl	80025cc <I2C_IsErrorOccurred>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e031      	b.n	800253c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024de:	d025      	beq.n	800252c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024e0:	f7ff faca 	bl	8001a78 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d302      	bcc.n	80024f6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d11a      	bne.n	800252c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b02      	cmp	r3, #2
 8002502:	d013      	beq.n	800252c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002508:	f043 0220 	orr.w	r2, r3, #32
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2220      	movs	r2, #32
 8002514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e007      	b.n	800253c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b02      	cmp	r3, #2
 8002538:	d1c4      	bne.n	80024c4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002550:	e02f      	b.n	80025b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	68b9      	ldr	r1, [r7, #8]
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f000 f838 	bl	80025cc <I2C_IsErrorOccurred>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e02d      	b.n	80025c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002566:	f7ff fa87 	bl	8001a78 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	68ba      	ldr	r2, [r7, #8]
 8002572:	429a      	cmp	r2, r3
 8002574:	d302      	bcc.n	800257c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d11a      	bne.n	80025b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	f003 0320 	and.w	r3, r3, #32
 8002586:	2b20      	cmp	r3, #32
 8002588:	d013      	beq.n	80025b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800258e:	f043 0220 	orr.w	r2, r3, #32
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2220      	movs	r2, #32
 800259a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e007      	b.n	80025c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	f003 0320 	and.w	r3, r3, #32
 80025bc:	2b20      	cmp	r3, #32
 80025be:	d1c8      	bne.n	8002552 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
	...

080025cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08a      	sub	sp, #40	@ 0x28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025d8:	2300      	movs	r3, #0
 80025da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	f003 0310 	and.w	r3, r3, #16
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d068      	beq.n	80026ca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2210      	movs	r2, #16
 80025fe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002600:	e049      	b.n	8002696 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002608:	d045      	beq.n	8002696 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800260a:	f7ff fa35 	bl	8001a78 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	68ba      	ldr	r2, [r7, #8]
 8002616:	429a      	cmp	r2, r3
 8002618:	d302      	bcc.n	8002620 <I2C_IsErrorOccurred+0x54>
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d13a      	bne.n	8002696 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800262a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002632:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800263e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002642:	d121      	bne.n	8002688 <I2C_IsErrorOccurred+0xbc>
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800264a:	d01d      	beq.n	8002688 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800264c:	7cfb      	ldrb	r3, [r7, #19]
 800264e:	2b20      	cmp	r3, #32
 8002650:	d01a      	beq.n	8002688 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002660:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002662:	f7ff fa09 	bl	8001a78 <HAL_GetTick>
 8002666:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002668:	e00e      	b.n	8002688 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800266a:	f7ff fa05 	bl	8001a78 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b19      	cmp	r3, #25
 8002676:	d907      	bls.n	8002688 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002678:	6a3b      	ldr	r3, [r7, #32]
 800267a:	f043 0320 	orr.w	r3, r3, #32
 800267e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002686:	e006      	b.n	8002696 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	f003 0320 	and.w	r3, r3, #32
 8002692:	2b20      	cmp	r3, #32
 8002694:	d1e9      	bne.n	800266a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	f003 0320 	and.w	r3, r3, #32
 80026a0:	2b20      	cmp	r3, #32
 80026a2:	d003      	beq.n	80026ac <I2C_IsErrorOccurred+0xe0>
 80026a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0aa      	beq.n	8002602 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80026ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d103      	bne.n	80026bc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2220      	movs	r2, #32
 80026ba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80026bc:	6a3b      	ldr	r3, [r7, #32]
 80026be:	f043 0304 	orr.w	r3, r3, #4
 80026c2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00b      	beq.n	80026f4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00b      	beq.n	8002716 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80026fe:	6a3b      	ldr	r3, [r7, #32]
 8002700:	f043 0308 	orr.w	r3, r3, #8
 8002704:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800270e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00b      	beq.n	8002738 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002720:	6a3b      	ldr	r3, [r7, #32]
 8002722:	f043 0302 	orr.w	r3, r3, #2
 8002726:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002730:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002738:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800273c:	2b00      	cmp	r3, #0
 800273e:	d01c      	beq.n	800277a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002740:	68f8      	ldr	r0, [r7, #12]
 8002742:	f7ff fe3b 	bl	80023bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6859      	ldr	r1, [r3, #4]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	4b0d      	ldr	r3, [pc, #52]	@ (8002788 <I2C_IsErrorOccurred+0x1bc>)
 8002752:	400b      	ands	r3, r1
 8002754:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800275a:	6a3b      	ldr	r3, [r7, #32]
 800275c:	431a      	orrs	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2220      	movs	r2, #32
 8002766:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800277a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800277e:	4618      	mov	r0, r3
 8002780:	3728      	adds	r7, #40	@ 0x28
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	fe00e800 	.word	0xfe00e800

0800278c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800278c:	b480      	push	{r7}
 800278e:	b087      	sub	sp, #28
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	607b      	str	r3, [r7, #4]
 8002796:	460b      	mov	r3, r1
 8002798:	817b      	strh	r3, [r7, #10]
 800279a:	4613      	mov	r3, r2
 800279c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800279e:	897b      	ldrh	r3, [r7, #10]
 80027a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80027a4:	7a7b      	ldrb	r3, [r7, #9]
 80027a6:	041b      	lsls	r3, r3, #16
 80027a8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027ac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80027ba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	0d5b      	lsrs	r3, r3, #21
 80027c6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80027ca:	4b08      	ldr	r3, [pc, #32]	@ (80027ec <I2C_TransferConfig+0x60>)
 80027cc:	430b      	orrs	r3, r1
 80027ce:	43db      	mvns	r3, r3
 80027d0:	ea02 0103 	and.w	r1, r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	430a      	orrs	r2, r1
 80027dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80027de:	bf00      	nop
 80027e0:	371c      	adds	r7, #28
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	03ff63ff 	.word	0x03ff63ff

080027f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b20      	cmp	r3, #32
 8002804:	d138      	bne.n	8002878 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800280c:	2b01      	cmp	r3, #1
 800280e:	d101      	bne.n	8002814 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002810:	2302      	movs	r3, #2
 8002812:	e032      	b.n	800287a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2224      	movs	r2, #36	@ 0x24
 8002820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0201 	bic.w	r2, r2, #1
 8002832:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002842:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6819      	ldr	r1, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	430a      	orrs	r2, r1
 8002852:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f042 0201 	orr.w	r2, r2, #1
 8002862:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2220      	movs	r2, #32
 8002868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002874:	2300      	movs	r3, #0
 8002876:	e000      	b.n	800287a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002878:	2302      	movs	r3, #2
  }
}
 800287a:	4618      	mov	r0, r3
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002886:	b480      	push	{r7}
 8002888:	b085      	sub	sp, #20
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
 800288e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b20      	cmp	r3, #32
 800289a:	d139      	bne.n	8002910 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d101      	bne.n	80028aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80028a6:	2302      	movs	r3, #2
 80028a8:	e033      	b.n	8002912 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2224      	movs	r2, #36	@ 0x24
 80028b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 0201 	bic.w	r2, r2, #1
 80028c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80028d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	021b      	lsls	r3, r3, #8
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f042 0201 	orr.w	r2, r2, #1
 80028fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2220      	movs	r2, #32
 8002900:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800290c:	2300      	movs	r3, #0
 800290e:	e000      	b.n	8002912 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002910:	2302      	movs	r3, #2
  }
}
 8002912:	4618      	mov	r0, r3
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
	...

08002920 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002926:	af00      	add	r7, sp, #0
 8002928:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800292c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002930:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002932:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002936:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d102      	bne.n	8002946 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	f001 b823 	b.w	800398c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002946:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800294a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 817d 	beq.w	8002c56 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800295c:	4bbc      	ldr	r3, [pc, #752]	@ (8002c50 <HAL_RCC_OscConfig+0x330>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f003 030c 	and.w	r3, r3, #12
 8002964:	2b04      	cmp	r3, #4
 8002966:	d00c      	beq.n	8002982 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002968:	4bb9      	ldr	r3, [pc, #740]	@ (8002c50 <HAL_RCC_OscConfig+0x330>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f003 030c 	and.w	r3, r3, #12
 8002970:	2b08      	cmp	r3, #8
 8002972:	d15c      	bne.n	8002a2e <HAL_RCC_OscConfig+0x10e>
 8002974:	4bb6      	ldr	r3, [pc, #728]	@ (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800297c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002980:	d155      	bne.n	8002a2e <HAL_RCC_OscConfig+0x10e>
 8002982:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002986:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800298e:	fa93 f3a3 	rbit	r3, r3
 8002992:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002996:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800299a:	fab3 f383 	clz	r3, r3
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	095b      	lsrs	r3, r3, #5
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d102      	bne.n	80029b4 <HAL_RCC_OscConfig+0x94>
 80029ae:	4ba8      	ldr	r3, [pc, #672]	@ (8002c50 <HAL_RCC_OscConfig+0x330>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	e015      	b.n	80029e0 <HAL_RCC_OscConfig+0xc0>
 80029b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029b8:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029bc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80029c0:	fa93 f3a3 	rbit	r3, r3
 80029c4:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80029c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029cc:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80029d0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80029d4:	fa93 f3a3 	rbit	r3, r3
 80029d8:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80029dc:	4b9c      	ldr	r3, [pc, #624]	@ (8002c50 <HAL_RCC_OscConfig+0x330>)
 80029de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80029e4:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80029e8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80029ec:	fa92 f2a2 	rbit	r2, r2
 80029f0:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80029f4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80029f8:	fab2 f282 	clz	r2, r2
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	f042 0220 	orr.w	r2, r2, #32
 8002a02:	b2d2      	uxtb	r2, r2
 8002a04:	f002 021f 	and.w	r2, r2, #31
 8002a08:	2101      	movs	r1, #1
 8002a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a0e:	4013      	ands	r3, r2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 811f 	beq.w	8002c54 <HAL_RCC_OscConfig+0x334>
 8002a16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a1a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f040 8116 	bne.w	8002c54 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	f000 bfaf 	b.w	800398c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a32:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a3e:	d106      	bne.n	8002a4e <HAL_RCC_OscConfig+0x12e>
 8002a40:	4b83      	ldr	r3, [pc, #524]	@ (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a82      	ldr	r2, [pc, #520]	@ (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002a46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a4a:	6013      	str	r3, [r2, #0]
 8002a4c:	e036      	b.n	8002abc <HAL_RCC_OscConfig+0x19c>
 8002a4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a52:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10c      	bne.n	8002a78 <HAL_RCC_OscConfig+0x158>
 8002a5e:	4b7c      	ldr	r3, [pc, #496]	@ (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a7b      	ldr	r2, [pc, #492]	@ (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002a64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a68:	6013      	str	r3, [r2, #0]
 8002a6a:	4b79      	ldr	r3, [pc, #484]	@ (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a78      	ldr	r2, [pc, #480]	@ (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002a70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a74:	6013      	str	r3, [r2, #0]
 8002a76:	e021      	b.n	8002abc <HAL_RCC_OscConfig+0x19c>
 8002a78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a7c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a88:	d10c      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x184>
 8002a8a:	4b71      	ldr	r3, [pc, #452]	@ (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a70      	ldr	r2, [pc, #448]	@ (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002a90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a94:	6013      	str	r3, [r2, #0]
 8002a96:	4b6e      	ldr	r3, [pc, #440]	@ (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a6d      	ldr	r2, [pc, #436]	@ (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002a9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aa0:	6013      	str	r3, [r2, #0]
 8002aa2:	e00b      	b.n	8002abc <HAL_RCC_OscConfig+0x19c>
 8002aa4:	4b6a      	ldr	r3, [pc, #424]	@ (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a69      	ldr	r2, [pc, #420]	@ (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002aaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aae:	6013      	str	r3, [r2, #0]
 8002ab0:	4b67      	ldr	r3, [pc, #412]	@ (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a66      	ldr	r2, [pc, #408]	@ (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002ab6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002aba:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002abc:	4b64      	ldr	r3, [pc, #400]	@ (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac0:	f023 020f 	bic.w	r2, r3, #15
 8002ac4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	495f      	ldr	r1, [pc, #380]	@ (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ad6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ada:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d059      	beq.n	8002b9a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae6:	f7fe ffc7 	bl	8001a78 <HAL_GetTick>
 8002aea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aee:	e00a      	b.n	8002b06 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002af0:	f7fe ffc2 	bl	8001a78 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b64      	cmp	r3, #100	@ 0x64
 8002afe:	d902      	bls.n	8002b06 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	f000 bf43 	b.w	800398c <HAL_RCC_OscConfig+0x106c>
 8002b06:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b0a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002b12:	fa93 f3a3 	rbit	r3, r3
 8002b16:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002b1a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1e:	fab3 f383 	clz	r3, r3
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	095b      	lsrs	r3, r3, #5
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	f043 0301 	orr.w	r3, r3, #1
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d102      	bne.n	8002b38 <HAL_RCC_OscConfig+0x218>
 8002b32:	4b47      	ldr	r3, [pc, #284]	@ (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	e015      	b.n	8002b64 <HAL_RCC_OscConfig+0x244>
 8002b38:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b3c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b40:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002b44:	fa93 f3a3 	rbit	r3, r3
 8002b48:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002b4c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b50:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002b54:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002b58:	fa93 f3a3 	rbit	r3, r3
 8002b5c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002b60:	4b3b      	ldr	r3, [pc, #236]	@ (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b64:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002b68:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002b6c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002b70:	fa92 f2a2 	rbit	r2, r2
 8002b74:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002b78:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002b7c:	fab2 f282 	clz	r2, r2
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	f042 0220 	orr.w	r2, r2, #32
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	f002 021f 	and.w	r2, r2, #31
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b92:	4013      	ands	r3, r2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0ab      	beq.n	8002af0 <HAL_RCC_OscConfig+0x1d0>
 8002b98:	e05d      	b.n	8002c56 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9a:	f7fe ff6d 	bl	8001a78 <HAL_GetTick>
 8002b9e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ba2:	e00a      	b.n	8002bba <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ba4:	f7fe ff68 	bl	8001a78 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b64      	cmp	r3, #100	@ 0x64
 8002bb2:	d902      	bls.n	8002bba <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	f000 bee9 	b.w	800398c <HAL_RCC_OscConfig+0x106c>
 8002bba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bbe:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002bc6:	fa93 f3a3 	rbit	r3, r3
 8002bca:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002bce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bd2:	fab3 f383 	clz	r3, r3
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	095b      	lsrs	r3, r3, #5
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d102      	bne.n	8002bec <HAL_RCC_OscConfig+0x2cc>
 8002be6:	4b1a      	ldr	r3, [pc, #104]	@ (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	e015      	b.n	8002c18 <HAL_RCC_OscConfig+0x2f8>
 8002bec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bf0:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002bf8:	fa93 f3a3 	rbit	r3, r3
 8002bfc:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002c00:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c04:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002c08:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002c0c:	fa93 f3a3 	rbit	r3, r3
 8002c10:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002c14:	4b0e      	ldr	r3, [pc, #56]	@ (8002c50 <HAL_RCC_OscConfig+0x330>)
 8002c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c18:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c1c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002c20:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002c24:	fa92 f2a2 	rbit	r2, r2
 8002c28:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002c2c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002c30:	fab2 f282 	clz	r2, r2
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	f042 0220 	orr.w	r2, r2, #32
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	f002 021f 	and.w	r2, r2, #31
 8002c40:	2101      	movs	r1, #1
 8002c42:	fa01 f202 	lsl.w	r2, r1, r2
 8002c46:	4013      	ands	r3, r2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1ab      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x284>
 8002c4c:	e003      	b.n	8002c56 <HAL_RCC_OscConfig+0x336>
 8002c4e:	bf00      	nop
 8002c50:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 817d 	beq.w	8002f66 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002c6c:	4ba6      	ldr	r3, [pc, #664]	@ (8002f08 <HAL_RCC_OscConfig+0x5e8>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f003 030c 	and.w	r3, r3, #12
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00b      	beq.n	8002c90 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002c78:	4ba3      	ldr	r3, [pc, #652]	@ (8002f08 <HAL_RCC_OscConfig+0x5e8>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f003 030c 	and.w	r3, r3, #12
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d172      	bne.n	8002d6a <HAL_RCC_OscConfig+0x44a>
 8002c84:	4ba0      	ldr	r3, [pc, #640]	@ (8002f08 <HAL_RCC_OscConfig+0x5e8>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d16c      	bne.n	8002d6a <HAL_RCC_OscConfig+0x44a>
 8002c90:	2302      	movs	r3, #2
 8002c92:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c96:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002c9a:	fa93 f3a3 	rbit	r3, r3
 8002c9e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002ca2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ca6:	fab3 f383 	clz	r3, r3
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	095b      	lsrs	r3, r3, #5
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	f043 0301 	orr.w	r3, r3, #1
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d102      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x3a0>
 8002cba:	4b93      	ldr	r3, [pc, #588]	@ (8002f08 <HAL_RCC_OscConfig+0x5e8>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	e013      	b.n	8002ce8 <HAL_RCC_OscConfig+0x3c8>
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc6:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002cca:	fa93 f3a3 	rbit	r3, r3
 8002cce:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002cd8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002cdc:	fa93 f3a3 	rbit	r3, r3
 8002ce0:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002ce4:	4b88      	ldr	r3, [pc, #544]	@ (8002f08 <HAL_RCC_OscConfig+0x5e8>)
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce8:	2202      	movs	r2, #2
 8002cea:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002cee:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002cf2:	fa92 f2a2 	rbit	r2, r2
 8002cf6:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002cfa:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002cfe:	fab2 f282 	clz	r2, r2
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	f042 0220 	orr.w	r2, r2, #32
 8002d08:	b2d2      	uxtb	r2, r2
 8002d0a:	f002 021f 	and.w	r2, r2, #31
 8002d0e:	2101      	movs	r1, #1
 8002d10:	fa01 f202 	lsl.w	r2, r1, r2
 8002d14:	4013      	ands	r3, r2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00a      	beq.n	8002d30 <HAL_RCC_OscConfig+0x410>
 8002d1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d002      	beq.n	8002d30 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	f000 be2e 	b.w	800398c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d30:	4b75      	ldr	r3, [pc, #468]	@ (8002f08 <HAL_RCC_OscConfig+0x5e8>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d3c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	21f8      	movs	r1, #248	@ 0xf8
 8002d46:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4a:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002d4e:	fa91 f1a1 	rbit	r1, r1
 8002d52:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002d56:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002d5a:	fab1 f181 	clz	r1, r1
 8002d5e:	b2c9      	uxtb	r1, r1
 8002d60:	408b      	lsls	r3, r1
 8002d62:	4969      	ldr	r1, [pc, #420]	@ (8002f08 <HAL_RCC_OscConfig+0x5e8>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d68:	e0fd      	b.n	8002f66 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d6e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 8088 	beq.w	8002e8c <HAL_RCC_OscConfig+0x56c>
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d82:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002d86:	fa93 f3a3 	rbit	r3, r3
 8002d8a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002d8e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d92:	fab3 f383 	clz	r3, r3
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002d9c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	461a      	mov	r2, r3
 8002da4:	2301      	movs	r3, #1
 8002da6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da8:	f7fe fe66 	bl	8001a78 <HAL_GetTick>
 8002dac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db0:	e00a      	b.n	8002dc8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002db2:	f7fe fe61 	bl	8001a78 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d902      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	f000 bde2 	b.w	800398c <HAL_RCC_OscConfig+0x106c>
 8002dc8:	2302      	movs	r3, #2
 8002dca:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dce:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002dd2:	fa93 f3a3 	rbit	r3, r3
 8002dd6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002dda:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dde:	fab3 f383 	clz	r3, r3
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	095b      	lsrs	r3, r3, #5
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	f043 0301 	orr.w	r3, r3, #1
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d102      	bne.n	8002df8 <HAL_RCC_OscConfig+0x4d8>
 8002df2:	4b45      	ldr	r3, [pc, #276]	@ (8002f08 <HAL_RCC_OscConfig+0x5e8>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	e013      	b.n	8002e20 <HAL_RCC_OscConfig+0x500>
 8002df8:	2302      	movs	r3, #2
 8002dfa:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfe:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002e02:	fa93 f3a3 	rbit	r3, r3
 8002e06:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002e10:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002e14:	fa93 f3a3 	rbit	r3, r3
 8002e18:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002e1c:	4b3a      	ldr	r3, [pc, #232]	@ (8002f08 <HAL_RCC_OscConfig+0x5e8>)
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e20:	2202      	movs	r2, #2
 8002e22:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002e26:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002e2a:	fa92 f2a2 	rbit	r2, r2
 8002e2e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002e32:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002e36:	fab2 f282 	clz	r2, r2
 8002e3a:	b2d2      	uxtb	r2, r2
 8002e3c:	f042 0220 	orr.w	r2, r2, #32
 8002e40:	b2d2      	uxtb	r2, r2
 8002e42:	f002 021f 	and.w	r2, r2, #31
 8002e46:	2101      	movs	r1, #1
 8002e48:	fa01 f202 	lsl.w	r2, r1, r2
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d0af      	beq.n	8002db2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e52:	4b2d      	ldr	r3, [pc, #180]	@ (8002f08 <HAL_RCC_OscConfig+0x5e8>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e5e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	21f8      	movs	r1, #248	@ 0xf8
 8002e68:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002e70:	fa91 f1a1 	rbit	r1, r1
 8002e74:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002e78:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002e7c:	fab1 f181 	clz	r1, r1
 8002e80:	b2c9      	uxtb	r1, r1
 8002e82:	408b      	lsls	r3, r1
 8002e84:	4920      	ldr	r1, [pc, #128]	@ (8002f08 <HAL_RCC_OscConfig+0x5e8>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	600b      	str	r3, [r1, #0]
 8002e8a:	e06c      	b.n	8002f66 <HAL_RCC_OscConfig+0x646>
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e92:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002e96:	fa93 f3a3 	rbit	r3, r3
 8002e9a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002e9e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ea2:	fab3 f383 	clz	r3, r3
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002eac:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb8:	f7fe fdde 	bl	8001a78 <HAL_GetTick>
 8002ebc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ec0:	e00a      	b.n	8002ed8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ec2:	f7fe fdd9 	bl	8001a78 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d902      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	f000 bd5a 	b.w	800398c <HAL_RCC_OscConfig+0x106c>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ede:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002ee2:	fa93 f3a3 	rbit	r3, r3
 8002ee6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002eea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eee:	fab3 f383 	clz	r3, r3
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	095b      	lsrs	r3, r3, #5
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	f043 0301 	orr.w	r3, r3, #1
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d104      	bne.n	8002f0c <HAL_RCC_OscConfig+0x5ec>
 8002f02:	4b01      	ldr	r3, [pc, #4]	@ (8002f08 <HAL_RCC_OscConfig+0x5e8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	e015      	b.n	8002f34 <HAL_RCC_OscConfig+0x614>
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f12:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002f16:	fa93 f3a3 	rbit	r3, r3
 8002f1a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002f1e:	2302      	movs	r3, #2
 8002f20:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002f24:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002f28:	fa93 f3a3 	rbit	r3, r3
 8002f2c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002f30:	4bc8      	ldr	r3, [pc, #800]	@ (8003254 <HAL_RCC_OscConfig+0x934>)
 8002f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f34:	2202      	movs	r2, #2
 8002f36:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002f3a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002f3e:	fa92 f2a2 	rbit	r2, r2
 8002f42:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002f46:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002f4a:	fab2 f282 	clz	r2, r2
 8002f4e:	b2d2      	uxtb	r2, r2
 8002f50:	f042 0220 	orr.w	r2, r2, #32
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	f002 021f 	and.w	r2, r2, #31
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f60:	4013      	ands	r3, r2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1ad      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f6a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0308 	and.w	r3, r3, #8
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f000 8110 	beq.w	800319c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f80:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d079      	beq.n	8003080 <HAL_RCC_OscConfig+0x760>
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f92:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002f96:	fa93 f3a3 	rbit	r3, r3
 8002f9a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002f9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fa2:	fab3 f383 	clz	r3, r3
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	461a      	mov	r2, r3
 8002faa:	4bab      	ldr	r3, [pc, #684]	@ (8003258 <HAL_RCC_OscConfig+0x938>)
 8002fac:	4413      	add	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fb6:	f7fe fd5f 	bl	8001a78 <HAL_GetTick>
 8002fba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fbe:	e00a      	b.n	8002fd6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fc0:	f7fe fd5a 	bl	8001a78 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d902      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	f000 bcdb 	b.w	800398c <HAL_RCC_OscConfig+0x106c>
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fdc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002fe0:	fa93 f3a3 	rbit	r3, r3
 8002fe4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002fe8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fec:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	fa93 f2a3 	rbit	r2, r3
 8003002:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003006:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003010:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003014:	2202      	movs	r2, #2
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800301c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	fa93 f2a3 	rbit	r2, r3
 8003026:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800302a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800302e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003030:	4b88      	ldr	r3, [pc, #544]	@ (8003254 <HAL_RCC_OscConfig+0x934>)
 8003032:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003034:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003038:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800303c:	2102      	movs	r1, #2
 800303e:	6019      	str	r1, [r3, #0]
 8003040:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003044:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	fa93 f1a3 	rbit	r1, r3
 800304e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003052:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003056:	6019      	str	r1, [r3, #0]
  return result;
 8003058:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800305c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	fab3 f383 	clz	r3, r3
 8003066:	b2db      	uxtb	r3, r3
 8003068:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800306c:	b2db      	uxtb	r3, r3
 800306e:	f003 031f 	and.w	r3, r3, #31
 8003072:	2101      	movs	r1, #1
 8003074:	fa01 f303 	lsl.w	r3, r1, r3
 8003078:	4013      	ands	r3, r2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d0a0      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x6a0>
 800307e:	e08d      	b.n	800319c <HAL_RCC_OscConfig+0x87c>
 8003080:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003084:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003088:	2201      	movs	r2, #1
 800308a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003090:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	fa93 f2a3 	rbit	r2, r3
 800309a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800309e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80030a2:	601a      	str	r2, [r3, #0]
  return result;
 80030a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030a8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80030ac:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030ae:	fab3 f383 	clz	r3, r3
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	461a      	mov	r2, r3
 80030b6:	4b68      	ldr	r3, [pc, #416]	@ (8003258 <HAL_RCC_OscConfig+0x938>)
 80030b8:	4413      	add	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	461a      	mov	r2, r3
 80030be:	2300      	movs	r3, #0
 80030c0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c2:	f7fe fcd9 	bl	8001a78 <HAL_GetTick>
 80030c6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ca:	e00a      	b.n	80030e2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030cc:	f7fe fcd4 	bl	8001a78 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d902      	bls.n	80030e2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	f000 bc55 	b.w	800398c <HAL_RCC_OscConfig+0x106c>
 80030e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030e6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80030ea:	2202      	movs	r2, #2
 80030ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030f2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	fa93 f2a3 	rbit	r2, r3
 80030fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003100:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800310a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800310e:	2202      	movs	r2, #2
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003116:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	fa93 f2a3 	rbit	r2, r3
 8003120:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003124:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800312e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003132:	2202      	movs	r2, #2
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800313a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	fa93 f2a3 	rbit	r2, r3
 8003144:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003148:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800314c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800314e:	4b41      	ldr	r3, [pc, #260]	@ (8003254 <HAL_RCC_OscConfig+0x934>)
 8003150:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003152:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003156:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800315a:	2102      	movs	r1, #2
 800315c:	6019      	str	r1, [r3, #0]
 800315e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003162:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	fa93 f1a3 	rbit	r1, r3
 800316c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003170:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003174:	6019      	str	r1, [r3, #0]
  return result;
 8003176:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800317a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	fab3 f383 	clz	r3, r3
 8003184:	b2db      	uxtb	r3, r3
 8003186:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800318a:	b2db      	uxtb	r3, r3
 800318c:	f003 031f 	and.w	r3, r3, #31
 8003190:	2101      	movs	r1, #1
 8003192:	fa01 f303 	lsl.w	r3, r1, r3
 8003196:	4013      	ands	r3, r2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d197      	bne.n	80030cc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800319c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 81a1 	beq.w	80034f4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031b2:	2300      	movs	r3, #0
 80031b4:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031b8:	4b26      	ldr	r3, [pc, #152]	@ (8003254 <HAL_RCC_OscConfig+0x934>)
 80031ba:	69db      	ldr	r3, [r3, #28]
 80031bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d116      	bne.n	80031f2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031c4:	4b23      	ldr	r3, [pc, #140]	@ (8003254 <HAL_RCC_OscConfig+0x934>)
 80031c6:	69db      	ldr	r3, [r3, #28]
 80031c8:	4a22      	ldr	r2, [pc, #136]	@ (8003254 <HAL_RCC_OscConfig+0x934>)
 80031ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031ce:	61d3      	str	r3, [r2, #28]
 80031d0:	4b20      	ldr	r3, [pc, #128]	@ (8003254 <HAL_RCC_OscConfig+0x934>)
 80031d2:	69db      	ldr	r3, [r3, #28]
 80031d4:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80031d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031dc:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80031e0:	601a      	str	r2, [r3, #0]
 80031e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031e6:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80031ea:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80031ec:	2301      	movs	r3, #1
 80031ee:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f2:	4b1a      	ldr	r3, [pc, #104]	@ (800325c <HAL_RCC_OscConfig+0x93c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d11a      	bne.n	8003234 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031fe:	4b17      	ldr	r3, [pc, #92]	@ (800325c <HAL_RCC_OscConfig+0x93c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a16      	ldr	r2, [pc, #88]	@ (800325c <HAL_RCC_OscConfig+0x93c>)
 8003204:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003208:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800320a:	f7fe fc35 	bl	8001a78 <HAL_GetTick>
 800320e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003212:	e009      	b.n	8003228 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003214:	f7fe fc30 	bl	8001a78 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b64      	cmp	r3, #100	@ 0x64
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e3b1      	b.n	800398c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003228:	4b0c      	ldr	r3, [pc, #48]	@ (800325c <HAL_RCC_OscConfig+0x93c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0ef      	beq.n	8003214 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003234:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003238:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d10d      	bne.n	8003260 <HAL_RCC_OscConfig+0x940>
 8003244:	4b03      	ldr	r3, [pc, #12]	@ (8003254 <HAL_RCC_OscConfig+0x934>)
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	4a02      	ldr	r2, [pc, #8]	@ (8003254 <HAL_RCC_OscConfig+0x934>)
 800324a:	f043 0301 	orr.w	r3, r3, #1
 800324e:	6213      	str	r3, [r2, #32]
 8003250:	e03c      	b.n	80032cc <HAL_RCC_OscConfig+0x9ac>
 8003252:	bf00      	nop
 8003254:	40021000 	.word	0x40021000
 8003258:	10908120 	.word	0x10908120
 800325c:	40007000 	.word	0x40007000
 8003260:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003264:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10c      	bne.n	800328a <HAL_RCC_OscConfig+0x96a>
 8003270:	4bc1      	ldr	r3, [pc, #772]	@ (8003578 <HAL_RCC_OscConfig+0xc58>)
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	4ac0      	ldr	r2, [pc, #768]	@ (8003578 <HAL_RCC_OscConfig+0xc58>)
 8003276:	f023 0301 	bic.w	r3, r3, #1
 800327a:	6213      	str	r3, [r2, #32]
 800327c:	4bbe      	ldr	r3, [pc, #760]	@ (8003578 <HAL_RCC_OscConfig+0xc58>)
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	4abd      	ldr	r2, [pc, #756]	@ (8003578 <HAL_RCC_OscConfig+0xc58>)
 8003282:	f023 0304 	bic.w	r3, r3, #4
 8003286:	6213      	str	r3, [r2, #32]
 8003288:	e020      	b.n	80032cc <HAL_RCC_OscConfig+0x9ac>
 800328a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800328e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	2b05      	cmp	r3, #5
 8003298:	d10c      	bne.n	80032b4 <HAL_RCC_OscConfig+0x994>
 800329a:	4bb7      	ldr	r3, [pc, #732]	@ (8003578 <HAL_RCC_OscConfig+0xc58>)
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	4ab6      	ldr	r2, [pc, #728]	@ (8003578 <HAL_RCC_OscConfig+0xc58>)
 80032a0:	f043 0304 	orr.w	r3, r3, #4
 80032a4:	6213      	str	r3, [r2, #32]
 80032a6:	4bb4      	ldr	r3, [pc, #720]	@ (8003578 <HAL_RCC_OscConfig+0xc58>)
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	4ab3      	ldr	r2, [pc, #716]	@ (8003578 <HAL_RCC_OscConfig+0xc58>)
 80032ac:	f043 0301 	orr.w	r3, r3, #1
 80032b0:	6213      	str	r3, [r2, #32]
 80032b2:	e00b      	b.n	80032cc <HAL_RCC_OscConfig+0x9ac>
 80032b4:	4bb0      	ldr	r3, [pc, #704]	@ (8003578 <HAL_RCC_OscConfig+0xc58>)
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	4aaf      	ldr	r2, [pc, #700]	@ (8003578 <HAL_RCC_OscConfig+0xc58>)
 80032ba:	f023 0301 	bic.w	r3, r3, #1
 80032be:	6213      	str	r3, [r2, #32]
 80032c0:	4bad      	ldr	r3, [pc, #692]	@ (8003578 <HAL_RCC_OscConfig+0xc58>)
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	4aac      	ldr	r2, [pc, #688]	@ (8003578 <HAL_RCC_OscConfig+0xc58>)
 80032c6:	f023 0304 	bic.w	r3, r3, #4
 80032ca:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 8081 	beq.w	80033e0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032de:	f7fe fbcb 	bl	8001a78 <HAL_GetTick>
 80032e2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e6:	e00b      	b.n	8003300 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032e8:	f7fe fbc6 	bl	8001a78 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d901      	bls.n	8003300 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e345      	b.n	800398c <HAL_RCC_OscConfig+0x106c>
 8003300:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003304:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003308:	2202      	movs	r2, #2
 800330a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003310:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	fa93 f2a3 	rbit	r2, r3
 800331a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800331e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003328:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800332c:	2202      	movs	r2, #2
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003334:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	fa93 f2a3 	rbit	r2, r3
 800333e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003342:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003346:	601a      	str	r2, [r3, #0]
  return result;
 8003348:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800334c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003350:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003352:	fab3 f383 	clz	r3, r3
 8003356:	b2db      	uxtb	r3, r3
 8003358:	095b      	lsrs	r3, r3, #5
 800335a:	b2db      	uxtb	r3, r3
 800335c:	f043 0302 	orr.w	r3, r3, #2
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d102      	bne.n	800336c <HAL_RCC_OscConfig+0xa4c>
 8003366:	4b84      	ldr	r3, [pc, #528]	@ (8003578 <HAL_RCC_OscConfig+0xc58>)
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	e013      	b.n	8003394 <HAL_RCC_OscConfig+0xa74>
 800336c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003370:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003374:	2202      	movs	r2, #2
 8003376:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003378:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800337c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	fa93 f2a3 	rbit	r2, r3
 8003386:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800338a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	4b79      	ldr	r3, [pc, #484]	@ (8003578 <HAL_RCC_OscConfig+0xc58>)
 8003392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003394:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003398:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800339c:	2102      	movs	r1, #2
 800339e:	6011      	str	r1, [r2, #0]
 80033a0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033a4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80033a8:	6812      	ldr	r2, [r2, #0]
 80033aa:	fa92 f1a2 	rbit	r1, r2
 80033ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033b2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80033b6:	6011      	str	r1, [r2, #0]
  return result;
 80033b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033bc:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80033c0:	6812      	ldr	r2, [r2, #0]
 80033c2:	fab2 f282 	clz	r2, r2
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033cc:	b2d2      	uxtb	r2, r2
 80033ce:	f002 021f 	and.w	r2, r2, #31
 80033d2:	2101      	movs	r1, #1
 80033d4:	fa01 f202 	lsl.w	r2, r1, r2
 80033d8:	4013      	ands	r3, r2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d084      	beq.n	80032e8 <HAL_RCC_OscConfig+0x9c8>
 80033de:	e07f      	b.n	80034e0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e0:	f7fe fb4a 	bl	8001a78 <HAL_GetTick>
 80033e4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033e8:	e00b      	b.n	8003402 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033ea:	f7fe fb45 	bl	8001a78 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e2c4      	b.n	800398c <HAL_RCC_OscConfig+0x106c>
 8003402:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003406:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800340a:	2202      	movs	r2, #2
 800340c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003412:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	fa93 f2a3 	rbit	r2, r3
 800341c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003420:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003424:	601a      	str	r2, [r3, #0]
 8003426:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800342a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800342e:	2202      	movs	r2, #2
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003436:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	fa93 f2a3 	rbit	r2, r3
 8003440:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003444:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003448:	601a      	str	r2, [r3, #0]
  return result;
 800344a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800344e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003452:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003454:	fab3 f383 	clz	r3, r3
 8003458:	b2db      	uxtb	r3, r3
 800345a:	095b      	lsrs	r3, r3, #5
 800345c:	b2db      	uxtb	r3, r3
 800345e:	f043 0302 	orr.w	r3, r3, #2
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d102      	bne.n	800346e <HAL_RCC_OscConfig+0xb4e>
 8003468:	4b43      	ldr	r3, [pc, #268]	@ (8003578 <HAL_RCC_OscConfig+0xc58>)
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	e013      	b.n	8003496 <HAL_RCC_OscConfig+0xb76>
 800346e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003472:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003476:	2202      	movs	r2, #2
 8003478:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800347e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	fa93 f2a3 	rbit	r2, r3
 8003488:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800348c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	4b39      	ldr	r3, [pc, #228]	@ (8003578 <HAL_RCC_OscConfig+0xc58>)
 8003494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003496:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800349a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800349e:	2102      	movs	r1, #2
 80034a0:	6011      	str	r1, [r2, #0]
 80034a2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034a6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80034aa:	6812      	ldr	r2, [r2, #0]
 80034ac:	fa92 f1a2 	rbit	r1, r2
 80034b0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034b4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80034b8:	6011      	str	r1, [r2, #0]
  return result;
 80034ba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034be:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80034c2:	6812      	ldr	r2, [r2, #0]
 80034c4:	fab2 f282 	clz	r2, r2
 80034c8:	b2d2      	uxtb	r2, r2
 80034ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	f002 021f 	and.w	r2, r2, #31
 80034d4:	2101      	movs	r1, #1
 80034d6:	fa01 f202 	lsl.w	r2, r1, r2
 80034da:	4013      	ands	r3, r2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d184      	bne.n	80033ea <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034e0:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d105      	bne.n	80034f4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034e8:	4b23      	ldr	r3, [pc, #140]	@ (8003578 <HAL_RCC_OscConfig+0xc58>)
 80034ea:	69db      	ldr	r3, [r3, #28]
 80034ec:	4a22      	ldr	r2, [pc, #136]	@ (8003578 <HAL_RCC_OscConfig+0xc58>)
 80034ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034f2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	69db      	ldr	r3, [r3, #28]
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 8242 	beq.w	800398a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003506:	4b1c      	ldr	r3, [pc, #112]	@ (8003578 <HAL_RCC_OscConfig+0xc58>)
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f003 030c 	and.w	r3, r3, #12
 800350e:	2b08      	cmp	r3, #8
 8003510:	f000 8213 	beq.w	800393a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003514:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003518:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	69db      	ldr	r3, [r3, #28]
 8003520:	2b02      	cmp	r3, #2
 8003522:	f040 8162 	bne.w	80037ea <HAL_RCC_OscConfig+0xeca>
 8003526:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800352a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800352e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003532:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003534:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003538:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	fa93 f2a3 	rbit	r2, r3
 8003542:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003546:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800354a:	601a      	str	r2, [r3, #0]
  return result;
 800354c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003550:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003554:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003556:	fab3 f383 	clz	r3, r3
 800355a:	b2db      	uxtb	r3, r3
 800355c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003560:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	461a      	mov	r2, r3
 8003568:	2300      	movs	r3, #0
 800356a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356c:	f7fe fa84 	bl	8001a78 <HAL_GetTick>
 8003570:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003574:	e00c      	b.n	8003590 <HAL_RCC_OscConfig+0xc70>
 8003576:	bf00      	nop
 8003578:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800357c:	f7fe fa7c 	bl	8001a78 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e1fd      	b.n	800398c <HAL_RCC_OscConfig+0x106c>
 8003590:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003594:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003598:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800359c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035a2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	fa93 f2a3 	rbit	r2, r3
 80035ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035b0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80035b4:	601a      	str	r2, [r3, #0]
  return result;
 80035b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035ba:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80035be:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035c0:	fab3 f383 	clz	r3, r3
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	095b      	lsrs	r3, r3, #5
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	f043 0301 	orr.w	r3, r3, #1
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d102      	bne.n	80035da <HAL_RCC_OscConfig+0xcba>
 80035d4:	4bb0      	ldr	r3, [pc, #704]	@ (8003898 <HAL_RCC_OscConfig+0xf78>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	e027      	b.n	800362a <HAL_RCC_OscConfig+0xd0a>
 80035da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035de:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80035e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035ec:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	fa93 f2a3 	rbit	r2, r3
 80035f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035fa:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003604:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003608:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003612:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	fa93 f2a3 	rbit	r2, r3
 800361c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003620:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003624:	601a      	str	r2, [r3, #0]
 8003626:	4b9c      	ldr	r3, [pc, #624]	@ (8003898 <HAL_RCC_OscConfig+0xf78>)
 8003628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800362e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003632:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003636:	6011      	str	r1, [r2, #0]
 8003638:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800363c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003640:	6812      	ldr	r2, [r2, #0]
 8003642:	fa92 f1a2 	rbit	r1, r2
 8003646:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800364a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800364e:	6011      	str	r1, [r2, #0]
  return result;
 8003650:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003654:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003658:	6812      	ldr	r2, [r2, #0]
 800365a:	fab2 f282 	clz	r2, r2
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	f042 0220 	orr.w	r2, r2, #32
 8003664:	b2d2      	uxtb	r2, r2
 8003666:	f002 021f 	and.w	r2, r2, #31
 800366a:	2101      	movs	r1, #1
 800366c:	fa01 f202 	lsl.w	r2, r1, r2
 8003670:	4013      	ands	r3, r2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d182      	bne.n	800357c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003676:	4b88      	ldr	r3, [pc, #544]	@ (8003898 <HAL_RCC_OscConfig+0xf78>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800367e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003682:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800368a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800368e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	430b      	orrs	r3, r1
 8003698:	497f      	ldr	r1, [pc, #508]	@ (8003898 <HAL_RCC_OscConfig+0xf78>)
 800369a:	4313      	orrs	r3, r2
 800369c:	604b      	str	r3, [r1, #4]
 800369e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036a2:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80036a6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80036aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036b0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	fa93 f2a3 	rbit	r2, r3
 80036ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036be:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80036c2:	601a      	str	r2, [r3, #0]
  return result;
 80036c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036c8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80036cc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036ce:	fab3 f383 	clz	r3, r3
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80036d8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	461a      	mov	r2, r3
 80036e0:	2301      	movs	r3, #1
 80036e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e4:	f7fe f9c8 	bl	8001a78 <HAL_GetTick>
 80036e8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036ec:	e009      	b.n	8003702 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ee:	f7fe f9c3 	bl	8001a78 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e144      	b.n	800398c <HAL_RCC_OscConfig+0x106c>
 8003702:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003706:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800370a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800370e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003710:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003714:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	fa93 f2a3 	rbit	r2, r3
 800371e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003722:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003726:	601a      	str	r2, [r3, #0]
  return result;
 8003728:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800372c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003730:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003732:	fab3 f383 	clz	r3, r3
 8003736:	b2db      	uxtb	r3, r3
 8003738:	095b      	lsrs	r3, r3, #5
 800373a:	b2db      	uxtb	r3, r3
 800373c:	f043 0301 	orr.w	r3, r3, #1
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b01      	cmp	r3, #1
 8003744:	d102      	bne.n	800374c <HAL_RCC_OscConfig+0xe2c>
 8003746:	4b54      	ldr	r3, [pc, #336]	@ (8003898 <HAL_RCC_OscConfig+0xf78>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	e027      	b.n	800379c <HAL_RCC_OscConfig+0xe7c>
 800374c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003750:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003754:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003758:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800375e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	fa93 f2a3 	rbit	r2, r3
 8003768:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800376c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003776:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800377a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800377e:	601a      	str	r2, [r3, #0]
 8003780:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003784:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	fa93 f2a3 	rbit	r2, r3
 800378e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003792:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	4b3f      	ldr	r3, [pc, #252]	@ (8003898 <HAL_RCC_OscConfig+0xf78>)
 800379a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80037a0:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80037a4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80037a8:	6011      	str	r1, [r2, #0]
 80037aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80037ae:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80037b2:	6812      	ldr	r2, [r2, #0]
 80037b4:	fa92 f1a2 	rbit	r1, r2
 80037b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80037bc:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80037c0:	6011      	str	r1, [r2, #0]
  return result;
 80037c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80037c6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80037ca:	6812      	ldr	r2, [r2, #0]
 80037cc:	fab2 f282 	clz	r2, r2
 80037d0:	b2d2      	uxtb	r2, r2
 80037d2:	f042 0220 	orr.w	r2, r2, #32
 80037d6:	b2d2      	uxtb	r2, r2
 80037d8:	f002 021f 	and.w	r2, r2, #31
 80037dc:	2101      	movs	r1, #1
 80037de:	fa01 f202 	lsl.w	r2, r1, r2
 80037e2:	4013      	ands	r3, r2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d082      	beq.n	80036ee <HAL_RCC_OscConfig+0xdce>
 80037e8:	e0cf      	b.n	800398a <HAL_RCC_OscConfig+0x106a>
 80037ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037ee:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80037f2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80037f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037fc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	fa93 f2a3 	rbit	r2, r3
 8003806:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800380a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800380e:	601a      	str	r2, [r3, #0]
  return result;
 8003810:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003814:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003818:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800381a:	fab3 f383 	clz	r3, r3
 800381e:	b2db      	uxtb	r3, r3
 8003820:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003824:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	461a      	mov	r2, r3
 800382c:	2300      	movs	r3, #0
 800382e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003830:	f7fe f922 	bl	8001a78 <HAL_GetTick>
 8003834:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003838:	e009      	b.n	800384e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800383a:	f7fe f91d 	bl	8001a78 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e09e      	b.n	800398c <HAL_RCC_OscConfig+0x106c>
 800384e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003852:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003856:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800385a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003860:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	fa93 f2a3 	rbit	r2, r3
 800386a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800386e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003872:	601a      	str	r2, [r3, #0]
  return result;
 8003874:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003878:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800387c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800387e:	fab3 f383 	clz	r3, r3
 8003882:	b2db      	uxtb	r3, r3
 8003884:	095b      	lsrs	r3, r3, #5
 8003886:	b2db      	uxtb	r3, r3
 8003888:	f043 0301 	orr.w	r3, r3, #1
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b01      	cmp	r3, #1
 8003890:	d104      	bne.n	800389c <HAL_RCC_OscConfig+0xf7c>
 8003892:	4b01      	ldr	r3, [pc, #4]	@ (8003898 <HAL_RCC_OscConfig+0xf78>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	e029      	b.n	80038ec <HAL_RCC_OscConfig+0xfcc>
 8003898:	40021000 	.word	0x40021000
 800389c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038a0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80038a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80038a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038ae:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	fa93 f2a3 	rbit	r2, r3
 80038b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038bc:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80038c0:	601a      	str	r2, [r3, #0]
 80038c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038c6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80038ca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038d4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	fa93 f2a3 	rbit	r2, r3
 80038de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038e2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	4b2b      	ldr	r3, [pc, #172]	@ (8003998 <HAL_RCC_OscConfig+0x1078>)
 80038ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80038f0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80038f4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80038f8:	6011      	str	r1, [r2, #0]
 80038fa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80038fe:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003902:	6812      	ldr	r2, [r2, #0]
 8003904:	fa92 f1a2 	rbit	r1, r2
 8003908:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800390c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003910:	6011      	str	r1, [r2, #0]
  return result;
 8003912:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003916:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800391a:	6812      	ldr	r2, [r2, #0]
 800391c:	fab2 f282 	clz	r2, r2
 8003920:	b2d2      	uxtb	r2, r2
 8003922:	f042 0220 	orr.w	r2, r2, #32
 8003926:	b2d2      	uxtb	r2, r2
 8003928:	f002 021f 	and.w	r2, r2, #31
 800392c:	2101      	movs	r1, #1
 800392e:	fa01 f202 	lsl.w	r2, r1, r2
 8003932:	4013      	ands	r3, r2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d180      	bne.n	800383a <HAL_RCC_OscConfig+0xf1a>
 8003938:	e027      	b.n	800398a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800393a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800393e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d101      	bne.n	800394e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e01e      	b.n	800398c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800394e:	4b12      	ldr	r3, [pc, #72]	@ (8003998 <HAL_RCC_OscConfig+0x1078>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003956:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800395a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800395e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003962:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	429a      	cmp	r2, r3
 800396c:	d10b      	bne.n	8003986 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800396e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003972:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003976:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800397a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003982:	429a      	cmp	r2, r3
 8003984:	d001      	beq.n	800398a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e000      	b.n	800398c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	40021000 	.word	0x40021000

0800399c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b09e      	sub	sp, #120	@ 0x78
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d101      	bne.n	80039b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e162      	b.n	8003c7a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039b4:	4b90      	ldr	r3, [pc, #576]	@ (8003bf8 <HAL_RCC_ClockConfig+0x25c>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0307 	and.w	r3, r3, #7
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d910      	bls.n	80039e4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039c2:	4b8d      	ldr	r3, [pc, #564]	@ (8003bf8 <HAL_RCC_ClockConfig+0x25c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f023 0207 	bic.w	r2, r3, #7
 80039ca:	498b      	ldr	r1, [pc, #556]	@ (8003bf8 <HAL_RCC_ClockConfig+0x25c>)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039d2:	4b89      	ldr	r3, [pc, #548]	@ (8003bf8 <HAL_RCC_ClockConfig+0x25c>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0307 	and.w	r3, r3, #7
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d001      	beq.n	80039e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e14a      	b.n	8003c7a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0302 	and.w	r3, r3, #2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d008      	beq.n	8003a02 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039f0:	4b82      	ldr	r3, [pc, #520]	@ (8003bfc <HAL_RCC_ClockConfig+0x260>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	497f      	ldr	r1, [pc, #508]	@ (8003bfc <HAL_RCC_ClockConfig+0x260>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f000 80dc 	beq.w	8003bc8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d13c      	bne.n	8003a92 <HAL_RCC_ClockConfig+0xf6>
 8003a18:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a1c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a20:	fa93 f3a3 	rbit	r3, r3
 8003a24:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003a26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a28:	fab3 f383 	clz	r3, r3
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	095b      	lsrs	r3, r3, #5
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	f043 0301 	orr.w	r3, r3, #1
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d102      	bne.n	8003a42 <HAL_RCC_ClockConfig+0xa6>
 8003a3c:	4b6f      	ldr	r3, [pc, #444]	@ (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	e00f      	b.n	8003a62 <HAL_RCC_ClockConfig+0xc6>
 8003a42:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a46:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a4a:	fa93 f3a3 	rbit	r3, r3
 8003a4e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003a50:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a54:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a58:	fa93 f3a3 	rbit	r3, r3
 8003a5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a5e:	4b67      	ldr	r3, [pc, #412]	@ (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a62:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003a66:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003a68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a6a:	fa92 f2a2 	rbit	r2, r2
 8003a6e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003a70:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003a72:	fab2 f282 	clz	r2, r2
 8003a76:	b2d2      	uxtb	r2, r2
 8003a78:	f042 0220 	orr.w	r2, r2, #32
 8003a7c:	b2d2      	uxtb	r2, r2
 8003a7e:	f002 021f 	and.w	r2, r2, #31
 8003a82:	2101      	movs	r1, #1
 8003a84:	fa01 f202 	lsl.w	r2, r1, r2
 8003a88:	4013      	ands	r3, r2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d17b      	bne.n	8003b86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e0f3      	b.n	8003c7a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d13c      	bne.n	8003b14 <HAL_RCC_ClockConfig+0x178>
 8003a9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a9e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003aa2:	fa93 f3a3 	rbit	r3, r3
 8003aa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003aa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aaa:	fab3 f383 	clz	r3, r3
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	095b      	lsrs	r3, r3, #5
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	f043 0301 	orr.w	r3, r3, #1
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d102      	bne.n	8003ac4 <HAL_RCC_ClockConfig+0x128>
 8003abe:	4b4f      	ldr	r3, [pc, #316]	@ (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	e00f      	b.n	8003ae4 <HAL_RCC_ClockConfig+0x148>
 8003ac4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ac8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003acc:	fa93 f3a3 	rbit	r3, r3
 8003ad0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ad2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ad6:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ad8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ada:	fa93 f3a3 	rbit	r3, r3
 8003ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ae0:	4b46      	ldr	r3, [pc, #280]	@ (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ae8:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003aea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003aec:	fa92 f2a2 	rbit	r2, r2
 8003af0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003af2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003af4:	fab2 f282 	clz	r2, r2
 8003af8:	b2d2      	uxtb	r2, r2
 8003afa:	f042 0220 	orr.w	r2, r2, #32
 8003afe:	b2d2      	uxtb	r2, r2
 8003b00:	f002 021f 	and.w	r2, r2, #31
 8003b04:	2101      	movs	r1, #1
 8003b06:	fa01 f202 	lsl.w	r2, r1, r2
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d13a      	bne.n	8003b86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e0b2      	b.n	8003c7a <HAL_RCC_ClockConfig+0x2de>
 8003b14:	2302      	movs	r3, #2
 8003b16:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b1a:	fa93 f3a3 	rbit	r3, r3
 8003b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b22:	fab3 f383 	clz	r3, r3
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	095b      	lsrs	r3, r3, #5
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	f043 0301 	orr.w	r3, r3, #1
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d102      	bne.n	8003b3c <HAL_RCC_ClockConfig+0x1a0>
 8003b36:	4b31      	ldr	r3, [pc, #196]	@ (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	e00d      	b.n	8003b58 <HAL_RCC_ClockConfig+0x1bc>
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b42:	fa93 f3a3 	rbit	r3, r3
 8003b46:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b48:	2302      	movs	r3, #2
 8003b4a:	623b      	str	r3, [r7, #32]
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	fa93 f3a3 	rbit	r3, r3
 8003b52:	61fb      	str	r3, [r7, #28]
 8003b54:	4b29      	ldr	r3, [pc, #164]	@ (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b58:	2202      	movs	r2, #2
 8003b5a:	61ba      	str	r2, [r7, #24]
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	fa92 f2a2 	rbit	r2, r2
 8003b62:	617a      	str	r2, [r7, #20]
  return result;
 8003b64:	697a      	ldr	r2, [r7, #20]
 8003b66:	fab2 f282 	clz	r2, r2
 8003b6a:	b2d2      	uxtb	r2, r2
 8003b6c:	f042 0220 	orr.w	r2, r2, #32
 8003b70:	b2d2      	uxtb	r2, r2
 8003b72:	f002 021f 	and.w	r2, r2, #31
 8003b76:	2101      	movs	r1, #1
 8003b78:	fa01 f202 	lsl.w	r2, r1, r2
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e079      	b.n	8003c7a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b86:	4b1d      	ldr	r3, [pc, #116]	@ (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f023 0203 	bic.w	r2, r3, #3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	491a      	ldr	r1, [pc, #104]	@ (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b98:	f7fd ff6e 	bl	8001a78 <HAL_GetTick>
 8003b9c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b9e:	e00a      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ba0:	f7fd ff6a 	bl	8001a78 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e061      	b.n	8003c7a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb6:	4b11      	ldr	r3, [pc, #68]	@ (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f003 020c 	and.w	r2, r3, #12
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d1eb      	bne.n	8003ba0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf8 <HAL_RCC_ClockConfig+0x25c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0307 	and.w	r3, r3, #7
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d214      	bcs.n	8003c00 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd6:	4b08      	ldr	r3, [pc, #32]	@ (8003bf8 <HAL_RCC_ClockConfig+0x25c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f023 0207 	bic.w	r2, r3, #7
 8003bde:	4906      	ldr	r1, [pc, #24]	@ (8003bf8 <HAL_RCC_ClockConfig+0x25c>)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be6:	4b04      	ldr	r3, [pc, #16]	@ (8003bf8 <HAL_RCC_ClockConfig+0x25c>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d005      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e040      	b.n	8003c7a <HAL_RCC_ClockConfig+0x2de>
 8003bf8:	40022000 	.word	0x40022000
 8003bfc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0304 	and.w	r3, r3, #4
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d008      	beq.n	8003c1e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8003c84 <HAL_RCC_ClockConfig+0x2e8>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	491a      	ldr	r1, [pc, #104]	@ (8003c84 <HAL_RCC_ClockConfig+0x2e8>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0308 	and.w	r3, r3, #8
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d009      	beq.n	8003c3e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c2a:	4b16      	ldr	r3, [pc, #88]	@ (8003c84 <HAL_RCC_ClockConfig+0x2e8>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	4912      	ldr	r1, [pc, #72]	@ (8003c84 <HAL_RCC_ClockConfig+0x2e8>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003c3e:	f000 f829 	bl	8003c94 <HAL_RCC_GetSysClockFreq>
 8003c42:	4601      	mov	r1, r0
 8003c44:	4b0f      	ldr	r3, [pc, #60]	@ (8003c84 <HAL_RCC_ClockConfig+0x2e8>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c4c:	22f0      	movs	r2, #240	@ 0xf0
 8003c4e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	fa92 f2a2 	rbit	r2, r2
 8003c56:	60fa      	str	r2, [r7, #12]
  return result;
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	fab2 f282 	clz	r2, r2
 8003c5e:	b2d2      	uxtb	r2, r2
 8003c60:	40d3      	lsrs	r3, r2
 8003c62:	4a09      	ldr	r2, [pc, #36]	@ (8003c88 <HAL_RCC_ClockConfig+0x2ec>)
 8003c64:	5cd3      	ldrb	r3, [r2, r3]
 8003c66:	fa21 f303 	lsr.w	r3, r1, r3
 8003c6a:	4a08      	ldr	r2, [pc, #32]	@ (8003c8c <HAL_RCC_ClockConfig+0x2f0>)
 8003c6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003c6e:	4b08      	ldr	r3, [pc, #32]	@ (8003c90 <HAL_RCC_ClockConfig+0x2f4>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fd febc 	bl	80019f0 <HAL_InitTick>
  
  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3778      	adds	r7, #120	@ 0x78
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	40021000 	.word	0x40021000
 8003c88:	08009a54 	.word	0x08009a54
 8003c8c:	20000010 	.word	0x20000010
 8003c90:	20000014 	.word	0x20000014

08003c94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b087      	sub	sp, #28
 8003c98:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	60fb      	str	r3, [r7, #12]
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	60bb      	str	r3, [r7, #8]
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	617b      	str	r3, [r7, #20]
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003caa:	2300      	movs	r3, #0
 8003cac:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003cae:	4b1e      	ldr	r3, [pc, #120]	@ (8003d28 <HAL_RCC_GetSysClockFreq+0x94>)
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f003 030c 	and.w	r3, r3, #12
 8003cba:	2b04      	cmp	r3, #4
 8003cbc:	d002      	beq.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x30>
 8003cbe:	2b08      	cmp	r3, #8
 8003cc0:	d003      	beq.n	8003cca <HAL_RCC_GetSysClockFreq+0x36>
 8003cc2:	e026      	b.n	8003d12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003cc4:	4b19      	ldr	r3, [pc, #100]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x98>)
 8003cc6:	613b      	str	r3, [r7, #16]
      break;
 8003cc8:	e026      	b.n	8003d18 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	0c9b      	lsrs	r3, r3, #18
 8003cce:	f003 030f 	and.w	r3, r3, #15
 8003cd2:	4a17      	ldr	r2, [pc, #92]	@ (8003d30 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003cd4:	5cd3      	ldrb	r3, [r2, r3]
 8003cd6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003cd8:	4b13      	ldr	r3, [pc, #76]	@ (8003d28 <HAL_RCC_GetSysClockFreq+0x94>)
 8003cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cdc:	f003 030f 	and.w	r3, r3, #15
 8003ce0:	4a14      	ldr	r2, [pc, #80]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ce2:	5cd3      	ldrb	r3, [r2, r3]
 8003ce4:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d008      	beq.n	8003d02 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003cf0:	4a0e      	ldr	r2, [pc, #56]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x98>)
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	fb02 f303 	mul.w	r3, r2, r3
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	e004      	b.n	8003d0c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a0c      	ldr	r2, [pc, #48]	@ (8003d38 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003d06:	fb02 f303 	mul.w	r3, r2, r3
 8003d0a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	613b      	str	r3, [r7, #16]
      break;
 8003d10:	e002      	b.n	8003d18 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d12:	4b06      	ldr	r3, [pc, #24]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x98>)
 8003d14:	613b      	str	r3, [r7, #16]
      break;
 8003d16:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d18:	693b      	ldr	r3, [r7, #16]
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	371c      	adds	r7, #28
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	40021000 	.word	0x40021000
 8003d2c:	007a1200 	.word	0x007a1200
 8003d30:	08009a6c 	.word	0x08009a6c
 8003d34:	08009a7c 	.word	0x08009a7c
 8003d38:	003d0900 	.word	0x003d0900

08003d3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d40:	4b03      	ldr	r3, [pc, #12]	@ (8003d50 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d42:	681b      	ldr	r3, [r3, #0]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	20000010 	.word	0x20000010

08003d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003d5a:	f7ff ffef 	bl	8003d3c <HAL_RCC_GetHCLKFreq>
 8003d5e:	4601      	mov	r1, r0
 8003d60:	4b0b      	ldr	r3, [pc, #44]	@ (8003d90 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003d68:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003d6c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	fa92 f2a2 	rbit	r2, r2
 8003d74:	603a      	str	r2, [r7, #0]
  return result;
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	fab2 f282 	clz	r2, r2
 8003d7c:	b2d2      	uxtb	r2, r2
 8003d7e:	40d3      	lsrs	r3, r2
 8003d80:	4a04      	ldr	r2, [pc, #16]	@ (8003d94 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003d82:	5cd3      	ldrb	r3, [r2, r3]
 8003d84:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3708      	adds	r7, #8
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	40021000 	.word	0x40021000
 8003d94:	08009a64 	.word	0x08009a64

08003d98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003d9e:	f7ff ffcd 	bl	8003d3c <HAL_RCC_GetHCLKFreq>
 8003da2:	4601      	mov	r1, r0
 8003da4:	4b0b      	ldr	r3, [pc, #44]	@ (8003dd4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003dac:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003db0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	fa92 f2a2 	rbit	r2, r2
 8003db8:	603a      	str	r2, [r7, #0]
  return result;
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	fab2 f282 	clz	r2, r2
 8003dc0:	b2d2      	uxtb	r2, r2
 8003dc2:	40d3      	lsrs	r3, r2
 8003dc4:	4a04      	ldr	r2, [pc, #16]	@ (8003dd8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003dc6:	5cd3      	ldrb	r3, [r2, r3]
 8003dc8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	08009a64 	.word	0x08009a64

08003ddc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b092      	sub	sp, #72	@ 0x48
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003de4:	2300      	movs	r3, #0
 8003de6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003de8:	2300      	movs	r3, #0
 8003dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003dec:	2300      	movs	r3, #0
 8003dee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	f000 80d4 	beq.w	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e00:	4b4e      	ldr	r3, [pc, #312]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e02:	69db      	ldr	r3, [r3, #28]
 8003e04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10e      	bne.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e0c:	4b4b      	ldr	r3, [pc, #300]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e0e:	69db      	ldr	r3, [r3, #28]
 8003e10:	4a4a      	ldr	r2, [pc, #296]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e16:	61d3      	str	r3, [r2, #28]
 8003e18:	4b48      	ldr	r3, [pc, #288]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e1a:	69db      	ldr	r3, [r3, #28]
 8003e1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e20:	60bb      	str	r3, [r7, #8]
 8003e22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e24:	2301      	movs	r3, #1
 8003e26:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e2a:	4b45      	ldr	r3, [pc, #276]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d118      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e36:	4b42      	ldr	r3, [pc, #264]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a41      	ldr	r2, [pc, #260]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e40:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e42:	f7fd fe19 	bl	8001a78 <HAL_GetTick>
 8003e46:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e48:	e008      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e4a:	f7fd fe15 	bl	8001a78 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b64      	cmp	r3, #100	@ 0x64
 8003e56:	d901      	bls.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e14b      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e5c:	4b38      	ldr	r3, [pc, #224]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d0f0      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e68:	4b34      	ldr	r3, [pc, #208]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f000 8084 	beq.w	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e82:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d07c      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e88:	4b2c      	ldr	r3, [pc, #176]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e92:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003e96:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e9a:	fa93 f3a3 	rbit	r3, r3
 8003e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ea2:	fab3 f383 	clz	r3, r3
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	4b26      	ldr	r3, [pc, #152]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003eac:	4413      	add	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	6013      	str	r3, [r2, #0]
 8003eb6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003eba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ebe:	fa93 f3a3 	rbit	r3, r3
 8003ec2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ec6:	fab3 f383 	clz	r3, r3
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	461a      	mov	r2, r3
 8003ece:	4b1d      	ldr	r3, [pc, #116]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ed0:	4413      	add	r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003eda:	4a18      	ldr	r2, [pc, #96]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003edc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ede:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ee0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d04b      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eea:	f7fd fdc5 	bl	8001a78 <HAL_GetTick>
 8003eee:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef0:	e00a      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ef2:	f7fd fdc1 	bl	8001a78 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e0f5      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003f08:	2302      	movs	r3, #2
 8003f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f0e:	fa93 f3a3 	rbit	r3, r3
 8003f12:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f14:	2302      	movs	r3, #2
 8003f16:	623b      	str	r3, [r7, #32]
 8003f18:	6a3b      	ldr	r3, [r7, #32]
 8003f1a:	fa93 f3a3 	rbit	r3, r3
 8003f1e:	61fb      	str	r3, [r7, #28]
  return result;
 8003f20:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f22:	fab3 f383 	clz	r3, r3
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	095b      	lsrs	r3, r3, #5
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	f043 0302 	orr.w	r3, r3, #2
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d108      	bne.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003f36:	4b01      	ldr	r3, [pc, #4]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	e00d      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003f3c:	40021000 	.word	0x40021000
 8003f40:	40007000 	.word	0x40007000
 8003f44:	10908100 	.word	0x10908100
 8003f48:	2302      	movs	r3, #2
 8003f4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	fa93 f3a3 	rbit	r3, r3
 8003f52:	617b      	str	r3, [r7, #20]
 8003f54:	4b69      	ldr	r3, [pc, #420]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f58:	2202      	movs	r2, #2
 8003f5a:	613a      	str	r2, [r7, #16]
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	fa92 f2a2 	rbit	r2, r2
 8003f62:	60fa      	str	r2, [r7, #12]
  return result;
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	fab2 f282 	clz	r2, r2
 8003f6a:	b2d2      	uxtb	r2, r2
 8003f6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f70:	b2d2      	uxtb	r2, r2
 8003f72:	f002 021f 	and.w	r2, r2, #31
 8003f76:	2101      	movs	r1, #1
 8003f78:	fa01 f202 	lsl.w	r2, r1, r2
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0b7      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003f82:	4b5e      	ldr	r3, [pc, #376]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	495b      	ldr	r1, [pc, #364]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f94:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d105      	bne.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f9c:	4b57      	ldr	r3, [pc, #348]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f9e:	69db      	ldr	r3, [r3, #28]
 8003fa0:	4a56      	ldr	r2, [pc, #344]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003fa2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fa6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d008      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fb4:	4b51      	ldr	r3, [pc, #324]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb8:	f023 0203 	bic.w	r2, r3, #3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	494e      	ldr	r1, [pc, #312]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0320 	and.w	r3, r3, #32
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d008      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fd2:	4b4a      	ldr	r3, [pc, #296]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd6:	f023 0210 	bic.w	r2, r3, #16
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	4947      	ldr	r1, [pc, #284]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d008      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003ff0:	4b42      	ldr	r3, [pc, #264]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ffc:	493f      	ldr	r1, [pc, #252]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800400a:	2b00      	cmp	r3, #0
 800400c:	d008      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800400e:	4b3b      	ldr	r3, [pc, #236]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004012:	f023 0220 	bic.w	r2, r3, #32
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	4938      	ldr	r1, [pc, #224]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800401c:	4313      	orrs	r3, r2
 800401e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d008      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800402c:	4b33      	ldr	r3, [pc, #204]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800402e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004030:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	4930      	ldr	r1, [pc, #192]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800403a:	4313      	orrs	r3, r2
 800403c:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004046:	2b00      	cmp	r3, #0
 8004048:	d008      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800404a:	4b2c      	ldr	r3, [pc, #176]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	4929      	ldr	r1, [pc, #164]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004058:	4313      	orrs	r3, r2
 800405a:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004064:	2b00      	cmp	r3, #0
 8004066:	d008      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8004068:	4b24      	ldr	r3, [pc, #144]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800406a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800406c:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	4921      	ldr	r1, [pc, #132]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004076:	4313      	orrs	r3, r2
 8004078:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d008      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004086:	4b1d      	ldr	r3, [pc, #116]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800408a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	491a      	ldr	r1, [pc, #104]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004094:	4313      	orrs	r3, r2
 8004096:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d008      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80040a4:	4b15      	ldr	r3, [pc, #84]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a8:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b0:	4912      	ldr	r1, [pc, #72]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d008      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80040c2:	4b0e      	ldr	r3, [pc, #56]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c6:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ce:	490b      	ldr	r1, [pc, #44]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d008      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80040e0:	4b06      	ldr	r3, [pc, #24]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ec:	4903      	ldr	r1, [pc, #12]	@ (80040fc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3748      	adds	r7, #72	@ 0x48
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	40021000 	.word	0x40021000

08004100 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e049      	b.n	80041a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d106      	bne.n	800412c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f7fd fa14 	bl	8001554 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2202      	movs	r2, #2
 8004130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	3304      	adds	r3, #4
 800413c:	4619      	mov	r1, r3
 800413e:	4610      	mov	r0, r2
 8004140:	f000 fad4 	bl	80046ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
	...

080041b0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d001      	beq.n	80041c8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e033      	b.n	8004230 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2202      	movs	r2, #2
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a19      	ldr	r2, [pc, #100]	@ (800423c <HAL_TIM_Base_Start+0x8c>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d009      	beq.n	80041ee <HAL_TIM_Base_Start+0x3e>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041e2:	d004      	beq.n	80041ee <HAL_TIM_Base_Start+0x3e>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a15      	ldr	r2, [pc, #84]	@ (8004240 <HAL_TIM_Base_Start+0x90>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d115      	bne.n	800421a <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	4b13      	ldr	r3, [pc, #76]	@ (8004244 <HAL_TIM_Base_Start+0x94>)
 80041f6:	4013      	ands	r3, r2
 80041f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2b06      	cmp	r3, #6
 80041fe:	d015      	beq.n	800422c <HAL_TIM_Base_Start+0x7c>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004206:	d011      	beq.n	800422c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f042 0201 	orr.w	r2, r2, #1
 8004216:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004218:	e008      	b.n	800422c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f042 0201 	orr.w	r2, r2, #1
 8004228:	601a      	str	r2, [r3, #0]
 800422a:	e000      	b.n	800422e <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800422c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3714      	adds	r7, #20
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	40012c00 	.word	0x40012c00
 8004240:	40014000 	.word	0x40014000
 8004244:	00010007 	.word	0x00010007

08004248 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b01      	cmp	r3, #1
 800425a:	d001      	beq.n	8004260 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e03b      	b.n	80042d8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2202      	movs	r2, #2
 8004264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68da      	ldr	r2, [r3, #12]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0201 	orr.w	r2, r2, #1
 8004276:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a19      	ldr	r2, [pc, #100]	@ (80042e4 <HAL_TIM_Base_Start_IT+0x9c>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d009      	beq.n	8004296 <HAL_TIM_Base_Start_IT+0x4e>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800428a:	d004      	beq.n	8004296 <HAL_TIM_Base_Start_IT+0x4e>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a15      	ldr	r2, [pc, #84]	@ (80042e8 <HAL_TIM_Base_Start_IT+0xa0>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d115      	bne.n	80042c2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	689a      	ldr	r2, [r3, #8]
 800429c:	4b13      	ldr	r3, [pc, #76]	@ (80042ec <HAL_TIM_Base_Start_IT+0xa4>)
 800429e:	4013      	ands	r3, r2
 80042a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2b06      	cmp	r3, #6
 80042a6:	d015      	beq.n	80042d4 <HAL_TIM_Base_Start_IT+0x8c>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042ae:	d011      	beq.n	80042d4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0201 	orr.w	r2, r2, #1
 80042be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042c0:	e008      	b.n	80042d4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f042 0201 	orr.w	r2, r2, #1
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	e000      	b.n	80042d6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	40012c00 	.word	0x40012c00
 80042e8:	40014000 	.word	0x40014000
 80042ec:	00010007 	.word	0x00010007

080042f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d020      	beq.n	8004354 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d01b      	beq.n	8004354 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f06f 0202 	mvn.w	r2, #2
 8004324:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	f003 0303 	and.w	r3, r3, #3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d003      	beq.n	8004342 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 f9b7 	bl	80046ae <HAL_TIM_IC_CaptureCallback>
 8004340:	e005      	b.n	800434e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f9a9 	bl	800469a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 f9ba 	bl	80046c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	f003 0304 	and.w	r3, r3, #4
 800435a:	2b00      	cmp	r3, #0
 800435c:	d020      	beq.n	80043a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f003 0304 	and.w	r3, r3, #4
 8004364:	2b00      	cmp	r3, #0
 8004366:	d01b      	beq.n	80043a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f06f 0204 	mvn.w	r2, #4
 8004370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2202      	movs	r2, #2
 8004376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f991 	bl	80046ae <HAL_TIM_IC_CaptureCallback>
 800438c:	e005      	b.n	800439a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f983 	bl	800469a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 f994 	bl	80046c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	f003 0308 	and.w	r3, r3, #8
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d020      	beq.n	80043ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f003 0308 	and.w	r3, r3, #8
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d01b      	beq.n	80043ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f06f 0208 	mvn.w	r2, #8
 80043bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2204      	movs	r2, #4
 80043c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	f003 0303 	and.w	r3, r3, #3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f96b 	bl	80046ae <HAL_TIM_IC_CaptureCallback>
 80043d8:	e005      	b.n	80043e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f95d 	bl	800469a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 f96e 	bl	80046c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	f003 0310 	and.w	r3, r3, #16
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d020      	beq.n	8004438 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f003 0310 	and.w	r3, r3, #16
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d01b      	beq.n	8004438 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f06f 0210 	mvn.w	r2, #16
 8004408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2208      	movs	r2, #8
 800440e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800441a:	2b00      	cmp	r3, #0
 800441c:	d003      	beq.n	8004426 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f945 	bl	80046ae <HAL_TIM_IC_CaptureCallback>
 8004424:	e005      	b.n	8004432 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f937 	bl	800469a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 f948 	bl	80046c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00c      	beq.n	800445c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	2b00      	cmp	r3, #0
 800444a:	d007      	beq.n	800445c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f06f 0201 	mvn.w	r2, #1
 8004454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f915 	bl	8004686 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00c      	beq.n	8004480 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800446c:	2b00      	cmp	r3, #0
 800446e:	d007      	beq.n	8004480 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 faba 	bl	80049f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00c      	beq.n	80044a4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004490:	2b00      	cmp	r3, #0
 8004492:	d007      	beq.n	80044a4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800449c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 fab2 	bl	8004a08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00c      	beq.n	80044c8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d007      	beq.n	80044c8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80044c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f907 	bl	80046d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	f003 0320 	and.w	r3, r3, #32
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00c      	beq.n	80044ec <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f003 0320 	and.w	r3, r3, #32
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d007      	beq.n	80044ec <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f06f 0220 	mvn.w	r2, #32
 80044e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 fa7a 	bl	80049e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044ec:	bf00      	nop
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044fe:	2300      	movs	r3, #0
 8004500:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004508:	2b01      	cmp	r3, #1
 800450a:	d101      	bne.n	8004510 <HAL_TIM_ConfigClockSource+0x1c>
 800450c:	2302      	movs	r3, #2
 800450e:	e0b6      	b.n	800467e <HAL_TIM_ConfigClockSource+0x18a>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2202      	movs	r2, #2
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800452e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004532:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800453a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800454c:	d03e      	beq.n	80045cc <HAL_TIM_ConfigClockSource+0xd8>
 800454e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004552:	f200 8087 	bhi.w	8004664 <HAL_TIM_ConfigClockSource+0x170>
 8004556:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800455a:	f000 8086 	beq.w	800466a <HAL_TIM_ConfigClockSource+0x176>
 800455e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004562:	d87f      	bhi.n	8004664 <HAL_TIM_ConfigClockSource+0x170>
 8004564:	2b70      	cmp	r3, #112	@ 0x70
 8004566:	d01a      	beq.n	800459e <HAL_TIM_ConfigClockSource+0xaa>
 8004568:	2b70      	cmp	r3, #112	@ 0x70
 800456a:	d87b      	bhi.n	8004664 <HAL_TIM_ConfigClockSource+0x170>
 800456c:	2b60      	cmp	r3, #96	@ 0x60
 800456e:	d050      	beq.n	8004612 <HAL_TIM_ConfigClockSource+0x11e>
 8004570:	2b60      	cmp	r3, #96	@ 0x60
 8004572:	d877      	bhi.n	8004664 <HAL_TIM_ConfigClockSource+0x170>
 8004574:	2b50      	cmp	r3, #80	@ 0x50
 8004576:	d03c      	beq.n	80045f2 <HAL_TIM_ConfigClockSource+0xfe>
 8004578:	2b50      	cmp	r3, #80	@ 0x50
 800457a:	d873      	bhi.n	8004664 <HAL_TIM_ConfigClockSource+0x170>
 800457c:	2b40      	cmp	r3, #64	@ 0x40
 800457e:	d058      	beq.n	8004632 <HAL_TIM_ConfigClockSource+0x13e>
 8004580:	2b40      	cmp	r3, #64	@ 0x40
 8004582:	d86f      	bhi.n	8004664 <HAL_TIM_ConfigClockSource+0x170>
 8004584:	2b30      	cmp	r3, #48	@ 0x30
 8004586:	d064      	beq.n	8004652 <HAL_TIM_ConfigClockSource+0x15e>
 8004588:	2b30      	cmp	r3, #48	@ 0x30
 800458a:	d86b      	bhi.n	8004664 <HAL_TIM_ConfigClockSource+0x170>
 800458c:	2b20      	cmp	r3, #32
 800458e:	d060      	beq.n	8004652 <HAL_TIM_ConfigClockSource+0x15e>
 8004590:	2b20      	cmp	r3, #32
 8004592:	d867      	bhi.n	8004664 <HAL_TIM_ConfigClockSource+0x170>
 8004594:	2b00      	cmp	r3, #0
 8004596:	d05c      	beq.n	8004652 <HAL_TIM_ConfigClockSource+0x15e>
 8004598:	2b10      	cmp	r3, #16
 800459a:	d05a      	beq.n	8004652 <HAL_TIM_ConfigClockSource+0x15e>
 800459c:	e062      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045ae:	f000 f991 	bl	80048d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80045c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68ba      	ldr	r2, [r7, #8]
 80045c8:	609a      	str	r2, [r3, #8]
      break;
 80045ca:	e04f      	b.n	800466c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045dc:	f000 f97a 	bl	80048d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689a      	ldr	r2, [r3, #8]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80045ee:	609a      	str	r2, [r3, #8]
      break;
 80045f0:	e03c      	b.n	800466c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045fe:	461a      	mov	r2, r3
 8004600:	f000 f8ee 	bl	80047e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2150      	movs	r1, #80	@ 0x50
 800460a:	4618      	mov	r0, r3
 800460c:	f000 f947 	bl	800489e <TIM_ITRx_SetConfig>
      break;
 8004610:	e02c      	b.n	800466c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800461e:	461a      	mov	r2, r3
 8004620:	f000 f90d 	bl	800483e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2160      	movs	r1, #96	@ 0x60
 800462a:	4618      	mov	r0, r3
 800462c:	f000 f937 	bl	800489e <TIM_ITRx_SetConfig>
      break;
 8004630:	e01c      	b.n	800466c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800463e:	461a      	mov	r2, r3
 8004640:	f000 f8ce 	bl	80047e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2140      	movs	r1, #64	@ 0x40
 800464a:	4618      	mov	r0, r3
 800464c:	f000 f927 	bl	800489e <TIM_ITRx_SetConfig>
      break;
 8004650:	e00c      	b.n	800466c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4619      	mov	r1, r3
 800465c:	4610      	mov	r0, r2
 800465e:	f000 f91e 	bl	800489e <TIM_ITRx_SetConfig>
      break;
 8004662:	e003      	b.n	800466c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	73fb      	strb	r3, [r7, #15]
      break;
 8004668:	e000      	b.n	800466c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800466a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800467c:	7bfb      	ldrb	r3, [r7, #15]
}
 800467e:	4618      	mov	r0, r3
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004686:	b480      	push	{r7}
 8004688:	b083      	sub	sp, #12
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800468e:	bf00      	nop
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr

0800469a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800469a:	b480      	push	{r7}
 800469c:	b083      	sub	sp, #12
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046a2:	bf00      	nop
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b083      	sub	sp, #12
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046c2:	b480      	push	{r7}
 80046c4:	b083      	sub	sp, #12
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046ca:	bf00      	nop
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr

080046d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046d6:	b480      	push	{r7}
 80046d8:	b083      	sub	sp, #12
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046de:	bf00      	nop
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
	...

080046ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a34      	ldr	r2, [pc, #208]	@ (80047d0 <TIM_Base_SetConfig+0xe4>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d003      	beq.n	800470c <TIM_Base_SetConfig+0x20>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800470a:	d108      	bne.n	800471e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004712:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	4313      	orrs	r3, r2
 800471c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a2b      	ldr	r2, [pc, #172]	@ (80047d0 <TIM_Base_SetConfig+0xe4>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d00f      	beq.n	8004746 <TIM_Base_SetConfig+0x5a>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800472c:	d00b      	beq.n	8004746 <TIM_Base_SetConfig+0x5a>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a28      	ldr	r2, [pc, #160]	@ (80047d4 <TIM_Base_SetConfig+0xe8>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d007      	beq.n	8004746 <TIM_Base_SetConfig+0x5a>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a27      	ldr	r2, [pc, #156]	@ (80047d8 <TIM_Base_SetConfig+0xec>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d003      	beq.n	8004746 <TIM_Base_SetConfig+0x5a>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a26      	ldr	r2, [pc, #152]	@ (80047dc <TIM_Base_SetConfig+0xf0>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d108      	bne.n	8004758 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800474c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	4313      	orrs	r3, r2
 8004756:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	4313      	orrs	r3, r2
 8004764:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	689a      	ldr	r2, [r3, #8]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a14      	ldr	r2, [pc, #80]	@ (80047d0 <TIM_Base_SetConfig+0xe4>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d00b      	beq.n	800479c <TIM_Base_SetConfig+0xb0>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a13      	ldr	r2, [pc, #76]	@ (80047d4 <TIM_Base_SetConfig+0xe8>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d007      	beq.n	800479c <TIM_Base_SetConfig+0xb0>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a12      	ldr	r2, [pc, #72]	@ (80047d8 <TIM_Base_SetConfig+0xec>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d003      	beq.n	800479c <TIM_Base_SetConfig+0xb0>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a11      	ldr	r2, [pc, #68]	@ (80047dc <TIM_Base_SetConfig+0xf0>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d103      	bne.n	80047a4 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	691a      	ldr	r2, [r3, #16]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d105      	bne.n	80047c2 <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	f023 0201 	bic.w	r2, r3, #1
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	611a      	str	r2, [r3, #16]
  }
}
 80047c2:	bf00      	nop
 80047c4:	3714      	adds	r7, #20
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	40012c00 	.word	0x40012c00
 80047d4:	40014000 	.word	0x40014000
 80047d8:	40014400 	.word	0x40014400
 80047dc:	40014800 	.word	0x40014800

080047e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b087      	sub	sp, #28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	f023 0201 	bic.w	r2, r3, #1
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800480a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	011b      	lsls	r3, r3, #4
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	4313      	orrs	r3, r2
 8004814:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f023 030a 	bic.w	r3, r3, #10
 800481c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	4313      	orrs	r3, r2
 8004824:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	621a      	str	r2, [r3, #32]
}
 8004832:	bf00      	nop
 8004834:	371c      	adds	r7, #28
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800483e:	b480      	push	{r7}
 8004840:	b087      	sub	sp, #28
 8004842:	af00      	add	r7, sp, #0
 8004844:	60f8      	str	r0, [r7, #12]
 8004846:	60b9      	str	r1, [r7, #8]
 8004848:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	f023 0210 	bic.w	r2, r3, #16
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004868:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	031b      	lsls	r3, r3, #12
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	4313      	orrs	r3, r2
 8004872:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800487a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	011b      	lsls	r3, r3, #4
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	4313      	orrs	r3, r2
 8004884:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	621a      	str	r2, [r3, #32]
}
 8004892:	bf00      	nop
 8004894:	371c      	adds	r7, #28
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800489e:	b480      	push	{r7}
 80048a0:	b085      	sub	sp, #20
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
 80048a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	f043 0307 	orr.w	r3, r3, #7
 80048c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	609a      	str	r2, [r3, #8]
}
 80048c8:	bf00      	nop
 80048ca:	3714      	adds	r7, #20
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b087      	sub	sp, #28
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
 80048e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	021a      	lsls	r2, r3, #8
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	431a      	orrs	r2, r3
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	4313      	orrs	r3, r2
 8004900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	609a      	str	r2, [r3, #8]
}
 8004908:	bf00      	nop
 800490a:	371c      	adds	r7, #28
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004924:	2b01      	cmp	r3, #1
 8004926:	d101      	bne.n	800492c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004928:	2302      	movs	r3, #2
 800492a:	e04f      	b.n	80049cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2202      	movs	r2, #2
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a21      	ldr	r2, [pc, #132]	@ (80049d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d108      	bne.n	8004968 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800495c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	4313      	orrs	r3, r2
 8004966:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800496e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	4313      	orrs	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a14      	ldr	r2, [pc, #80]	@ (80049d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d009      	beq.n	80049a0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004994:	d004      	beq.n	80049a0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a10      	ldr	r2, [pc, #64]	@ (80049dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d10c      	bne.n	80049ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	68ba      	ldr	r2, [r7, #8]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68ba      	ldr	r2, [r7, #8]
 80049b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3714      	adds	r7, #20
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr
 80049d8:	40012c00 	.word	0x40012c00
 80049dc:	40014000 	.word	0x40014000

080049e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049e8:	bf00      	nop
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e040      	b.n	8004ab0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d106      	bne.n	8004a44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7fc fdc0 	bl	80015c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2224      	movs	r2, #36	@ 0x24
 8004a48:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f022 0201 	bic.w	r2, r2, #1
 8004a58:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d002      	beq.n	8004a68 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f9e8 	bl	8004e38 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 f8af 	bl	8004bcc <UART_SetConfig>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d101      	bne.n	8004a78 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e01b      	b.n	8004ab0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689a      	ldr	r2, [r3, #8]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0201 	orr.w	r2, r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 fa67 	bl	8004f7c <UART_CheckIdleState>
 8004aae:	4603      	mov	r3, r0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3708      	adds	r7, #8
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b08a      	sub	sp, #40	@ 0x28
 8004abc:	af02      	add	r7, sp, #8
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	603b      	str	r3, [r7, #0]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004acc:	2b20      	cmp	r3, #32
 8004ace:	d177      	bne.n	8004bc0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d002      	beq.n	8004adc <HAL_UART_Transmit+0x24>
 8004ad6:	88fb      	ldrh	r3, [r7, #6]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d101      	bne.n	8004ae0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e070      	b.n	8004bc2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2221      	movs	r2, #33	@ 0x21
 8004aec:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004aee:	f7fc ffc3 	bl	8001a78 <HAL_GetTick>
 8004af2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	88fa      	ldrh	r2, [r7, #6]
 8004af8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	88fa      	ldrh	r2, [r7, #6]
 8004b00:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b0c:	d108      	bne.n	8004b20 <HAL_UART_Transmit+0x68>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d104      	bne.n	8004b20 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004b16:	2300      	movs	r3, #0
 8004b18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	61bb      	str	r3, [r7, #24]
 8004b1e:	e003      	b.n	8004b28 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b24:	2300      	movs	r3, #0
 8004b26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b28:	e02f      	b.n	8004b8a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	2200      	movs	r2, #0
 8004b32:	2180      	movs	r1, #128	@ 0x80
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f000 fac9 	bl	80050cc <UART_WaitOnFlagUntilTimeout>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d004      	beq.n	8004b4a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2220      	movs	r2, #32
 8004b44:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e03b      	b.n	8004bc2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10b      	bne.n	8004b68 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	881a      	ldrh	r2, [r3, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b5c:	b292      	uxth	r2, r2
 8004b5e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	3302      	adds	r3, #2
 8004b64:	61bb      	str	r3, [r7, #24]
 8004b66:	e007      	b.n	8004b78 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	781a      	ldrb	r2, [r3, #0]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	3301      	adds	r3, #1
 8004b76:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	3b01      	subs	r3, #1
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1c9      	bne.n	8004b2a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	2140      	movs	r1, #64	@ 0x40
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f000 fa93 	bl	80050cc <UART_WaitOnFlagUntilTimeout>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d004      	beq.n	8004bb6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e005      	b.n	8004bc2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2220      	movs	r2, #32
 8004bba:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	e000      	b.n	8004bc2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004bc0:	2302      	movs	r3, #2
  }
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3720      	adds	r7, #32
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
	...

08004bcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b088      	sub	sp, #32
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689a      	ldr	r2, [r3, #8]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	431a      	orrs	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	431a      	orrs	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	69db      	ldr	r3, [r3, #28]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	4b8a      	ldr	r3, [pc, #552]	@ (8004e20 <UART_SetConfig+0x254>)
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	6812      	ldr	r2, [r2, #0]
 8004bfe:	6979      	ldr	r1, [r7, #20]
 8004c00:	430b      	orrs	r3, r1
 8004c02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68da      	ldr	r2, [r3, #12]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a78      	ldr	r2, [pc, #480]	@ (8004e24 <UART_SetConfig+0x258>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d120      	bne.n	8004c8a <UART_SetConfig+0xbe>
 8004c48:	4b77      	ldr	r3, [pc, #476]	@ (8004e28 <UART_SetConfig+0x25c>)
 8004c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c4c:	f003 0303 	and.w	r3, r3, #3
 8004c50:	2b03      	cmp	r3, #3
 8004c52:	d817      	bhi.n	8004c84 <UART_SetConfig+0xb8>
 8004c54:	a201      	add	r2, pc, #4	@ (adr r2, 8004c5c <UART_SetConfig+0x90>)
 8004c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5a:	bf00      	nop
 8004c5c:	08004c6d 	.word	0x08004c6d
 8004c60:	08004c79 	.word	0x08004c79
 8004c64:	08004c7f 	.word	0x08004c7f
 8004c68:	08004c73 	.word	0x08004c73
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	77fb      	strb	r3, [r7, #31]
 8004c70:	e01d      	b.n	8004cae <UART_SetConfig+0xe2>
 8004c72:	2302      	movs	r3, #2
 8004c74:	77fb      	strb	r3, [r7, #31]
 8004c76:	e01a      	b.n	8004cae <UART_SetConfig+0xe2>
 8004c78:	2304      	movs	r3, #4
 8004c7a:	77fb      	strb	r3, [r7, #31]
 8004c7c:	e017      	b.n	8004cae <UART_SetConfig+0xe2>
 8004c7e:	2308      	movs	r3, #8
 8004c80:	77fb      	strb	r3, [r7, #31]
 8004c82:	e014      	b.n	8004cae <UART_SetConfig+0xe2>
 8004c84:	2310      	movs	r3, #16
 8004c86:	77fb      	strb	r3, [r7, #31]
 8004c88:	e011      	b.n	8004cae <UART_SetConfig+0xe2>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a67      	ldr	r2, [pc, #412]	@ (8004e2c <UART_SetConfig+0x260>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d102      	bne.n	8004c9a <UART_SetConfig+0xce>
 8004c94:	2300      	movs	r3, #0
 8004c96:	77fb      	strb	r3, [r7, #31]
 8004c98:	e009      	b.n	8004cae <UART_SetConfig+0xe2>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a64      	ldr	r2, [pc, #400]	@ (8004e30 <UART_SetConfig+0x264>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d102      	bne.n	8004caa <UART_SetConfig+0xde>
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	77fb      	strb	r3, [r7, #31]
 8004ca8:	e001      	b.n	8004cae <UART_SetConfig+0xe2>
 8004caa:	2310      	movs	r3, #16
 8004cac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	69db      	ldr	r3, [r3, #28]
 8004cb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cb6:	d15a      	bne.n	8004d6e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004cb8:	7ffb      	ldrb	r3, [r7, #31]
 8004cba:	2b08      	cmp	r3, #8
 8004cbc:	d827      	bhi.n	8004d0e <UART_SetConfig+0x142>
 8004cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8004cc4 <UART_SetConfig+0xf8>)
 8004cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc4:	08004ce9 	.word	0x08004ce9
 8004cc8:	08004cf1 	.word	0x08004cf1
 8004ccc:	08004cf9 	.word	0x08004cf9
 8004cd0:	08004d0f 	.word	0x08004d0f
 8004cd4:	08004cff 	.word	0x08004cff
 8004cd8:	08004d0f 	.word	0x08004d0f
 8004cdc:	08004d0f 	.word	0x08004d0f
 8004ce0:	08004d0f 	.word	0x08004d0f
 8004ce4:	08004d07 	.word	0x08004d07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ce8:	f7ff f834 	bl	8003d54 <HAL_RCC_GetPCLK1Freq>
 8004cec:	61b8      	str	r0, [r7, #24]
        break;
 8004cee:	e013      	b.n	8004d18 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cf0:	f7ff f852 	bl	8003d98 <HAL_RCC_GetPCLK2Freq>
 8004cf4:	61b8      	str	r0, [r7, #24]
        break;
 8004cf6:	e00f      	b.n	8004d18 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cf8:	4b4e      	ldr	r3, [pc, #312]	@ (8004e34 <UART_SetConfig+0x268>)
 8004cfa:	61bb      	str	r3, [r7, #24]
        break;
 8004cfc:	e00c      	b.n	8004d18 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cfe:	f7fe ffc9 	bl	8003c94 <HAL_RCC_GetSysClockFreq>
 8004d02:	61b8      	str	r0, [r7, #24]
        break;
 8004d04:	e008      	b.n	8004d18 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d0a:	61bb      	str	r3, [r7, #24]
        break;
 8004d0c:	e004      	b.n	8004d18 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	77bb      	strb	r3, [r7, #30]
        break;
 8004d16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d074      	beq.n	8004e08 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	005a      	lsls	r2, r3, #1
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	085b      	lsrs	r3, r3, #1
 8004d28:	441a      	add	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d32:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	2b0f      	cmp	r3, #15
 8004d38:	d916      	bls.n	8004d68 <UART_SetConfig+0x19c>
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d40:	d212      	bcs.n	8004d68 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	f023 030f 	bic.w	r3, r3, #15
 8004d4a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	085b      	lsrs	r3, r3, #1
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	f003 0307 	and.w	r3, r3, #7
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	89fb      	ldrh	r3, [r7, #14]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	89fa      	ldrh	r2, [r7, #14]
 8004d64:	60da      	str	r2, [r3, #12]
 8004d66:	e04f      	b.n	8004e08 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	77bb      	strb	r3, [r7, #30]
 8004d6c:	e04c      	b.n	8004e08 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d6e:	7ffb      	ldrb	r3, [r7, #31]
 8004d70:	2b08      	cmp	r3, #8
 8004d72:	d828      	bhi.n	8004dc6 <UART_SetConfig+0x1fa>
 8004d74:	a201      	add	r2, pc, #4	@ (adr r2, 8004d7c <UART_SetConfig+0x1b0>)
 8004d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d7a:	bf00      	nop
 8004d7c:	08004da1 	.word	0x08004da1
 8004d80:	08004da9 	.word	0x08004da9
 8004d84:	08004db1 	.word	0x08004db1
 8004d88:	08004dc7 	.word	0x08004dc7
 8004d8c:	08004db7 	.word	0x08004db7
 8004d90:	08004dc7 	.word	0x08004dc7
 8004d94:	08004dc7 	.word	0x08004dc7
 8004d98:	08004dc7 	.word	0x08004dc7
 8004d9c:	08004dbf 	.word	0x08004dbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004da0:	f7fe ffd8 	bl	8003d54 <HAL_RCC_GetPCLK1Freq>
 8004da4:	61b8      	str	r0, [r7, #24]
        break;
 8004da6:	e013      	b.n	8004dd0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004da8:	f7fe fff6 	bl	8003d98 <HAL_RCC_GetPCLK2Freq>
 8004dac:	61b8      	str	r0, [r7, #24]
        break;
 8004dae:	e00f      	b.n	8004dd0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004db0:	4b20      	ldr	r3, [pc, #128]	@ (8004e34 <UART_SetConfig+0x268>)
 8004db2:	61bb      	str	r3, [r7, #24]
        break;
 8004db4:	e00c      	b.n	8004dd0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004db6:	f7fe ff6d 	bl	8003c94 <HAL_RCC_GetSysClockFreq>
 8004dba:	61b8      	str	r0, [r7, #24]
        break;
 8004dbc:	e008      	b.n	8004dd0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dc2:	61bb      	str	r3, [r7, #24]
        break;
 8004dc4:	e004      	b.n	8004dd0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	77bb      	strb	r3, [r7, #30]
        break;
 8004dce:	bf00      	nop
    }

    if (pclk != 0U)
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d018      	beq.n	8004e08 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	085a      	lsrs	r2, r3, #1
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	441a      	add	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	2b0f      	cmp	r3, #15
 8004dee:	d909      	bls.n	8004e04 <UART_SetConfig+0x238>
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004df6:	d205      	bcs.n	8004e04 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	60da      	str	r2, [r3, #12]
 8004e02:	e001      	b.n	8004e08 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004e14:	7fbb      	ldrb	r3, [r7, #30]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3720      	adds	r7, #32
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	efff69f3 	.word	0xefff69f3
 8004e24:	40013800 	.word	0x40013800
 8004e28:	40021000 	.word	0x40021000
 8004e2c:	40004400 	.word	0x40004400
 8004e30:	40004800 	.word	0x40004800
 8004e34:	007a1200 	.word	0x007a1200

08004e38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e44:	f003 0308 	and.w	r3, r3, #8
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00a      	beq.n	8004e62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00a      	beq.n	8004e84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e88:	f003 0302 	and.w	r3, r3, #2
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00a      	beq.n	8004ea6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eaa:	f003 0304 	and.w	r3, r3, #4
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00a      	beq.n	8004ec8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ecc:	f003 0310 	and.w	r3, r3, #16
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00a      	beq.n	8004eea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eee:	f003 0320 	and.w	r3, r3, #32
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00a      	beq.n	8004f0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d01a      	beq.n	8004f4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f36:	d10a      	bne.n	8004f4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00a      	beq.n	8004f70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	605a      	str	r2, [r3, #4]
  }
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b098      	sub	sp, #96	@ 0x60
 8004f80:	af02      	add	r7, sp, #8
 8004f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f8c:	f7fc fd74 	bl	8001a78 <HAL_GetTick>
 8004f90:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0308 	and.w	r3, r3, #8
 8004f9c:	2b08      	cmp	r3, #8
 8004f9e:	d12e      	bne.n	8004ffe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fa0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004fa4:	9300      	str	r3, [sp, #0]
 8004fa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 f88c 	bl	80050cc <UART_WaitOnFlagUntilTimeout>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d021      	beq.n	8004ffe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fc2:	e853 3f00 	ldrex	r3, [r3]
 8004fc6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fce:	653b      	str	r3, [r7, #80]	@ 0x50
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fda:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fdc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004fde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fe0:	e841 2300 	strex	r3, r2, [r1]
 8004fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004fe6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1e6      	bne.n	8004fba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2220      	movs	r2, #32
 8004ff0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e062      	b.n	80050c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0304 	and.w	r3, r3, #4
 8005008:	2b04      	cmp	r3, #4
 800500a:	d149      	bne.n	80050a0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800500c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005010:	9300      	str	r3, [sp, #0]
 8005012:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005014:	2200      	movs	r2, #0
 8005016:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f856 	bl	80050cc <UART_WaitOnFlagUntilTimeout>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d03c      	beq.n	80050a0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502e:	e853 3f00 	ldrex	r3, [r3]
 8005032:	623b      	str	r3, [r7, #32]
   return(result);
 8005034:	6a3b      	ldr	r3, [r7, #32]
 8005036:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800503a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	461a      	mov	r2, r3
 8005042:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005044:	633b      	str	r3, [r7, #48]	@ 0x30
 8005046:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005048:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800504a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800504c:	e841 2300 	strex	r3, r2, [r1]
 8005050:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1e6      	bne.n	8005026 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	3308      	adds	r3, #8
 800505e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	e853 3f00 	ldrex	r3, [r3]
 8005066:	60fb      	str	r3, [r7, #12]
   return(result);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f023 0301 	bic.w	r3, r3, #1
 800506e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	3308      	adds	r3, #8
 8005076:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005078:	61fa      	str	r2, [r7, #28]
 800507a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507c:	69b9      	ldr	r1, [r7, #24]
 800507e:	69fa      	ldr	r2, [r7, #28]
 8005080:	e841 2300 	strex	r3, r2, [r1]
 8005084:	617b      	str	r3, [r7, #20]
   return(result);
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1e5      	bne.n	8005058 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2220      	movs	r2, #32
 8005090:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e011      	b.n	80050c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2220      	movs	r2, #32
 80050a4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2220      	movs	r2, #32
 80050aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3758      	adds	r7, #88	@ 0x58
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	603b      	str	r3, [r7, #0]
 80050d8:	4613      	mov	r3, r2
 80050da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050dc:	e04f      	b.n	800517e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e4:	d04b      	beq.n	800517e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050e6:	f7fc fcc7 	bl	8001a78 <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	69ba      	ldr	r2, [r7, #24]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d302      	bcc.n	80050fc <UART_WaitOnFlagUntilTimeout+0x30>
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d101      	bne.n	8005100 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e04e      	b.n	800519e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0304 	and.w	r3, r3, #4
 800510a:	2b00      	cmp	r3, #0
 800510c:	d037      	beq.n	800517e <UART_WaitOnFlagUntilTimeout+0xb2>
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	2b80      	cmp	r3, #128	@ 0x80
 8005112:	d034      	beq.n	800517e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	2b40      	cmp	r3, #64	@ 0x40
 8005118:	d031      	beq.n	800517e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	69db      	ldr	r3, [r3, #28]
 8005120:	f003 0308 	and.w	r3, r3, #8
 8005124:	2b08      	cmp	r3, #8
 8005126:	d110      	bne.n	800514a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2208      	movs	r2, #8
 800512e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f000 f838 	bl	80051a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2208      	movs	r2, #8
 800513a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e029      	b.n	800519e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	69db      	ldr	r3, [r3, #28]
 8005150:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005154:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005158:	d111      	bne.n	800517e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005162:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f000 f81e 	bl	80051a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2220      	movs	r2, #32
 800516e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e00f      	b.n	800519e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	69da      	ldr	r2, [r3, #28]
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	4013      	ands	r3, r2
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	429a      	cmp	r2, r3
 800518c:	bf0c      	ite	eq
 800518e:	2301      	moveq	r3, #1
 8005190:	2300      	movne	r3, #0
 8005192:	b2db      	uxtb	r3, r3
 8005194:	461a      	mov	r2, r3
 8005196:	79fb      	ldrb	r3, [r7, #7]
 8005198:	429a      	cmp	r2, r3
 800519a:	d0a0      	beq.n	80050de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051a6:	b480      	push	{r7}
 80051a8:	b095      	sub	sp, #84	@ 0x54
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051b6:	e853 3f00 	ldrex	r3, [r3]
 80051ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80051bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	461a      	mov	r2, r3
 80051ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80051ce:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80051d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051d4:	e841 2300 	strex	r3, r2, [r1]
 80051d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80051da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1e6      	bne.n	80051ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	3308      	adds	r3, #8
 80051e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e8:	6a3b      	ldr	r3, [r7, #32]
 80051ea:	e853 3f00 	ldrex	r3, [r3]
 80051ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	f023 0301 	bic.w	r3, r3, #1
 80051f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	3308      	adds	r3, #8
 80051fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005200:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005202:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005204:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005206:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005208:	e841 2300 	strex	r3, r2, [r1]
 800520c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800520e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1e5      	bne.n	80051e0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005218:	2b01      	cmp	r3, #1
 800521a:	d118      	bne.n	800524e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	e853 3f00 	ldrex	r3, [r3]
 8005228:	60bb      	str	r3, [r7, #8]
   return(result);
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	f023 0310 	bic.w	r3, r3, #16
 8005230:	647b      	str	r3, [r7, #68]	@ 0x44
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	461a      	mov	r2, r3
 8005238:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800523a:	61bb      	str	r3, [r7, #24]
 800523c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523e:	6979      	ldr	r1, [r7, #20]
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	e841 2300 	strex	r3, r2, [r1]
 8005246:	613b      	str	r3, [r7, #16]
   return(result);
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1e6      	bne.n	800521c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2220      	movs	r2, #32
 8005252:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005262:	bf00      	nop
 8005264:	3754      	adds	r7, #84	@ 0x54
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
	...

08005270 <srand>:
 8005270:	b538      	push	{r3, r4, r5, lr}
 8005272:	4b10      	ldr	r3, [pc, #64]	@ (80052b4 <srand+0x44>)
 8005274:	681d      	ldr	r5, [r3, #0]
 8005276:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005278:	4604      	mov	r4, r0
 800527a:	b9b3      	cbnz	r3, 80052aa <srand+0x3a>
 800527c:	2018      	movs	r0, #24
 800527e:	f001 ff31 	bl	80070e4 <malloc>
 8005282:	4602      	mov	r2, r0
 8005284:	6328      	str	r0, [r5, #48]	@ 0x30
 8005286:	b920      	cbnz	r0, 8005292 <srand+0x22>
 8005288:	4b0b      	ldr	r3, [pc, #44]	@ (80052b8 <srand+0x48>)
 800528a:	480c      	ldr	r0, [pc, #48]	@ (80052bc <srand+0x4c>)
 800528c:	2146      	movs	r1, #70	@ 0x46
 800528e:	f001 f873 	bl	8006378 <__assert_func>
 8005292:	490b      	ldr	r1, [pc, #44]	@ (80052c0 <srand+0x50>)
 8005294:	4b0b      	ldr	r3, [pc, #44]	@ (80052c4 <srand+0x54>)
 8005296:	e9c0 1300 	strd	r1, r3, [r0]
 800529a:	4b0b      	ldr	r3, [pc, #44]	@ (80052c8 <srand+0x58>)
 800529c:	6083      	str	r3, [r0, #8]
 800529e:	230b      	movs	r3, #11
 80052a0:	8183      	strh	r3, [r0, #12]
 80052a2:	2100      	movs	r1, #0
 80052a4:	2001      	movs	r0, #1
 80052a6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80052aa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80052ac:	2200      	movs	r2, #0
 80052ae:	611c      	str	r4, [r3, #16]
 80052b0:	615a      	str	r2, [r3, #20]
 80052b2:	bd38      	pop	{r3, r4, r5, pc}
 80052b4:	20000028 	.word	0x20000028
 80052b8:	08009a8c 	.word	0x08009a8c
 80052bc:	08009aa3 	.word	0x08009aa3
 80052c0:	abcd330e 	.word	0xabcd330e
 80052c4:	e66d1234 	.word	0xe66d1234
 80052c8:	0005deec 	.word	0x0005deec

080052cc <rand>:
 80052cc:	4b16      	ldr	r3, [pc, #88]	@ (8005328 <rand+0x5c>)
 80052ce:	b510      	push	{r4, lr}
 80052d0:	681c      	ldr	r4, [r3, #0]
 80052d2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80052d4:	b9b3      	cbnz	r3, 8005304 <rand+0x38>
 80052d6:	2018      	movs	r0, #24
 80052d8:	f001 ff04 	bl	80070e4 <malloc>
 80052dc:	4602      	mov	r2, r0
 80052de:	6320      	str	r0, [r4, #48]	@ 0x30
 80052e0:	b920      	cbnz	r0, 80052ec <rand+0x20>
 80052e2:	4b12      	ldr	r3, [pc, #72]	@ (800532c <rand+0x60>)
 80052e4:	4812      	ldr	r0, [pc, #72]	@ (8005330 <rand+0x64>)
 80052e6:	2152      	movs	r1, #82	@ 0x52
 80052e8:	f001 f846 	bl	8006378 <__assert_func>
 80052ec:	4911      	ldr	r1, [pc, #68]	@ (8005334 <rand+0x68>)
 80052ee:	4b12      	ldr	r3, [pc, #72]	@ (8005338 <rand+0x6c>)
 80052f0:	e9c0 1300 	strd	r1, r3, [r0]
 80052f4:	4b11      	ldr	r3, [pc, #68]	@ (800533c <rand+0x70>)
 80052f6:	6083      	str	r3, [r0, #8]
 80052f8:	230b      	movs	r3, #11
 80052fa:	8183      	strh	r3, [r0, #12]
 80052fc:	2100      	movs	r1, #0
 80052fe:	2001      	movs	r0, #1
 8005300:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005304:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005306:	480e      	ldr	r0, [pc, #56]	@ (8005340 <rand+0x74>)
 8005308:	690b      	ldr	r3, [r1, #16]
 800530a:	694c      	ldr	r4, [r1, #20]
 800530c:	4a0d      	ldr	r2, [pc, #52]	@ (8005344 <rand+0x78>)
 800530e:	4358      	muls	r0, r3
 8005310:	fb02 0004 	mla	r0, r2, r4, r0
 8005314:	fba3 3202 	umull	r3, r2, r3, r2
 8005318:	3301      	adds	r3, #1
 800531a:	eb40 0002 	adc.w	r0, r0, r2
 800531e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8005322:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005326:	bd10      	pop	{r4, pc}
 8005328:	20000028 	.word	0x20000028
 800532c:	08009a8c 	.word	0x08009a8c
 8005330:	08009aa3 	.word	0x08009aa3
 8005334:	abcd330e 	.word	0xabcd330e
 8005338:	e66d1234 	.word	0xe66d1234
 800533c:	0005deec 	.word	0x0005deec
 8005340:	5851f42d 	.word	0x5851f42d
 8005344:	4c957f2d 	.word	0x4c957f2d

08005348 <__cvt>:
 8005348:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800534c:	ec57 6b10 	vmov	r6, r7, d0
 8005350:	2f00      	cmp	r7, #0
 8005352:	460c      	mov	r4, r1
 8005354:	4619      	mov	r1, r3
 8005356:	463b      	mov	r3, r7
 8005358:	bfbb      	ittet	lt
 800535a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800535e:	461f      	movlt	r7, r3
 8005360:	2300      	movge	r3, #0
 8005362:	232d      	movlt	r3, #45	@ 0x2d
 8005364:	700b      	strb	r3, [r1, #0]
 8005366:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005368:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800536c:	4691      	mov	r9, r2
 800536e:	f023 0820 	bic.w	r8, r3, #32
 8005372:	bfbc      	itt	lt
 8005374:	4632      	movlt	r2, r6
 8005376:	4616      	movlt	r6, r2
 8005378:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800537c:	d005      	beq.n	800538a <__cvt+0x42>
 800537e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005382:	d100      	bne.n	8005386 <__cvt+0x3e>
 8005384:	3401      	adds	r4, #1
 8005386:	2102      	movs	r1, #2
 8005388:	e000      	b.n	800538c <__cvt+0x44>
 800538a:	2103      	movs	r1, #3
 800538c:	ab03      	add	r3, sp, #12
 800538e:	9301      	str	r3, [sp, #4]
 8005390:	ab02      	add	r3, sp, #8
 8005392:	9300      	str	r3, [sp, #0]
 8005394:	ec47 6b10 	vmov	d0, r6, r7
 8005398:	4653      	mov	r3, sl
 800539a:	4622      	mov	r2, r4
 800539c:	f001 f894 	bl	80064c8 <_dtoa_r>
 80053a0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80053a4:	4605      	mov	r5, r0
 80053a6:	d119      	bne.n	80053dc <__cvt+0x94>
 80053a8:	f019 0f01 	tst.w	r9, #1
 80053ac:	d00e      	beq.n	80053cc <__cvt+0x84>
 80053ae:	eb00 0904 	add.w	r9, r0, r4
 80053b2:	2200      	movs	r2, #0
 80053b4:	2300      	movs	r3, #0
 80053b6:	4630      	mov	r0, r6
 80053b8:	4639      	mov	r1, r7
 80053ba:	f7fb fb85 	bl	8000ac8 <__aeabi_dcmpeq>
 80053be:	b108      	cbz	r0, 80053c4 <__cvt+0x7c>
 80053c0:	f8cd 900c 	str.w	r9, [sp, #12]
 80053c4:	2230      	movs	r2, #48	@ 0x30
 80053c6:	9b03      	ldr	r3, [sp, #12]
 80053c8:	454b      	cmp	r3, r9
 80053ca:	d31e      	bcc.n	800540a <__cvt+0xc2>
 80053cc:	9b03      	ldr	r3, [sp, #12]
 80053ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80053d0:	1b5b      	subs	r3, r3, r5
 80053d2:	4628      	mov	r0, r5
 80053d4:	6013      	str	r3, [r2, #0]
 80053d6:	b004      	add	sp, #16
 80053d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80053e0:	eb00 0904 	add.w	r9, r0, r4
 80053e4:	d1e5      	bne.n	80053b2 <__cvt+0x6a>
 80053e6:	7803      	ldrb	r3, [r0, #0]
 80053e8:	2b30      	cmp	r3, #48	@ 0x30
 80053ea:	d10a      	bne.n	8005402 <__cvt+0xba>
 80053ec:	2200      	movs	r2, #0
 80053ee:	2300      	movs	r3, #0
 80053f0:	4630      	mov	r0, r6
 80053f2:	4639      	mov	r1, r7
 80053f4:	f7fb fb68 	bl	8000ac8 <__aeabi_dcmpeq>
 80053f8:	b918      	cbnz	r0, 8005402 <__cvt+0xba>
 80053fa:	f1c4 0401 	rsb	r4, r4, #1
 80053fe:	f8ca 4000 	str.w	r4, [sl]
 8005402:	f8da 3000 	ldr.w	r3, [sl]
 8005406:	4499      	add	r9, r3
 8005408:	e7d3      	b.n	80053b2 <__cvt+0x6a>
 800540a:	1c59      	adds	r1, r3, #1
 800540c:	9103      	str	r1, [sp, #12]
 800540e:	701a      	strb	r2, [r3, #0]
 8005410:	e7d9      	b.n	80053c6 <__cvt+0x7e>

08005412 <__exponent>:
 8005412:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005414:	2900      	cmp	r1, #0
 8005416:	bfba      	itte	lt
 8005418:	4249      	neglt	r1, r1
 800541a:	232d      	movlt	r3, #45	@ 0x2d
 800541c:	232b      	movge	r3, #43	@ 0x2b
 800541e:	2909      	cmp	r1, #9
 8005420:	7002      	strb	r2, [r0, #0]
 8005422:	7043      	strb	r3, [r0, #1]
 8005424:	dd29      	ble.n	800547a <__exponent+0x68>
 8005426:	f10d 0307 	add.w	r3, sp, #7
 800542a:	461d      	mov	r5, r3
 800542c:	270a      	movs	r7, #10
 800542e:	461a      	mov	r2, r3
 8005430:	fbb1 f6f7 	udiv	r6, r1, r7
 8005434:	fb07 1416 	mls	r4, r7, r6, r1
 8005438:	3430      	adds	r4, #48	@ 0x30
 800543a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800543e:	460c      	mov	r4, r1
 8005440:	2c63      	cmp	r4, #99	@ 0x63
 8005442:	f103 33ff 	add.w	r3, r3, #4294967295
 8005446:	4631      	mov	r1, r6
 8005448:	dcf1      	bgt.n	800542e <__exponent+0x1c>
 800544a:	3130      	adds	r1, #48	@ 0x30
 800544c:	1e94      	subs	r4, r2, #2
 800544e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005452:	1c41      	adds	r1, r0, #1
 8005454:	4623      	mov	r3, r4
 8005456:	42ab      	cmp	r3, r5
 8005458:	d30a      	bcc.n	8005470 <__exponent+0x5e>
 800545a:	f10d 0309 	add.w	r3, sp, #9
 800545e:	1a9b      	subs	r3, r3, r2
 8005460:	42ac      	cmp	r4, r5
 8005462:	bf88      	it	hi
 8005464:	2300      	movhi	r3, #0
 8005466:	3302      	adds	r3, #2
 8005468:	4403      	add	r3, r0
 800546a:	1a18      	subs	r0, r3, r0
 800546c:	b003      	add	sp, #12
 800546e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005470:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005474:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005478:	e7ed      	b.n	8005456 <__exponent+0x44>
 800547a:	2330      	movs	r3, #48	@ 0x30
 800547c:	3130      	adds	r1, #48	@ 0x30
 800547e:	7083      	strb	r3, [r0, #2]
 8005480:	70c1      	strb	r1, [r0, #3]
 8005482:	1d03      	adds	r3, r0, #4
 8005484:	e7f1      	b.n	800546a <__exponent+0x58>
	...

08005488 <_printf_float>:
 8005488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800548c:	b08d      	sub	sp, #52	@ 0x34
 800548e:	460c      	mov	r4, r1
 8005490:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005494:	4616      	mov	r6, r2
 8005496:	461f      	mov	r7, r3
 8005498:	4605      	mov	r5, r0
 800549a:	f000 feef 	bl	800627c <_localeconv_r>
 800549e:	6803      	ldr	r3, [r0, #0]
 80054a0:	9304      	str	r3, [sp, #16]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7fa fee4 	bl	8000270 <strlen>
 80054a8:	2300      	movs	r3, #0
 80054aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80054ac:	f8d8 3000 	ldr.w	r3, [r8]
 80054b0:	9005      	str	r0, [sp, #20]
 80054b2:	3307      	adds	r3, #7
 80054b4:	f023 0307 	bic.w	r3, r3, #7
 80054b8:	f103 0208 	add.w	r2, r3, #8
 80054bc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80054c0:	f8d4 b000 	ldr.w	fp, [r4]
 80054c4:	f8c8 2000 	str.w	r2, [r8]
 80054c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80054cc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80054d0:	9307      	str	r3, [sp, #28]
 80054d2:	f8cd 8018 	str.w	r8, [sp, #24]
 80054d6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80054da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054de:	4b9c      	ldr	r3, [pc, #624]	@ (8005750 <_printf_float+0x2c8>)
 80054e0:	f04f 32ff 	mov.w	r2, #4294967295
 80054e4:	f7fb fb22 	bl	8000b2c <__aeabi_dcmpun>
 80054e8:	bb70      	cbnz	r0, 8005548 <_printf_float+0xc0>
 80054ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054ee:	4b98      	ldr	r3, [pc, #608]	@ (8005750 <_printf_float+0x2c8>)
 80054f0:	f04f 32ff 	mov.w	r2, #4294967295
 80054f4:	f7fb fafc 	bl	8000af0 <__aeabi_dcmple>
 80054f8:	bb30      	cbnz	r0, 8005548 <_printf_float+0xc0>
 80054fa:	2200      	movs	r2, #0
 80054fc:	2300      	movs	r3, #0
 80054fe:	4640      	mov	r0, r8
 8005500:	4649      	mov	r1, r9
 8005502:	f7fb faeb 	bl	8000adc <__aeabi_dcmplt>
 8005506:	b110      	cbz	r0, 800550e <_printf_float+0x86>
 8005508:	232d      	movs	r3, #45	@ 0x2d
 800550a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800550e:	4a91      	ldr	r2, [pc, #580]	@ (8005754 <_printf_float+0x2cc>)
 8005510:	4b91      	ldr	r3, [pc, #580]	@ (8005758 <_printf_float+0x2d0>)
 8005512:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005516:	bf94      	ite	ls
 8005518:	4690      	movls	r8, r2
 800551a:	4698      	movhi	r8, r3
 800551c:	2303      	movs	r3, #3
 800551e:	6123      	str	r3, [r4, #16]
 8005520:	f02b 0304 	bic.w	r3, fp, #4
 8005524:	6023      	str	r3, [r4, #0]
 8005526:	f04f 0900 	mov.w	r9, #0
 800552a:	9700      	str	r7, [sp, #0]
 800552c:	4633      	mov	r3, r6
 800552e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005530:	4621      	mov	r1, r4
 8005532:	4628      	mov	r0, r5
 8005534:	f000 f9d2 	bl	80058dc <_printf_common>
 8005538:	3001      	adds	r0, #1
 800553a:	f040 808d 	bne.w	8005658 <_printf_float+0x1d0>
 800553e:	f04f 30ff 	mov.w	r0, #4294967295
 8005542:	b00d      	add	sp, #52	@ 0x34
 8005544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005548:	4642      	mov	r2, r8
 800554a:	464b      	mov	r3, r9
 800554c:	4640      	mov	r0, r8
 800554e:	4649      	mov	r1, r9
 8005550:	f7fb faec 	bl	8000b2c <__aeabi_dcmpun>
 8005554:	b140      	cbz	r0, 8005568 <_printf_float+0xe0>
 8005556:	464b      	mov	r3, r9
 8005558:	2b00      	cmp	r3, #0
 800555a:	bfbc      	itt	lt
 800555c:	232d      	movlt	r3, #45	@ 0x2d
 800555e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005562:	4a7e      	ldr	r2, [pc, #504]	@ (800575c <_printf_float+0x2d4>)
 8005564:	4b7e      	ldr	r3, [pc, #504]	@ (8005760 <_printf_float+0x2d8>)
 8005566:	e7d4      	b.n	8005512 <_printf_float+0x8a>
 8005568:	6863      	ldr	r3, [r4, #4]
 800556a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800556e:	9206      	str	r2, [sp, #24]
 8005570:	1c5a      	adds	r2, r3, #1
 8005572:	d13b      	bne.n	80055ec <_printf_float+0x164>
 8005574:	2306      	movs	r3, #6
 8005576:	6063      	str	r3, [r4, #4]
 8005578:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800557c:	2300      	movs	r3, #0
 800557e:	6022      	str	r2, [r4, #0]
 8005580:	9303      	str	r3, [sp, #12]
 8005582:	ab0a      	add	r3, sp, #40	@ 0x28
 8005584:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005588:	ab09      	add	r3, sp, #36	@ 0x24
 800558a:	9300      	str	r3, [sp, #0]
 800558c:	6861      	ldr	r1, [r4, #4]
 800558e:	ec49 8b10 	vmov	d0, r8, r9
 8005592:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005596:	4628      	mov	r0, r5
 8005598:	f7ff fed6 	bl	8005348 <__cvt>
 800559c:	9b06      	ldr	r3, [sp, #24]
 800559e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80055a0:	2b47      	cmp	r3, #71	@ 0x47
 80055a2:	4680      	mov	r8, r0
 80055a4:	d129      	bne.n	80055fa <_printf_float+0x172>
 80055a6:	1cc8      	adds	r0, r1, #3
 80055a8:	db02      	blt.n	80055b0 <_printf_float+0x128>
 80055aa:	6863      	ldr	r3, [r4, #4]
 80055ac:	4299      	cmp	r1, r3
 80055ae:	dd41      	ble.n	8005634 <_printf_float+0x1ac>
 80055b0:	f1aa 0a02 	sub.w	sl, sl, #2
 80055b4:	fa5f fa8a 	uxtb.w	sl, sl
 80055b8:	3901      	subs	r1, #1
 80055ba:	4652      	mov	r2, sl
 80055bc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80055c0:	9109      	str	r1, [sp, #36]	@ 0x24
 80055c2:	f7ff ff26 	bl	8005412 <__exponent>
 80055c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80055c8:	1813      	adds	r3, r2, r0
 80055ca:	2a01      	cmp	r2, #1
 80055cc:	4681      	mov	r9, r0
 80055ce:	6123      	str	r3, [r4, #16]
 80055d0:	dc02      	bgt.n	80055d8 <_printf_float+0x150>
 80055d2:	6822      	ldr	r2, [r4, #0]
 80055d4:	07d2      	lsls	r2, r2, #31
 80055d6:	d501      	bpl.n	80055dc <_printf_float+0x154>
 80055d8:	3301      	adds	r3, #1
 80055da:	6123      	str	r3, [r4, #16]
 80055dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d0a2      	beq.n	800552a <_printf_float+0xa2>
 80055e4:	232d      	movs	r3, #45	@ 0x2d
 80055e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055ea:	e79e      	b.n	800552a <_printf_float+0xa2>
 80055ec:	9a06      	ldr	r2, [sp, #24]
 80055ee:	2a47      	cmp	r2, #71	@ 0x47
 80055f0:	d1c2      	bne.n	8005578 <_printf_float+0xf0>
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1c0      	bne.n	8005578 <_printf_float+0xf0>
 80055f6:	2301      	movs	r3, #1
 80055f8:	e7bd      	b.n	8005576 <_printf_float+0xee>
 80055fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80055fe:	d9db      	bls.n	80055b8 <_printf_float+0x130>
 8005600:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005604:	d118      	bne.n	8005638 <_printf_float+0x1b0>
 8005606:	2900      	cmp	r1, #0
 8005608:	6863      	ldr	r3, [r4, #4]
 800560a:	dd0b      	ble.n	8005624 <_printf_float+0x19c>
 800560c:	6121      	str	r1, [r4, #16]
 800560e:	b913      	cbnz	r3, 8005616 <_printf_float+0x18e>
 8005610:	6822      	ldr	r2, [r4, #0]
 8005612:	07d0      	lsls	r0, r2, #31
 8005614:	d502      	bpl.n	800561c <_printf_float+0x194>
 8005616:	3301      	adds	r3, #1
 8005618:	440b      	add	r3, r1
 800561a:	6123      	str	r3, [r4, #16]
 800561c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800561e:	f04f 0900 	mov.w	r9, #0
 8005622:	e7db      	b.n	80055dc <_printf_float+0x154>
 8005624:	b913      	cbnz	r3, 800562c <_printf_float+0x1a4>
 8005626:	6822      	ldr	r2, [r4, #0]
 8005628:	07d2      	lsls	r2, r2, #31
 800562a:	d501      	bpl.n	8005630 <_printf_float+0x1a8>
 800562c:	3302      	adds	r3, #2
 800562e:	e7f4      	b.n	800561a <_printf_float+0x192>
 8005630:	2301      	movs	r3, #1
 8005632:	e7f2      	b.n	800561a <_printf_float+0x192>
 8005634:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005638:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800563a:	4299      	cmp	r1, r3
 800563c:	db05      	blt.n	800564a <_printf_float+0x1c2>
 800563e:	6823      	ldr	r3, [r4, #0]
 8005640:	6121      	str	r1, [r4, #16]
 8005642:	07d8      	lsls	r0, r3, #31
 8005644:	d5ea      	bpl.n	800561c <_printf_float+0x194>
 8005646:	1c4b      	adds	r3, r1, #1
 8005648:	e7e7      	b.n	800561a <_printf_float+0x192>
 800564a:	2900      	cmp	r1, #0
 800564c:	bfd4      	ite	le
 800564e:	f1c1 0202 	rsble	r2, r1, #2
 8005652:	2201      	movgt	r2, #1
 8005654:	4413      	add	r3, r2
 8005656:	e7e0      	b.n	800561a <_printf_float+0x192>
 8005658:	6823      	ldr	r3, [r4, #0]
 800565a:	055a      	lsls	r2, r3, #21
 800565c:	d407      	bmi.n	800566e <_printf_float+0x1e6>
 800565e:	6923      	ldr	r3, [r4, #16]
 8005660:	4642      	mov	r2, r8
 8005662:	4631      	mov	r1, r6
 8005664:	4628      	mov	r0, r5
 8005666:	47b8      	blx	r7
 8005668:	3001      	adds	r0, #1
 800566a:	d12b      	bne.n	80056c4 <_printf_float+0x23c>
 800566c:	e767      	b.n	800553e <_printf_float+0xb6>
 800566e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005672:	f240 80dd 	bls.w	8005830 <_printf_float+0x3a8>
 8005676:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800567a:	2200      	movs	r2, #0
 800567c:	2300      	movs	r3, #0
 800567e:	f7fb fa23 	bl	8000ac8 <__aeabi_dcmpeq>
 8005682:	2800      	cmp	r0, #0
 8005684:	d033      	beq.n	80056ee <_printf_float+0x266>
 8005686:	4a37      	ldr	r2, [pc, #220]	@ (8005764 <_printf_float+0x2dc>)
 8005688:	2301      	movs	r3, #1
 800568a:	4631      	mov	r1, r6
 800568c:	4628      	mov	r0, r5
 800568e:	47b8      	blx	r7
 8005690:	3001      	adds	r0, #1
 8005692:	f43f af54 	beq.w	800553e <_printf_float+0xb6>
 8005696:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800569a:	4543      	cmp	r3, r8
 800569c:	db02      	blt.n	80056a4 <_printf_float+0x21c>
 800569e:	6823      	ldr	r3, [r4, #0]
 80056a0:	07d8      	lsls	r0, r3, #31
 80056a2:	d50f      	bpl.n	80056c4 <_printf_float+0x23c>
 80056a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056a8:	4631      	mov	r1, r6
 80056aa:	4628      	mov	r0, r5
 80056ac:	47b8      	blx	r7
 80056ae:	3001      	adds	r0, #1
 80056b0:	f43f af45 	beq.w	800553e <_printf_float+0xb6>
 80056b4:	f04f 0900 	mov.w	r9, #0
 80056b8:	f108 38ff 	add.w	r8, r8, #4294967295
 80056bc:	f104 0a1a 	add.w	sl, r4, #26
 80056c0:	45c8      	cmp	r8, r9
 80056c2:	dc09      	bgt.n	80056d8 <_printf_float+0x250>
 80056c4:	6823      	ldr	r3, [r4, #0]
 80056c6:	079b      	lsls	r3, r3, #30
 80056c8:	f100 8103 	bmi.w	80058d2 <_printf_float+0x44a>
 80056cc:	68e0      	ldr	r0, [r4, #12]
 80056ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80056d0:	4298      	cmp	r0, r3
 80056d2:	bfb8      	it	lt
 80056d4:	4618      	movlt	r0, r3
 80056d6:	e734      	b.n	8005542 <_printf_float+0xba>
 80056d8:	2301      	movs	r3, #1
 80056da:	4652      	mov	r2, sl
 80056dc:	4631      	mov	r1, r6
 80056de:	4628      	mov	r0, r5
 80056e0:	47b8      	blx	r7
 80056e2:	3001      	adds	r0, #1
 80056e4:	f43f af2b 	beq.w	800553e <_printf_float+0xb6>
 80056e8:	f109 0901 	add.w	r9, r9, #1
 80056ec:	e7e8      	b.n	80056c0 <_printf_float+0x238>
 80056ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	dc39      	bgt.n	8005768 <_printf_float+0x2e0>
 80056f4:	4a1b      	ldr	r2, [pc, #108]	@ (8005764 <_printf_float+0x2dc>)
 80056f6:	2301      	movs	r3, #1
 80056f8:	4631      	mov	r1, r6
 80056fa:	4628      	mov	r0, r5
 80056fc:	47b8      	blx	r7
 80056fe:	3001      	adds	r0, #1
 8005700:	f43f af1d 	beq.w	800553e <_printf_float+0xb6>
 8005704:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005708:	ea59 0303 	orrs.w	r3, r9, r3
 800570c:	d102      	bne.n	8005714 <_printf_float+0x28c>
 800570e:	6823      	ldr	r3, [r4, #0]
 8005710:	07d9      	lsls	r1, r3, #31
 8005712:	d5d7      	bpl.n	80056c4 <_printf_float+0x23c>
 8005714:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005718:	4631      	mov	r1, r6
 800571a:	4628      	mov	r0, r5
 800571c:	47b8      	blx	r7
 800571e:	3001      	adds	r0, #1
 8005720:	f43f af0d 	beq.w	800553e <_printf_float+0xb6>
 8005724:	f04f 0a00 	mov.w	sl, #0
 8005728:	f104 0b1a 	add.w	fp, r4, #26
 800572c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800572e:	425b      	negs	r3, r3
 8005730:	4553      	cmp	r3, sl
 8005732:	dc01      	bgt.n	8005738 <_printf_float+0x2b0>
 8005734:	464b      	mov	r3, r9
 8005736:	e793      	b.n	8005660 <_printf_float+0x1d8>
 8005738:	2301      	movs	r3, #1
 800573a:	465a      	mov	r2, fp
 800573c:	4631      	mov	r1, r6
 800573e:	4628      	mov	r0, r5
 8005740:	47b8      	blx	r7
 8005742:	3001      	adds	r0, #1
 8005744:	f43f aefb 	beq.w	800553e <_printf_float+0xb6>
 8005748:	f10a 0a01 	add.w	sl, sl, #1
 800574c:	e7ee      	b.n	800572c <_printf_float+0x2a4>
 800574e:	bf00      	nop
 8005750:	7fefffff 	.word	0x7fefffff
 8005754:	08009afb 	.word	0x08009afb
 8005758:	08009aff 	.word	0x08009aff
 800575c:	08009b03 	.word	0x08009b03
 8005760:	08009b07 	.word	0x08009b07
 8005764:	08009b0b 	.word	0x08009b0b
 8005768:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800576a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800576e:	4553      	cmp	r3, sl
 8005770:	bfa8      	it	ge
 8005772:	4653      	movge	r3, sl
 8005774:	2b00      	cmp	r3, #0
 8005776:	4699      	mov	r9, r3
 8005778:	dc36      	bgt.n	80057e8 <_printf_float+0x360>
 800577a:	f04f 0b00 	mov.w	fp, #0
 800577e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005782:	f104 021a 	add.w	r2, r4, #26
 8005786:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005788:	9306      	str	r3, [sp, #24]
 800578a:	eba3 0309 	sub.w	r3, r3, r9
 800578e:	455b      	cmp	r3, fp
 8005790:	dc31      	bgt.n	80057f6 <_printf_float+0x36e>
 8005792:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005794:	459a      	cmp	sl, r3
 8005796:	dc3a      	bgt.n	800580e <_printf_float+0x386>
 8005798:	6823      	ldr	r3, [r4, #0]
 800579a:	07da      	lsls	r2, r3, #31
 800579c:	d437      	bmi.n	800580e <_printf_float+0x386>
 800579e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057a0:	ebaa 0903 	sub.w	r9, sl, r3
 80057a4:	9b06      	ldr	r3, [sp, #24]
 80057a6:	ebaa 0303 	sub.w	r3, sl, r3
 80057aa:	4599      	cmp	r9, r3
 80057ac:	bfa8      	it	ge
 80057ae:	4699      	movge	r9, r3
 80057b0:	f1b9 0f00 	cmp.w	r9, #0
 80057b4:	dc33      	bgt.n	800581e <_printf_float+0x396>
 80057b6:	f04f 0800 	mov.w	r8, #0
 80057ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057be:	f104 0b1a 	add.w	fp, r4, #26
 80057c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057c4:	ebaa 0303 	sub.w	r3, sl, r3
 80057c8:	eba3 0309 	sub.w	r3, r3, r9
 80057cc:	4543      	cmp	r3, r8
 80057ce:	f77f af79 	ble.w	80056c4 <_printf_float+0x23c>
 80057d2:	2301      	movs	r3, #1
 80057d4:	465a      	mov	r2, fp
 80057d6:	4631      	mov	r1, r6
 80057d8:	4628      	mov	r0, r5
 80057da:	47b8      	blx	r7
 80057dc:	3001      	adds	r0, #1
 80057de:	f43f aeae 	beq.w	800553e <_printf_float+0xb6>
 80057e2:	f108 0801 	add.w	r8, r8, #1
 80057e6:	e7ec      	b.n	80057c2 <_printf_float+0x33a>
 80057e8:	4642      	mov	r2, r8
 80057ea:	4631      	mov	r1, r6
 80057ec:	4628      	mov	r0, r5
 80057ee:	47b8      	blx	r7
 80057f0:	3001      	adds	r0, #1
 80057f2:	d1c2      	bne.n	800577a <_printf_float+0x2f2>
 80057f4:	e6a3      	b.n	800553e <_printf_float+0xb6>
 80057f6:	2301      	movs	r3, #1
 80057f8:	4631      	mov	r1, r6
 80057fa:	4628      	mov	r0, r5
 80057fc:	9206      	str	r2, [sp, #24]
 80057fe:	47b8      	blx	r7
 8005800:	3001      	adds	r0, #1
 8005802:	f43f ae9c 	beq.w	800553e <_printf_float+0xb6>
 8005806:	9a06      	ldr	r2, [sp, #24]
 8005808:	f10b 0b01 	add.w	fp, fp, #1
 800580c:	e7bb      	b.n	8005786 <_printf_float+0x2fe>
 800580e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005812:	4631      	mov	r1, r6
 8005814:	4628      	mov	r0, r5
 8005816:	47b8      	blx	r7
 8005818:	3001      	adds	r0, #1
 800581a:	d1c0      	bne.n	800579e <_printf_float+0x316>
 800581c:	e68f      	b.n	800553e <_printf_float+0xb6>
 800581e:	9a06      	ldr	r2, [sp, #24]
 8005820:	464b      	mov	r3, r9
 8005822:	4442      	add	r2, r8
 8005824:	4631      	mov	r1, r6
 8005826:	4628      	mov	r0, r5
 8005828:	47b8      	blx	r7
 800582a:	3001      	adds	r0, #1
 800582c:	d1c3      	bne.n	80057b6 <_printf_float+0x32e>
 800582e:	e686      	b.n	800553e <_printf_float+0xb6>
 8005830:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005834:	f1ba 0f01 	cmp.w	sl, #1
 8005838:	dc01      	bgt.n	800583e <_printf_float+0x3b6>
 800583a:	07db      	lsls	r3, r3, #31
 800583c:	d536      	bpl.n	80058ac <_printf_float+0x424>
 800583e:	2301      	movs	r3, #1
 8005840:	4642      	mov	r2, r8
 8005842:	4631      	mov	r1, r6
 8005844:	4628      	mov	r0, r5
 8005846:	47b8      	blx	r7
 8005848:	3001      	adds	r0, #1
 800584a:	f43f ae78 	beq.w	800553e <_printf_float+0xb6>
 800584e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005852:	4631      	mov	r1, r6
 8005854:	4628      	mov	r0, r5
 8005856:	47b8      	blx	r7
 8005858:	3001      	adds	r0, #1
 800585a:	f43f ae70 	beq.w	800553e <_printf_float+0xb6>
 800585e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005862:	2200      	movs	r2, #0
 8005864:	2300      	movs	r3, #0
 8005866:	f10a 3aff 	add.w	sl, sl, #4294967295
 800586a:	f7fb f92d 	bl	8000ac8 <__aeabi_dcmpeq>
 800586e:	b9c0      	cbnz	r0, 80058a2 <_printf_float+0x41a>
 8005870:	4653      	mov	r3, sl
 8005872:	f108 0201 	add.w	r2, r8, #1
 8005876:	4631      	mov	r1, r6
 8005878:	4628      	mov	r0, r5
 800587a:	47b8      	blx	r7
 800587c:	3001      	adds	r0, #1
 800587e:	d10c      	bne.n	800589a <_printf_float+0x412>
 8005880:	e65d      	b.n	800553e <_printf_float+0xb6>
 8005882:	2301      	movs	r3, #1
 8005884:	465a      	mov	r2, fp
 8005886:	4631      	mov	r1, r6
 8005888:	4628      	mov	r0, r5
 800588a:	47b8      	blx	r7
 800588c:	3001      	adds	r0, #1
 800588e:	f43f ae56 	beq.w	800553e <_printf_float+0xb6>
 8005892:	f108 0801 	add.w	r8, r8, #1
 8005896:	45d0      	cmp	r8, sl
 8005898:	dbf3      	blt.n	8005882 <_printf_float+0x3fa>
 800589a:	464b      	mov	r3, r9
 800589c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80058a0:	e6df      	b.n	8005662 <_printf_float+0x1da>
 80058a2:	f04f 0800 	mov.w	r8, #0
 80058a6:	f104 0b1a 	add.w	fp, r4, #26
 80058aa:	e7f4      	b.n	8005896 <_printf_float+0x40e>
 80058ac:	2301      	movs	r3, #1
 80058ae:	4642      	mov	r2, r8
 80058b0:	e7e1      	b.n	8005876 <_printf_float+0x3ee>
 80058b2:	2301      	movs	r3, #1
 80058b4:	464a      	mov	r2, r9
 80058b6:	4631      	mov	r1, r6
 80058b8:	4628      	mov	r0, r5
 80058ba:	47b8      	blx	r7
 80058bc:	3001      	adds	r0, #1
 80058be:	f43f ae3e 	beq.w	800553e <_printf_float+0xb6>
 80058c2:	f108 0801 	add.w	r8, r8, #1
 80058c6:	68e3      	ldr	r3, [r4, #12]
 80058c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80058ca:	1a5b      	subs	r3, r3, r1
 80058cc:	4543      	cmp	r3, r8
 80058ce:	dcf0      	bgt.n	80058b2 <_printf_float+0x42a>
 80058d0:	e6fc      	b.n	80056cc <_printf_float+0x244>
 80058d2:	f04f 0800 	mov.w	r8, #0
 80058d6:	f104 0919 	add.w	r9, r4, #25
 80058da:	e7f4      	b.n	80058c6 <_printf_float+0x43e>

080058dc <_printf_common>:
 80058dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058e0:	4616      	mov	r6, r2
 80058e2:	4698      	mov	r8, r3
 80058e4:	688a      	ldr	r2, [r1, #8]
 80058e6:	690b      	ldr	r3, [r1, #16]
 80058e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80058ec:	4293      	cmp	r3, r2
 80058ee:	bfb8      	it	lt
 80058f0:	4613      	movlt	r3, r2
 80058f2:	6033      	str	r3, [r6, #0]
 80058f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80058f8:	4607      	mov	r7, r0
 80058fa:	460c      	mov	r4, r1
 80058fc:	b10a      	cbz	r2, 8005902 <_printf_common+0x26>
 80058fe:	3301      	adds	r3, #1
 8005900:	6033      	str	r3, [r6, #0]
 8005902:	6823      	ldr	r3, [r4, #0]
 8005904:	0699      	lsls	r1, r3, #26
 8005906:	bf42      	ittt	mi
 8005908:	6833      	ldrmi	r3, [r6, #0]
 800590a:	3302      	addmi	r3, #2
 800590c:	6033      	strmi	r3, [r6, #0]
 800590e:	6825      	ldr	r5, [r4, #0]
 8005910:	f015 0506 	ands.w	r5, r5, #6
 8005914:	d106      	bne.n	8005924 <_printf_common+0x48>
 8005916:	f104 0a19 	add.w	sl, r4, #25
 800591a:	68e3      	ldr	r3, [r4, #12]
 800591c:	6832      	ldr	r2, [r6, #0]
 800591e:	1a9b      	subs	r3, r3, r2
 8005920:	42ab      	cmp	r3, r5
 8005922:	dc26      	bgt.n	8005972 <_printf_common+0x96>
 8005924:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005928:	6822      	ldr	r2, [r4, #0]
 800592a:	3b00      	subs	r3, #0
 800592c:	bf18      	it	ne
 800592e:	2301      	movne	r3, #1
 8005930:	0692      	lsls	r2, r2, #26
 8005932:	d42b      	bmi.n	800598c <_printf_common+0xb0>
 8005934:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005938:	4641      	mov	r1, r8
 800593a:	4638      	mov	r0, r7
 800593c:	47c8      	blx	r9
 800593e:	3001      	adds	r0, #1
 8005940:	d01e      	beq.n	8005980 <_printf_common+0xa4>
 8005942:	6823      	ldr	r3, [r4, #0]
 8005944:	6922      	ldr	r2, [r4, #16]
 8005946:	f003 0306 	and.w	r3, r3, #6
 800594a:	2b04      	cmp	r3, #4
 800594c:	bf02      	ittt	eq
 800594e:	68e5      	ldreq	r5, [r4, #12]
 8005950:	6833      	ldreq	r3, [r6, #0]
 8005952:	1aed      	subeq	r5, r5, r3
 8005954:	68a3      	ldr	r3, [r4, #8]
 8005956:	bf0c      	ite	eq
 8005958:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800595c:	2500      	movne	r5, #0
 800595e:	4293      	cmp	r3, r2
 8005960:	bfc4      	itt	gt
 8005962:	1a9b      	subgt	r3, r3, r2
 8005964:	18ed      	addgt	r5, r5, r3
 8005966:	2600      	movs	r6, #0
 8005968:	341a      	adds	r4, #26
 800596a:	42b5      	cmp	r5, r6
 800596c:	d11a      	bne.n	80059a4 <_printf_common+0xc8>
 800596e:	2000      	movs	r0, #0
 8005970:	e008      	b.n	8005984 <_printf_common+0xa8>
 8005972:	2301      	movs	r3, #1
 8005974:	4652      	mov	r2, sl
 8005976:	4641      	mov	r1, r8
 8005978:	4638      	mov	r0, r7
 800597a:	47c8      	blx	r9
 800597c:	3001      	adds	r0, #1
 800597e:	d103      	bne.n	8005988 <_printf_common+0xac>
 8005980:	f04f 30ff 	mov.w	r0, #4294967295
 8005984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005988:	3501      	adds	r5, #1
 800598a:	e7c6      	b.n	800591a <_printf_common+0x3e>
 800598c:	18e1      	adds	r1, r4, r3
 800598e:	1c5a      	adds	r2, r3, #1
 8005990:	2030      	movs	r0, #48	@ 0x30
 8005992:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005996:	4422      	add	r2, r4
 8005998:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800599c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80059a0:	3302      	adds	r3, #2
 80059a2:	e7c7      	b.n	8005934 <_printf_common+0x58>
 80059a4:	2301      	movs	r3, #1
 80059a6:	4622      	mov	r2, r4
 80059a8:	4641      	mov	r1, r8
 80059aa:	4638      	mov	r0, r7
 80059ac:	47c8      	blx	r9
 80059ae:	3001      	adds	r0, #1
 80059b0:	d0e6      	beq.n	8005980 <_printf_common+0xa4>
 80059b2:	3601      	adds	r6, #1
 80059b4:	e7d9      	b.n	800596a <_printf_common+0x8e>
	...

080059b8 <_printf_i>:
 80059b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059bc:	7e0f      	ldrb	r7, [r1, #24]
 80059be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80059c0:	2f78      	cmp	r7, #120	@ 0x78
 80059c2:	4691      	mov	r9, r2
 80059c4:	4680      	mov	r8, r0
 80059c6:	460c      	mov	r4, r1
 80059c8:	469a      	mov	sl, r3
 80059ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80059ce:	d807      	bhi.n	80059e0 <_printf_i+0x28>
 80059d0:	2f62      	cmp	r7, #98	@ 0x62
 80059d2:	d80a      	bhi.n	80059ea <_printf_i+0x32>
 80059d4:	2f00      	cmp	r7, #0
 80059d6:	f000 80d2 	beq.w	8005b7e <_printf_i+0x1c6>
 80059da:	2f58      	cmp	r7, #88	@ 0x58
 80059dc:	f000 80b9 	beq.w	8005b52 <_printf_i+0x19a>
 80059e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80059e8:	e03a      	b.n	8005a60 <_printf_i+0xa8>
 80059ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80059ee:	2b15      	cmp	r3, #21
 80059f0:	d8f6      	bhi.n	80059e0 <_printf_i+0x28>
 80059f2:	a101      	add	r1, pc, #4	@ (adr r1, 80059f8 <_printf_i+0x40>)
 80059f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059f8:	08005a51 	.word	0x08005a51
 80059fc:	08005a65 	.word	0x08005a65
 8005a00:	080059e1 	.word	0x080059e1
 8005a04:	080059e1 	.word	0x080059e1
 8005a08:	080059e1 	.word	0x080059e1
 8005a0c:	080059e1 	.word	0x080059e1
 8005a10:	08005a65 	.word	0x08005a65
 8005a14:	080059e1 	.word	0x080059e1
 8005a18:	080059e1 	.word	0x080059e1
 8005a1c:	080059e1 	.word	0x080059e1
 8005a20:	080059e1 	.word	0x080059e1
 8005a24:	08005b65 	.word	0x08005b65
 8005a28:	08005a8f 	.word	0x08005a8f
 8005a2c:	08005b1f 	.word	0x08005b1f
 8005a30:	080059e1 	.word	0x080059e1
 8005a34:	080059e1 	.word	0x080059e1
 8005a38:	08005b87 	.word	0x08005b87
 8005a3c:	080059e1 	.word	0x080059e1
 8005a40:	08005a8f 	.word	0x08005a8f
 8005a44:	080059e1 	.word	0x080059e1
 8005a48:	080059e1 	.word	0x080059e1
 8005a4c:	08005b27 	.word	0x08005b27
 8005a50:	6833      	ldr	r3, [r6, #0]
 8005a52:	1d1a      	adds	r2, r3, #4
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	6032      	str	r2, [r6, #0]
 8005a58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005a60:	2301      	movs	r3, #1
 8005a62:	e09d      	b.n	8005ba0 <_printf_i+0x1e8>
 8005a64:	6833      	ldr	r3, [r6, #0]
 8005a66:	6820      	ldr	r0, [r4, #0]
 8005a68:	1d19      	adds	r1, r3, #4
 8005a6a:	6031      	str	r1, [r6, #0]
 8005a6c:	0606      	lsls	r6, r0, #24
 8005a6e:	d501      	bpl.n	8005a74 <_printf_i+0xbc>
 8005a70:	681d      	ldr	r5, [r3, #0]
 8005a72:	e003      	b.n	8005a7c <_printf_i+0xc4>
 8005a74:	0645      	lsls	r5, r0, #25
 8005a76:	d5fb      	bpl.n	8005a70 <_printf_i+0xb8>
 8005a78:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005a7c:	2d00      	cmp	r5, #0
 8005a7e:	da03      	bge.n	8005a88 <_printf_i+0xd0>
 8005a80:	232d      	movs	r3, #45	@ 0x2d
 8005a82:	426d      	negs	r5, r5
 8005a84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a88:	4859      	ldr	r0, [pc, #356]	@ (8005bf0 <_printf_i+0x238>)
 8005a8a:	230a      	movs	r3, #10
 8005a8c:	e011      	b.n	8005ab2 <_printf_i+0xfa>
 8005a8e:	6821      	ldr	r1, [r4, #0]
 8005a90:	6833      	ldr	r3, [r6, #0]
 8005a92:	0608      	lsls	r0, r1, #24
 8005a94:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a98:	d402      	bmi.n	8005aa0 <_printf_i+0xe8>
 8005a9a:	0649      	lsls	r1, r1, #25
 8005a9c:	bf48      	it	mi
 8005a9e:	b2ad      	uxthmi	r5, r5
 8005aa0:	2f6f      	cmp	r7, #111	@ 0x6f
 8005aa2:	4853      	ldr	r0, [pc, #332]	@ (8005bf0 <_printf_i+0x238>)
 8005aa4:	6033      	str	r3, [r6, #0]
 8005aa6:	bf14      	ite	ne
 8005aa8:	230a      	movne	r3, #10
 8005aaa:	2308      	moveq	r3, #8
 8005aac:	2100      	movs	r1, #0
 8005aae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005ab2:	6866      	ldr	r6, [r4, #4]
 8005ab4:	60a6      	str	r6, [r4, #8]
 8005ab6:	2e00      	cmp	r6, #0
 8005ab8:	bfa2      	ittt	ge
 8005aba:	6821      	ldrge	r1, [r4, #0]
 8005abc:	f021 0104 	bicge.w	r1, r1, #4
 8005ac0:	6021      	strge	r1, [r4, #0]
 8005ac2:	b90d      	cbnz	r5, 8005ac8 <_printf_i+0x110>
 8005ac4:	2e00      	cmp	r6, #0
 8005ac6:	d04b      	beq.n	8005b60 <_printf_i+0x1a8>
 8005ac8:	4616      	mov	r6, r2
 8005aca:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ace:	fb03 5711 	mls	r7, r3, r1, r5
 8005ad2:	5dc7      	ldrb	r7, [r0, r7]
 8005ad4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ad8:	462f      	mov	r7, r5
 8005ada:	42bb      	cmp	r3, r7
 8005adc:	460d      	mov	r5, r1
 8005ade:	d9f4      	bls.n	8005aca <_printf_i+0x112>
 8005ae0:	2b08      	cmp	r3, #8
 8005ae2:	d10b      	bne.n	8005afc <_printf_i+0x144>
 8005ae4:	6823      	ldr	r3, [r4, #0]
 8005ae6:	07df      	lsls	r7, r3, #31
 8005ae8:	d508      	bpl.n	8005afc <_printf_i+0x144>
 8005aea:	6923      	ldr	r3, [r4, #16]
 8005aec:	6861      	ldr	r1, [r4, #4]
 8005aee:	4299      	cmp	r1, r3
 8005af0:	bfde      	ittt	le
 8005af2:	2330      	movle	r3, #48	@ 0x30
 8005af4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005af8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005afc:	1b92      	subs	r2, r2, r6
 8005afe:	6122      	str	r2, [r4, #16]
 8005b00:	f8cd a000 	str.w	sl, [sp]
 8005b04:	464b      	mov	r3, r9
 8005b06:	aa03      	add	r2, sp, #12
 8005b08:	4621      	mov	r1, r4
 8005b0a:	4640      	mov	r0, r8
 8005b0c:	f7ff fee6 	bl	80058dc <_printf_common>
 8005b10:	3001      	adds	r0, #1
 8005b12:	d14a      	bne.n	8005baa <_printf_i+0x1f2>
 8005b14:	f04f 30ff 	mov.w	r0, #4294967295
 8005b18:	b004      	add	sp, #16
 8005b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b1e:	6823      	ldr	r3, [r4, #0]
 8005b20:	f043 0320 	orr.w	r3, r3, #32
 8005b24:	6023      	str	r3, [r4, #0]
 8005b26:	4833      	ldr	r0, [pc, #204]	@ (8005bf4 <_printf_i+0x23c>)
 8005b28:	2778      	movs	r7, #120	@ 0x78
 8005b2a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005b2e:	6823      	ldr	r3, [r4, #0]
 8005b30:	6831      	ldr	r1, [r6, #0]
 8005b32:	061f      	lsls	r7, r3, #24
 8005b34:	f851 5b04 	ldr.w	r5, [r1], #4
 8005b38:	d402      	bmi.n	8005b40 <_printf_i+0x188>
 8005b3a:	065f      	lsls	r7, r3, #25
 8005b3c:	bf48      	it	mi
 8005b3e:	b2ad      	uxthmi	r5, r5
 8005b40:	6031      	str	r1, [r6, #0]
 8005b42:	07d9      	lsls	r1, r3, #31
 8005b44:	bf44      	itt	mi
 8005b46:	f043 0320 	orrmi.w	r3, r3, #32
 8005b4a:	6023      	strmi	r3, [r4, #0]
 8005b4c:	b11d      	cbz	r5, 8005b56 <_printf_i+0x19e>
 8005b4e:	2310      	movs	r3, #16
 8005b50:	e7ac      	b.n	8005aac <_printf_i+0xf4>
 8005b52:	4827      	ldr	r0, [pc, #156]	@ (8005bf0 <_printf_i+0x238>)
 8005b54:	e7e9      	b.n	8005b2a <_printf_i+0x172>
 8005b56:	6823      	ldr	r3, [r4, #0]
 8005b58:	f023 0320 	bic.w	r3, r3, #32
 8005b5c:	6023      	str	r3, [r4, #0]
 8005b5e:	e7f6      	b.n	8005b4e <_printf_i+0x196>
 8005b60:	4616      	mov	r6, r2
 8005b62:	e7bd      	b.n	8005ae0 <_printf_i+0x128>
 8005b64:	6833      	ldr	r3, [r6, #0]
 8005b66:	6825      	ldr	r5, [r4, #0]
 8005b68:	6961      	ldr	r1, [r4, #20]
 8005b6a:	1d18      	adds	r0, r3, #4
 8005b6c:	6030      	str	r0, [r6, #0]
 8005b6e:	062e      	lsls	r6, r5, #24
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	d501      	bpl.n	8005b78 <_printf_i+0x1c0>
 8005b74:	6019      	str	r1, [r3, #0]
 8005b76:	e002      	b.n	8005b7e <_printf_i+0x1c6>
 8005b78:	0668      	lsls	r0, r5, #25
 8005b7a:	d5fb      	bpl.n	8005b74 <_printf_i+0x1bc>
 8005b7c:	8019      	strh	r1, [r3, #0]
 8005b7e:	2300      	movs	r3, #0
 8005b80:	6123      	str	r3, [r4, #16]
 8005b82:	4616      	mov	r6, r2
 8005b84:	e7bc      	b.n	8005b00 <_printf_i+0x148>
 8005b86:	6833      	ldr	r3, [r6, #0]
 8005b88:	1d1a      	adds	r2, r3, #4
 8005b8a:	6032      	str	r2, [r6, #0]
 8005b8c:	681e      	ldr	r6, [r3, #0]
 8005b8e:	6862      	ldr	r2, [r4, #4]
 8005b90:	2100      	movs	r1, #0
 8005b92:	4630      	mov	r0, r6
 8005b94:	f7fa fb1c 	bl	80001d0 <memchr>
 8005b98:	b108      	cbz	r0, 8005b9e <_printf_i+0x1e6>
 8005b9a:	1b80      	subs	r0, r0, r6
 8005b9c:	6060      	str	r0, [r4, #4]
 8005b9e:	6863      	ldr	r3, [r4, #4]
 8005ba0:	6123      	str	r3, [r4, #16]
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ba8:	e7aa      	b.n	8005b00 <_printf_i+0x148>
 8005baa:	6923      	ldr	r3, [r4, #16]
 8005bac:	4632      	mov	r2, r6
 8005bae:	4649      	mov	r1, r9
 8005bb0:	4640      	mov	r0, r8
 8005bb2:	47d0      	blx	sl
 8005bb4:	3001      	adds	r0, #1
 8005bb6:	d0ad      	beq.n	8005b14 <_printf_i+0x15c>
 8005bb8:	6823      	ldr	r3, [r4, #0]
 8005bba:	079b      	lsls	r3, r3, #30
 8005bbc:	d413      	bmi.n	8005be6 <_printf_i+0x22e>
 8005bbe:	68e0      	ldr	r0, [r4, #12]
 8005bc0:	9b03      	ldr	r3, [sp, #12]
 8005bc2:	4298      	cmp	r0, r3
 8005bc4:	bfb8      	it	lt
 8005bc6:	4618      	movlt	r0, r3
 8005bc8:	e7a6      	b.n	8005b18 <_printf_i+0x160>
 8005bca:	2301      	movs	r3, #1
 8005bcc:	4632      	mov	r2, r6
 8005bce:	4649      	mov	r1, r9
 8005bd0:	4640      	mov	r0, r8
 8005bd2:	47d0      	blx	sl
 8005bd4:	3001      	adds	r0, #1
 8005bd6:	d09d      	beq.n	8005b14 <_printf_i+0x15c>
 8005bd8:	3501      	adds	r5, #1
 8005bda:	68e3      	ldr	r3, [r4, #12]
 8005bdc:	9903      	ldr	r1, [sp, #12]
 8005bde:	1a5b      	subs	r3, r3, r1
 8005be0:	42ab      	cmp	r3, r5
 8005be2:	dcf2      	bgt.n	8005bca <_printf_i+0x212>
 8005be4:	e7eb      	b.n	8005bbe <_printf_i+0x206>
 8005be6:	2500      	movs	r5, #0
 8005be8:	f104 0619 	add.w	r6, r4, #25
 8005bec:	e7f5      	b.n	8005bda <_printf_i+0x222>
 8005bee:	bf00      	nop
 8005bf0:	08009b0d 	.word	0x08009b0d
 8005bf4:	08009b1e 	.word	0x08009b1e

08005bf8 <_scanf_float>:
 8005bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bfc:	b087      	sub	sp, #28
 8005bfe:	4617      	mov	r7, r2
 8005c00:	9303      	str	r3, [sp, #12]
 8005c02:	688b      	ldr	r3, [r1, #8]
 8005c04:	1e5a      	subs	r2, r3, #1
 8005c06:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005c0a:	bf81      	itttt	hi
 8005c0c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005c10:	eb03 0b05 	addhi.w	fp, r3, r5
 8005c14:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005c18:	608b      	strhi	r3, [r1, #8]
 8005c1a:	680b      	ldr	r3, [r1, #0]
 8005c1c:	460a      	mov	r2, r1
 8005c1e:	f04f 0500 	mov.w	r5, #0
 8005c22:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005c26:	f842 3b1c 	str.w	r3, [r2], #28
 8005c2a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005c2e:	4680      	mov	r8, r0
 8005c30:	460c      	mov	r4, r1
 8005c32:	bf98      	it	ls
 8005c34:	f04f 0b00 	movls.w	fp, #0
 8005c38:	9201      	str	r2, [sp, #4]
 8005c3a:	4616      	mov	r6, r2
 8005c3c:	46aa      	mov	sl, r5
 8005c3e:	46a9      	mov	r9, r5
 8005c40:	9502      	str	r5, [sp, #8]
 8005c42:	68a2      	ldr	r2, [r4, #8]
 8005c44:	b152      	cbz	r2, 8005c5c <_scanf_float+0x64>
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	2b4e      	cmp	r3, #78	@ 0x4e
 8005c4c:	d864      	bhi.n	8005d18 <_scanf_float+0x120>
 8005c4e:	2b40      	cmp	r3, #64	@ 0x40
 8005c50:	d83c      	bhi.n	8005ccc <_scanf_float+0xd4>
 8005c52:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005c56:	b2c8      	uxtb	r0, r1
 8005c58:	280e      	cmp	r0, #14
 8005c5a:	d93a      	bls.n	8005cd2 <_scanf_float+0xda>
 8005c5c:	f1b9 0f00 	cmp.w	r9, #0
 8005c60:	d003      	beq.n	8005c6a <_scanf_float+0x72>
 8005c62:	6823      	ldr	r3, [r4, #0]
 8005c64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c68:	6023      	str	r3, [r4, #0]
 8005c6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c6e:	f1ba 0f01 	cmp.w	sl, #1
 8005c72:	f200 8117 	bhi.w	8005ea4 <_scanf_float+0x2ac>
 8005c76:	9b01      	ldr	r3, [sp, #4]
 8005c78:	429e      	cmp	r6, r3
 8005c7a:	f200 8108 	bhi.w	8005e8e <_scanf_float+0x296>
 8005c7e:	2001      	movs	r0, #1
 8005c80:	b007      	add	sp, #28
 8005c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c86:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005c8a:	2a0d      	cmp	r2, #13
 8005c8c:	d8e6      	bhi.n	8005c5c <_scanf_float+0x64>
 8005c8e:	a101      	add	r1, pc, #4	@ (adr r1, 8005c94 <_scanf_float+0x9c>)
 8005c90:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005c94:	08005ddb 	.word	0x08005ddb
 8005c98:	08005c5d 	.word	0x08005c5d
 8005c9c:	08005c5d 	.word	0x08005c5d
 8005ca0:	08005c5d 	.word	0x08005c5d
 8005ca4:	08005e3b 	.word	0x08005e3b
 8005ca8:	08005e13 	.word	0x08005e13
 8005cac:	08005c5d 	.word	0x08005c5d
 8005cb0:	08005c5d 	.word	0x08005c5d
 8005cb4:	08005de9 	.word	0x08005de9
 8005cb8:	08005c5d 	.word	0x08005c5d
 8005cbc:	08005c5d 	.word	0x08005c5d
 8005cc0:	08005c5d 	.word	0x08005c5d
 8005cc4:	08005c5d 	.word	0x08005c5d
 8005cc8:	08005da1 	.word	0x08005da1
 8005ccc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005cd0:	e7db      	b.n	8005c8a <_scanf_float+0x92>
 8005cd2:	290e      	cmp	r1, #14
 8005cd4:	d8c2      	bhi.n	8005c5c <_scanf_float+0x64>
 8005cd6:	a001      	add	r0, pc, #4	@ (adr r0, 8005cdc <_scanf_float+0xe4>)
 8005cd8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005cdc:	08005d91 	.word	0x08005d91
 8005ce0:	08005c5d 	.word	0x08005c5d
 8005ce4:	08005d91 	.word	0x08005d91
 8005ce8:	08005e27 	.word	0x08005e27
 8005cec:	08005c5d 	.word	0x08005c5d
 8005cf0:	08005d39 	.word	0x08005d39
 8005cf4:	08005d77 	.word	0x08005d77
 8005cf8:	08005d77 	.word	0x08005d77
 8005cfc:	08005d77 	.word	0x08005d77
 8005d00:	08005d77 	.word	0x08005d77
 8005d04:	08005d77 	.word	0x08005d77
 8005d08:	08005d77 	.word	0x08005d77
 8005d0c:	08005d77 	.word	0x08005d77
 8005d10:	08005d77 	.word	0x08005d77
 8005d14:	08005d77 	.word	0x08005d77
 8005d18:	2b6e      	cmp	r3, #110	@ 0x6e
 8005d1a:	d809      	bhi.n	8005d30 <_scanf_float+0x138>
 8005d1c:	2b60      	cmp	r3, #96	@ 0x60
 8005d1e:	d8b2      	bhi.n	8005c86 <_scanf_float+0x8e>
 8005d20:	2b54      	cmp	r3, #84	@ 0x54
 8005d22:	d07b      	beq.n	8005e1c <_scanf_float+0x224>
 8005d24:	2b59      	cmp	r3, #89	@ 0x59
 8005d26:	d199      	bne.n	8005c5c <_scanf_float+0x64>
 8005d28:	2d07      	cmp	r5, #7
 8005d2a:	d197      	bne.n	8005c5c <_scanf_float+0x64>
 8005d2c:	2508      	movs	r5, #8
 8005d2e:	e02c      	b.n	8005d8a <_scanf_float+0x192>
 8005d30:	2b74      	cmp	r3, #116	@ 0x74
 8005d32:	d073      	beq.n	8005e1c <_scanf_float+0x224>
 8005d34:	2b79      	cmp	r3, #121	@ 0x79
 8005d36:	e7f6      	b.n	8005d26 <_scanf_float+0x12e>
 8005d38:	6821      	ldr	r1, [r4, #0]
 8005d3a:	05c8      	lsls	r0, r1, #23
 8005d3c:	d51b      	bpl.n	8005d76 <_scanf_float+0x17e>
 8005d3e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005d42:	6021      	str	r1, [r4, #0]
 8005d44:	f109 0901 	add.w	r9, r9, #1
 8005d48:	f1bb 0f00 	cmp.w	fp, #0
 8005d4c:	d003      	beq.n	8005d56 <_scanf_float+0x15e>
 8005d4e:	3201      	adds	r2, #1
 8005d50:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005d54:	60a2      	str	r2, [r4, #8]
 8005d56:	68a3      	ldr	r3, [r4, #8]
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	60a3      	str	r3, [r4, #8]
 8005d5c:	6923      	ldr	r3, [r4, #16]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	6123      	str	r3, [r4, #16]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	3b01      	subs	r3, #1
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	607b      	str	r3, [r7, #4]
 8005d6a:	f340 8087 	ble.w	8005e7c <_scanf_float+0x284>
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	3301      	adds	r3, #1
 8005d72:	603b      	str	r3, [r7, #0]
 8005d74:	e765      	b.n	8005c42 <_scanf_float+0x4a>
 8005d76:	eb1a 0105 	adds.w	r1, sl, r5
 8005d7a:	f47f af6f 	bne.w	8005c5c <_scanf_float+0x64>
 8005d7e:	6822      	ldr	r2, [r4, #0]
 8005d80:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005d84:	6022      	str	r2, [r4, #0]
 8005d86:	460d      	mov	r5, r1
 8005d88:	468a      	mov	sl, r1
 8005d8a:	f806 3b01 	strb.w	r3, [r6], #1
 8005d8e:	e7e2      	b.n	8005d56 <_scanf_float+0x15e>
 8005d90:	6822      	ldr	r2, [r4, #0]
 8005d92:	0610      	lsls	r0, r2, #24
 8005d94:	f57f af62 	bpl.w	8005c5c <_scanf_float+0x64>
 8005d98:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005d9c:	6022      	str	r2, [r4, #0]
 8005d9e:	e7f4      	b.n	8005d8a <_scanf_float+0x192>
 8005da0:	f1ba 0f00 	cmp.w	sl, #0
 8005da4:	d10e      	bne.n	8005dc4 <_scanf_float+0x1cc>
 8005da6:	f1b9 0f00 	cmp.w	r9, #0
 8005daa:	d10e      	bne.n	8005dca <_scanf_float+0x1d2>
 8005dac:	6822      	ldr	r2, [r4, #0]
 8005dae:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005db2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005db6:	d108      	bne.n	8005dca <_scanf_float+0x1d2>
 8005db8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005dbc:	6022      	str	r2, [r4, #0]
 8005dbe:	f04f 0a01 	mov.w	sl, #1
 8005dc2:	e7e2      	b.n	8005d8a <_scanf_float+0x192>
 8005dc4:	f1ba 0f02 	cmp.w	sl, #2
 8005dc8:	d055      	beq.n	8005e76 <_scanf_float+0x27e>
 8005dca:	2d01      	cmp	r5, #1
 8005dcc:	d002      	beq.n	8005dd4 <_scanf_float+0x1dc>
 8005dce:	2d04      	cmp	r5, #4
 8005dd0:	f47f af44 	bne.w	8005c5c <_scanf_float+0x64>
 8005dd4:	3501      	adds	r5, #1
 8005dd6:	b2ed      	uxtb	r5, r5
 8005dd8:	e7d7      	b.n	8005d8a <_scanf_float+0x192>
 8005dda:	f1ba 0f01 	cmp.w	sl, #1
 8005dde:	f47f af3d 	bne.w	8005c5c <_scanf_float+0x64>
 8005de2:	f04f 0a02 	mov.w	sl, #2
 8005de6:	e7d0      	b.n	8005d8a <_scanf_float+0x192>
 8005de8:	b97d      	cbnz	r5, 8005e0a <_scanf_float+0x212>
 8005dea:	f1b9 0f00 	cmp.w	r9, #0
 8005dee:	f47f af38 	bne.w	8005c62 <_scanf_float+0x6a>
 8005df2:	6822      	ldr	r2, [r4, #0]
 8005df4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005df8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005dfc:	f040 8108 	bne.w	8006010 <_scanf_float+0x418>
 8005e00:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005e04:	6022      	str	r2, [r4, #0]
 8005e06:	2501      	movs	r5, #1
 8005e08:	e7bf      	b.n	8005d8a <_scanf_float+0x192>
 8005e0a:	2d03      	cmp	r5, #3
 8005e0c:	d0e2      	beq.n	8005dd4 <_scanf_float+0x1dc>
 8005e0e:	2d05      	cmp	r5, #5
 8005e10:	e7de      	b.n	8005dd0 <_scanf_float+0x1d8>
 8005e12:	2d02      	cmp	r5, #2
 8005e14:	f47f af22 	bne.w	8005c5c <_scanf_float+0x64>
 8005e18:	2503      	movs	r5, #3
 8005e1a:	e7b6      	b.n	8005d8a <_scanf_float+0x192>
 8005e1c:	2d06      	cmp	r5, #6
 8005e1e:	f47f af1d 	bne.w	8005c5c <_scanf_float+0x64>
 8005e22:	2507      	movs	r5, #7
 8005e24:	e7b1      	b.n	8005d8a <_scanf_float+0x192>
 8005e26:	6822      	ldr	r2, [r4, #0]
 8005e28:	0591      	lsls	r1, r2, #22
 8005e2a:	f57f af17 	bpl.w	8005c5c <_scanf_float+0x64>
 8005e2e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005e32:	6022      	str	r2, [r4, #0]
 8005e34:	f8cd 9008 	str.w	r9, [sp, #8]
 8005e38:	e7a7      	b.n	8005d8a <_scanf_float+0x192>
 8005e3a:	6822      	ldr	r2, [r4, #0]
 8005e3c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005e40:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005e44:	d006      	beq.n	8005e54 <_scanf_float+0x25c>
 8005e46:	0550      	lsls	r0, r2, #21
 8005e48:	f57f af08 	bpl.w	8005c5c <_scanf_float+0x64>
 8005e4c:	f1b9 0f00 	cmp.w	r9, #0
 8005e50:	f000 80de 	beq.w	8006010 <_scanf_float+0x418>
 8005e54:	0591      	lsls	r1, r2, #22
 8005e56:	bf58      	it	pl
 8005e58:	9902      	ldrpl	r1, [sp, #8]
 8005e5a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005e5e:	bf58      	it	pl
 8005e60:	eba9 0101 	subpl.w	r1, r9, r1
 8005e64:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005e68:	bf58      	it	pl
 8005e6a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005e6e:	6022      	str	r2, [r4, #0]
 8005e70:	f04f 0900 	mov.w	r9, #0
 8005e74:	e789      	b.n	8005d8a <_scanf_float+0x192>
 8005e76:	f04f 0a03 	mov.w	sl, #3
 8005e7a:	e786      	b.n	8005d8a <_scanf_float+0x192>
 8005e7c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005e80:	4639      	mov	r1, r7
 8005e82:	4640      	mov	r0, r8
 8005e84:	4798      	blx	r3
 8005e86:	2800      	cmp	r0, #0
 8005e88:	f43f aedb 	beq.w	8005c42 <_scanf_float+0x4a>
 8005e8c:	e6e6      	b.n	8005c5c <_scanf_float+0x64>
 8005e8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005e92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005e96:	463a      	mov	r2, r7
 8005e98:	4640      	mov	r0, r8
 8005e9a:	4798      	blx	r3
 8005e9c:	6923      	ldr	r3, [r4, #16]
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	6123      	str	r3, [r4, #16]
 8005ea2:	e6e8      	b.n	8005c76 <_scanf_float+0x7e>
 8005ea4:	1e6b      	subs	r3, r5, #1
 8005ea6:	2b06      	cmp	r3, #6
 8005ea8:	d824      	bhi.n	8005ef4 <_scanf_float+0x2fc>
 8005eaa:	2d02      	cmp	r5, #2
 8005eac:	d836      	bhi.n	8005f1c <_scanf_float+0x324>
 8005eae:	9b01      	ldr	r3, [sp, #4]
 8005eb0:	429e      	cmp	r6, r3
 8005eb2:	f67f aee4 	bls.w	8005c7e <_scanf_float+0x86>
 8005eb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005eba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005ebe:	463a      	mov	r2, r7
 8005ec0:	4640      	mov	r0, r8
 8005ec2:	4798      	blx	r3
 8005ec4:	6923      	ldr	r3, [r4, #16]
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	6123      	str	r3, [r4, #16]
 8005eca:	e7f0      	b.n	8005eae <_scanf_float+0x2b6>
 8005ecc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005ed0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005ed4:	463a      	mov	r2, r7
 8005ed6:	4640      	mov	r0, r8
 8005ed8:	4798      	blx	r3
 8005eda:	6923      	ldr	r3, [r4, #16]
 8005edc:	3b01      	subs	r3, #1
 8005ede:	6123      	str	r3, [r4, #16]
 8005ee0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ee4:	fa5f fa8a 	uxtb.w	sl, sl
 8005ee8:	f1ba 0f02 	cmp.w	sl, #2
 8005eec:	d1ee      	bne.n	8005ecc <_scanf_float+0x2d4>
 8005eee:	3d03      	subs	r5, #3
 8005ef0:	b2ed      	uxtb	r5, r5
 8005ef2:	1b76      	subs	r6, r6, r5
 8005ef4:	6823      	ldr	r3, [r4, #0]
 8005ef6:	05da      	lsls	r2, r3, #23
 8005ef8:	d530      	bpl.n	8005f5c <_scanf_float+0x364>
 8005efa:	055b      	lsls	r3, r3, #21
 8005efc:	d511      	bpl.n	8005f22 <_scanf_float+0x32a>
 8005efe:	9b01      	ldr	r3, [sp, #4]
 8005f00:	429e      	cmp	r6, r3
 8005f02:	f67f aebc 	bls.w	8005c7e <_scanf_float+0x86>
 8005f06:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005f0a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f0e:	463a      	mov	r2, r7
 8005f10:	4640      	mov	r0, r8
 8005f12:	4798      	blx	r3
 8005f14:	6923      	ldr	r3, [r4, #16]
 8005f16:	3b01      	subs	r3, #1
 8005f18:	6123      	str	r3, [r4, #16]
 8005f1a:	e7f0      	b.n	8005efe <_scanf_float+0x306>
 8005f1c:	46aa      	mov	sl, r5
 8005f1e:	46b3      	mov	fp, r6
 8005f20:	e7de      	b.n	8005ee0 <_scanf_float+0x2e8>
 8005f22:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005f26:	6923      	ldr	r3, [r4, #16]
 8005f28:	2965      	cmp	r1, #101	@ 0x65
 8005f2a:	f103 33ff 	add.w	r3, r3, #4294967295
 8005f2e:	f106 35ff 	add.w	r5, r6, #4294967295
 8005f32:	6123      	str	r3, [r4, #16]
 8005f34:	d00c      	beq.n	8005f50 <_scanf_float+0x358>
 8005f36:	2945      	cmp	r1, #69	@ 0x45
 8005f38:	d00a      	beq.n	8005f50 <_scanf_float+0x358>
 8005f3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005f3e:	463a      	mov	r2, r7
 8005f40:	4640      	mov	r0, r8
 8005f42:	4798      	blx	r3
 8005f44:	6923      	ldr	r3, [r4, #16]
 8005f46:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	1eb5      	subs	r5, r6, #2
 8005f4e:	6123      	str	r3, [r4, #16]
 8005f50:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005f54:	463a      	mov	r2, r7
 8005f56:	4640      	mov	r0, r8
 8005f58:	4798      	blx	r3
 8005f5a:	462e      	mov	r6, r5
 8005f5c:	6822      	ldr	r2, [r4, #0]
 8005f5e:	f012 0210 	ands.w	r2, r2, #16
 8005f62:	d001      	beq.n	8005f68 <_scanf_float+0x370>
 8005f64:	2000      	movs	r0, #0
 8005f66:	e68b      	b.n	8005c80 <_scanf_float+0x88>
 8005f68:	7032      	strb	r2, [r6, #0]
 8005f6a:	6823      	ldr	r3, [r4, #0]
 8005f6c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005f70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f74:	d11c      	bne.n	8005fb0 <_scanf_float+0x3b8>
 8005f76:	9b02      	ldr	r3, [sp, #8]
 8005f78:	454b      	cmp	r3, r9
 8005f7a:	eba3 0209 	sub.w	r2, r3, r9
 8005f7e:	d123      	bne.n	8005fc8 <_scanf_float+0x3d0>
 8005f80:	9901      	ldr	r1, [sp, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	4640      	mov	r0, r8
 8005f86:	f002 fc17 	bl	80087b8 <_strtod_r>
 8005f8a:	9b03      	ldr	r3, [sp, #12]
 8005f8c:	6821      	ldr	r1, [r4, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f011 0f02 	tst.w	r1, #2
 8005f94:	ec57 6b10 	vmov	r6, r7, d0
 8005f98:	f103 0204 	add.w	r2, r3, #4
 8005f9c:	d01f      	beq.n	8005fde <_scanf_float+0x3e6>
 8005f9e:	9903      	ldr	r1, [sp, #12]
 8005fa0:	600a      	str	r2, [r1, #0]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	e9c3 6700 	strd	r6, r7, [r3]
 8005fa8:	68e3      	ldr	r3, [r4, #12]
 8005faa:	3301      	adds	r3, #1
 8005fac:	60e3      	str	r3, [r4, #12]
 8005fae:	e7d9      	b.n	8005f64 <_scanf_float+0x36c>
 8005fb0:	9b04      	ldr	r3, [sp, #16]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d0e4      	beq.n	8005f80 <_scanf_float+0x388>
 8005fb6:	9905      	ldr	r1, [sp, #20]
 8005fb8:	230a      	movs	r3, #10
 8005fba:	3101      	adds	r1, #1
 8005fbc:	4640      	mov	r0, r8
 8005fbe:	f002 fc7b 	bl	80088b8 <_strtol_r>
 8005fc2:	9b04      	ldr	r3, [sp, #16]
 8005fc4:	9e05      	ldr	r6, [sp, #20]
 8005fc6:	1ac2      	subs	r2, r0, r3
 8005fc8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005fcc:	429e      	cmp	r6, r3
 8005fce:	bf28      	it	cs
 8005fd0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005fd4:	4910      	ldr	r1, [pc, #64]	@ (8006018 <_scanf_float+0x420>)
 8005fd6:	4630      	mov	r0, r6
 8005fd8:	f000 f8e4 	bl	80061a4 <siprintf>
 8005fdc:	e7d0      	b.n	8005f80 <_scanf_float+0x388>
 8005fde:	f011 0f04 	tst.w	r1, #4
 8005fe2:	9903      	ldr	r1, [sp, #12]
 8005fe4:	600a      	str	r2, [r1, #0]
 8005fe6:	d1dc      	bne.n	8005fa2 <_scanf_float+0x3aa>
 8005fe8:	681d      	ldr	r5, [r3, #0]
 8005fea:	4632      	mov	r2, r6
 8005fec:	463b      	mov	r3, r7
 8005fee:	4630      	mov	r0, r6
 8005ff0:	4639      	mov	r1, r7
 8005ff2:	f7fa fd9b 	bl	8000b2c <__aeabi_dcmpun>
 8005ff6:	b128      	cbz	r0, 8006004 <_scanf_float+0x40c>
 8005ff8:	4808      	ldr	r0, [pc, #32]	@ (800601c <_scanf_float+0x424>)
 8005ffa:	f000 f9b7 	bl	800636c <nanf>
 8005ffe:	ed85 0a00 	vstr	s0, [r5]
 8006002:	e7d1      	b.n	8005fa8 <_scanf_float+0x3b0>
 8006004:	4630      	mov	r0, r6
 8006006:	4639      	mov	r1, r7
 8006008:	f7fa fdee 	bl	8000be8 <__aeabi_d2f>
 800600c:	6028      	str	r0, [r5, #0]
 800600e:	e7cb      	b.n	8005fa8 <_scanf_float+0x3b0>
 8006010:	f04f 0900 	mov.w	r9, #0
 8006014:	e629      	b.n	8005c6a <_scanf_float+0x72>
 8006016:	bf00      	nop
 8006018:	08009b2f 	.word	0x08009b2f
 800601c:	08009b6f 	.word	0x08009b6f

08006020 <std>:
 8006020:	2300      	movs	r3, #0
 8006022:	b510      	push	{r4, lr}
 8006024:	4604      	mov	r4, r0
 8006026:	e9c0 3300 	strd	r3, r3, [r0]
 800602a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800602e:	6083      	str	r3, [r0, #8]
 8006030:	8181      	strh	r1, [r0, #12]
 8006032:	6643      	str	r3, [r0, #100]	@ 0x64
 8006034:	81c2      	strh	r2, [r0, #14]
 8006036:	6183      	str	r3, [r0, #24]
 8006038:	4619      	mov	r1, r3
 800603a:	2208      	movs	r2, #8
 800603c:	305c      	adds	r0, #92	@ 0x5c
 800603e:	f000 f914 	bl	800626a <memset>
 8006042:	4b0d      	ldr	r3, [pc, #52]	@ (8006078 <std+0x58>)
 8006044:	6263      	str	r3, [r4, #36]	@ 0x24
 8006046:	4b0d      	ldr	r3, [pc, #52]	@ (800607c <std+0x5c>)
 8006048:	62a3      	str	r3, [r4, #40]	@ 0x28
 800604a:	4b0d      	ldr	r3, [pc, #52]	@ (8006080 <std+0x60>)
 800604c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800604e:	4b0d      	ldr	r3, [pc, #52]	@ (8006084 <std+0x64>)
 8006050:	6323      	str	r3, [r4, #48]	@ 0x30
 8006052:	4b0d      	ldr	r3, [pc, #52]	@ (8006088 <std+0x68>)
 8006054:	6224      	str	r4, [r4, #32]
 8006056:	429c      	cmp	r4, r3
 8006058:	d006      	beq.n	8006068 <std+0x48>
 800605a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800605e:	4294      	cmp	r4, r2
 8006060:	d002      	beq.n	8006068 <std+0x48>
 8006062:	33d0      	adds	r3, #208	@ 0xd0
 8006064:	429c      	cmp	r4, r3
 8006066:	d105      	bne.n	8006074 <std+0x54>
 8006068:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800606c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006070:	f000 b978 	b.w	8006364 <__retarget_lock_init_recursive>
 8006074:	bd10      	pop	{r4, pc}
 8006076:	bf00      	nop
 8006078:	080061e5 	.word	0x080061e5
 800607c:	08006207 	.word	0x08006207
 8006080:	0800623f 	.word	0x0800623f
 8006084:	08006263 	.word	0x08006263
 8006088:	20000398 	.word	0x20000398

0800608c <stdio_exit_handler>:
 800608c:	4a02      	ldr	r2, [pc, #8]	@ (8006098 <stdio_exit_handler+0xc>)
 800608e:	4903      	ldr	r1, [pc, #12]	@ (800609c <stdio_exit_handler+0x10>)
 8006090:	4803      	ldr	r0, [pc, #12]	@ (80060a0 <stdio_exit_handler+0x14>)
 8006092:	f000 b869 	b.w	8006168 <_fwalk_sglue>
 8006096:	bf00      	nop
 8006098:	2000001c 	.word	0x2000001c
 800609c:	08008c75 	.word	0x08008c75
 80060a0:	2000002c 	.word	0x2000002c

080060a4 <cleanup_stdio>:
 80060a4:	6841      	ldr	r1, [r0, #4]
 80060a6:	4b0c      	ldr	r3, [pc, #48]	@ (80060d8 <cleanup_stdio+0x34>)
 80060a8:	4299      	cmp	r1, r3
 80060aa:	b510      	push	{r4, lr}
 80060ac:	4604      	mov	r4, r0
 80060ae:	d001      	beq.n	80060b4 <cleanup_stdio+0x10>
 80060b0:	f002 fde0 	bl	8008c74 <_fflush_r>
 80060b4:	68a1      	ldr	r1, [r4, #8]
 80060b6:	4b09      	ldr	r3, [pc, #36]	@ (80060dc <cleanup_stdio+0x38>)
 80060b8:	4299      	cmp	r1, r3
 80060ba:	d002      	beq.n	80060c2 <cleanup_stdio+0x1e>
 80060bc:	4620      	mov	r0, r4
 80060be:	f002 fdd9 	bl	8008c74 <_fflush_r>
 80060c2:	68e1      	ldr	r1, [r4, #12]
 80060c4:	4b06      	ldr	r3, [pc, #24]	@ (80060e0 <cleanup_stdio+0x3c>)
 80060c6:	4299      	cmp	r1, r3
 80060c8:	d004      	beq.n	80060d4 <cleanup_stdio+0x30>
 80060ca:	4620      	mov	r0, r4
 80060cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060d0:	f002 bdd0 	b.w	8008c74 <_fflush_r>
 80060d4:	bd10      	pop	{r4, pc}
 80060d6:	bf00      	nop
 80060d8:	20000398 	.word	0x20000398
 80060dc:	20000400 	.word	0x20000400
 80060e0:	20000468 	.word	0x20000468

080060e4 <global_stdio_init.part.0>:
 80060e4:	b510      	push	{r4, lr}
 80060e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006114 <global_stdio_init.part.0+0x30>)
 80060e8:	4c0b      	ldr	r4, [pc, #44]	@ (8006118 <global_stdio_init.part.0+0x34>)
 80060ea:	4a0c      	ldr	r2, [pc, #48]	@ (800611c <global_stdio_init.part.0+0x38>)
 80060ec:	601a      	str	r2, [r3, #0]
 80060ee:	4620      	mov	r0, r4
 80060f0:	2200      	movs	r2, #0
 80060f2:	2104      	movs	r1, #4
 80060f4:	f7ff ff94 	bl	8006020 <std>
 80060f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80060fc:	2201      	movs	r2, #1
 80060fe:	2109      	movs	r1, #9
 8006100:	f7ff ff8e 	bl	8006020 <std>
 8006104:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006108:	2202      	movs	r2, #2
 800610a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800610e:	2112      	movs	r1, #18
 8006110:	f7ff bf86 	b.w	8006020 <std>
 8006114:	200004d0 	.word	0x200004d0
 8006118:	20000398 	.word	0x20000398
 800611c:	0800608d 	.word	0x0800608d

08006120 <__sfp_lock_acquire>:
 8006120:	4801      	ldr	r0, [pc, #4]	@ (8006128 <__sfp_lock_acquire+0x8>)
 8006122:	f000 b920 	b.w	8006366 <__retarget_lock_acquire_recursive>
 8006126:	bf00      	nop
 8006128:	200004d9 	.word	0x200004d9

0800612c <__sfp_lock_release>:
 800612c:	4801      	ldr	r0, [pc, #4]	@ (8006134 <__sfp_lock_release+0x8>)
 800612e:	f000 b91b 	b.w	8006368 <__retarget_lock_release_recursive>
 8006132:	bf00      	nop
 8006134:	200004d9 	.word	0x200004d9

08006138 <__sinit>:
 8006138:	b510      	push	{r4, lr}
 800613a:	4604      	mov	r4, r0
 800613c:	f7ff fff0 	bl	8006120 <__sfp_lock_acquire>
 8006140:	6a23      	ldr	r3, [r4, #32]
 8006142:	b11b      	cbz	r3, 800614c <__sinit+0x14>
 8006144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006148:	f7ff bff0 	b.w	800612c <__sfp_lock_release>
 800614c:	4b04      	ldr	r3, [pc, #16]	@ (8006160 <__sinit+0x28>)
 800614e:	6223      	str	r3, [r4, #32]
 8006150:	4b04      	ldr	r3, [pc, #16]	@ (8006164 <__sinit+0x2c>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1f5      	bne.n	8006144 <__sinit+0xc>
 8006158:	f7ff ffc4 	bl	80060e4 <global_stdio_init.part.0>
 800615c:	e7f2      	b.n	8006144 <__sinit+0xc>
 800615e:	bf00      	nop
 8006160:	080060a5 	.word	0x080060a5
 8006164:	200004d0 	.word	0x200004d0

08006168 <_fwalk_sglue>:
 8006168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800616c:	4607      	mov	r7, r0
 800616e:	4688      	mov	r8, r1
 8006170:	4614      	mov	r4, r2
 8006172:	2600      	movs	r6, #0
 8006174:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006178:	f1b9 0901 	subs.w	r9, r9, #1
 800617c:	d505      	bpl.n	800618a <_fwalk_sglue+0x22>
 800617e:	6824      	ldr	r4, [r4, #0]
 8006180:	2c00      	cmp	r4, #0
 8006182:	d1f7      	bne.n	8006174 <_fwalk_sglue+0xc>
 8006184:	4630      	mov	r0, r6
 8006186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800618a:	89ab      	ldrh	r3, [r5, #12]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d907      	bls.n	80061a0 <_fwalk_sglue+0x38>
 8006190:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006194:	3301      	adds	r3, #1
 8006196:	d003      	beq.n	80061a0 <_fwalk_sglue+0x38>
 8006198:	4629      	mov	r1, r5
 800619a:	4638      	mov	r0, r7
 800619c:	47c0      	blx	r8
 800619e:	4306      	orrs	r6, r0
 80061a0:	3568      	adds	r5, #104	@ 0x68
 80061a2:	e7e9      	b.n	8006178 <_fwalk_sglue+0x10>

080061a4 <siprintf>:
 80061a4:	b40e      	push	{r1, r2, r3}
 80061a6:	b500      	push	{lr}
 80061a8:	b09c      	sub	sp, #112	@ 0x70
 80061aa:	ab1d      	add	r3, sp, #116	@ 0x74
 80061ac:	9002      	str	r0, [sp, #8]
 80061ae:	9006      	str	r0, [sp, #24]
 80061b0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80061b4:	4809      	ldr	r0, [pc, #36]	@ (80061dc <siprintf+0x38>)
 80061b6:	9107      	str	r1, [sp, #28]
 80061b8:	9104      	str	r1, [sp, #16]
 80061ba:	4909      	ldr	r1, [pc, #36]	@ (80061e0 <siprintf+0x3c>)
 80061bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80061c0:	9105      	str	r1, [sp, #20]
 80061c2:	6800      	ldr	r0, [r0, #0]
 80061c4:	9301      	str	r3, [sp, #4]
 80061c6:	a902      	add	r1, sp, #8
 80061c8:	f002 fbd4 	bl	8008974 <_svfiprintf_r>
 80061cc:	9b02      	ldr	r3, [sp, #8]
 80061ce:	2200      	movs	r2, #0
 80061d0:	701a      	strb	r2, [r3, #0]
 80061d2:	b01c      	add	sp, #112	@ 0x70
 80061d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80061d8:	b003      	add	sp, #12
 80061da:	4770      	bx	lr
 80061dc:	20000028 	.word	0x20000028
 80061e0:	ffff0208 	.word	0xffff0208

080061e4 <__sread>:
 80061e4:	b510      	push	{r4, lr}
 80061e6:	460c      	mov	r4, r1
 80061e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061ec:	f000 f86c 	bl	80062c8 <_read_r>
 80061f0:	2800      	cmp	r0, #0
 80061f2:	bfab      	itete	ge
 80061f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80061f6:	89a3      	ldrhlt	r3, [r4, #12]
 80061f8:	181b      	addge	r3, r3, r0
 80061fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80061fe:	bfac      	ite	ge
 8006200:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006202:	81a3      	strhlt	r3, [r4, #12]
 8006204:	bd10      	pop	{r4, pc}

08006206 <__swrite>:
 8006206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800620a:	461f      	mov	r7, r3
 800620c:	898b      	ldrh	r3, [r1, #12]
 800620e:	05db      	lsls	r3, r3, #23
 8006210:	4605      	mov	r5, r0
 8006212:	460c      	mov	r4, r1
 8006214:	4616      	mov	r6, r2
 8006216:	d505      	bpl.n	8006224 <__swrite+0x1e>
 8006218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800621c:	2302      	movs	r3, #2
 800621e:	2200      	movs	r2, #0
 8006220:	f000 f840 	bl	80062a4 <_lseek_r>
 8006224:	89a3      	ldrh	r3, [r4, #12]
 8006226:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800622a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800622e:	81a3      	strh	r3, [r4, #12]
 8006230:	4632      	mov	r2, r6
 8006232:	463b      	mov	r3, r7
 8006234:	4628      	mov	r0, r5
 8006236:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800623a:	f000 b857 	b.w	80062ec <_write_r>

0800623e <__sseek>:
 800623e:	b510      	push	{r4, lr}
 8006240:	460c      	mov	r4, r1
 8006242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006246:	f000 f82d 	bl	80062a4 <_lseek_r>
 800624a:	1c43      	adds	r3, r0, #1
 800624c:	89a3      	ldrh	r3, [r4, #12]
 800624e:	bf15      	itete	ne
 8006250:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006252:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006256:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800625a:	81a3      	strheq	r3, [r4, #12]
 800625c:	bf18      	it	ne
 800625e:	81a3      	strhne	r3, [r4, #12]
 8006260:	bd10      	pop	{r4, pc}

08006262 <__sclose>:
 8006262:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006266:	f000 b80d 	b.w	8006284 <_close_r>

0800626a <memset>:
 800626a:	4402      	add	r2, r0
 800626c:	4603      	mov	r3, r0
 800626e:	4293      	cmp	r3, r2
 8006270:	d100      	bne.n	8006274 <memset+0xa>
 8006272:	4770      	bx	lr
 8006274:	f803 1b01 	strb.w	r1, [r3], #1
 8006278:	e7f9      	b.n	800626e <memset+0x4>
	...

0800627c <_localeconv_r>:
 800627c:	4800      	ldr	r0, [pc, #0]	@ (8006280 <_localeconv_r+0x4>)
 800627e:	4770      	bx	lr
 8006280:	20000168 	.word	0x20000168

08006284 <_close_r>:
 8006284:	b538      	push	{r3, r4, r5, lr}
 8006286:	4d06      	ldr	r5, [pc, #24]	@ (80062a0 <_close_r+0x1c>)
 8006288:	2300      	movs	r3, #0
 800628a:	4604      	mov	r4, r0
 800628c:	4608      	mov	r0, r1
 800628e:	602b      	str	r3, [r5, #0]
 8006290:	f7fb faf2 	bl	8001878 <_close>
 8006294:	1c43      	adds	r3, r0, #1
 8006296:	d102      	bne.n	800629e <_close_r+0x1a>
 8006298:	682b      	ldr	r3, [r5, #0]
 800629a:	b103      	cbz	r3, 800629e <_close_r+0x1a>
 800629c:	6023      	str	r3, [r4, #0]
 800629e:	bd38      	pop	{r3, r4, r5, pc}
 80062a0:	200004d4 	.word	0x200004d4

080062a4 <_lseek_r>:
 80062a4:	b538      	push	{r3, r4, r5, lr}
 80062a6:	4d07      	ldr	r5, [pc, #28]	@ (80062c4 <_lseek_r+0x20>)
 80062a8:	4604      	mov	r4, r0
 80062aa:	4608      	mov	r0, r1
 80062ac:	4611      	mov	r1, r2
 80062ae:	2200      	movs	r2, #0
 80062b0:	602a      	str	r2, [r5, #0]
 80062b2:	461a      	mov	r2, r3
 80062b4:	f7fb fb07 	bl	80018c6 <_lseek>
 80062b8:	1c43      	adds	r3, r0, #1
 80062ba:	d102      	bne.n	80062c2 <_lseek_r+0x1e>
 80062bc:	682b      	ldr	r3, [r5, #0]
 80062be:	b103      	cbz	r3, 80062c2 <_lseek_r+0x1e>
 80062c0:	6023      	str	r3, [r4, #0]
 80062c2:	bd38      	pop	{r3, r4, r5, pc}
 80062c4:	200004d4 	.word	0x200004d4

080062c8 <_read_r>:
 80062c8:	b538      	push	{r3, r4, r5, lr}
 80062ca:	4d07      	ldr	r5, [pc, #28]	@ (80062e8 <_read_r+0x20>)
 80062cc:	4604      	mov	r4, r0
 80062ce:	4608      	mov	r0, r1
 80062d0:	4611      	mov	r1, r2
 80062d2:	2200      	movs	r2, #0
 80062d4:	602a      	str	r2, [r5, #0]
 80062d6:	461a      	mov	r2, r3
 80062d8:	f7fb fa95 	bl	8001806 <_read>
 80062dc:	1c43      	adds	r3, r0, #1
 80062de:	d102      	bne.n	80062e6 <_read_r+0x1e>
 80062e0:	682b      	ldr	r3, [r5, #0]
 80062e2:	b103      	cbz	r3, 80062e6 <_read_r+0x1e>
 80062e4:	6023      	str	r3, [r4, #0]
 80062e6:	bd38      	pop	{r3, r4, r5, pc}
 80062e8:	200004d4 	.word	0x200004d4

080062ec <_write_r>:
 80062ec:	b538      	push	{r3, r4, r5, lr}
 80062ee:	4d07      	ldr	r5, [pc, #28]	@ (800630c <_write_r+0x20>)
 80062f0:	4604      	mov	r4, r0
 80062f2:	4608      	mov	r0, r1
 80062f4:	4611      	mov	r1, r2
 80062f6:	2200      	movs	r2, #0
 80062f8:	602a      	str	r2, [r5, #0]
 80062fa:	461a      	mov	r2, r3
 80062fc:	f7fb faa0 	bl	8001840 <_write>
 8006300:	1c43      	adds	r3, r0, #1
 8006302:	d102      	bne.n	800630a <_write_r+0x1e>
 8006304:	682b      	ldr	r3, [r5, #0]
 8006306:	b103      	cbz	r3, 800630a <_write_r+0x1e>
 8006308:	6023      	str	r3, [r4, #0]
 800630a:	bd38      	pop	{r3, r4, r5, pc}
 800630c:	200004d4 	.word	0x200004d4

08006310 <__errno>:
 8006310:	4b01      	ldr	r3, [pc, #4]	@ (8006318 <__errno+0x8>)
 8006312:	6818      	ldr	r0, [r3, #0]
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	20000028 	.word	0x20000028

0800631c <__libc_init_array>:
 800631c:	b570      	push	{r4, r5, r6, lr}
 800631e:	4d0d      	ldr	r5, [pc, #52]	@ (8006354 <__libc_init_array+0x38>)
 8006320:	4c0d      	ldr	r4, [pc, #52]	@ (8006358 <__libc_init_array+0x3c>)
 8006322:	1b64      	subs	r4, r4, r5
 8006324:	10a4      	asrs	r4, r4, #2
 8006326:	2600      	movs	r6, #0
 8006328:	42a6      	cmp	r6, r4
 800632a:	d109      	bne.n	8006340 <__libc_init_array+0x24>
 800632c:	4d0b      	ldr	r5, [pc, #44]	@ (800635c <__libc_init_array+0x40>)
 800632e:	4c0c      	ldr	r4, [pc, #48]	@ (8006360 <__libc_init_array+0x44>)
 8006330:	f003 fb74 	bl	8009a1c <_init>
 8006334:	1b64      	subs	r4, r4, r5
 8006336:	10a4      	asrs	r4, r4, #2
 8006338:	2600      	movs	r6, #0
 800633a:	42a6      	cmp	r6, r4
 800633c:	d105      	bne.n	800634a <__libc_init_array+0x2e>
 800633e:	bd70      	pop	{r4, r5, r6, pc}
 8006340:	f855 3b04 	ldr.w	r3, [r5], #4
 8006344:	4798      	blx	r3
 8006346:	3601      	adds	r6, #1
 8006348:	e7ee      	b.n	8006328 <__libc_init_array+0xc>
 800634a:	f855 3b04 	ldr.w	r3, [r5], #4
 800634e:	4798      	blx	r3
 8006350:	3601      	adds	r6, #1
 8006352:	e7f2      	b.n	800633a <__libc_init_array+0x1e>
 8006354:	08009f1c 	.word	0x08009f1c
 8006358:	08009f1c 	.word	0x08009f1c
 800635c:	08009f1c 	.word	0x08009f1c
 8006360:	08009f20 	.word	0x08009f20

08006364 <__retarget_lock_init_recursive>:
 8006364:	4770      	bx	lr

08006366 <__retarget_lock_acquire_recursive>:
 8006366:	4770      	bx	lr

08006368 <__retarget_lock_release_recursive>:
 8006368:	4770      	bx	lr
	...

0800636c <nanf>:
 800636c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006374 <nanf+0x8>
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	7fc00000 	.word	0x7fc00000

08006378 <__assert_func>:
 8006378:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800637a:	4614      	mov	r4, r2
 800637c:	461a      	mov	r2, r3
 800637e:	4b09      	ldr	r3, [pc, #36]	@ (80063a4 <__assert_func+0x2c>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4605      	mov	r5, r0
 8006384:	68d8      	ldr	r0, [r3, #12]
 8006386:	b954      	cbnz	r4, 800639e <__assert_func+0x26>
 8006388:	4b07      	ldr	r3, [pc, #28]	@ (80063a8 <__assert_func+0x30>)
 800638a:	461c      	mov	r4, r3
 800638c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006390:	9100      	str	r1, [sp, #0]
 8006392:	462b      	mov	r3, r5
 8006394:	4905      	ldr	r1, [pc, #20]	@ (80063ac <__assert_func+0x34>)
 8006396:	f002 fc95 	bl	8008cc4 <fiprintf>
 800639a:	f002 fcf9 	bl	8008d90 <abort>
 800639e:	4b04      	ldr	r3, [pc, #16]	@ (80063b0 <__assert_func+0x38>)
 80063a0:	e7f4      	b.n	800638c <__assert_func+0x14>
 80063a2:	bf00      	nop
 80063a4:	20000028 	.word	0x20000028
 80063a8:	08009b6f 	.word	0x08009b6f
 80063ac:	08009b41 	.word	0x08009b41
 80063b0:	08009b34 	.word	0x08009b34

080063b4 <quorem>:
 80063b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063b8:	6903      	ldr	r3, [r0, #16]
 80063ba:	690c      	ldr	r4, [r1, #16]
 80063bc:	42a3      	cmp	r3, r4
 80063be:	4607      	mov	r7, r0
 80063c0:	db7e      	blt.n	80064c0 <quorem+0x10c>
 80063c2:	3c01      	subs	r4, #1
 80063c4:	f101 0814 	add.w	r8, r1, #20
 80063c8:	00a3      	lsls	r3, r4, #2
 80063ca:	f100 0514 	add.w	r5, r0, #20
 80063ce:	9300      	str	r3, [sp, #0]
 80063d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063d4:	9301      	str	r3, [sp, #4]
 80063d6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80063da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063de:	3301      	adds	r3, #1
 80063e0:	429a      	cmp	r2, r3
 80063e2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80063e6:	fbb2 f6f3 	udiv	r6, r2, r3
 80063ea:	d32e      	bcc.n	800644a <quorem+0x96>
 80063ec:	f04f 0a00 	mov.w	sl, #0
 80063f0:	46c4      	mov	ip, r8
 80063f2:	46ae      	mov	lr, r5
 80063f4:	46d3      	mov	fp, sl
 80063f6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80063fa:	b298      	uxth	r0, r3
 80063fc:	fb06 a000 	mla	r0, r6, r0, sl
 8006400:	0c02      	lsrs	r2, r0, #16
 8006402:	0c1b      	lsrs	r3, r3, #16
 8006404:	fb06 2303 	mla	r3, r6, r3, r2
 8006408:	f8de 2000 	ldr.w	r2, [lr]
 800640c:	b280      	uxth	r0, r0
 800640e:	b292      	uxth	r2, r2
 8006410:	1a12      	subs	r2, r2, r0
 8006412:	445a      	add	r2, fp
 8006414:	f8de 0000 	ldr.w	r0, [lr]
 8006418:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800641c:	b29b      	uxth	r3, r3
 800641e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006422:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006426:	b292      	uxth	r2, r2
 8006428:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800642c:	45e1      	cmp	r9, ip
 800642e:	f84e 2b04 	str.w	r2, [lr], #4
 8006432:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006436:	d2de      	bcs.n	80063f6 <quorem+0x42>
 8006438:	9b00      	ldr	r3, [sp, #0]
 800643a:	58eb      	ldr	r3, [r5, r3]
 800643c:	b92b      	cbnz	r3, 800644a <quorem+0x96>
 800643e:	9b01      	ldr	r3, [sp, #4]
 8006440:	3b04      	subs	r3, #4
 8006442:	429d      	cmp	r5, r3
 8006444:	461a      	mov	r2, r3
 8006446:	d32f      	bcc.n	80064a8 <quorem+0xf4>
 8006448:	613c      	str	r4, [r7, #16]
 800644a:	4638      	mov	r0, r7
 800644c:	f001 f9c4 	bl	80077d8 <__mcmp>
 8006450:	2800      	cmp	r0, #0
 8006452:	db25      	blt.n	80064a0 <quorem+0xec>
 8006454:	4629      	mov	r1, r5
 8006456:	2000      	movs	r0, #0
 8006458:	f858 2b04 	ldr.w	r2, [r8], #4
 800645c:	f8d1 c000 	ldr.w	ip, [r1]
 8006460:	fa1f fe82 	uxth.w	lr, r2
 8006464:	fa1f f38c 	uxth.w	r3, ip
 8006468:	eba3 030e 	sub.w	r3, r3, lr
 800646c:	4403      	add	r3, r0
 800646e:	0c12      	lsrs	r2, r2, #16
 8006470:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006474:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006478:	b29b      	uxth	r3, r3
 800647a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800647e:	45c1      	cmp	r9, r8
 8006480:	f841 3b04 	str.w	r3, [r1], #4
 8006484:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006488:	d2e6      	bcs.n	8006458 <quorem+0xa4>
 800648a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800648e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006492:	b922      	cbnz	r2, 800649e <quorem+0xea>
 8006494:	3b04      	subs	r3, #4
 8006496:	429d      	cmp	r5, r3
 8006498:	461a      	mov	r2, r3
 800649a:	d30b      	bcc.n	80064b4 <quorem+0x100>
 800649c:	613c      	str	r4, [r7, #16]
 800649e:	3601      	adds	r6, #1
 80064a0:	4630      	mov	r0, r6
 80064a2:	b003      	add	sp, #12
 80064a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064a8:	6812      	ldr	r2, [r2, #0]
 80064aa:	3b04      	subs	r3, #4
 80064ac:	2a00      	cmp	r2, #0
 80064ae:	d1cb      	bne.n	8006448 <quorem+0x94>
 80064b0:	3c01      	subs	r4, #1
 80064b2:	e7c6      	b.n	8006442 <quorem+0x8e>
 80064b4:	6812      	ldr	r2, [r2, #0]
 80064b6:	3b04      	subs	r3, #4
 80064b8:	2a00      	cmp	r2, #0
 80064ba:	d1ef      	bne.n	800649c <quorem+0xe8>
 80064bc:	3c01      	subs	r4, #1
 80064be:	e7ea      	b.n	8006496 <quorem+0xe2>
 80064c0:	2000      	movs	r0, #0
 80064c2:	e7ee      	b.n	80064a2 <quorem+0xee>
 80064c4:	0000      	movs	r0, r0
	...

080064c8 <_dtoa_r>:
 80064c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064cc:	69c7      	ldr	r7, [r0, #28]
 80064ce:	b099      	sub	sp, #100	@ 0x64
 80064d0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80064d4:	ec55 4b10 	vmov	r4, r5, d0
 80064d8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80064da:	9109      	str	r1, [sp, #36]	@ 0x24
 80064dc:	4683      	mov	fp, r0
 80064de:	920e      	str	r2, [sp, #56]	@ 0x38
 80064e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80064e2:	b97f      	cbnz	r7, 8006504 <_dtoa_r+0x3c>
 80064e4:	2010      	movs	r0, #16
 80064e6:	f000 fdfd 	bl	80070e4 <malloc>
 80064ea:	4602      	mov	r2, r0
 80064ec:	f8cb 001c 	str.w	r0, [fp, #28]
 80064f0:	b920      	cbnz	r0, 80064fc <_dtoa_r+0x34>
 80064f2:	4ba7      	ldr	r3, [pc, #668]	@ (8006790 <_dtoa_r+0x2c8>)
 80064f4:	21ef      	movs	r1, #239	@ 0xef
 80064f6:	48a7      	ldr	r0, [pc, #668]	@ (8006794 <_dtoa_r+0x2cc>)
 80064f8:	f7ff ff3e 	bl	8006378 <__assert_func>
 80064fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006500:	6007      	str	r7, [r0, #0]
 8006502:	60c7      	str	r7, [r0, #12]
 8006504:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006508:	6819      	ldr	r1, [r3, #0]
 800650a:	b159      	cbz	r1, 8006524 <_dtoa_r+0x5c>
 800650c:	685a      	ldr	r2, [r3, #4]
 800650e:	604a      	str	r2, [r1, #4]
 8006510:	2301      	movs	r3, #1
 8006512:	4093      	lsls	r3, r2
 8006514:	608b      	str	r3, [r1, #8]
 8006516:	4658      	mov	r0, fp
 8006518:	f000 feda 	bl	80072d0 <_Bfree>
 800651c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006520:	2200      	movs	r2, #0
 8006522:	601a      	str	r2, [r3, #0]
 8006524:	1e2b      	subs	r3, r5, #0
 8006526:	bfb9      	ittee	lt
 8006528:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800652c:	9303      	strlt	r3, [sp, #12]
 800652e:	2300      	movge	r3, #0
 8006530:	6033      	strge	r3, [r6, #0]
 8006532:	9f03      	ldr	r7, [sp, #12]
 8006534:	4b98      	ldr	r3, [pc, #608]	@ (8006798 <_dtoa_r+0x2d0>)
 8006536:	bfbc      	itt	lt
 8006538:	2201      	movlt	r2, #1
 800653a:	6032      	strlt	r2, [r6, #0]
 800653c:	43bb      	bics	r3, r7
 800653e:	d112      	bne.n	8006566 <_dtoa_r+0x9e>
 8006540:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006542:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006546:	6013      	str	r3, [r2, #0]
 8006548:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800654c:	4323      	orrs	r3, r4
 800654e:	f000 854d 	beq.w	8006fec <_dtoa_r+0xb24>
 8006552:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006554:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80067ac <_dtoa_r+0x2e4>
 8006558:	2b00      	cmp	r3, #0
 800655a:	f000 854f 	beq.w	8006ffc <_dtoa_r+0xb34>
 800655e:	f10a 0303 	add.w	r3, sl, #3
 8006562:	f000 bd49 	b.w	8006ff8 <_dtoa_r+0xb30>
 8006566:	ed9d 7b02 	vldr	d7, [sp, #8]
 800656a:	2200      	movs	r2, #0
 800656c:	ec51 0b17 	vmov	r0, r1, d7
 8006570:	2300      	movs	r3, #0
 8006572:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006576:	f7fa faa7 	bl	8000ac8 <__aeabi_dcmpeq>
 800657a:	4680      	mov	r8, r0
 800657c:	b158      	cbz	r0, 8006596 <_dtoa_r+0xce>
 800657e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006580:	2301      	movs	r3, #1
 8006582:	6013      	str	r3, [r2, #0]
 8006584:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006586:	b113      	cbz	r3, 800658e <_dtoa_r+0xc6>
 8006588:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800658a:	4b84      	ldr	r3, [pc, #528]	@ (800679c <_dtoa_r+0x2d4>)
 800658c:	6013      	str	r3, [r2, #0]
 800658e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80067b0 <_dtoa_r+0x2e8>
 8006592:	f000 bd33 	b.w	8006ffc <_dtoa_r+0xb34>
 8006596:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800659a:	aa16      	add	r2, sp, #88	@ 0x58
 800659c:	a917      	add	r1, sp, #92	@ 0x5c
 800659e:	4658      	mov	r0, fp
 80065a0:	f001 fa3a 	bl	8007a18 <__d2b>
 80065a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80065a8:	4681      	mov	r9, r0
 80065aa:	2e00      	cmp	r6, #0
 80065ac:	d077      	beq.n	800669e <_dtoa_r+0x1d6>
 80065ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80065b0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80065b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80065bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80065c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80065c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80065c8:	4619      	mov	r1, r3
 80065ca:	2200      	movs	r2, #0
 80065cc:	4b74      	ldr	r3, [pc, #464]	@ (80067a0 <_dtoa_r+0x2d8>)
 80065ce:	f7f9 fe5b 	bl	8000288 <__aeabi_dsub>
 80065d2:	a369      	add	r3, pc, #420	@ (adr r3, 8006778 <_dtoa_r+0x2b0>)
 80065d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d8:	f7fa f80e 	bl	80005f8 <__aeabi_dmul>
 80065dc:	a368      	add	r3, pc, #416	@ (adr r3, 8006780 <_dtoa_r+0x2b8>)
 80065de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e2:	f7f9 fe53 	bl	800028c <__adddf3>
 80065e6:	4604      	mov	r4, r0
 80065e8:	4630      	mov	r0, r6
 80065ea:	460d      	mov	r5, r1
 80065ec:	f7f9 ff9a 	bl	8000524 <__aeabi_i2d>
 80065f0:	a365      	add	r3, pc, #404	@ (adr r3, 8006788 <_dtoa_r+0x2c0>)
 80065f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f6:	f7f9 ffff 	bl	80005f8 <__aeabi_dmul>
 80065fa:	4602      	mov	r2, r0
 80065fc:	460b      	mov	r3, r1
 80065fe:	4620      	mov	r0, r4
 8006600:	4629      	mov	r1, r5
 8006602:	f7f9 fe43 	bl	800028c <__adddf3>
 8006606:	4604      	mov	r4, r0
 8006608:	460d      	mov	r5, r1
 800660a:	f7fa faa5 	bl	8000b58 <__aeabi_d2iz>
 800660e:	2200      	movs	r2, #0
 8006610:	4607      	mov	r7, r0
 8006612:	2300      	movs	r3, #0
 8006614:	4620      	mov	r0, r4
 8006616:	4629      	mov	r1, r5
 8006618:	f7fa fa60 	bl	8000adc <__aeabi_dcmplt>
 800661c:	b140      	cbz	r0, 8006630 <_dtoa_r+0x168>
 800661e:	4638      	mov	r0, r7
 8006620:	f7f9 ff80 	bl	8000524 <__aeabi_i2d>
 8006624:	4622      	mov	r2, r4
 8006626:	462b      	mov	r3, r5
 8006628:	f7fa fa4e 	bl	8000ac8 <__aeabi_dcmpeq>
 800662c:	b900      	cbnz	r0, 8006630 <_dtoa_r+0x168>
 800662e:	3f01      	subs	r7, #1
 8006630:	2f16      	cmp	r7, #22
 8006632:	d851      	bhi.n	80066d8 <_dtoa_r+0x210>
 8006634:	4b5b      	ldr	r3, [pc, #364]	@ (80067a4 <_dtoa_r+0x2dc>)
 8006636:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800663a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006642:	f7fa fa4b 	bl	8000adc <__aeabi_dcmplt>
 8006646:	2800      	cmp	r0, #0
 8006648:	d048      	beq.n	80066dc <_dtoa_r+0x214>
 800664a:	3f01      	subs	r7, #1
 800664c:	2300      	movs	r3, #0
 800664e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006650:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006652:	1b9b      	subs	r3, r3, r6
 8006654:	1e5a      	subs	r2, r3, #1
 8006656:	bf44      	itt	mi
 8006658:	f1c3 0801 	rsbmi	r8, r3, #1
 800665c:	2300      	movmi	r3, #0
 800665e:	9208      	str	r2, [sp, #32]
 8006660:	bf54      	ite	pl
 8006662:	f04f 0800 	movpl.w	r8, #0
 8006666:	9308      	strmi	r3, [sp, #32]
 8006668:	2f00      	cmp	r7, #0
 800666a:	db39      	blt.n	80066e0 <_dtoa_r+0x218>
 800666c:	9b08      	ldr	r3, [sp, #32]
 800666e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006670:	443b      	add	r3, r7
 8006672:	9308      	str	r3, [sp, #32]
 8006674:	2300      	movs	r3, #0
 8006676:	930a      	str	r3, [sp, #40]	@ 0x28
 8006678:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800667a:	2b09      	cmp	r3, #9
 800667c:	d864      	bhi.n	8006748 <_dtoa_r+0x280>
 800667e:	2b05      	cmp	r3, #5
 8006680:	bfc4      	itt	gt
 8006682:	3b04      	subgt	r3, #4
 8006684:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006688:	f1a3 0302 	sub.w	r3, r3, #2
 800668c:	bfcc      	ite	gt
 800668e:	2400      	movgt	r4, #0
 8006690:	2401      	movle	r4, #1
 8006692:	2b03      	cmp	r3, #3
 8006694:	d863      	bhi.n	800675e <_dtoa_r+0x296>
 8006696:	e8df f003 	tbb	[pc, r3]
 800669a:	372a      	.short	0x372a
 800669c:	5535      	.short	0x5535
 800669e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80066a2:	441e      	add	r6, r3
 80066a4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80066a8:	2b20      	cmp	r3, #32
 80066aa:	bfc1      	itttt	gt
 80066ac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80066b0:	409f      	lslgt	r7, r3
 80066b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80066b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80066ba:	bfd6      	itet	le
 80066bc:	f1c3 0320 	rsble	r3, r3, #32
 80066c0:	ea47 0003 	orrgt.w	r0, r7, r3
 80066c4:	fa04 f003 	lslle.w	r0, r4, r3
 80066c8:	f7f9 ff1c 	bl	8000504 <__aeabi_ui2d>
 80066cc:	2201      	movs	r2, #1
 80066ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80066d2:	3e01      	subs	r6, #1
 80066d4:	9214      	str	r2, [sp, #80]	@ 0x50
 80066d6:	e777      	b.n	80065c8 <_dtoa_r+0x100>
 80066d8:	2301      	movs	r3, #1
 80066da:	e7b8      	b.n	800664e <_dtoa_r+0x186>
 80066dc:	9012      	str	r0, [sp, #72]	@ 0x48
 80066de:	e7b7      	b.n	8006650 <_dtoa_r+0x188>
 80066e0:	427b      	negs	r3, r7
 80066e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80066e4:	2300      	movs	r3, #0
 80066e6:	eba8 0807 	sub.w	r8, r8, r7
 80066ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80066ec:	e7c4      	b.n	8006678 <_dtoa_r+0x1b0>
 80066ee:	2300      	movs	r3, #0
 80066f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80066f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	dc35      	bgt.n	8006764 <_dtoa_r+0x29c>
 80066f8:	2301      	movs	r3, #1
 80066fa:	9300      	str	r3, [sp, #0]
 80066fc:	9307      	str	r3, [sp, #28]
 80066fe:	461a      	mov	r2, r3
 8006700:	920e      	str	r2, [sp, #56]	@ 0x38
 8006702:	e00b      	b.n	800671c <_dtoa_r+0x254>
 8006704:	2301      	movs	r3, #1
 8006706:	e7f3      	b.n	80066f0 <_dtoa_r+0x228>
 8006708:	2300      	movs	r3, #0
 800670a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800670c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800670e:	18fb      	adds	r3, r7, r3
 8006710:	9300      	str	r3, [sp, #0]
 8006712:	3301      	adds	r3, #1
 8006714:	2b01      	cmp	r3, #1
 8006716:	9307      	str	r3, [sp, #28]
 8006718:	bfb8      	it	lt
 800671a:	2301      	movlt	r3, #1
 800671c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006720:	2100      	movs	r1, #0
 8006722:	2204      	movs	r2, #4
 8006724:	f102 0514 	add.w	r5, r2, #20
 8006728:	429d      	cmp	r5, r3
 800672a:	d91f      	bls.n	800676c <_dtoa_r+0x2a4>
 800672c:	6041      	str	r1, [r0, #4]
 800672e:	4658      	mov	r0, fp
 8006730:	f000 fd8e 	bl	8007250 <_Balloc>
 8006734:	4682      	mov	sl, r0
 8006736:	2800      	cmp	r0, #0
 8006738:	d13c      	bne.n	80067b4 <_dtoa_r+0x2ec>
 800673a:	4b1b      	ldr	r3, [pc, #108]	@ (80067a8 <_dtoa_r+0x2e0>)
 800673c:	4602      	mov	r2, r0
 800673e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006742:	e6d8      	b.n	80064f6 <_dtoa_r+0x2e>
 8006744:	2301      	movs	r3, #1
 8006746:	e7e0      	b.n	800670a <_dtoa_r+0x242>
 8006748:	2401      	movs	r4, #1
 800674a:	2300      	movs	r3, #0
 800674c:	9309      	str	r3, [sp, #36]	@ 0x24
 800674e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006750:	f04f 33ff 	mov.w	r3, #4294967295
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	9307      	str	r3, [sp, #28]
 8006758:	2200      	movs	r2, #0
 800675a:	2312      	movs	r3, #18
 800675c:	e7d0      	b.n	8006700 <_dtoa_r+0x238>
 800675e:	2301      	movs	r3, #1
 8006760:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006762:	e7f5      	b.n	8006750 <_dtoa_r+0x288>
 8006764:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006766:	9300      	str	r3, [sp, #0]
 8006768:	9307      	str	r3, [sp, #28]
 800676a:	e7d7      	b.n	800671c <_dtoa_r+0x254>
 800676c:	3101      	adds	r1, #1
 800676e:	0052      	lsls	r2, r2, #1
 8006770:	e7d8      	b.n	8006724 <_dtoa_r+0x25c>
 8006772:	bf00      	nop
 8006774:	f3af 8000 	nop.w
 8006778:	636f4361 	.word	0x636f4361
 800677c:	3fd287a7 	.word	0x3fd287a7
 8006780:	8b60c8b3 	.word	0x8b60c8b3
 8006784:	3fc68a28 	.word	0x3fc68a28
 8006788:	509f79fb 	.word	0x509f79fb
 800678c:	3fd34413 	.word	0x3fd34413
 8006790:	08009a8c 	.word	0x08009a8c
 8006794:	08009b7d 	.word	0x08009b7d
 8006798:	7ff00000 	.word	0x7ff00000
 800679c:	08009b0c 	.word	0x08009b0c
 80067a0:	3ff80000 	.word	0x3ff80000
 80067a4:	08009c78 	.word	0x08009c78
 80067a8:	08009bd5 	.word	0x08009bd5
 80067ac:	08009b79 	.word	0x08009b79
 80067b0:	08009b0b 	.word	0x08009b0b
 80067b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80067b8:	6018      	str	r0, [r3, #0]
 80067ba:	9b07      	ldr	r3, [sp, #28]
 80067bc:	2b0e      	cmp	r3, #14
 80067be:	f200 80a4 	bhi.w	800690a <_dtoa_r+0x442>
 80067c2:	2c00      	cmp	r4, #0
 80067c4:	f000 80a1 	beq.w	800690a <_dtoa_r+0x442>
 80067c8:	2f00      	cmp	r7, #0
 80067ca:	dd33      	ble.n	8006834 <_dtoa_r+0x36c>
 80067cc:	4bad      	ldr	r3, [pc, #692]	@ (8006a84 <_dtoa_r+0x5bc>)
 80067ce:	f007 020f 	and.w	r2, r7, #15
 80067d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067d6:	ed93 7b00 	vldr	d7, [r3]
 80067da:	05f8      	lsls	r0, r7, #23
 80067dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80067e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80067e4:	d516      	bpl.n	8006814 <_dtoa_r+0x34c>
 80067e6:	4ba8      	ldr	r3, [pc, #672]	@ (8006a88 <_dtoa_r+0x5c0>)
 80067e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80067ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80067f0:	f7fa f82c 	bl	800084c <__aeabi_ddiv>
 80067f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067f8:	f004 040f 	and.w	r4, r4, #15
 80067fc:	2603      	movs	r6, #3
 80067fe:	4da2      	ldr	r5, [pc, #648]	@ (8006a88 <_dtoa_r+0x5c0>)
 8006800:	b954      	cbnz	r4, 8006818 <_dtoa_r+0x350>
 8006802:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006806:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800680a:	f7fa f81f 	bl	800084c <__aeabi_ddiv>
 800680e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006812:	e028      	b.n	8006866 <_dtoa_r+0x39e>
 8006814:	2602      	movs	r6, #2
 8006816:	e7f2      	b.n	80067fe <_dtoa_r+0x336>
 8006818:	07e1      	lsls	r1, r4, #31
 800681a:	d508      	bpl.n	800682e <_dtoa_r+0x366>
 800681c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006820:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006824:	f7f9 fee8 	bl	80005f8 <__aeabi_dmul>
 8006828:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800682c:	3601      	adds	r6, #1
 800682e:	1064      	asrs	r4, r4, #1
 8006830:	3508      	adds	r5, #8
 8006832:	e7e5      	b.n	8006800 <_dtoa_r+0x338>
 8006834:	f000 80d2 	beq.w	80069dc <_dtoa_r+0x514>
 8006838:	427c      	negs	r4, r7
 800683a:	4b92      	ldr	r3, [pc, #584]	@ (8006a84 <_dtoa_r+0x5bc>)
 800683c:	4d92      	ldr	r5, [pc, #584]	@ (8006a88 <_dtoa_r+0x5c0>)
 800683e:	f004 020f 	and.w	r2, r4, #15
 8006842:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800684e:	f7f9 fed3 	bl	80005f8 <__aeabi_dmul>
 8006852:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006856:	1124      	asrs	r4, r4, #4
 8006858:	2300      	movs	r3, #0
 800685a:	2602      	movs	r6, #2
 800685c:	2c00      	cmp	r4, #0
 800685e:	f040 80b2 	bne.w	80069c6 <_dtoa_r+0x4fe>
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1d3      	bne.n	800680e <_dtoa_r+0x346>
 8006866:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006868:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800686c:	2b00      	cmp	r3, #0
 800686e:	f000 80b7 	beq.w	80069e0 <_dtoa_r+0x518>
 8006872:	4b86      	ldr	r3, [pc, #536]	@ (8006a8c <_dtoa_r+0x5c4>)
 8006874:	2200      	movs	r2, #0
 8006876:	4620      	mov	r0, r4
 8006878:	4629      	mov	r1, r5
 800687a:	f7fa f92f 	bl	8000adc <__aeabi_dcmplt>
 800687e:	2800      	cmp	r0, #0
 8006880:	f000 80ae 	beq.w	80069e0 <_dtoa_r+0x518>
 8006884:	9b07      	ldr	r3, [sp, #28]
 8006886:	2b00      	cmp	r3, #0
 8006888:	f000 80aa 	beq.w	80069e0 <_dtoa_r+0x518>
 800688c:	9b00      	ldr	r3, [sp, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	dd37      	ble.n	8006902 <_dtoa_r+0x43a>
 8006892:	1e7b      	subs	r3, r7, #1
 8006894:	9304      	str	r3, [sp, #16]
 8006896:	4620      	mov	r0, r4
 8006898:	4b7d      	ldr	r3, [pc, #500]	@ (8006a90 <_dtoa_r+0x5c8>)
 800689a:	2200      	movs	r2, #0
 800689c:	4629      	mov	r1, r5
 800689e:	f7f9 feab 	bl	80005f8 <__aeabi_dmul>
 80068a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068a6:	9c00      	ldr	r4, [sp, #0]
 80068a8:	3601      	adds	r6, #1
 80068aa:	4630      	mov	r0, r6
 80068ac:	f7f9 fe3a 	bl	8000524 <__aeabi_i2d>
 80068b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80068b4:	f7f9 fea0 	bl	80005f8 <__aeabi_dmul>
 80068b8:	4b76      	ldr	r3, [pc, #472]	@ (8006a94 <_dtoa_r+0x5cc>)
 80068ba:	2200      	movs	r2, #0
 80068bc:	f7f9 fce6 	bl	800028c <__adddf3>
 80068c0:	4605      	mov	r5, r0
 80068c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80068c6:	2c00      	cmp	r4, #0
 80068c8:	f040 808d 	bne.w	80069e6 <_dtoa_r+0x51e>
 80068cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068d0:	4b71      	ldr	r3, [pc, #452]	@ (8006a98 <_dtoa_r+0x5d0>)
 80068d2:	2200      	movs	r2, #0
 80068d4:	f7f9 fcd8 	bl	8000288 <__aeabi_dsub>
 80068d8:	4602      	mov	r2, r0
 80068da:	460b      	mov	r3, r1
 80068dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80068e0:	462a      	mov	r2, r5
 80068e2:	4633      	mov	r3, r6
 80068e4:	f7fa f918 	bl	8000b18 <__aeabi_dcmpgt>
 80068e8:	2800      	cmp	r0, #0
 80068ea:	f040 828b 	bne.w	8006e04 <_dtoa_r+0x93c>
 80068ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068f2:	462a      	mov	r2, r5
 80068f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80068f8:	f7fa f8f0 	bl	8000adc <__aeabi_dcmplt>
 80068fc:	2800      	cmp	r0, #0
 80068fe:	f040 8128 	bne.w	8006b52 <_dtoa_r+0x68a>
 8006902:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006906:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800690a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800690c:	2b00      	cmp	r3, #0
 800690e:	f2c0 815a 	blt.w	8006bc6 <_dtoa_r+0x6fe>
 8006912:	2f0e      	cmp	r7, #14
 8006914:	f300 8157 	bgt.w	8006bc6 <_dtoa_r+0x6fe>
 8006918:	4b5a      	ldr	r3, [pc, #360]	@ (8006a84 <_dtoa_r+0x5bc>)
 800691a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800691e:	ed93 7b00 	vldr	d7, [r3]
 8006922:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006924:	2b00      	cmp	r3, #0
 8006926:	ed8d 7b00 	vstr	d7, [sp]
 800692a:	da03      	bge.n	8006934 <_dtoa_r+0x46c>
 800692c:	9b07      	ldr	r3, [sp, #28]
 800692e:	2b00      	cmp	r3, #0
 8006930:	f340 8101 	ble.w	8006b36 <_dtoa_r+0x66e>
 8006934:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006938:	4656      	mov	r6, sl
 800693a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800693e:	4620      	mov	r0, r4
 8006940:	4629      	mov	r1, r5
 8006942:	f7f9 ff83 	bl	800084c <__aeabi_ddiv>
 8006946:	f7fa f907 	bl	8000b58 <__aeabi_d2iz>
 800694a:	4680      	mov	r8, r0
 800694c:	f7f9 fdea 	bl	8000524 <__aeabi_i2d>
 8006950:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006954:	f7f9 fe50 	bl	80005f8 <__aeabi_dmul>
 8006958:	4602      	mov	r2, r0
 800695a:	460b      	mov	r3, r1
 800695c:	4620      	mov	r0, r4
 800695e:	4629      	mov	r1, r5
 8006960:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006964:	f7f9 fc90 	bl	8000288 <__aeabi_dsub>
 8006968:	f806 4b01 	strb.w	r4, [r6], #1
 800696c:	9d07      	ldr	r5, [sp, #28]
 800696e:	eba6 040a 	sub.w	r4, r6, sl
 8006972:	42a5      	cmp	r5, r4
 8006974:	4602      	mov	r2, r0
 8006976:	460b      	mov	r3, r1
 8006978:	f040 8117 	bne.w	8006baa <_dtoa_r+0x6e2>
 800697c:	f7f9 fc86 	bl	800028c <__adddf3>
 8006980:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006984:	4604      	mov	r4, r0
 8006986:	460d      	mov	r5, r1
 8006988:	f7fa f8c6 	bl	8000b18 <__aeabi_dcmpgt>
 800698c:	2800      	cmp	r0, #0
 800698e:	f040 80f9 	bne.w	8006b84 <_dtoa_r+0x6bc>
 8006992:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006996:	4620      	mov	r0, r4
 8006998:	4629      	mov	r1, r5
 800699a:	f7fa f895 	bl	8000ac8 <__aeabi_dcmpeq>
 800699e:	b118      	cbz	r0, 80069a8 <_dtoa_r+0x4e0>
 80069a0:	f018 0f01 	tst.w	r8, #1
 80069a4:	f040 80ee 	bne.w	8006b84 <_dtoa_r+0x6bc>
 80069a8:	4649      	mov	r1, r9
 80069aa:	4658      	mov	r0, fp
 80069ac:	f000 fc90 	bl	80072d0 <_Bfree>
 80069b0:	2300      	movs	r3, #0
 80069b2:	7033      	strb	r3, [r6, #0]
 80069b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80069b6:	3701      	adds	r7, #1
 80069b8:	601f      	str	r7, [r3, #0]
 80069ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f000 831d 	beq.w	8006ffc <_dtoa_r+0xb34>
 80069c2:	601e      	str	r6, [r3, #0]
 80069c4:	e31a      	b.n	8006ffc <_dtoa_r+0xb34>
 80069c6:	07e2      	lsls	r2, r4, #31
 80069c8:	d505      	bpl.n	80069d6 <_dtoa_r+0x50e>
 80069ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 80069ce:	f7f9 fe13 	bl	80005f8 <__aeabi_dmul>
 80069d2:	3601      	adds	r6, #1
 80069d4:	2301      	movs	r3, #1
 80069d6:	1064      	asrs	r4, r4, #1
 80069d8:	3508      	adds	r5, #8
 80069da:	e73f      	b.n	800685c <_dtoa_r+0x394>
 80069dc:	2602      	movs	r6, #2
 80069de:	e742      	b.n	8006866 <_dtoa_r+0x39e>
 80069e0:	9c07      	ldr	r4, [sp, #28]
 80069e2:	9704      	str	r7, [sp, #16]
 80069e4:	e761      	b.n	80068aa <_dtoa_r+0x3e2>
 80069e6:	4b27      	ldr	r3, [pc, #156]	@ (8006a84 <_dtoa_r+0x5bc>)
 80069e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80069ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80069ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80069f2:	4454      	add	r4, sl
 80069f4:	2900      	cmp	r1, #0
 80069f6:	d053      	beq.n	8006aa0 <_dtoa_r+0x5d8>
 80069f8:	4928      	ldr	r1, [pc, #160]	@ (8006a9c <_dtoa_r+0x5d4>)
 80069fa:	2000      	movs	r0, #0
 80069fc:	f7f9 ff26 	bl	800084c <__aeabi_ddiv>
 8006a00:	4633      	mov	r3, r6
 8006a02:	462a      	mov	r2, r5
 8006a04:	f7f9 fc40 	bl	8000288 <__aeabi_dsub>
 8006a08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006a0c:	4656      	mov	r6, sl
 8006a0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a12:	f7fa f8a1 	bl	8000b58 <__aeabi_d2iz>
 8006a16:	4605      	mov	r5, r0
 8006a18:	f7f9 fd84 	bl	8000524 <__aeabi_i2d>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	460b      	mov	r3, r1
 8006a20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a24:	f7f9 fc30 	bl	8000288 <__aeabi_dsub>
 8006a28:	3530      	adds	r5, #48	@ 0x30
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a32:	f806 5b01 	strb.w	r5, [r6], #1
 8006a36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006a3a:	f7fa f84f 	bl	8000adc <__aeabi_dcmplt>
 8006a3e:	2800      	cmp	r0, #0
 8006a40:	d171      	bne.n	8006b26 <_dtoa_r+0x65e>
 8006a42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a46:	4911      	ldr	r1, [pc, #68]	@ (8006a8c <_dtoa_r+0x5c4>)
 8006a48:	2000      	movs	r0, #0
 8006a4a:	f7f9 fc1d 	bl	8000288 <__aeabi_dsub>
 8006a4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006a52:	f7fa f843 	bl	8000adc <__aeabi_dcmplt>
 8006a56:	2800      	cmp	r0, #0
 8006a58:	f040 8095 	bne.w	8006b86 <_dtoa_r+0x6be>
 8006a5c:	42a6      	cmp	r6, r4
 8006a5e:	f43f af50 	beq.w	8006902 <_dtoa_r+0x43a>
 8006a62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006a66:	4b0a      	ldr	r3, [pc, #40]	@ (8006a90 <_dtoa_r+0x5c8>)
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f7f9 fdc5 	bl	80005f8 <__aeabi_dmul>
 8006a6e:	4b08      	ldr	r3, [pc, #32]	@ (8006a90 <_dtoa_r+0x5c8>)
 8006a70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006a74:	2200      	movs	r2, #0
 8006a76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a7a:	f7f9 fdbd 	bl	80005f8 <__aeabi_dmul>
 8006a7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a82:	e7c4      	b.n	8006a0e <_dtoa_r+0x546>
 8006a84:	08009c78 	.word	0x08009c78
 8006a88:	08009c50 	.word	0x08009c50
 8006a8c:	3ff00000 	.word	0x3ff00000
 8006a90:	40240000 	.word	0x40240000
 8006a94:	401c0000 	.word	0x401c0000
 8006a98:	40140000 	.word	0x40140000
 8006a9c:	3fe00000 	.word	0x3fe00000
 8006aa0:	4631      	mov	r1, r6
 8006aa2:	4628      	mov	r0, r5
 8006aa4:	f7f9 fda8 	bl	80005f8 <__aeabi_dmul>
 8006aa8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006aac:	9415      	str	r4, [sp, #84]	@ 0x54
 8006aae:	4656      	mov	r6, sl
 8006ab0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ab4:	f7fa f850 	bl	8000b58 <__aeabi_d2iz>
 8006ab8:	4605      	mov	r5, r0
 8006aba:	f7f9 fd33 	bl	8000524 <__aeabi_i2d>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ac6:	f7f9 fbdf 	bl	8000288 <__aeabi_dsub>
 8006aca:	3530      	adds	r5, #48	@ 0x30
 8006acc:	f806 5b01 	strb.w	r5, [r6], #1
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	42a6      	cmp	r6, r4
 8006ad6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006ada:	f04f 0200 	mov.w	r2, #0
 8006ade:	d124      	bne.n	8006b2a <_dtoa_r+0x662>
 8006ae0:	4bac      	ldr	r3, [pc, #688]	@ (8006d94 <_dtoa_r+0x8cc>)
 8006ae2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006ae6:	f7f9 fbd1 	bl	800028c <__adddf3>
 8006aea:	4602      	mov	r2, r0
 8006aec:	460b      	mov	r3, r1
 8006aee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006af2:	f7fa f811 	bl	8000b18 <__aeabi_dcmpgt>
 8006af6:	2800      	cmp	r0, #0
 8006af8:	d145      	bne.n	8006b86 <_dtoa_r+0x6be>
 8006afa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006afe:	49a5      	ldr	r1, [pc, #660]	@ (8006d94 <_dtoa_r+0x8cc>)
 8006b00:	2000      	movs	r0, #0
 8006b02:	f7f9 fbc1 	bl	8000288 <__aeabi_dsub>
 8006b06:	4602      	mov	r2, r0
 8006b08:	460b      	mov	r3, r1
 8006b0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b0e:	f7f9 ffe5 	bl	8000adc <__aeabi_dcmplt>
 8006b12:	2800      	cmp	r0, #0
 8006b14:	f43f aef5 	beq.w	8006902 <_dtoa_r+0x43a>
 8006b18:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006b1a:	1e73      	subs	r3, r6, #1
 8006b1c:	9315      	str	r3, [sp, #84]	@ 0x54
 8006b1e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006b22:	2b30      	cmp	r3, #48	@ 0x30
 8006b24:	d0f8      	beq.n	8006b18 <_dtoa_r+0x650>
 8006b26:	9f04      	ldr	r7, [sp, #16]
 8006b28:	e73e      	b.n	80069a8 <_dtoa_r+0x4e0>
 8006b2a:	4b9b      	ldr	r3, [pc, #620]	@ (8006d98 <_dtoa_r+0x8d0>)
 8006b2c:	f7f9 fd64 	bl	80005f8 <__aeabi_dmul>
 8006b30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b34:	e7bc      	b.n	8006ab0 <_dtoa_r+0x5e8>
 8006b36:	d10c      	bne.n	8006b52 <_dtoa_r+0x68a>
 8006b38:	4b98      	ldr	r3, [pc, #608]	@ (8006d9c <_dtoa_r+0x8d4>)
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b40:	f7f9 fd5a 	bl	80005f8 <__aeabi_dmul>
 8006b44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b48:	f7f9 ffdc 	bl	8000b04 <__aeabi_dcmpge>
 8006b4c:	2800      	cmp	r0, #0
 8006b4e:	f000 8157 	beq.w	8006e00 <_dtoa_r+0x938>
 8006b52:	2400      	movs	r4, #0
 8006b54:	4625      	mov	r5, r4
 8006b56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b58:	43db      	mvns	r3, r3
 8006b5a:	9304      	str	r3, [sp, #16]
 8006b5c:	4656      	mov	r6, sl
 8006b5e:	2700      	movs	r7, #0
 8006b60:	4621      	mov	r1, r4
 8006b62:	4658      	mov	r0, fp
 8006b64:	f000 fbb4 	bl	80072d0 <_Bfree>
 8006b68:	2d00      	cmp	r5, #0
 8006b6a:	d0dc      	beq.n	8006b26 <_dtoa_r+0x65e>
 8006b6c:	b12f      	cbz	r7, 8006b7a <_dtoa_r+0x6b2>
 8006b6e:	42af      	cmp	r7, r5
 8006b70:	d003      	beq.n	8006b7a <_dtoa_r+0x6b2>
 8006b72:	4639      	mov	r1, r7
 8006b74:	4658      	mov	r0, fp
 8006b76:	f000 fbab 	bl	80072d0 <_Bfree>
 8006b7a:	4629      	mov	r1, r5
 8006b7c:	4658      	mov	r0, fp
 8006b7e:	f000 fba7 	bl	80072d0 <_Bfree>
 8006b82:	e7d0      	b.n	8006b26 <_dtoa_r+0x65e>
 8006b84:	9704      	str	r7, [sp, #16]
 8006b86:	4633      	mov	r3, r6
 8006b88:	461e      	mov	r6, r3
 8006b8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b8e:	2a39      	cmp	r2, #57	@ 0x39
 8006b90:	d107      	bne.n	8006ba2 <_dtoa_r+0x6da>
 8006b92:	459a      	cmp	sl, r3
 8006b94:	d1f8      	bne.n	8006b88 <_dtoa_r+0x6c0>
 8006b96:	9a04      	ldr	r2, [sp, #16]
 8006b98:	3201      	adds	r2, #1
 8006b9a:	9204      	str	r2, [sp, #16]
 8006b9c:	2230      	movs	r2, #48	@ 0x30
 8006b9e:	f88a 2000 	strb.w	r2, [sl]
 8006ba2:	781a      	ldrb	r2, [r3, #0]
 8006ba4:	3201      	adds	r2, #1
 8006ba6:	701a      	strb	r2, [r3, #0]
 8006ba8:	e7bd      	b.n	8006b26 <_dtoa_r+0x65e>
 8006baa:	4b7b      	ldr	r3, [pc, #492]	@ (8006d98 <_dtoa_r+0x8d0>)
 8006bac:	2200      	movs	r2, #0
 8006bae:	f7f9 fd23 	bl	80005f8 <__aeabi_dmul>
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	4604      	mov	r4, r0
 8006bb8:	460d      	mov	r5, r1
 8006bba:	f7f9 ff85 	bl	8000ac8 <__aeabi_dcmpeq>
 8006bbe:	2800      	cmp	r0, #0
 8006bc0:	f43f aebb 	beq.w	800693a <_dtoa_r+0x472>
 8006bc4:	e6f0      	b.n	80069a8 <_dtoa_r+0x4e0>
 8006bc6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006bc8:	2a00      	cmp	r2, #0
 8006bca:	f000 80db 	beq.w	8006d84 <_dtoa_r+0x8bc>
 8006bce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006bd0:	2a01      	cmp	r2, #1
 8006bd2:	f300 80bf 	bgt.w	8006d54 <_dtoa_r+0x88c>
 8006bd6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006bd8:	2a00      	cmp	r2, #0
 8006bda:	f000 80b7 	beq.w	8006d4c <_dtoa_r+0x884>
 8006bde:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006be2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006be4:	4646      	mov	r6, r8
 8006be6:	9a08      	ldr	r2, [sp, #32]
 8006be8:	2101      	movs	r1, #1
 8006bea:	441a      	add	r2, r3
 8006bec:	4658      	mov	r0, fp
 8006bee:	4498      	add	r8, r3
 8006bf0:	9208      	str	r2, [sp, #32]
 8006bf2:	f000 fc6b 	bl	80074cc <__i2b>
 8006bf6:	4605      	mov	r5, r0
 8006bf8:	b15e      	cbz	r6, 8006c12 <_dtoa_r+0x74a>
 8006bfa:	9b08      	ldr	r3, [sp, #32]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	dd08      	ble.n	8006c12 <_dtoa_r+0x74a>
 8006c00:	42b3      	cmp	r3, r6
 8006c02:	9a08      	ldr	r2, [sp, #32]
 8006c04:	bfa8      	it	ge
 8006c06:	4633      	movge	r3, r6
 8006c08:	eba8 0803 	sub.w	r8, r8, r3
 8006c0c:	1af6      	subs	r6, r6, r3
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	9308      	str	r3, [sp, #32]
 8006c12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c14:	b1f3      	cbz	r3, 8006c54 <_dtoa_r+0x78c>
 8006c16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f000 80b7 	beq.w	8006d8c <_dtoa_r+0x8c4>
 8006c1e:	b18c      	cbz	r4, 8006c44 <_dtoa_r+0x77c>
 8006c20:	4629      	mov	r1, r5
 8006c22:	4622      	mov	r2, r4
 8006c24:	4658      	mov	r0, fp
 8006c26:	f000 fd11 	bl	800764c <__pow5mult>
 8006c2a:	464a      	mov	r2, r9
 8006c2c:	4601      	mov	r1, r0
 8006c2e:	4605      	mov	r5, r0
 8006c30:	4658      	mov	r0, fp
 8006c32:	f000 fc61 	bl	80074f8 <__multiply>
 8006c36:	4649      	mov	r1, r9
 8006c38:	9004      	str	r0, [sp, #16]
 8006c3a:	4658      	mov	r0, fp
 8006c3c:	f000 fb48 	bl	80072d0 <_Bfree>
 8006c40:	9b04      	ldr	r3, [sp, #16]
 8006c42:	4699      	mov	r9, r3
 8006c44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c46:	1b1a      	subs	r2, r3, r4
 8006c48:	d004      	beq.n	8006c54 <_dtoa_r+0x78c>
 8006c4a:	4649      	mov	r1, r9
 8006c4c:	4658      	mov	r0, fp
 8006c4e:	f000 fcfd 	bl	800764c <__pow5mult>
 8006c52:	4681      	mov	r9, r0
 8006c54:	2101      	movs	r1, #1
 8006c56:	4658      	mov	r0, fp
 8006c58:	f000 fc38 	bl	80074cc <__i2b>
 8006c5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c5e:	4604      	mov	r4, r0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f000 81cf 	beq.w	8007004 <_dtoa_r+0xb3c>
 8006c66:	461a      	mov	r2, r3
 8006c68:	4601      	mov	r1, r0
 8006c6a:	4658      	mov	r0, fp
 8006c6c:	f000 fcee 	bl	800764c <__pow5mult>
 8006c70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	4604      	mov	r4, r0
 8006c76:	f300 8095 	bgt.w	8006da4 <_dtoa_r+0x8dc>
 8006c7a:	9b02      	ldr	r3, [sp, #8]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	f040 8087 	bne.w	8006d90 <_dtoa_r+0x8c8>
 8006c82:	9b03      	ldr	r3, [sp, #12]
 8006c84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f040 8089 	bne.w	8006da0 <_dtoa_r+0x8d8>
 8006c8e:	9b03      	ldr	r3, [sp, #12]
 8006c90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c94:	0d1b      	lsrs	r3, r3, #20
 8006c96:	051b      	lsls	r3, r3, #20
 8006c98:	b12b      	cbz	r3, 8006ca6 <_dtoa_r+0x7de>
 8006c9a:	9b08      	ldr	r3, [sp, #32]
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	9308      	str	r3, [sp, #32]
 8006ca0:	f108 0801 	add.w	r8, r8, #1
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ca8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	f000 81b0 	beq.w	8007010 <_dtoa_r+0xb48>
 8006cb0:	6923      	ldr	r3, [r4, #16]
 8006cb2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006cb6:	6918      	ldr	r0, [r3, #16]
 8006cb8:	f000 fbbc 	bl	8007434 <__hi0bits>
 8006cbc:	f1c0 0020 	rsb	r0, r0, #32
 8006cc0:	9b08      	ldr	r3, [sp, #32]
 8006cc2:	4418      	add	r0, r3
 8006cc4:	f010 001f 	ands.w	r0, r0, #31
 8006cc8:	d077      	beq.n	8006dba <_dtoa_r+0x8f2>
 8006cca:	f1c0 0320 	rsb	r3, r0, #32
 8006cce:	2b04      	cmp	r3, #4
 8006cd0:	dd6b      	ble.n	8006daa <_dtoa_r+0x8e2>
 8006cd2:	9b08      	ldr	r3, [sp, #32]
 8006cd4:	f1c0 001c 	rsb	r0, r0, #28
 8006cd8:	4403      	add	r3, r0
 8006cda:	4480      	add	r8, r0
 8006cdc:	4406      	add	r6, r0
 8006cde:	9308      	str	r3, [sp, #32]
 8006ce0:	f1b8 0f00 	cmp.w	r8, #0
 8006ce4:	dd05      	ble.n	8006cf2 <_dtoa_r+0x82a>
 8006ce6:	4649      	mov	r1, r9
 8006ce8:	4642      	mov	r2, r8
 8006cea:	4658      	mov	r0, fp
 8006cec:	f000 fd08 	bl	8007700 <__lshift>
 8006cf0:	4681      	mov	r9, r0
 8006cf2:	9b08      	ldr	r3, [sp, #32]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	dd05      	ble.n	8006d04 <_dtoa_r+0x83c>
 8006cf8:	4621      	mov	r1, r4
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	4658      	mov	r0, fp
 8006cfe:	f000 fcff 	bl	8007700 <__lshift>
 8006d02:	4604      	mov	r4, r0
 8006d04:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d059      	beq.n	8006dbe <_dtoa_r+0x8f6>
 8006d0a:	4621      	mov	r1, r4
 8006d0c:	4648      	mov	r0, r9
 8006d0e:	f000 fd63 	bl	80077d8 <__mcmp>
 8006d12:	2800      	cmp	r0, #0
 8006d14:	da53      	bge.n	8006dbe <_dtoa_r+0x8f6>
 8006d16:	1e7b      	subs	r3, r7, #1
 8006d18:	9304      	str	r3, [sp, #16]
 8006d1a:	4649      	mov	r1, r9
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	220a      	movs	r2, #10
 8006d20:	4658      	mov	r0, fp
 8006d22:	f000 faf7 	bl	8007314 <__multadd>
 8006d26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d28:	4681      	mov	r9, r0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	f000 8172 	beq.w	8007014 <_dtoa_r+0xb4c>
 8006d30:	2300      	movs	r3, #0
 8006d32:	4629      	mov	r1, r5
 8006d34:	220a      	movs	r2, #10
 8006d36:	4658      	mov	r0, fp
 8006d38:	f000 faec 	bl	8007314 <__multadd>
 8006d3c:	9b00      	ldr	r3, [sp, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	4605      	mov	r5, r0
 8006d42:	dc67      	bgt.n	8006e14 <_dtoa_r+0x94c>
 8006d44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	dc41      	bgt.n	8006dce <_dtoa_r+0x906>
 8006d4a:	e063      	b.n	8006e14 <_dtoa_r+0x94c>
 8006d4c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006d4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006d52:	e746      	b.n	8006be2 <_dtoa_r+0x71a>
 8006d54:	9b07      	ldr	r3, [sp, #28]
 8006d56:	1e5c      	subs	r4, r3, #1
 8006d58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d5a:	42a3      	cmp	r3, r4
 8006d5c:	bfbf      	itttt	lt
 8006d5e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006d60:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006d62:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006d64:	1ae3      	sublt	r3, r4, r3
 8006d66:	bfb4      	ite	lt
 8006d68:	18d2      	addlt	r2, r2, r3
 8006d6a:	1b1c      	subge	r4, r3, r4
 8006d6c:	9b07      	ldr	r3, [sp, #28]
 8006d6e:	bfbc      	itt	lt
 8006d70:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006d72:	2400      	movlt	r4, #0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	bfb5      	itete	lt
 8006d78:	eba8 0603 	sublt.w	r6, r8, r3
 8006d7c:	9b07      	ldrge	r3, [sp, #28]
 8006d7e:	2300      	movlt	r3, #0
 8006d80:	4646      	movge	r6, r8
 8006d82:	e730      	b.n	8006be6 <_dtoa_r+0x71e>
 8006d84:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006d86:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006d88:	4646      	mov	r6, r8
 8006d8a:	e735      	b.n	8006bf8 <_dtoa_r+0x730>
 8006d8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d8e:	e75c      	b.n	8006c4a <_dtoa_r+0x782>
 8006d90:	2300      	movs	r3, #0
 8006d92:	e788      	b.n	8006ca6 <_dtoa_r+0x7de>
 8006d94:	3fe00000 	.word	0x3fe00000
 8006d98:	40240000 	.word	0x40240000
 8006d9c:	40140000 	.word	0x40140000
 8006da0:	9b02      	ldr	r3, [sp, #8]
 8006da2:	e780      	b.n	8006ca6 <_dtoa_r+0x7de>
 8006da4:	2300      	movs	r3, #0
 8006da6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006da8:	e782      	b.n	8006cb0 <_dtoa_r+0x7e8>
 8006daa:	d099      	beq.n	8006ce0 <_dtoa_r+0x818>
 8006dac:	9a08      	ldr	r2, [sp, #32]
 8006dae:	331c      	adds	r3, #28
 8006db0:	441a      	add	r2, r3
 8006db2:	4498      	add	r8, r3
 8006db4:	441e      	add	r6, r3
 8006db6:	9208      	str	r2, [sp, #32]
 8006db8:	e792      	b.n	8006ce0 <_dtoa_r+0x818>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	e7f6      	b.n	8006dac <_dtoa_r+0x8e4>
 8006dbe:	9b07      	ldr	r3, [sp, #28]
 8006dc0:	9704      	str	r7, [sp, #16]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	dc20      	bgt.n	8006e08 <_dtoa_r+0x940>
 8006dc6:	9300      	str	r3, [sp, #0]
 8006dc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dca:	2b02      	cmp	r3, #2
 8006dcc:	dd1e      	ble.n	8006e0c <_dtoa_r+0x944>
 8006dce:	9b00      	ldr	r3, [sp, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f47f aec0 	bne.w	8006b56 <_dtoa_r+0x68e>
 8006dd6:	4621      	mov	r1, r4
 8006dd8:	2205      	movs	r2, #5
 8006dda:	4658      	mov	r0, fp
 8006ddc:	f000 fa9a 	bl	8007314 <__multadd>
 8006de0:	4601      	mov	r1, r0
 8006de2:	4604      	mov	r4, r0
 8006de4:	4648      	mov	r0, r9
 8006de6:	f000 fcf7 	bl	80077d8 <__mcmp>
 8006dea:	2800      	cmp	r0, #0
 8006dec:	f77f aeb3 	ble.w	8006b56 <_dtoa_r+0x68e>
 8006df0:	4656      	mov	r6, sl
 8006df2:	2331      	movs	r3, #49	@ 0x31
 8006df4:	f806 3b01 	strb.w	r3, [r6], #1
 8006df8:	9b04      	ldr	r3, [sp, #16]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	9304      	str	r3, [sp, #16]
 8006dfe:	e6ae      	b.n	8006b5e <_dtoa_r+0x696>
 8006e00:	9c07      	ldr	r4, [sp, #28]
 8006e02:	9704      	str	r7, [sp, #16]
 8006e04:	4625      	mov	r5, r4
 8006e06:	e7f3      	b.n	8006df0 <_dtoa_r+0x928>
 8006e08:	9b07      	ldr	r3, [sp, #28]
 8006e0a:	9300      	str	r3, [sp, #0]
 8006e0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	f000 8104 	beq.w	800701c <_dtoa_r+0xb54>
 8006e14:	2e00      	cmp	r6, #0
 8006e16:	dd05      	ble.n	8006e24 <_dtoa_r+0x95c>
 8006e18:	4629      	mov	r1, r5
 8006e1a:	4632      	mov	r2, r6
 8006e1c:	4658      	mov	r0, fp
 8006e1e:	f000 fc6f 	bl	8007700 <__lshift>
 8006e22:	4605      	mov	r5, r0
 8006e24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d05a      	beq.n	8006ee0 <_dtoa_r+0xa18>
 8006e2a:	6869      	ldr	r1, [r5, #4]
 8006e2c:	4658      	mov	r0, fp
 8006e2e:	f000 fa0f 	bl	8007250 <_Balloc>
 8006e32:	4606      	mov	r6, r0
 8006e34:	b928      	cbnz	r0, 8006e42 <_dtoa_r+0x97a>
 8006e36:	4b84      	ldr	r3, [pc, #528]	@ (8007048 <_dtoa_r+0xb80>)
 8006e38:	4602      	mov	r2, r0
 8006e3a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006e3e:	f7ff bb5a 	b.w	80064f6 <_dtoa_r+0x2e>
 8006e42:	692a      	ldr	r2, [r5, #16]
 8006e44:	3202      	adds	r2, #2
 8006e46:	0092      	lsls	r2, r2, #2
 8006e48:	f105 010c 	add.w	r1, r5, #12
 8006e4c:	300c      	adds	r0, #12
 8006e4e:	f001 ff87 	bl	8008d60 <memcpy>
 8006e52:	2201      	movs	r2, #1
 8006e54:	4631      	mov	r1, r6
 8006e56:	4658      	mov	r0, fp
 8006e58:	f000 fc52 	bl	8007700 <__lshift>
 8006e5c:	f10a 0301 	add.w	r3, sl, #1
 8006e60:	9307      	str	r3, [sp, #28]
 8006e62:	9b00      	ldr	r3, [sp, #0]
 8006e64:	4453      	add	r3, sl
 8006e66:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e68:	9b02      	ldr	r3, [sp, #8]
 8006e6a:	f003 0301 	and.w	r3, r3, #1
 8006e6e:	462f      	mov	r7, r5
 8006e70:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e72:	4605      	mov	r5, r0
 8006e74:	9b07      	ldr	r3, [sp, #28]
 8006e76:	4621      	mov	r1, r4
 8006e78:	3b01      	subs	r3, #1
 8006e7a:	4648      	mov	r0, r9
 8006e7c:	9300      	str	r3, [sp, #0]
 8006e7e:	f7ff fa99 	bl	80063b4 <quorem>
 8006e82:	4639      	mov	r1, r7
 8006e84:	9002      	str	r0, [sp, #8]
 8006e86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006e8a:	4648      	mov	r0, r9
 8006e8c:	f000 fca4 	bl	80077d8 <__mcmp>
 8006e90:	462a      	mov	r2, r5
 8006e92:	9008      	str	r0, [sp, #32]
 8006e94:	4621      	mov	r1, r4
 8006e96:	4658      	mov	r0, fp
 8006e98:	f000 fcba 	bl	8007810 <__mdiff>
 8006e9c:	68c2      	ldr	r2, [r0, #12]
 8006e9e:	4606      	mov	r6, r0
 8006ea0:	bb02      	cbnz	r2, 8006ee4 <_dtoa_r+0xa1c>
 8006ea2:	4601      	mov	r1, r0
 8006ea4:	4648      	mov	r0, r9
 8006ea6:	f000 fc97 	bl	80077d8 <__mcmp>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	4631      	mov	r1, r6
 8006eae:	4658      	mov	r0, fp
 8006eb0:	920e      	str	r2, [sp, #56]	@ 0x38
 8006eb2:	f000 fa0d 	bl	80072d0 <_Bfree>
 8006eb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eb8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006eba:	9e07      	ldr	r6, [sp, #28]
 8006ebc:	ea43 0102 	orr.w	r1, r3, r2
 8006ec0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ec2:	4319      	orrs	r1, r3
 8006ec4:	d110      	bne.n	8006ee8 <_dtoa_r+0xa20>
 8006ec6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006eca:	d029      	beq.n	8006f20 <_dtoa_r+0xa58>
 8006ecc:	9b08      	ldr	r3, [sp, #32]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	dd02      	ble.n	8006ed8 <_dtoa_r+0xa10>
 8006ed2:	9b02      	ldr	r3, [sp, #8]
 8006ed4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006ed8:	9b00      	ldr	r3, [sp, #0]
 8006eda:	f883 8000 	strb.w	r8, [r3]
 8006ede:	e63f      	b.n	8006b60 <_dtoa_r+0x698>
 8006ee0:	4628      	mov	r0, r5
 8006ee2:	e7bb      	b.n	8006e5c <_dtoa_r+0x994>
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	e7e1      	b.n	8006eac <_dtoa_r+0x9e4>
 8006ee8:	9b08      	ldr	r3, [sp, #32]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	db04      	blt.n	8006ef8 <_dtoa_r+0xa30>
 8006eee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006ef0:	430b      	orrs	r3, r1
 8006ef2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006ef4:	430b      	orrs	r3, r1
 8006ef6:	d120      	bne.n	8006f3a <_dtoa_r+0xa72>
 8006ef8:	2a00      	cmp	r2, #0
 8006efa:	dded      	ble.n	8006ed8 <_dtoa_r+0xa10>
 8006efc:	4649      	mov	r1, r9
 8006efe:	2201      	movs	r2, #1
 8006f00:	4658      	mov	r0, fp
 8006f02:	f000 fbfd 	bl	8007700 <__lshift>
 8006f06:	4621      	mov	r1, r4
 8006f08:	4681      	mov	r9, r0
 8006f0a:	f000 fc65 	bl	80077d8 <__mcmp>
 8006f0e:	2800      	cmp	r0, #0
 8006f10:	dc03      	bgt.n	8006f1a <_dtoa_r+0xa52>
 8006f12:	d1e1      	bne.n	8006ed8 <_dtoa_r+0xa10>
 8006f14:	f018 0f01 	tst.w	r8, #1
 8006f18:	d0de      	beq.n	8006ed8 <_dtoa_r+0xa10>
 8006f1a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006f1e:	d1d8      	bne.n	8006ed2 <_dtoa_r+0xa0a>
 8006f20:	9a00      	ldr	r2, [sp, #0]
 8006f22:	2339      	movs	r3, #57	@ 0x39
 8006f24:	7013      	strb	r3, [r2, #0]
 8006f26:	4633      	mov	r3, r6
 8006f28:	461e      	mov	r6, r3
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006f30:	2a39      	cmp	r2, #57	@ 0x39
 8006f32:	d052      	beq.n	8006fda <_dtoa_r+0xb12>
 8006f34:	3201      	adds	r2, #1
 8006f36:	701a      	strb	r2, [r3, #0]
 8006f38:	e612      	b.n	8006b60 <_dtoa_r+0x698>
 8006f3a:	2a00      	cmp	r2, #0
 8006f3c:	dd07      	ble.n	8006f4e <_dtoa_r+0xa86>
 8006f3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006f42:	d0ed      	beq.n	8006f20 <_dtoa_r+0xa58>
 8006f44:	9a00      	ldr	r2, [sp, #0]
 8006f46:	f108 0301 	add.w	r3, r8, #1
 8006f4a:	7013      	strb	r3, [r2, #0]
 8006f4c:	e608      	b.n	8006b60 <_dtoa_r+0x698>
 8006f4e:	9b07      	ldr	r3, [sp, #28]
 8006f50:	9a07      	ldr	r2, [sp, #28]
 8006f52:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006f56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d028      	beq.n	8006fae <_dtoa_r+0xae6>
 8006f5c:	4649      	mov	r1, r9
 8006f5e:	2300      	movs	r3, #0
 8006f60:	220a      	movs	r2, #10
 8006f62:	4658      	mov	r0, fp
 8006f64:	f000 f9d6 	bl	8007314 <__multadd>
 8006f68:	42af      	cmp	r7, r5
 8006f6a:	4681      	mov	r9, r0
 8006f6c:	f04f 0300 	mov.w	r3, #0
 8006f70:	f04f 020a 	mov.w	r2, #10
 8006f74:	4639      	mov	r1, r7
 8006f76:	4658      	mov	r0, fp
 8006f78:	d107      	bne.n	8006f8a <_dtoa_r+0xac2>
 8006f7a:	f000 f9cb 	bl	8007314 <__multadd>
 8006f7e:	4607      	mov	r7, r0
 8006f80:	4605      	mov	r5, r0
 8006f82:	9b07      	ldr	r3, [sp, #28]
 8006f84:	3301      	adds	r3, #1
 8006f86:	9307      	str	r3, [sp, #28]
 8006f88:	e774      	b.n	8006e74 <_dtoa_r+0x9ac>
 8006f8a:	f000 f9c3 	bl	8007314 <__multadd>
 8006f8e:	4629      	mov	r1, r5
 8006f90:	4607      	mov	r7, r0
 8006f92:	2300      	movs	r3, #0
 8006f94:	220a      	movs	r2, #10
 8006f96:	4658      	mov	r0, fp
 8006f98:	f000 f9bc 	bl	8007314 <__multadd>
 8006f9c:	4605      	mov	r5, r0
 8006f9e:	e7f0      	b.n	8006f82 <_dtoa_r+0xaba>
 8006fa0:	9b00      	ldr	r3, [sp, #0]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	bfcc      	ite	gt
 8006fa6:	461e      	movgt	r6, r3
 8006fa8:	2601      	movle	r6, #1
 8006faa:	4456      	add	r6, sl
 8006fac:	2700      	movs	r7, #0
 8006fae:	4649      	mov	r1, r9
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	4658      	mov	r0, fp
 8006fb4:	f000 fba4 	bl	8007700 <__lshift>
 8006fb8:	4621      	mov	r1, r4
 8006fba:	4681      	mov	r9, r0
 8006fbc:	f000 fc0c 	bl	80077d8 <__mcmp>
 8006fc0:	2800      	cmp	r0, #0
 8006fc2:	dcb0      	bgt.n	8006f26 <_dtoa_r+0xa5e>
 8006fc4:	d102      	bne.n	8006fcc <_dtoa_r+0xb04>
 8006fc6:	f018 0f01 	tst.w	r8, #1
 8006fca:	d1ac      	bne.n	8006f26 <_dtoa_r+0xa5e>
 8006fcc:	4633      	mov	r3, r6
 8006fce:	461e      	mov	r6, r3
 8006fd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006fd4:	2a30      	cmp	r2, #48	@ 0x30
 8006fd6:	d0fa      	beq.n	8006fce <_dtoa_r+0xb06>
 8006fd8:	e5c2      	b.n	8006b60 <_dtoa_r+0x698>
 8006fda:	459a      	cmp	sl, r3
 8006fdc:	d1a4      	bne.n	8006f28 <_dtoa_r+0xa60>
 8006fde:	9b04      	ldr	r3, [sp, #16]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	9304      	str	r3, [sp, #16]
 8006fe4:	2331      	movs	r3, #49	@ 0x31
 8006fe6:	f88a 3000 	strb.w	r3, [sl]
 8006fea:	e5b9      	b.n	8006b60 <_dtoa_r+0x698>
 8006fec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006fee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800704c <_dtoa_r+0xb84>
 8006ff2:	b11b      	cbz	r3, 8006ffc <_dtoa_r+0xb34>
 8006ff4:	f10a 0308 	add.w	r3, sl, #8
 8006ff8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006ffa:	6013      	str	r3, [r2, #0]
 8006ffc:	4650      	mov	r0, sl
 8006ffe:	b019      	add	sp, #100	@ 0x64
 8007000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007004:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007006:	2b01      	cmp	r3, #1
 8007008:	f77f ae37 	ble.w	8006c7a <_dtoa_r+0x7b2>
 800700c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800700e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007010:	2001      	movs	r0, #1
 8007012:	e655      	b.n	8006cc0 <_dtoa_r+0x7f8>
 8007014:	9b00      	ldr	r3, [sp, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	f77f aed6 	ble.w	8006dc8 <_dtoa_r+0x900>
 800701c:	4656      	mov	r6, sl
 800701e:	4621      	mov	r1, r4
 8007020:	4648      	mov	r0, r9
 8007022:	f7ff f9c7 	bl	80063b4 <quorem>
 8007026:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800702a:	f806 8b01 	strb.w	r8, [r6], #1
 800702e:	9b00      	ldr	r3, [sp, #0]
 8007030:	eba6 020a 	sub.w	r2, r6, sl
 8007034:	4293      	cmp	r3, r2
 8007036:	ddb3      	ble.n	8006fa0 <_dtoa_r+0xad8>
 8007038:	4649      	mov	r1, r9
 800703a:	2300      	movs	r3, #0
 800703c:	220a      	movs	r2, #10
 800703e:	4658      	mov	r0, fp
 8007040:	f000 f968 	bl	8007314 <__multadd>
 8007044:	4681      	mov	r9, r0
 8007046:	e7ea      	b.n	800701e <_dtoa_r+0xb56>
 8007048:	08009bd5 	.word	0x08009bd5
 800704c:	08009b70 	.word	0x08009b70

08007050 <_free_r>:
 8007050:	b538      	push	{r3, r4, r5, lr}
 8007052:	4605      	mov	r5, r0
 8007054:	2900      	cmp	r1, #0
 8007056:	d041      	beq.n	80070dc <_free_r+0x8c>
 8007058:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800705c:	1f0c      	subs	r4, r1, #4
 800705e:	2b00      	cmp	r3, #0
 8007060:	bfb8      	it	lt
 8007062:	18e4      	addlt	r4, r4, r3
 8007064:	f000 f8e8 	bl	8007238 <__malloc_lock>
 8007068:	4a1d      	ldr	r2, [pc, #116]	@ (80070e0 <_free_r+0x90>)
 800706a:	6813      	ldr	r3, [r2, #0]
 800706c:	b933      	cbnz	r3, 800707c <_free_r+0x2c>
 800706e:	6063      	str	r3, [r4, #4]
 8007070:	6014      	str	r4, [r2, #0]
 8007072:	4628      	mov	r0, r5
 8007074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007078:	f000 b8e4 	b.w	8007244 <__malloc_unlock>
 800707c:	42a3      	cmp	r3, r4
 800707e:	d908      	bls.n	8007092 <_free_r+0x42>
 8007080:	6820      	ldr	r0, [r4, #0]
 8007082:	1821      	adds	r1, r4, r0
 8007084:	428b      	cmp	r3, r1
 8007086:	bf01      	itttt	eq
 8007088:	6819      	ldreq	r1, [r3, #0]
 800708a:	685b      	ldreq	r3, [r3, #4]
 800708c:	1809      	addeq	r1, r1, r0
 800708e:	6021      	streq	r1, [r4, #0]
 8007090:	e7ed      	b.n	800706e <_free_r+0x1e>
 8007092:	461a      	mov	r2, r3
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	b10b      	cbz	r3, 800709c <_free_r+0x4c>
 8007098:	42a3      	cmp	r3, r4
 800709a:	d9fa      	bls.n	8007092 <_free_r+0x42>
 800709c:	6811      	ldr	r1, [r2, #0]
 800709e:	1850      	adds	r0, r2, r1
 80070a0:	42a0      	cmp	r0, r4
 80070a2:	d10b      	bne.n	80070bc <_free_r+0x6c>
 80070a4:	6820      	ldr	r0, [r4, #0]
 80070a6:	4401      	add	r1, r0
 80070a8:	1850      	adds	r0, r2, r1
 80070aa:	4283      	cmp	r3, r0
 80070ac:	6011      	str	r1, [r2, #0]
 80070ae:	d1e0      	bne.n	8007072 <_free_r+0x22>
 80070b0:	6818      	ldr	r0, [r3, #0]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	6053      	str	r3, [r2, #4]
 80070b6:	4408      	add	r0, r1
 80070b8:	6010      	str	r0, [r2, #0]
 80070ba:	e7da      	b.n	8007072 <_free_r+0x22>
 80070bc:	d902      	bls.n	80070c4 <_free_r+0x74>
 80070be:	230c      	movs	r3, #12
 80070c0:	602b      	str	r3, [r5, #0]
 80070c2:	e7d6      	b.n	8007072 <_free_r+0x22>
 80070c4:	6820      	ldr	r0, [r4, #0]
 80070c6:	1821      	adds	r1, r4, r0
 80070c8:	428b      	cmp	r3, r1
 80070ca:	bf04      	itt	eq
 80070cc:	6819      	ldreq	r1, [r3, #0]
 80070ce:	685b      	ldreq	r3, [r3, #4]
 80070d0:	6063      	str	r3, [r4, #4]
 80070d2:	bf04      	itt	eq
 80070d4:	1809      	addeq	r1, r1, r0
 80070d6:	6021      	streq	r1, [r4, #0]
 80070d8:	6054      	str	r4, [r2, #4]
 80070da:	e7ca      	b.n	8007072 <_free_r+0x22>
 80070dc:	bd38      	pop	{r3, r4, r5, pc}
 80070de:	bf00      	nop
 80070e0:	200004e0 	.word	0x200004e0

080070e4 <malloc>:
 80070e4:	4b02      	ldr	r3, [pc, #8]	@ (80070f0 <malloc+0xc>)
 80070e6:	4601      	mov	r1, r0
 80070e8:	6818      	ldr	r0, [r3, #0]
 80070ea:	f000 b825 	b.w	8007138 <_malloc_r>
 80070ee:	bf00      	nop
 80070f0:	20000028 	.word	0x20000028

080070f4 <sbrk_aligned>:
 80070f4:	b570      	push	{r4, r5, r6, lr}
 80070f6:	4e0f      	ldr	r6, [pc, #60]	@ (8007134 <sbrk_aligned+0x40>)
 80070f8:	460c      	mov	r4, r1
 80070fa:	6831      	ldr	r1, [r6, #0]
 80070fc:	4605      	mov	r5, r0
 80070fe:	b911      	cbnz	r1, 8007106 <sbrk_aligned+0x12>
 8007100:	f001 fe1e 	bl	8008d40 <_sbrk_r>
 8007104:	6030      	str	r0, [r6, #0]
 8007106:	4621      	mov	r1, r4
 8007108:	4628      	mov	r0, r5
 800710a:	f001 fe19 	bl	8008d40 <_sbrk_r>
 800710e:	1c43      	adds	r3, r0, #1
 8007110:	d103      	bne.n	800711a <sbrk_aligned+0x26>
 8007112:	f04f 34ff 	mov.w	r4, #4294967295
 8007116:	4620      	mov	r0, r4
 8007118:	bd70      	pop	{r4, r5, r6, pc}
 800711a:	1cc4      	adds	r4, r0, #3
 800711c:	f024 0403 	bic.w	r4, r4, #3
 8007120:	42a0      	cmp	r0, r4
 8007122:	d0f8      	beq.n	8007116 <sbrk_aligned+0x22>
 8007124:	1a21      	subs	r1, r4, r0
 8007126:	4628      	mov	r0, r5
 8007128:	f001 fe0a 	bl	8008d40 <_sbrk_r>
 800712c:	3001      	adds	r0, #1
 800712e:	d1f2      	bne.n	8007116 <sbrk_aligned+0x22>
 8007130:	e7ef      	b.n	8007112 <sbrk_aligned+0x1e>
 8007132:	bf00      	nop
 8007134:	200004dc 	.word	0x200004dc

08007138 <_malloc_r>:
 8007138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800713c:	1ccd      	adds	r5, r1, #3
 800713e:	f025 0503 	bic.w	r5, r5, #3
 8007142:	3508      	adds	r5, #8
 8007144:	2d0c      	cmp	r5, #12
 8007146:	bf38      	it	cc
 8007148:	250c      	movcc	r5, #12
 800714a:	2d00      	cmp	r5, #0
 800714c:	4606      	mov	r6, r0
 800714e:	db01      	blt.n	8007154 <_malloc_r+0x1c>
 8007150:	42a9      	cmp	r1, r5
 8007152:	d904      	bls.n	800715e <_malloc_r+0x26>
 8007154:	230c      	movs	r3, #12
 8007156:	6033      	str	r3, [r6, #0]
 8007158:	2000      	movs	r0, #0
 800715a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800715e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007234 <_malloc_r+0xfc>
 8007162:	f000 f869 	bl	8007238 <__malloc_lock>
 8007166:	f8d8 3000 	ldr.w	r3, [r8]
 800716a:	461c      	mov	r4, r3
 800716c:	bb44      	cbnz	r4, 80071c0 <_malloc_r+0x88>
 800716e:	4629      	mov	r1, r5
 8007170:	4630      	mov	r0, r6
 8007172:	f7ff ffbf 	bl	80070f4 <sbrk_aligned>
 8007176:	1c43      	adds	r3, r0, #1
 8007178:	4604      	mov	r4, r0
 800717a:	d158      	bne.n	800722e <_malloc_r+0xf6>
 800717c:	f8d8 4000 	ldr.w	r4, [r8]
 8007180:	4627      	mov	r7, r4
 8007182:	2f00      	cmp	r7, #0
 8007184:	d143      	bne.n	800720e <_malloc_r+0xd6>
 8007186:	2c00      	cmp	r4, #0
 8007188:	d04b      	beq.n	8007222 <_malloc_r+0xea>
 800718a:	6823      	ldr	r3, [r4, #0]
 800718c:	4639      	mov	r1, r7
 800718e:	4630      	mov	r0, r6
 8007190:	eb04 0903 	add.w	r9, r4, r3
 8007194:	f001 fdd4 	bl	8008d40 <_sbrk_r>
 8007198:	4581      	cmp	r9, r0
 800719a:	d142      	bne.n	8007222 <_malloc_r+0xea>
 800719c:	6821      	ldr	r1, [r4, #0]
 800719e:	1a6d      	subs	r5, r5, r1
 80071a0:	4629      	mov	r1, r5
 80071a2:	4630      	mov	r0, r6
 80071a4:	f7ff ffa6 	bl	80070f4 <sbrk_aligned>
 80071a8:	3001      	adds	r0, #1
 80071aa:	d03a      	beq.n	8007222 <_malloc_r+0xea>
 80071ac:	6823      	ldr	r3, [r4, #0]
 80071ae:	442b      	add	r3, r5
 80071b0:	6023      	str	r3, [r4, #0]
 80071b2:	f8d8 3000 	ldr.w	r3, [r8]
 80071b6:	685a      	ldr	r2, [r3, #4]
 80071b8:	bb62      	cbnz	r2, 8007214 <_malloc_r+0xdc>
 80071ba:	f8c8 7000 	str.w	r7, [r8]
 80071be:	e00f      	b.n	80071e0 <_malloc_r+0xa8>
 80071c0:	6822      	ldr	r2, [r4, #0]
 80071c2:	1b52      	subs	r2, r2, r5
 80071c4:	d420      	bmi.n	8007208 <_malloc_r+0xd0>
 80071c6:	2a0b      	cmp	r2, #11
 80071c8:	d917      	bls.n	80071fa <_malloc_r+0xc2>
 80071ca:	1961      	adds	r1, r4, r5
 80071cc:	42a3      	cmp	r3, r4
 80071ce:	6025      	str	r5, [r4, #0]
 80071d0:	bf18      	it	ne
 80071d2:	6059      	strne	r1, [r3, #4]
 80071d4:	6863      	ldr	r3, [r4, #4]
 80071d6:	bf08      	it	eq
 80071d8:	f8c8 1000 	streq.w	r1, [r8]
 80071dc:	5162      	str	r2, [r4, r5]
 80071de:	604b      	str	r3, [r1, #4]
 80071e0:	4630      	mov	r0, r6
 80071e2:	f000 f82f 	bl	8007244 <__malloc_unlock>
 80071e6:	f104 000b 	add.w	r0, r4, #11
 80071ea:	1d23      	adds	r3, r4, #4
 80071ec:	f020 0007 	bic.w	r0, r0, #7
 80071f0:	1ac2      	subs	r2, r0, r3
 80071f2:	bf1c      	itt	ne
 80071f4:	1a1b      	subne	r3, r3, r0
 80071f6:	50a3      	strne	r3, [r4, r2]
 80071f8:	e7af      	b.n	800715a <_malloc_r+0x22>
 80071fa:	6862      	ldr	r2, [r4, #4]
 80071fc:	42a3      	cmp	r3, r4
 80071fe:	bf0c      	ite	eq
 8007200:	f8c8 2000 	streq.w	r2, [r8]
 8007204:	605a      	strne	r2, [r3, #4]
 8007206:	e7eb      	b.n	80071e0 <_malloc_r+0xa8>
 8007208:	4623      	mov	r3, r4
 800720a:	6864      	ldr	r4, [r4, #4]
 800720c:	e7ae      	b.n	800716c <_malloc_r+0x34>
 800720e:	463c      	mov	r4, r7
 8007210:	687f      	ldr	r7, [r7, #4]
 8007212:	e7b6      	b.n	8007182 <_malloc_r+0x4a>
 8007214:	461a      	mov	r2, r3
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	42a3      	cmp	r3, r4
 800721a:	d1fb      	bne.n	8007214 <_malloc_r+0xdc>
 800721c:	2300      	movs	r3, #0
 800721e:	6053      	str	r3, [r2, #4]
 8007220:	e7de      	b.n	80071e0 <_malloc_r+0xa8>
 8007222:	230c      	movs	r3, #12
 8007224:	6033      	str	r3, [r6, #0]
 8007226:	4630      	mov	r0, r6
 8007228:	f000 f80c 	bl	8007244 <__malloc_unlock>
 800722c:	e794      	b.n	8007158 <_malloc_r+0x20>
 800722e:	6005      	str	r5, [r0, #0]
 8007230:	e7d6      	b.n	80071e0 <_malloc_r+0xa8>
 8007232:	bf00      	nop
 8007234:	200004e0 	.word	0x200004e0

08007238 <__malloc_lock>:
 8007238:	4801      	ldr	r0, [pc, #4]	@ (8007240 <__malloc_lock+0x8>)
 800723a:	f7ff b894 	b.w	8006366 <__retarget_lock_acquire_recursive>
 800723e:	bf00      	nop
 8007240:	200004d8 	.word	0x200004d8

08007244 <__malloc_unlock>:
 8007244:	4801      	ldr	r0, [pc, #4]	@ (800724c <__malloc_unlock+0x8>)
 8007246:	f7ff b88f 	b.w	8006368 <__retarget_lock_release_recursive>
 800724a:	bf00      	nop
 800724c:	200004d8 	.word	0x200004d8

08007250 <_Balloc>:
 8007250:	b570      	push	{r4, r5, r6, lr}
 8007252:	69c6      	ldr	r6, [r0, #28]
 8007254:	4604      	mov	r4, r0
 8007256:	460d      	mov	r5, r1
 8007258:	b976      	cbnz	r6, 8007278 <_Balloc+0x28>
 800725a:	2010      	movs	r0, #16
 800725c:	f7ff ff42 	bl	80070e4 <malloc>
 8007260:	4602      	mov	r2, r0
 8007262:	61e0      	str	r0, [r4, #28]
 8007264:	b920      	cbnz	r0, 8007270 <_Balloc+0x20>
 8007266:	4b18      	ldr	r3, [pc, #96]	@ (80072c8 <_Balloc+0x78>)
 8007268:	4818      	ldr	r0, [pc, #96]	@ (80072cc <_Balloc+0x7c>)
 800726a:	216b      	movs	r1, #107	@ 0x6b
 800726c:	f7ff f884 	bl	8006378 <__assert_func>
 8007270:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007274:	6006      	str	r6, [r0, #0]
 8007276:	60c6      	str	r6, [r0, #12]
 8007278:	69e6      	ldr	r6, [r4, #28]
 800727a:	68f3      	ldr	r3, [r6, #12]
 800727c:	b183      	cbz	r3, 80072a0 <_Balloc+0x50>
 800727e:	69e3      	ldr	r3, [r4, #28]
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007286:	b9b8      	cbnz	r0, 80072b8 <_Balloc+0x68>
 8007288:	2101      	movs	r1, #1
 800728a:	fa01 f605 	lsl.w	r6, r1, r5
 800728e:	1d72      	adds	r2, r6, #5
 8007290:	0092      	lsls	r2, r2, #2
 8007292:	4620      	mov	r0, r4
 8007294:	f001 fd83 	bl	8008d9e <_calloc_r>
 8007298:	b160      	cbz	r0, 80072b4 <_Balloc+0x64>
 800729a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800729e:	e00e      	b.n	80072be <_Balloc+0x6e>
 80072a0:	2221      	movs	r2, #33	@ 0x21
 80072a2:	2104      	movs	r1, #4
 80072a4:	4620      	mov	r0, r4
 80072a6:	f001 fd7a 	bl	8008d9e <_calloc_r>
 80072aa:	69e3      	ldr	r3, [r4, #28]
 80072ac:	60f0      	str	r0, [r6, #12]
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d1e4      	bne.n	800727e <_Balloc+0x2e>
 80072b4:	2000      	movs	r0, #0
 80072b6:	bd70      	pop	{r4, r5, r6, pc}
 80072b8:	6802      	ldr	r2, [r0, #0]
 80072ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80072be:	2300      	movs	r3, #0
 80072c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80072c4:	e7f7      	b.n	80072b6 <_Balloc+0x66>
 80072c6:	bf00      	nop
 80072c8:	08009a8c 	.word	0x08009a8c
 80072cc:	08009be6 	.word	0x08009be6

080072d0 <_Bfree>:
 80072d0:	b570      	push	{r4, r5, r6, lr}
 80072d2:	69c6      	ldr	r6, [r0, #28]
 80072d4:	4605      	mov	r5, r0
 80072d6:	460c      	mov	r4, r1
 80072d8:	b976      	cbnz	r6, 80072f8 <_Bfree+0x28>
 80072da:	2010      	movs	r0, #16
 80072dc:	f7ff ff02 	bl	80070e4 <malloc>
 80072e0:	4602      	mov	r2, r0
 80072e2:	61e8      	str	r0, [r5, #28]
 80072e4:	b920      	cbnz	r0, 80072f0 <_Bfree+0x20>
 80072e6:	4b09      	ldr	r3, [pc, #36]	@ (800730c <_Bfree+0x3c>)
 80072e8:	4809      	ldr	r0, [pc, #36]	@ (8007310 <_Bfree+0x40>)
 80072ea:	218f      	movs	r1, #143	@ 0x8f
 80072ec:	f7ff f844 	bl	8006378 <__assert_func>
 80072f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072f4:	6006      	str	r6, [r0, #0]
 80072f6:	60c6      	str	r6, [r0, #12]
 80072f8:	b13c      	cbz	r4, 800730a <_Bfree+0x3a>
 80072fa:	69eb      	ldr	r3, [r5, #28]
 80072fc:	6862      	ldr	r2, [r4, #4]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007304:	6021      	str	r1, [r4, #0]
 8007306:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800730a:	bd70      	pop	{r4, r5, r6, pc}
 800730c:	08009a8c 	.word	0x08009a8c
 8007310:	08009be6 	.word	0x08009be6

08007314 <__multadd>:
 8007314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007318:	690d      	ldr	r5, [r1, #16]
 800731a:	4607      	mov	r7, r0
 800731c:	460c      	mov	r4, r1
 800731e:	461e      	mov	r6, r3
 8007320:	f101 0c14 	add.w	ip, r1, #20
 8007324:	2000      	movs	r0, #0
 8007326:	f8dc 3000 	ldr.w	r3, [ip]
 800732a:	b299      	uxth	r1, r3
 800732c:	fb02 6101 	mla	r1, r2, r1, r6
 8007330:	0c1e      	lsrs	r6, r3, #16
 8007332:	0c0b      	lsrs	r3, r1, #16
 8007334:	fb02 3306 	mla	r3, r2, r6, r3
 8007338:	b289      	uxth	r1, r1
 800733a:	3001      	adds	r0, #1
 800733c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007340:	4285      	cmp	r5, r0
 8007342:	f84c 1b04 	str.w	r1, [ip], #4
 8007346:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800734a:	dcec      	bgt.n	8007326 <__multadd+0x12>
 800734c:	b30e      	cbz	r6, 8007392 <__multadd+0x7e>
 800734e:	68a3      	ldr	r3, [r4, #8]
 8007350:	42ab      	cmp	r3, r5
 8007352:	dc19      	bgt.n	8007388 <__multadd+0x74>
 8007354:	6861      	ldr	r1, [r4, #4]
 8007356:	4638      	mov	r0, r7
 8007358:	3101      	adds	r1, #1
 800735a:	f7ff ff79 	bl	8007250 <_Balloc>
 800735e:	4680      	mov	r8, r0
 8007360:	b928      	cbnz	r0, 800736e <__multadd+0x5a>
 8007362:	4602      	mov	r2, r0
 8007364:	4b0c      	ldr	r3, [pc, #48]	@ (8007398 <__multadd+0x84>)
 8007366:	480d      	ldr	r0, [pc, #52]	@ (800739c <__multadd+0x88>)
 8007368:	21ba      	movs	r1, #186	@ 0xba
 800736a:	f7ff f805 	bl	8006378 <__assert_func>
 800736e:	6922      	ldr	r2, [r4, #16]
 8007370:	3202      	adds	r2, #2
 8007372:	f104 010c 	add.w	r1, r4, #12
 8007376:	0092      	lsls	r2, r2, #2
 8007378:	300c      	adds	r0, #12
 800737a:	f001 fcf1 	bl	8008d60 <memcpy>
 800737e:	4621      	mov	r1, r4
 8007380:	4638      	mov	r0, r7
 8007382:	f7ff ffa5 	bl	80072d0 <_Bfree>
 8007386:	4644      	mov	r4, r8
 8007388:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800738c:	3501      	adds	r5, #1
 800738e:	615e      	str	r6, [r3, #20]
 8007390:	6125      	str	r5, [r4, #16]
 8007392:	4620      	mov	r0, r4
 8007394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007398:	08009bd5 	.word	0x08009bd5
 800739c:	08009be6 	.word	0x08009be6

080073a0 <__s2b>:
 80073a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073a4:	460c      	mov	r4, r1
 80073a6:	4615      	mov	r5, r2
 80073a8:	461f      	mov	r7, r3
 80073aa:	2209      	movs	r2, #9
 80073ac:	3308      	adds	r3, #8
 80073ae:	4606      	mov	r6, r0
 80073b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80073b4:	2100      	movs	r1, #0
 80073b6:	2201      	movs	r2, #1
 80073b8:	429a      	cmp	r2, r3
 80073ba:	db09      	blt.n	80073d0 <__s2b+0x30>
 80073bc:	4630      	mov	r0, r6
 80073be:	f7ff ff47 	bl	8007250 <_Balloc>
 80073c2:	b940      	cbnz	r0, 80073d6 <__s2b+0x36>
 80073c4:	4602      	mov	r2, r0
 80073c6:	4b19      	ldr	r3, [pc, #100]	@ (800742c <__s2b+0x8c>)
 80073c8:	4819      	ldr	r0, [pc, #100]	@ (8007430 <__s2b+0x90>)
 80073ca:	21d3      	movs	r1, #211	@ 0xd3
 80073cc:	f7fe ffd4 	bl	8006378 <__assert_func>
 80073d0:	0052      	lsls	r2, r2, #1
 80073d2:	3101      	adds	r1, #1
 80073d4:	e7f0      	b.n	80073b8 <__s2b+0x18>
 80073d6:	9b08      	ldr	r3, [sp, #32]
 80073d8:	6143      	str	r3, [r0, #20]
 80073da:	2d09      	cmp	r5, #9
 80073dc:	f04f 0301 	mov.w	r3, #1
 80073e0:	6103      	str	r3, [r0, #16]
 80073e2:	dd16      	ble.n	8007412 <__s2b+0x72>
 80073e4:	f104 0909 	add.w	r9, r4, #9
 80073e8:	46c8      	mov	r8, r9
 80073ea:	442c      	add	r4, r5
 80073ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 80073f0:	4601      	mov	r1, r0
 80073f2:	3b30      	subs	r3, #48	@ 0x30
 80073f4:	220a      	movs	r2, #10
 80073f6:	4630      	mov	r0, r6
 80073f8:	f7ff ff8c 	bl	8007314 <__multadd>
 80073fc:	45a0      	cmp	r8, r4
 80073fe:	d1f5      	bne.n	80073ec <__s2b+0x4c>
 8007400:	f1a5 0408 	sub.w	r4, r5, #8
 8007404:	444c      	add	r4, r9
 8007406:	1b2d      	subs	r5, r5, r4
 8007408:	1963      	adds	r3, r4, r5
 800740a:	42bb      	cmp	r3, r7
 800740c:	db04      	blt.n	8007418 <__s2b+0x78>
 800740e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007412:	340a      	adds	r4, #10
 8007414:	2509      	movs	r5, #9
 8007416:	e7f6      	b.n	8007406 <__s2b+0x66>
 8007418:	f814 3b01 	ldrb.w	r3, [r4], #1
 800741c:	4601      	mov	r1, r0
 800741e:	3b30      	subs	r3, #48	@ 0x30
 8007420:	220a      	movs	r2, #10
 8007422:	4630      	mov	r0, r6
 8007424:	f7ff ff76 	bl	8007314 <__multadd>
 8007428:	e7ee      	b.n	8007408 <__s2b+0x68>
 800742a:	bf00      	nop
 800742c:	08009bd5 	.word	0x08009bd5
 8007430:	08009be6 	.word	0x08009be6

08007434 <__hi0bits>:
 8007434:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007438:	4603      	mov	r3, r0
 800743a:	bf36      	itet	cc
 800743c:	0403      	lslcc	r3, r0, #16
 800743e:	2000      	movcs	r0, #0
 8007440:	2010      	movcc	r0, #16
 8007442:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007446:	bf3c      	itt	cc
 8007448:	021b      	lslcc	r3, r3, #8
 800744a:	3008      	addcc	r0, #8
 800744c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007450:	bf3c      	itt	cc
 8007452:	011b      	lslcc	r3, r3, #4
 8007454:	3004      	addcc	r0, #4
 8007456:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800745a:	bf3c      	itt	cc
 800745c:	009b      	lslcc	r3, r3, #2
 800745e:	3002      	addcc	r0, #2
 8007460:	2b00      	cmp	r3, #0
 8007462:	db05      	blt.n	8007470 <__hi0bits+0x3c>
 8007464:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007468:	f100 0001 	add.w	r0, r0, #1
 800746c:	bf08      	it	eq
 800746e:	2020      	moveq	r0, #32
 8007470:	4770      	bx	lr

08007472 <__lo0bits>:
 8007472:	6803      	ldr	r3, [r0, #0]
 8007474:	4602      	mov	r2, r0
 8007476:	f013 0007 	ands.w	r0, r3, #7
 800747a:	d00b      	beq.n	8007494 <__lo0bits+0x22>
 800747c:	07d9      	lsls	r1, r3, #31
 800747e:	d421      	bmi.n	80074c4 <__lo0bits+0x52>
 8007480:	0798      	lsls	r0, r3, #30
 8007482:	bf49      	itett	mi
 8007484:	085b      	lsrmi	r3, r3, #1
 8007486:	089b      	lsrpl	r3, r3, #2
 8007488:	2001      	movmi	r0, #1
 800748a:	6013      	strmi	r3, [r2, #0]
 800748c:	bf5c      	itt	pl
 800748e:	6013      	strpl	r3, [r2, #0]
 8007490:	2002      	movpl	r0, #2
 8007492:	4770      	bx	lr
 8007494:	b299      	uxth	r1, r3
 8007496:	b909      	cbnz	r1, 800749c <__lo0bits+0x2a>
 8007498:	0c1b      	lsrs	r3, r3, #16
 800749a:	2010      	movs	r0, #16
 800749c:	b2d9      	uxtb	r1, r3
 800749e:	b909      	cbnz	r1, 80074a4 <__lo0bits+0x32>
 80074a0:	3008      	adds	r0, #8
 80074a2:	0a1b      	lsrs	r3, r3, #8
 80074a4:	0719      	lsls	r1, r3, #28
 80074a6:	bf04      	itt	eq
 80074a8:	091b      	lsreq	r3, r3, #4
 80074aa:	3004      	addeq	r0, #4
 80074ac:	0799      	lsls	r1, r3, #30
 80074ae:	bf04      	itt	eq
 80074b0:	089b      	lsreq	r3, r3, #2
 80074b2:	3002      	addeq	r0, #2
 80074b4:	07d9      	lsls	r1, r3, #31
 80074b6:	d403      	bmi.n	80074c0 <__lo0bits+0x4e>
 80074b8:	085b      	lsrs	r3, r3, #1
 80074ba:	f100 0001 	add.w	r0, r0, #1
 80074be:	d003      	beq.n	80074c8 <__lo0bits+0x56>
 80074c0:	6013      	str	r3, [r2, #0]
 80074c2:	4770      	bx	lr
 80074c4:	2000      	movs	r0, #0
 80074c6:	4770      	bx	lr
 80074c8:	2020      	movs	r0, #32
 80074ca:	4770      	bx	lr

080074cc <__i2b>:
 80074cc:	b510      	push	{r4, lr}
 80074ce:	460c      	mov	r4, r1
 80074d0:	2101      	movs	r1, #1
 80074d2:	f7ff febd 	bl	8007250 <_Balloc>
 80074d6:	4602      	mov	r2, r0
 80074d8:	b928      	cbnz	r0, 80074e6 <__i2b+0x1a>
 80074da:	4b05      	ldr	r3, [pc, #20]	@ (80074f0 <__i2b+0x24>)
 80074dc:	4805      	ldr	r0, [pc, #20]	@ (80074f4 <__i2b+0x28>)
 80074de:	f240 1145 	movw	r1, #325	@ 0x145
 80074e2:	f7fe ff49 	bl	8006378 <__assert_func>
 80074e6:	2301      	movs	r3, #1
 80074e8:	6144      	str	r4, [r0, #20]
 80074ea:	6103      	str	r3, [r0, #16]
 80074ec:	bd10      	pop	{r4, pc}
 80074ee:	bf00      	nop
 80074f0:	08009bd5 	.word	0x08009bd5
 80074f4:	08009be6 	.word	0x08009be6

080074f8 <__multiply>:
 80074f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074fc:	4614      	mov	r4, r2
 80074fe:	690a      	ldr	r2, [r1, #16]
 8007500:	6923      	ldr	r3, [r4, #16]
 8007502:	429a      	cmp	r2, r3
 8007504:	bfa8      	it	ge
 8007506:	4623      	movge	r3, r4
 8007508:	460f      	mov	r7, r1
 800750a:	bfa4      	itt	ge
 800750c:	460c      	movge	r4, r1
 800750e:	461f      	movge	r7, r3
 8007510:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007514:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007518:	68a3      	ldr	r3, [r4, #8]
 800751a:	6861      	ldr	r1, [r4, #4]
 800751c:	eb0a 0609 	add.w	r6, sl, r9
 8007520:	42b3      	cmp	r3, r6
 8007522:	b085      	sub	sp, #20
 8007524:	bfb8      	it	lt
 8007526:	3101      	addlt	r1, #1
 8007528:	f7ff fe92 	bl	8007250 <_Balloc>
 800752c:	b930      	cbnz	r0, 800753c <__multiply+0x44>
 800752e:	4602      	mov	r2, r0
 8007530:	4b44      	ldr	r3, [pc, #272]	@ (8007644 <__multiply+0x14c>)
 8007532:	4845      	ldr	r0, [pc, #276]	@ (8007648 <__multiply+0x150>)
 8007534:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007538:	f7fe ff1e 	bl	8006378 <__assert_func>
 800753c:	f100 0514 	add.w	r5, r0, #20
 8007540:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007544:	462b      	mov	r3, r5
 8007546:	2200      	movs	r2, #0
 8007548:	4543      	cmp	r3, r8
 800754a:	d321      	bcc.n	8007590 <__multiply+0x98>
 800754c:	f107 0114 	add.w	r1, r7, #20
 8007550:	f104 0214 	add.w	r2, r4, #20
 8007554:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007558:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800755c:	9302      	str	r3, [sp, #8]
 800755e:	1b13      	subs	r3, r2, r4
 8007560:	3b15      	subs	r3, #21
 8007562:	f023 0303 	bic.w	r3, r3, #3
 8007566:	3304      	adds	r3, #4
 8007568:	f104 0715 	add.w	r7, r4, #21
 800756c:	42ba      	cmp	r2, r7
 800756e:	bf38      	it	cc
 8007570:	2304      	movcc	r3, #4
 8007572:	9301      	str	r3, [sp, #4]
 8007574:	9b02      	ldr	r3, [sp, #8]
 8007576:	9103      	str	r1, [sp, #12]
 8007578:	428b      	cmp	r3, r1
 800757a:	d80c      	bhi.n	8007596 <__multiply+0x9e>
 800757c:	2e00      	cmp	r6, #0
 800757e:	dd03      	ble.n	8007588 <__multiply+0x90>
 8007580:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007584:	2b00      	cmp	r3, #0
 8007586:	d05b      	beq.n	8007640 <__multiply+0x148>
 8007588:	6106      	str	r6, [r0, #16]
 800758a:	b005      	add	sp, #20
 800758c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007590:	f843 2b04 	str.w	r2, [r3], #4
 8007594:	e7d8      	b.n	8007548 <__multiply+0x50>
 8007596:	f8b1 a000 	ldrh.w	sl, [r1]
 800759a:	f1ba 0f00 	cmp.w	sl, #0
 800759e:	d024      	beq.n	80075ea <__multiply+0xf2>
 80075a0:	f104 0e14 	add.w	lr, r4, #20
 80075a4:	46a9      	mov	r9, r5
 80075a6:	f04f 0c00 	mov.w	ip, #0
 80075aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80075ae:	f8d9 3000 	ldr.w	r3, [r9]
 80075b2:	fa1f fb87 	uxth.w	fp, r7
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	fb0a 330b 	mla	r3, sl, fp, r3
 80075bc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80075c0:	f8d9 7000 	ldr.w	r7, [r9]
 80075c4:	4463      	add	r3, ip
 80075c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80075ca:	fb0a c70b 	mla	r7, sl, fp, ip
 80075ce:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80075d8:	4572      	cmp	r2, lr
 80075da:	f849 3b04 	str.w	r3, [r9], #4
 80075de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80075e2:	d8e2      	bhi.n	80075aa <__multiply+0xb2>
 80075e4:	9b01      	ldr	r3, [sp, #4]
 80075e6:	f845 c003 	str.w	ip, [r5, r3]
 80075ea:	9b03      	ldr	r3, [sp, #12]
 80075ec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80075f0:	3104      	adds	r1, #4
 80075f2:	f1b9 0f00 	cmp.w	r9, #0
 80075f6:	d021      	beq.n	800763c <__multiply+0x144>
 80075f8:	682b      	ldr	r3, [r5, #0]
 80075fa:	f104 0c14 	add.w	ip, r4, #20
 80075fe:	46ae      	mov	lr, r5
 8007600:	f04f 0a00 	mov.w	sl, #0
 8007604:	f8bc b000 	ldrh.w	fp, [ip]
 8007608:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800760c:	fb09 770b 	mla	r7, r9, fp, r7
 8007610:	4457      	add	r7, sl
 8007612:	b29b      	uxth	r3, r3
 8007614:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007618:	f84e 3b04 	str.w	r3, [lr], #4
 800761c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007620:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007624:	f8be 3000 	ldrh.w	r3, [lr]
 8007628:	fb09 330a 	mla	r3, r9, sl, r3
 800762c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007630:	4562      	cmp	r2, ip
 8007632:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007636:	d8e5      	bhi.n	8007604 <__multiply+0x10c>
 8007638:	9f01      	ldr	r7, [sp, #4]
 800763a:	51eb      	str	r3, [r5, r7]
 800763c:	3504      	adds	r5, #4
 800763e:	e799      	b.n	8007574 <__multiply+0x7c>
 8007640:	3e01      	subs	r6, #1
 8007642:	e79b      	b.n	800757c <__multiply+0x84>
 8007644:	08009bd5 	.word	0x08009bd5
 8007648:	08009be6 	.word	0x08009be6

0800764c <__pow5mult>:
 800764c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007650:	4615      	mov	r5, r2
 8007652:	f012 0203 	ands.w	r2, r2, #3
 8007656:	4607      	mov	r7, r0
 8007658:	460e      	mov	r6, r1
 800765a:	d007      	beq.n	800766c <__pow5mult+0x20>
 800765c:	4c25      	ldr	r4, [pc, #148]	@ (80076f4 <__pow5mult+0xa8>)
 800765e:	3a01      	subs	r2, #1
 8007660:	2300      	movs	r3, #0
 8007662:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007666:	f7ff fe55 	bl	8007314 <__multadd>
 800766a:	4606      	mov	r6, r0
 800766c:	10ad      	asrs	r5, r5, #2
 800766e:	d03d      	beq.n	80076ec <__pow5mult+0xa0>
 8007670:	69fc      	ldr	r4, [r7, #28]
 8007672:	b97c      	cbnz	r4, 8007694 <__pow5mult+0x48>
 8007674:	2010      	movs	r0, #16
 8007676:	f7ff fd35 	bl	80070e4 <malloc>
 800767a:	4602      	mov	r2, r0
 800767c:	61f8      	str	r0, [r7, #28]
 800767e:	b928      	cbnz	r0, 800768c <__pow5mult+0x40>
 8007680:	4b1d      	ldr	r3, [pc, #116]	@ (80076f8 <__pow5mult+0xac>)
 8007682:	481e      	ldr	r0, [pc, #120]	@ (80076fc <__pow5mult+0xb0>)
 8007684:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007688:	f7fe fe76 	bl	8006378 <__assert_func>
 800768c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007690:	6004      	str	r4, [r0, #0]
 8007692:	60c4      	str	r4, [r0, #12]
 8007694:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007698:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800769c:	b94c      	cbnz	r4, 80076b2 <__pow5mult+0x66>
 800769e:	f240 2171 	movw	r1, #625	@ 0x271
 80076a2:	4638      	mov	r0, r7
 80076a4:	f7ff ff12 	bl	80074cc <__i2b>
 80076a8:	2300      	movs	r3, #0
 80076aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80076ae:	4604      	mov	r4, r0
 80076b0:	6003      	str	r3, [r0, #0]
 80076b2:	f04f 0900 	mov.w	r9, #0
 80076b6:	07eb      	lsls	r3, r5, #31
 80076b8:	d50a      	bpl.n	80076d0 <__pow5mult+0x84>
 80076ba:	4631      	mov	r1, r6
 80076bc:	4622      	mov	r2, r4
 80076be:	4638      	mov	r0, r7
 80076c0:	f7ff ff1a 	bl	80074f8 <__multiply>
 80076c4:	4631      	mov	r1, r6
 80076c6:	4680      	mov	r8, r0
 80076c8:	4638      	mov	r0, r7
 80076ca:	f7ff fe01 	bl	80072d0 <_Bfree>
 80076ce:	4646      	mov	r6, r8
 80076d0:	106d      	asrs	r5, r5, #1
 80076d2:	d00b      	beq.n	80076ec <__pow5mult+0xa0>
 80076d4:	6820      	ldr	r0, [r4, #0]
 80076d6:	b938      	cbnz	r0, 80076e8 <__pow5mult+0x9c>
 80076d8:	4622      	mov	r2, r4
 80076da:	4621      	mov	r1, r4
 80076dc:	4638      	mov	r0, r7
 80076de:	f7ff ff0b 	bl	80074f8 <__multiply>
 80076e2:	6020      	str	r0, [r4, #0]
 80076e4:	f8c0 9000 	str.w	r9, [r0]
 80076e8:	4604      	mov	r4, r0
 80076ea:	e7e4      	b.n	80076b6 <__pow5mult+0x6a>
 80076ec:	4630      	mov	r0, r6
 80076ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076f2:	bf00      	nop
 80076f4:	08009c40 	.word	0x08009c40
 80076f8:	08009a8c 	.word	0x08009a8c
 80076fc:	08009be6 	.word	0x08009be6

08007700 <__lshift>:
 8007700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007704:	460c      	mov	r4, r1
 8007706:	6849      	ldr	r1, [r1, #4]
 8007708:	6923      	ldr	r3, [r4, #16]
 800770a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800770e:	68a3      	ldr	r3, [r4, #8]
 8007710:	4607      	mov	r7, r0
 8007712:	4691      	mov	r9, r2
 8007714:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007718:	f108 0601 	add.w	r6, r8, #1
 800771c:	42b3      	cmp	r3, r6
 800771e:	db0b      	blt.n	8007738 <__lshift+0x38>
 8007720:	4638      	mov	r0, r7
 8007722:	f7ff fd95 	bl	8007250 <_Balloc>
 8007726:	4605      	mov	r5, r0
 8007728:	b948      	cbnz	r0, 800773e <__lshift+0x3e>
 800772a:	4602      	mov	r2, r0
 800772c:	4b28      	ldr	r3, [pc, #160]	@ (80077d0 <__lshift+0xd0>)
 800772e:	4829      	ldr	r0, [pc, #164]	@ (80077d4 <__lshift+0xd4>)
 8007730:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007734:	f7fe fe20 	bl	8006378 <__assert_func>
 8007738:	3101      	adds	r1, #1
 800773a:	005b      	lsls	r3, r3, #1
 800773c:	e7ee      	b.n	800771c <__lshift+0x1c>
 800773e:	2300      	movs	r3, #0
 8007740:	f100 0114 	add.w	r1, r0, #20
 8007744:	f100 0210 	add.w	r2, r0, #16
 8007748:	4618      	mov	r0, r3
 800774a:	4553      	cmp	r3, sl
 800774c:	db33      	blt.n	80077b6 <__lshift+0xb6>
 800774e:	6920      	ldr	r0, [r4, #16]
 8007750:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007754:	f104 0314 	add.w	r3, r4, #20
 8007758:	f019 091f 	ands.w	r9, r9, #31
 800775c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007760:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007764:	d02b      	beq.n	80077be <__lshift+0xbe>
 8007766:	f1c9 0e20 	rsb	lr, r9, #32
 800776a:	468a      	mov	sl, r1
 800776c:	2200      	movs	r2, #0
 800776e:	6818      	ldr	r0, [r3, #0]
 8007770:	fa00 f009 	lsl.w	r0, r0, r9
 8007774:	4310      	orrs	r0, r2
 8007776:	f84a 0b04 	str.w	r0, [sl], #4
 800777a:	f853 2b04 	ldr.w	r2, [r3], #4
 800777e:	459c      	cmp	ip, r3
 8007780:	fa22 f20e 	lsr.w	r2, r2, lr
 8007784:	d8f3      	bhi.n	800776e <__lshift+0x6e>
 8007786:	ebac 0304 	sub.w	r3, ip, r4
 800778a:	3b15      	subs	r3, #21
 800778c:	f023 0303 	bic.w	r3, r3, #3
 8007790:	3304      	adds	r3, #4
 8007792:	f104 0015 	add.w	r0, r4, #21
 8007796:	4584      	cmp	ip, r0
 8007798:	bf38      	it	cc
 800779a:	2304      	movcc	r3, #4
 800779c:	50ca      	str	r2, [r1, r3]
 800779e:	b10a      	cbz	r2, 80077a4 <__lshift+0xa4>
 80077a0:	f108 0602 	add.w	r6, r8, #2
 80077a4:	3e01      	subs	r6, #1
 80077a6:	4638      	mov	r0, r7
 80077a8:	612e      	str	r6, [r5, #16]
 80077aa:	4621      	mov	r1, r4
 80077ac:	f7ff fd90 	bl	80072d0 <_Bfree>
 80077b0:	4628      	mov	r0, r5
 80077b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80077ba:	3301      	adds	r3, #1
 80077bc:	e7c5      	b.n	800774a <__lshift+0x4a>
 80077be:	3904      	subs	r1, #4
 80077c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80077c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80077c8:	459c      	cmp	ip, r3
 80077ca:	d8f9      	bhi.n	80077c0 <__lshift+0xc0>
 80077cc:	e7ea      	b.n	80077a4 <__lshift+0xa4>
 80077ce:	bf00      	nop
 80077d0:	08009bd5 	.word	0x08009bd5
 80077d4:	08009be6 	.word	0x08009be6

080077d8 <__mcmp>:
 80077d8:	690a      	ldr	r2, [r1, #16]
 80077da:	4603      	mov	r3, r0
 80077dc:	6900      	ldr	r0, [r0, #16]
 80077de:	1a80      	subs	r0, r0, r2
 80077e0:	b530      	push	{r4, r5, lr}
 80077e2:	d10e      	bne.n	8007802 <__mcmp+0x2a>
 80077e4:	3314      	adds	r3, #20
 80077e6:	3114      	adds	r1, #20
 80077e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80077ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80077f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80077f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80077f8:	4295      	cmp	r5, r2
 80077fa:	d003      	beq.n	8007804 <__mcmp+0x2c>
 80077fc:	d205      	bcs.n	800780a <__mcmp+0x32>
 80077fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007802:	bd30      	pop	{r4, r5, pc}
 8007804:	42a3      	cmp	r3, r4
 8007806:	d3f3      	bcc.n	80077f0 <__mcmp+0x18>
 8007808:	e7fb      	b.n	8007802 <__mcmp+0x2a>
 800780a:	2001      	movs	r0, #1
 800780c:	e7f9      	b.n	8007802 <__mcmp+0x2a>
	...

08007810 <__mdiff>:
 8007810:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007814:	4689      	mov	r9, r1
 8007816:	4606      	mov	r6, r0
 8007818:	4611      	mov	r1, r2
 800781a:	4648      	mov	r0, r9
 800781c:	4614      	mov	r4, r2
 800781e:	f7ff ffdb 	bl	80077d8 <__mcmp>
 8007822:	1e05      	subs	r5, r0, #0
 8007824:	d112      	bne.n	800784c <__mdiff+0x3c>
 8007826:	4629      	mov	r1, r5
 8007828:	4630      	mov	r0, r6
 800782a:	f7ff fd11 	bl	8007250 <_Balloc>
 800782e:	4602      	mov	r2, r0
 8007830:	b928      	cbnz	r0, 800783e <__mdiff+0x2e>
 8007832:	4b3f      	ldr	r3, [pc, #252]	@ (8007930 <__mdiff+0x120>)
 8007834:	f240 2137 	movw	r1, #567	@ 0x237
 8007838:	483e      	ldr	r0, [pc, #248]	@ (8007934 <__mdiff+0x124>)
 800783a:	f7fe fd9d 	bl	8006378 <__assert_func>
 800783e:	2301      	movs	r3, #1
 8007840:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007844:	4610      	mov	r0, r2
 8007846:	b003      	add	sp, #12
 8007848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800784c:	bfbc      	itt	lt
 800784e:	464b      	movlt	r3, r9
 8007850:	46a1      	movlt	r9, r4
 8007852:	4630      	mov	r0, r6
 8007854:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007858:	bfba      	itte	lt
 800785a:	461c      	movlt	r4, r3
 800785c:	2501      	movlt	r5, #1
 800785e:	2500      	movge	r5, #0
 8007860:	f7ff fcf6 	bl	8007250 <_Balloc>
 8007864:	4602      	mov	r2, r0
 8007866:	b918      	cbnz	r0, 8007870 <__mdiff+0x60>
 8007868:	4b31      	ldr	r3, [pc, #196]	@ (8007930 <__mdiff+0x120>)
 800786a:	f240 2145 	movw	r1, #581	@ 0x245
 800786e:	e7e3      	b.n	8007838 <__mdiff+0x28>
 8007870:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007874:	6926      	ldr	r6, [r4, #16]
 8007876:	60c5      	str	r5, [r0, #12]
 8007878:	f109 0310 	add.w	r3, r9, #16
 800787c:	f109 0514 	add.w	r5, r9, #20
 8007880:	f104 0e14 	add.w	lr, r4, #20
 8007884:	f100 0b14 	add.w	fp, r0, #20
 8007888:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800788c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007890:	9301      	str	r3, [sp, #4]
 8007892:	46d9      	mov	r9, fp
 8007894:	f04f 0c00 	mov.w	ip, #0
 8007898:	9b01      	ldr	r3, [sp, #4]
 800789a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800789e:	f853 af04 	ldr.w	sl, [r3, #4]!
 80078a2:	9301      	str	r3, [sp, #4]
 80078a4:	fa1f f38a 	uxth.w	r3, sl
 80078a8:	4619      	mov	r1, r3
 80078aa:	b283      	uxth	r3, r0
 80078ac:	1acb      	subs	r3, r1, r3
 80078ae:	0c00      	lsrs	r0, r0, #16
 80078b0:	4463      	add	r3, ip
 80078b2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80078b6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80078c0:	4576      	cmp	r6, lr
 80078c2:	f849 3b04 	str.w	r3, [r9], #4
 80078c6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80078ca:	d8e5      	bhi.n	8007898 <__mdiff+0x88>
 80078cc:	1b33      	subs	r3, r6, r4
 80078ce:	3b15      	subs	r3, #21
 80078d0:	f023 0303 	bic.w	r3, r3, #3
 80078d4:	3415      	adds	r4, #21
 80078d6:	3304      	adds	r3, #4
 80078d8:	42a6      	cmp	r6, r4
 80078da:	bf38      	it	cc
 80078dc:	2304      	movcc	r3, #4
 80078de:	441d      	add	r5, r3
 80078e0:	445b      	add	r3, fp
 80078e2:	461e      	mov	r6, r3
 80078e4:	462c      	mov	r4, r5
 80078e6:	4544      	cmp	r4, r8
 80078e8:	d30e      	bcc.n	8007908 <__mdiff+0xf8>
 80078ea:	f108 0103 	add.w	r1, r8, #3
 80078ee:	1b49      	subs	r1, r1, r5
 80078f0:	f021 0103 	bic.w	r1, r1, #3
 80078f4:	3d03      	subs	r5, #3
 80078f6:	45a8      	cmp	r8, r5
 80078f8:	bf38      	it	cc
 80078fa:	2100      	movcc	r1, #0
 80078fc:	440b      	add	r3, r1
 80078fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007902:	b191      	cbz	r1, 800792a <__mdiff+0x11a>
 8007904:	6117      	str	r7, [r2, #16]
 8007906:	e79d      	b.n	8007844 <__mdiff+0x34>
 8007908:	f854 1b04 	ldr.w	r1, [r4], #4
 800790c:	46e6      	mov	lr, ip
 800790e:	0c08      	lsrs	r0, r1, #16
 8007910:	fa1c fc81 	uxtah	ip, ip, r1
 8007914:	4471      	add	r1, lr
 8007916:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800791a:	b289      	uxth	r1, r1
 800791c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007920:	f846 1b04 	str.w	r1, [r6], #4
 8007924:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007928:	e7dd      	b.n	80078e6 <__mdiff+0xd6>
 800792a:	3f01      	subs	r7, #1
 800792c:	e7e7      	b.n	80078fe <__mdiff+0xee>
 800792e:	bf00      	nop
 8007930:	08009bd5 	.word	0x08009bd5
 8007934:	08009be6 	.word	0x08009be6

08007938 <__ulp>:
 8007938:	b082      	sub	sp, #8
 800793a:	ed8d 0b00 	vstr	d0, [sp]
 800793e:	9a01      	ldr	r2, [sp, #4]
 8007940:	4b0f      	ldr	r3, [pc, #60]	@ (8007980 <__ulp+0x48>)
 8007942:	4013      	ands	r3, r2
 8007944:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007948:	2b00      	cmp	r3, #0
 800794a:	dc08      	bgt.n	800795e <__ulp+0x26>
 800794c:	425b      	negs	r3, r3
 800794e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007952:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007956:	da04      	bge.n	8007962 <__ulp+0x2a>
 8007958:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800795c:	4113      	asrs	r3, r2
 800795e:	2200      	movs	r2, #0
 8007960:	e008      	b.n	8007974 <__ulp+0x3c>
 8007962:	f1a2 0314 	sub.w	r3, r2, #20
 8007966:	2b1e      	cmp	r3, #30
 8007968:	bfda      	itte	le
 800796a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800796e:	40da      	lsrle	r2, r3
 8007970:	2201      	movgt	r2, #1
 8007972:	2300      	movs	r3, #0
 8007974:	4619      	mov	r1, r3
 8007976:	4610      	mov	r0, r2
 8007978:	ec41 0b10 	vmov	d0, r0, r1
 800797c:	b002      	add	sp, #8
 800797e:	4770      	bx	lr
 8007980:	7ff00000 	.word	0x7ff00000

08007984 <__b2d>:
 8007984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007988:	6906      	ldr	r6, [r0, #16]
 800798a:	f100 0814 	add.w	r8, r0, #20
 800798e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007992:	1f37      	subs	r7, r6, #4
 8007994:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007998:	4610      	mov	r0, r2
 800799a:	f7ff fd4b 	bl	8007434 <__hi0bits>
 800799e:	f1c0 0320 	rsb	r3, r0, #32
 80079a2:	280a      	cmp	r0, #10
 80079a4:	600b      	str	r3, [r1, #0]
 80079a6:	491b      	ldr	r1, [pc, #108]	@ (8007a14 <__b2d+0x90>)
 80079a8:	dc15      	bgt.n	80079d6 <__b2d+0x52>
 80079aa:	f1c0 0c0b 	rsb	ip, r0, #11
 80079ae:	fa22 f30c 	lsr.w	r3, r2, ip
 80079b2:	45b8      	cmp	r8, r7
 80079b4:	ea43 0501 	orr.w	r5, r3, r1
 80079b8:	bf34      	ite	cc
 80079ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80079be:	2300      	movcs	r3, #0
 80079c0:	3015      	adds	r0, #21
 80079c2:	fa02 f000 	lsl.w	r0, r2, r0
 80079c6:	fa23 f30c 	lsr.w	r3, r3, ip
 80079ca:	4303      	orrs	r3, r0
 80079cc:	461c      	mov	r4, r3
 80079ce:	ec45 4b10 	vmov	d0, r4, r5
 80079d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079d6:	45b8      	cmp	r8, r7
 80079d8:	bf3a      	itte	cc
 80079da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80079de:	f1a6 0708 	subcc.w	r7, r6, #8
 80079e2:	2300      	movcs	r3, #0
 80079e4:	380b      	subs	r0, #11
 80079e6:	d012      	beq.n	8007a0e <__b2d+0x8a>
 80079e8:	f1c0 0120 	rsb	r1, r0, #32
 80079ec:	fa23 f401 	lsr.w	r4, r3, r1
 80079f0:	4082      	lsls	r2, r0
 80079f2:	4322      	orrs	r2, r4
 80079f4:	4547      	cmp	r7, r8
 80079f6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80079fa:	bf8c      	ite	hi
 80079fc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007a00:	2200      	movls	r2, #0
 8007a02:	4083      	lsls	r3, r0
 8007a04:	40ca      	lsrs	r2, r1
 8007a06:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	e7de      	b.n	80079cc <__b2d+0x48>
 8007a0e:	ea42 0501 	orr.w	r5, r2, r1
 8007a12:	e7db      	b.n	80079cc <__b2d+0x48>
 8007a14:	3ff00000 	.word	0x3ff00000

08007a18 <__d2b>:
 8007a18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007a1c:	460f      	mov	r7, r1
 8007a1e:	2101      	movs	r1, #1
 8007a20:	ec59 8b10 	vmov	r8, r9, d0
 8007a24:	4616      	mov	r6, r2
 8007a26:	f7ff fc13 	bl	8007250 <_Balloc>
 8007a2a:	4604      	mov	r4, r0
 8007a2c:	b930      	cbnz	r0, 8007a3c <__d2b+0x24>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	4b23      	ldr	r3, [pc, #140]	@ (8007ac0 <__d2b+0xa8>)
 8007a32:	4824      	ldr	r0, [pc, #144]	@ (8007ac4 <__d2b+0xac>)
 8007a34:	f240 310f 	movw	r1, #783	@ 0x30f
 8007a38:	f7fe fc9e 	bl	8006378 <__assert_func>
 8007a3c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007a40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a44:	b10d      	cbz	r5, 8007a4a <__d2b+0x32>
 8007a46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a4a:	9301      	str	r3, [sp, #4]
 8007a4c:	f1b8 0300 	subs.w	r3, r8, #0
 8007a50:	d023      	beq.n	8007a9a <__d2b+0x82>
 8007a52:	4668      	mov	r0, sp
 8007a54:	9300      	str	r3, [sp, #0]
 8007a56:	f7ff fd0c 	bl	8007472 <__lo0bits>
 8007a5a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007a5e:	b1d0      	cbz	r0, 8007a96 <__d2b+0x7e>
 8007a60:	f1c0 0320 	rsb	r3, r0, #32
 8007a64:	fa02 f303 	lsl.w	r3, r2, r3
 8007a68:	430b      	orrs	r3, r1
 8007a6a:	40c2      	lsrs	r2, r0
 8007a6c:	6163      	str	r3, [r4, #20]
 8007a6e:	9201      	str	r2, [sp, #4]
 8007a70:	9b01      	ldr	r3, [sp, #4]
 8007a72:	61a3      	str	r3, [r4, #24]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	bf0c      	ite	eq
 8007a78:	2201      	moveq	r2, #1
 8007a7a:	2202      	movne	r2, #2
 8007a7c:	6122      	str	r2, [r4, #16]
 8007a7e:	b1a5      	cbz	r5, 8007aaa <__d2b+0x92>
 8007a80:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007a84:	4405      	add	r5, r0
 8007a86:	603d      	str	r5, [r7, #0]
 8007a88:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007a8c:	6030      	str	r0, [r6, #0]
 8007a8e:	4620      	mov	r0, r4
 8007a90:	b003      	add	sp, #12
 8007a92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a96:	6161      	str	r1, [r4, #20]
 8007a98:	e7ea      	b.n	8007a70 <__d2b+0x58>
 8007a9a:	a801      	add	r0, sp, #4
 8007a9c:	f7ff fce9 	bl	8007472 <__lo0bits>
 8007aa0:	9b01      	ldr	r3, [sp, #4]
 8007aa2:	6163      	str	r3, [r4, #20]
 8007aa4:	3020      	adds	r0, #32
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	e7e8      	b.n	8007a7c <__d2b+0x64>
 8007aaa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007aae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007ab2:	6038      	str	r0, [r7, #0]
 8007ab4:	6918      	ldr	r0, [r3, #16]
 8007ab6:	f7ff fcbd 	bl	8007434 <__hi0bits>
 8007aba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007abe:	e7e5      	b.n	8007a8c <__d2b+0x74>
 8007ac0:	08009bd5 	.word	0x08009bd5
 8007ac4:	08009be6 	.word	0x08009be6

08007ac8 <__ratio>:
 8007ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007acc:	b085      	sub	sp, #20
 8007ace:	e9cd 1000 	strd	r1, r0, [sp]
 8007ad2:	a902      	add	r1, sp, #8
 8007ad4:	f7ff ff56 	bl	8007984 <__b2d>
 8007ad8:	9800      	ldr	r0, [sp, #0]
 8007ada:	a903      	add	r1, sp, #12
 8007adc:	ec55 4b10 	vmov	r4, r5, d0
 8007ae0:	f7ff ff50 	bl	8007984 <__b2d>
 8007ae4:	9b01      	ldr	r3, [sp, #4]
 8007ae6:	6919      	ldr	r1, [r3, #16]
 8007ae8:	9b00      	ldr	r3, [sp, #0]
 8007aea:	691b      	ldr	r3, [r3, #16]
 8007aec:	1ac9      	subs	r1, r1, r3
 8007aee:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007af2:	1a9b      	subs	r3, r3, r2
 8007af4:	ec5b ab10 	vmov	sl, fp, d0
 8007af8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	bfce      	itee	gt
 8007b00:	462a      	movgt	r2, r5
 8007b02:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007b06:	465a      	movle	r2, fp
 8007b08:	462f      	mov	r7, r5
 8007b0a:	46d9      	mov	r9, fp
 8007b0c:	bfcc      	ite	gt
 8007b0e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007b12:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007b16:	464b      	mov	r3, r9
 8007b18:	4652      	mov	r2, sl
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	4639      	mov	r1, r7
 8007b1e:	f7f8 fe95 	bl	800084c <__aeabi_ddiv>
 8007b22:	ec41 0b10 	vmov	d0, r0, r1
 8007b26:	b005      	add	sp, #20
 8007b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007b2c <__copybits>:
 8007b2c:	3901      	subs	r1, #1
 8007b2e:	b570      	push	{r4, r5, r6, lr}
 8007b30:	1149      	asrs	r1, r1, #5
 8007b32:	6914      	ldr	r4, [r2, #16]
 8007b34:	3101      	adds	r1, #1
 8007b36:	f102 0314 	add.w	r3, r2, #20
 8007b3a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007b3e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007b42:	1f05      	subs	r5, r0, #4
 8007b44:	42a3      	cmp	r3, r4
 8007b46:	d30c      	bcc.n	8007b62 <__copybits+0x36>
 8007b48:	1aa3      	subs	r3, r4, r2
 8007b4a:	3b11      	subs	r3, #17
 8007b4c:	f023 0303 	bic.w	r3, r3, #3
 8007b50:	3211      	adds	r2, #17
 8007b52:	42a2      	cmp	r2, r4
 8007b54:	bf88      	it	hi
 8007b56:	2300      	movhi	r3, #0
 8007b58:	4418      	add	r0, r3
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	4288      	cmp	r0, r1
 8007b5e:	d305      	bcc.n	8007b6c <__copybits+0x40>
 8007b60:	bd70      	pop	{r4, r5, r6, pc}
 8007b62:	f853 6b04 	ldr.w	r6, [r3], #4
 8007b66:	f845 6f04 	str.w	r6, [r5, #4]!
 8007b6a:	e7eb      	b.n	8007b44 <__copybits+0x18>
 8007b6c:	f840 3b04 	str.w	r3, [r0], #4
 8007b70:	e7f4      	b.n	8007b5c <__copybits+0x30>

08007b72 <__any_on>:
 8007b72:	f100 0214 	add.w	r2, r0, #20
 8007b76:	6900      	ldr	r0, [r0, #16]
 8007b78:	114b      	asrs	r3, r1, #5
 8007b7a:	4298      	cmp	r0, r3
 8007b7c:	b510      	push	{r4, lr}
 8007b7e:	db11      	blt.n	8007ba4 <__any_on+0x32>
 8007b80:	dd0a      	ble.n	8007b98 <__any_on+0x26>
 8007b82:	f011 011f 	ands.w	r1, r1, #31
 8007b86:	d007      	beq.n	8007b98 <__any_on+0x26>
 8007b88:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007b8c:	fa24 f001 	lsr.w	r0, r4, r1
 8007b90:	fa00 f101 	lsl.w	r1, r0, r1
 8007b94:	428c      	cmp	r4, r1
 8007b96:	d10b      	bne.n	8007bb0 <__any_on+0x3e>
 8007b98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d803      	bhi.n	8007ba8 <__any_on+0x36>
 8007ba0:	2000      	movs	r0, #0
 8007ba2:	bd10      	pop	{r4, pc}
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	e7f7      	b.n	8007b98 <__any_on+0x26>
 8007ba8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007bac:	2900      	cmp	r1, #0
 8007bae:	d0f5      	beq.n	8007b9c <__any_on+0x2a>
 8007bb0:	2001      	movs	r0, #1
 8007bb2:	e7f6      	b.n	8007ba2 <__any_on+0x30>

08007bb4 <sulp>:
 8007bb4:	b570      	push	{r4, r5, r6, lr}
 8007bb6:	4604      	mov	r4, r0
 8007bb8:	460d      	mov	r5, r1
 8007bba:	ec45 4b10 	vmov	d0, r4, r5
 8007bbe:	4616      	mov	r6, r2
 8007bc0:	f7ff feba 	bl	8007938 <__ulp>
 8007bc4:	ec51 0b10 	vmov	r0, r1, d0
 8007bc8:	b17e      	cbz	r6, 8007bea <sulp+0x36>
 8007bca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007bce:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	dd09      	ble.n	8007bea <sulp+0x36>
 8007bd6:	051b      	lsls	r3, r3, #20
 8007bd8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007bdc:	2400      	movs	r4, #0
 8007bde:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007be2:	4622      	mov	r2, r4
 8007be4:	462b      	mov	r3, r5
 8007be6:	f7f8 fd07 	bl	80005f8 <__aeabi_dmul>
 8007bea:	ec41 0b10 	vmov	d0, r0, r1
 8007bee:	bd70      	pop	{r4, r5, r6, pc}

08007bf0 <_strtod_l>:
 8007bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bf4:	b09f      	sub	sp, #124	@ 0x7c
 8007bf6:	460c      	mov	r4, r1
 8007bf8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	921a      	str	r2, [sp, #104]	@ 0x68
 8007bfe:	9005      	str	r0, [sp, #20]
 8007c00:	f04f 0a00 	mov.w	sl, #0
 8007c04:	f04f 0b00 	mov.w	fp, #0
 8007c08:	460a      	mov	r2, r1
 8007c0a:	9219      	str	r2, [sp, #100]	@ 0x64
 8007c0c:	7811      	ldrb	r1, [r2, #0]
 8007c0e:	292b      	cmp	r1, #43	@ 0x2b
 8007c10:	d04a      	beq.n	8007ca8 <_strtod_l+0xb8>
 8007c12:	d838      	bhi.n	8007c86 <_strtod_l+0x96>
 8007c14:	290d      	cmp	r1, #13
 8007c16:	d832      	bhi.n	8007c7e <_strtod_l+0x8e>
 8007c18:	2908      	cmp	r1, #8
 8007c1a:	d832      	bhi.n	8007c82 <_strtod_l+0x92>
 8007c1c:	2900      	cmp	r1, #0
 8007c1e:	d03b      	beq.n	8007c98 <_strtod_l+0xa8>
 8007c20:	2200      	movs	r2, #0
 8007c22:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007c24:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007c26:	782a      	ldrb	r2, [r5, #0]
 8007c28:	2a30      	cmp	r2, #48	@ 0x30
 8007c2a:	f040 80b3 	bne.w	8007d94 <_strtod_l+0x1a4>
 8007c2e:	786a      	ldrb	r2, [r5, #1]
 8007c30:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007c34:	2a58      	cmp	r2, #88	@ 0x58
 8007c36:	d16e      	bne.n	8007d16 <_strtod_l+0x126>
 8007c38:	9302      	str	r3, [sp, #8]
 8007c3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c3c:	9301      	str	r3, [sp, #4]
 8007c3e:	ab1a      	add	r3, sp, #104	@ 0x68
 8007c40:	9300      	str	r3, [sp, #0]
 8007c42:	4a8e      	ldr	r2, [pc, #568]	@ (8007e7c <_strtod_l+0x28c>)
 8007c44:	9805      	ldr	r0, [sp, #20]
 8007c46:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007c48:	a919      	add	r1, sp, #100	@ 0x64
 8007c4a:	f001 f923 	bl	8008e94 <__gethex>
 8007c4e:	f010 060f 	ands.w	r6, r0, #15
 8007c52:	4604      	mov	r4, r0
 8007c54:	d005      	beq.n	8007c62 <_strtod_l+0x72>
 8007c56:	2e06      	cmp	r6, #6
 8007c58:	d128      	bne.n	8007cac <_strtod_l+0xbc>
 8007c5a:	3501      	adds	r5, #1
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	9519      	str	r5, [sp, #100]	@ 0x64
 8007c60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c62:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	f040 858e 	bne.w	8008786 <_strtod_l+0xb96>
 8007c6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c6c:	b1cb      	cbz	r3, 8007ca2 <_strtod_l+0xb2>
 8007c6e:	4652      	mov	r2, sl
 8007c70:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007c74:	ec43 2b10 	vmov	d0, r2, r3
 8007c78:	b01f      	add	sp, #124	@ 0x7c
 8007c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c7e:	2920      	cmp	r1, #32
 8007c80:	d1ce      	bne.n	8007c20 <_strtod_l+0x30>
 8007c82:	3201      	adds	r2, #1
 8007c84:	e7c1      	b.n	8007c0a <_strtod_l+0x1a>
 8007c86:	292d      	cmp	r1, #45	@ 0x2d
 8007c88:	d1ca      	bne.n	8007c20 <_strtod_l+0x30>
 8007c8a:	2101      	movs	r1, #1
 8007c8c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007c8e:	1c51      	adds	r1, r2, #1
 8007c90:	9119      	str	r1, [sp, #100]	@ 0x64
 8007c92:	7852      	ldrb	r2, [r2, #1]
 8007c94:	2a00      	cmp	r2, #0
 8007c96:	d1c5      	bne.n	8007c24 <_strtod_l+0x34>
 8007c98:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007c9a:	9419      	str	r4, [sp, #100]	@ 0x64
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f040 8570 	bne.w	8008782 <_strtod_l+0xb92>
 8007ca2:	4652      	mov	r2, sl
 8007ca4:	465b      	mov	r3, fp
 8007ca6:	e7e5      	b.n	8007c74 <_strtod_l+0x84>
 8007ca8:	2100      	movs	r1, #0
 8007caa:	e7ef      	b.n	8007c8c <_strtod_l+0x9c>
 8007cac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007cae:	b13a      	cbz	r2, 8007cc0 <_strtod_l+0xd0>
 8007cb0:	2135      	movs	r1, #53	@ 0x35
 8007cb2:	a81c      	add	r0, sp, #112	@ 0x70
 8007cb4:	f7ff ff3a 	bl	8007b2c <__copybits>
 8007cb8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007cba:	9805      	ldr	r0, [sp, #20]
 8007cbc:	f7ff fb08 	bl	80072d0 <_Bfree>
 8007cc0:	3e01      	subs	r6, #1
 8007cc2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007cc4:	2e04      	cmp	r6, #4
 8007cc6:	d806      	bhi.n	8007cd6 <_strtod_l+0xe6>
 8007cc8:	e8df f006 	tbb	[pc, r6]
 8007ccc:	201d0314 	.word	0x201d0314
 8007cd0:	14          	.byte	0x14
 8007cd1:	00          	.byte	0x00
 8007cd2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007cd6:	05e1      	lsls	r1, r4, #23
 8007cd8:	bf48      	it	mi
 8007cda:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007cde:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007ce2:	0d1b      	lsrs	r3, r3, #20
 8007ce4:	051b      	lsls	r3, r3, #20
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1bb      	bne.n	8007c62 <_strtod_l+0x72>
 8007cea:	f7fe fb11 	bl	8006310 <__errno>
 8007cee:	2322      	movs	r3, #34	@ 0x22
 8007cf0:	6003      	str	r3, [r0, #0]
 8007cf2:	e7b6      	b.n	8007c62 <_strtod_l+0x72>
 8007cf4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007cf8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007cfc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007d00:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007d04:	e7e7      	b.n	8007cd6 <_strtod_l+0xe6>
 8007d06:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007e84 <_strtod_l+0x294>
 8007d0a:	e7e4      	b.n	8007cd6 <_strtod_l+0xe6>
 8007d0c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007d10:	f04f 3aff 	mov.w	sl, #4294967295
 8007d14:	e7df      	b.n	8007cd6 <_strtod_l+0xe6>
 8007d16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007d18:	1c5a      	adds	r2, r3, #1
 8007d1a:	9219      	str	r2, [sp, #100]	@ 0x64
 8007d1c:	785b      	ldrb	r3, [r3, #1]
 8007d1e:	2b30      	cmp	r3, #48	@ 0x30
 8007d20:	d0f9      	beq.n	8007d16 <_strtod_l+0x126>
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d09d      	beq.n	8007c62 <_strtod_l+0x72>
 8007d26:	2301      	movs	r3, #1
 8007d28:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007d2c:	930c      	str	r3, [sp, #48]	@ 0x30
 8007d2e:	2300      	movs	r3, #0
 8007d30:	9308      	str	r3, [sp, #32]
 8007d32:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d34:	461f      	mov	r7, r3
 8007d36:	220a      	movs	r2, #10
 8007d38:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007d3a:	7805      	ldrb	r5, [r0, #0]
 8007d3c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007d40:	b2d9      	uxtb	r1, r3
 8007d42:	2909      	cmp	r1, #9
 8007d44:	d928      	bls.n	8007d98 <_strtod_l+0x1a8>
 8007d46:	494e      	ldr	r1, [pc, #312]	@ (8007e80 <_strtod_l+0x290>)
 8007d48:	2201      	movs	r2, #1
 8007d4a:	f000 ffe7 	bl	8008d1c <strncmp>
 8007d4e:	2800      	cmp	r0, #0
 8007d50:	d032      	beq.n	8007db8 <_strtod_l+0x1c8>
 8007d52:	2000      	movs	r0, #0
 8007d54:	462a      	mov	r2, r5
 8007d56:	4681      	mov	r9, r0
 8007d58:	463d      	mov	r5, r7
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2a65      	cmp	r2, #101	@ 0x65
 8007d5e:	d001      	beq.n	8007d64 <_strtod_l+0x174>
 8007d60:	2a45      	cmp	r2, #69	@ 0x45
 8007d62:	d114      	bne.n	8007d8e <_strtod_l+0x19e>
 8007d64:	b91d      	cbnz	r5, 8007d6e <_strtod_l+0x17e>
 8007d66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d68:	4302      	orrs	r2, r0
 8007d6a:	d095      	beq.n	8007c98 <_strtod_l+0xa8>
 8007d6c:	2500      	movs	r5, #0
 8007d6e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007d70:	1c62      	adds	r2, r4, #1
 8007d72:	9219      	str	r2, [sp, #100]	@ 0x64
 8007d74:	7862      	ldrb	r2, [r4, #1]
 8007d76:	2a2b      	cmp	r2, #43	@ 0x2b
 8007d78:	d077      	beq.n	8007e6a <_strtod_l+0x27a>
 8007d7a:	2a2d      	cmp	r2, #45	@ 0x2d
 8007d7c:	d07b      	beq.n	8007e76 <_strtod_l+0x286>
 8007d7e:	f04f 0c00 	mov.w	ip, #0
 8007d82:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007d86:	2909      	cmp	r1, #9
 8007d88:	f240 8082 	bls.w	8007e90 <_strtod_l+0x2a0>
 8007d8c:	9419      	str	r4, [sp, #100]	@ 0x64
 8007d8e:	f04f 0800 	mov.w	r8, #0
 8007d92:	e0a2      	b.n	8007eda <_strtod_l+0x2ea>
 8007d94:	2300      	movs	r3, #0
 8007d96:	e7c7      	b.n	8007d28 <_strtod_l+0x138>
 8007d98:	2f08      	cmp	r7, #8
 8007d9a:	bfd5      	itete	le
 8007d9c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007d9e:	9908      	ldrgt	r1, [sp, #32]
 8007da0:	fb02 3301 	mlale	r3, r2, r1, r3
 8007da4:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007da8:	f100 0001 	add.w	r0, r0, #1
 8007dac:	bfd4      	ite	le
 8007dae:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007db0:	9308      	strgt	r3, [sp, #32]
 8007db2:	3701      	adds	r7, #1
 8007db4:	9019      	str	r0, [sp, #100]	@ 0x64
 8007db6:	e7bf      	b.n	8007d38 <_strtod_l+0x148>
 8007db8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007dba:	1c5a      	adds	r2, r3, #1
 8007dbc:	9219      	str	r2, [sp, #100]	@ 0x64
 8007dbe:	785a      	ldrb	r2, [r3, #1]
 8007dc0:	b37f      	cbz	r7, 8007e22 <_strtod_l+0x232>
 8007dc2:	4681      	mov	r9, r0
 8007dc4:	463d      	mov	r5, r7
 8007dc6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007dca:	2b09      	cmp	r3, #9
 8007dcc:	d912      	bls.n	8007df4 <_strtod_l+0x204>
 8007dce:	2301      	movs	r3, #1
 8007dd0:	e7c4      	b.n	8007d5c <_strtod_l+0x16c>
 8007dd2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007dd4:	1c5a      	adds	r2, r3, #1
 8007dd6:	9219      	str	r2, [sp, #100]	@ 0x64
 8007dd8:	785a      	ldrb	r2, [r3, #1]
 8007dda:	3001      	adds	r0, #1
 8007ddc:	2a30      	cmp	r2, #48	@ 0x30
 8007dde:	d0f8      	beq.n	8007dd2 <_strtod_l+0x1e2>
 8007de0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007de4:	2b08      	cmp	r3, #8
 8007de6:	f200 84d3 	bhi.w	8008790 <_strtod_l+0xba0>
 8007dea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007dec:	930c      	str	r3, [sp, #48]	@ 0x30
 8007dee:	4681      	mov	r9, r0
 8007df0:	2000      	movs	r0, #0
 8007df2:	4605      	mov	r5, r0
 8007df4:	3a30      	subs	r2, #48	@ 0x30
 8007df6:	f100 0301 	add.w	r3, r0, #1
 8007dfa:	d02a      	beq.n	8007e52 <_strtod_l+0x262>
 8007dfc:	4499      	add	r9, r3
 8007dfe:	eb00 0c05 	add.w	ip, r0, r5
 8007e02:	462b      	mov	r3, r5
 8007e04:	210a      	movs	r1, #10
 8007e06:	4563      	cmp	r3, ip
 8007e08:	d10d      	bne.n	8007e26 <_strtod_l+0x236>
 8007e0a:	1c69      	adds	r1, r5, #1
 8007e0c:	4401      	add	r1, r0
 8007e0e:	4428      	add	r0, r5
 8007e10:	2808      	cmp	r0, #8
 8007e12:	dc16      	bgt.n	8007e42 <_strtod_l+0x252>
 8007e14:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007e16:	230a      	movs	r3, #10
 8007e18:	fb03 2300 	mla	r3, r3, r0, r2
 8007e1c:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e1e:	2300      	movs	r3, #0
 8007e20:	e018      	b.n	8007e54 <_strtod_l+0x264>
 8007e22:	4638      	mov	r0, r7
 8007e24:	e7da      	b.n	8007ddc <_strtod_l+0x1ec>
 8007e26:	2b08      	cmp	r3, #8
 8007e28:	f103 0301 	add.w	r3, r3, #1
 8007e2c:	dc03      	bgt.n	8007e36 <_strtod_l+0x246>
 8007e2e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007e30:	434e      	muls	r6, r1
 8007e32:	960a      	str	r6, [sp, #40]	@ 0x28
 8007e34:	e7e7      	b.n	8007e06 <_strtod_l+0x216>
 8007e36:	2b10      	cmp	r3, #16
 8007e38:	bfde      	ittt	le
 8007e3a:	9e08      	ldrle	r6, [sp, #32]
 8007e3c:	434e      	mulle	r6, r1
 8007e3e:	9608      	strle	r6, [sp, #32]
 8007e40:	e7e1      	b.n	8007e06 <_strtod_l+0x216>
 8007e42:	280f      	cmp	r0, #15
 8007e44:	dceb      	bgt.n	8007e1e <_strtod_l+0x22e>
 8007e46:	9808      	ldr	r0, [sp, #32]
 8007e48:	230a      	movs	r3, #10
 8007e4a:	fb03 2300 	mla	r3, r3, r0, r2
 8007e4e:	9308      	str	r3, [sp, #32]
 8007e50:	e7e5      	b.n	8007e1e <_strtod_l+0x22e>
 8007e52:	4629      	mov	r1, r5
 8007e54:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007e56:	1c50      	adds	r0, r2, #1
 8007e58:	9019      	str	r0, [sp, #100]	@ 0x64
 8007e5a:	7852      	ldrb	r2, [r2, #1]
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	460d      	mov	r5, r1
 8007e60:	e7b1      	b.n	8007dc6 <_strtod_l+0x1d6>
 8007e62:	f04f 0900 	mov.w	r9, #0
 8007e66:	2301      	movs	r3, #1
 8007e68:	e77d      	b.n	8007d66 <_strtod_l+0x176>
 8007e6a:	f04f 0c00 	mov.w	ip, #0
 8007e6e:	1ca2      	adds	r2, r4, #2
 8007e70:	9219      	str	r2, [sp, #100]	@ 0x64
 8007e72:	78a2      	ldrb	r2, [r4, #2]
 8007e74:	e785      	b.n	8007d82 <_strtod_l+0x192>
 8007e76:	f04f 0c01 	mov.w	ip, #1
 8007e7a:	e7f8      	b.n	8007e6e <_strtod_l+0x27e>
 8007e7c:	08009d58 	.word	0x08009d58
 8007e80:	08009d40 	.word	0x08009d40
 8007e84:	7ff00000 	.word	0x7ff00000
 8007e88:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007e8a:	1c51      	adds	r1, r2, #1
 8007e8c:	9119      	str	r1, [sp, #100]	@ 0x64
 8007e8e:	7852      	ldrb	r2, [r2, #1]
 8007e90:	2a30      	cmp	r2, #48	@ 0x30
 8007e92:	d0f9      	beq.n	8007e88 <_strtod_l+0x298>
 8007e94:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007e98:	2908      	cmp	r1, #8
 8007e9a:	f63f af78 	bhi.w	8007d8e <_strtod_l+0x19e>
 8007e9e:	3a30      	subs	r2, #48	@ 0x30
 8007ea0:	920e      	str	r2, [sp, #56]	@ 0x38
 8007ea2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007ea4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007ea6:	f04f 080a 	mov.w	r8, #10
 8007eaa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007eac:	1c56      	adds	r6, r2, #1
 8007eae:	9619      	str	r6, [sp, #100]	@ 0x64
 8007eb0:	7852      	ldrb	r2, [r2, #1]
 8007eb2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007eb6:	f1be 0f09 	cmp.w	lr, #9
 8007eba:	d939      	bls.n	8007f30 <_strtod_l+0x340>
 8007ebc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007ebe:	1a76      	subs	r6, r6, r1
 8007ec0:	2e08      	cmp	r6, #8
 8007ec2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007ec6:	dc03      	bgt.n	8007ed0 <_strtod_l+0x2e0>
 8007ec8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007eca:	4588      	cmp	r8, r1
 8007ecc:	bfa8      	it	ge
 8007ece:	4688      	movge	r8, r1
 8007ed0:	f1bc 0f00 	cmp.w	ip, #0
 8007ed4:	d001      	beq.n	8007eda <_strtod_l+0x2ea>
 8007ed6:	f1c8 0800 	rsb	r8, r8, #0
 8007eda:	2d00      	cmp	r5, #0
 8007edc:	d14e      	bne.n	8007f7c <_strtod_l+0x38c>
 8007ede:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007ee0:	4308      	orrs	r0, r1
 8007ee2:	f47f aebe 	bne.w	8007c62 <_strtod_l+0x72>
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	f47f aed6 	bne.w	8007c98 <_strtod_l+0xa8>
 8007eec:	2a69      	cmp	r2, #105	@ 0x69
 8007eee:	d028      	beq.n	8007f42 <_strtod_l+0x352>
 8007ef0:	dc25      	bgt.n	8007f3e <_strtod_l+0x34e>
 8007ef2:	2a49      	cmp	r2, #73	@ 0x49
 8007ef4:	d025      	beq.n	8007f42 <_strtod_l+0x352>
 8007ef6:	2a4e      	cmp	r2, #78	@ 0x4e
 8007ef8:	f47f aece 	bne.w	8007c98 <_strtod_l+0xa8>
 8007efc:	499b      	ldr	r1, [pc, #620]	@ (800816c <_strtod_l+0x57c>)
 8007efe:	a819      	add	r0, sp, #100	@ 0x64
 8007f00:	f001 f9ea 	bl	80092d8 <__match>
 8007f04:	2800      	cmp	r0, #0
 8007f06:	f43f aec7 	beq.w	8007c98 <_strtod_l+0xa8>
 8007f0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	2b28      	cmp	r3, #40	@ 0x28
 8007f10:	d12e      	bne.n	8007f70 <_strtod_l+0x380>
 8007f12:	4997      	ldr	r1, [pc, #604]	@ (8008170 <_strtod_l+0x580>)
 8007f14:	aa1c      	add	r2, sp, #112	@ 0x70
 8007f16:	a819      	add	r0, sp, #100	@ 0x64
 8007f18:	f001 f9f2 	bl	8009300 <__hexnan>
 8007f1c:	2805      	cmp	r0, #5
 8007f1e:	d127      	bne.n	8007f70 <_strtod_l+0x380>
 8007f20:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007f22:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007f26:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007f2a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007f2e:	e698      	b.n	8007c62 <_strtod_l+0x72>
 8007f30:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007f32:	fb08 2101 	mla	r1, r8, r1, r2
 8007f36:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007f3a:	920e      	str	r2, [sp, #56]	@ 0x38
 8007f3c:	e7b5      	b.n	8007eaa <_strtod_l+0x2ba>
 8007f3e:	2a6e      	cmp	r2, #110	@ 0x6e
 8007f40:	e7da      	b.n	8007ef8 <_strtod_l+0x308>
 8007f42:	498c      	ldr	r1, [pc, #560]	@ (8008174 <_strtod_l+0x584>)
 8007f44:	a819      	add	r0, sp, #100	@ 0x64
 8007f46:	f001 f9c7 	bl	80092d8 <__match>
 8007f4a:	2800      	cmp	r0, #0
 8007f4c:	f43f aea4 	beq.w	8007c98 <_strtod_l+0xa8>
 8007f50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007f52:	4989      	ldr	r1, [pc, #548]	@ (8008178 <_strtod_l+0x588>)
 8007f54:	3b01      	subs	r3, #1
 8007f56:	a819      	add	r0, sp, #100	@ 0x64
 8007f58:	9319      	str	r3, [sp, #100]	@ 0x64
 8007f5a:	f001 f9bd 	bl	80092d8 <__match>
 8007f5e:	b910      	cbnz	r0, 8007f66 <_strtod_l+0x376>
 8007f60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007f62:	3301      	adds	r3, #1
 8007f64:	9319      	str	r3, [sp, #100]	@ 0x64
 8007f66:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008188 <_strtod_l+0x598>
 8007f6a:	f04f 0a00 	mov.w	sl, #0
 8007f6e:	e678      	b.n	8007c62 <_strtod_l+0x72>
 8007f70:	4882      	ldr	r0, [pc, #520]	@ (800817c <_strtod_l+0x58c>)
 8007f72:	f000 ff05 	bl	8008d80 <nan>
 8007f76:	ec5b ab10 	vmov	sl, fp, d0
 8007f7a:	e672      	b.n	8007c62 <_strtod_l+0x72>
 8007f7c:	eba8 0309 	sub.w	r3, r8, r9
 8007f80:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007f82:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f84:	2f00      	cmp	r7, #0
 8007f86:	bf08      	it	eq
 8007f88:	462f      	moveq	r7, r5
 8007f8a:	2d10      	cmp	r5, #16
 8007f8c:	462c      	mov	r4, r5
 8007f8e:	bfa8      	it	ge
 8007f90:	2410      	movge	r4, #16
 8007f92:	f7f8 fab7 	bl	8000504 <__aeabi_ui2d>
 8007f96:	2d09      	cmp	r5, #9
 8007f98:	4682      	mov	sl, r0
 8007f9a:	468b      	mov	fp, r1
 8007f9c:	dc13      	bgt.n	8007fc6 <_strtod_l+0x3d6>
 8007f9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	f43f ae5e 	beq.w	8007c62 <_strtod_l+0x72>
 8007fa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fa8:	dd78      	ble.n	800809c <_strtod_l+0x4ac>
 8007faa:	2b16      	cmp	r3, #22
 8007fac:	dc5f      	bgt.n	800806e <_strtod_l+0x47e>
 8007fae:	4974      	ldr	r1, [pc, #464]	@ (8008180 <_strtod_l+0x590>)
 8007fb0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007fb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fb8:	4652      	mov	r2, sl
 8007fba:	465b      	mov	r3, fp
 8007fbc:	f7f8 fb1c 	bl	80005f8 <__aeabi_dmul>
 8007fc0:	4682      	mov	sl, r0
 8007fc2:	468b      	mov	fp, r1
 8007fc4:	e64d      	b.n	8007c62 <_strtod_l+0x72>
 8007fc6:	4b6e      	ldr	r3, [pc, #440]	@ (8008180 <_strtod_l+0x590>)
 8007fc8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007fcc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007fd0:	f7f8 fb12 	bl	80005f8 <__aeabi_dmul>
 8007fd4:	4682      	mov	sl, r0
 8007fd6:	9808      	ldr	r0, [sp, #32]
 8007fd8:	468b      	mov	fp, r1
 8007fda:	f7f8 fa93 	bl	8000504 <__aeabi_ui2d>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	4650      	mov	r0, sl
 8007fe4:	4659      	mov	r1, fp
 8007fe6:	f7f8 f951 	bl	800028c <__adddf3>
 8007fea:	2d0f      	cmp	r5, #15
 8007fec:	4682      	mov	sl, r0
 8007fee:	468b      	mov	fp, r1
 8007ff0:	ddd5      	ble.n	8007f9e <_strtod_l+0x3ae>
 8007ff2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ff4:	1b2c      	subs	r4, r5, r4
 8007ff6:	441c      	add	r4, r3
 8007ff8:	2c00      	cmp	r4, #0
 8007ffa:	f340 8096 	ble.w	800812a <_strtod_l+0x53a>
 8007ffe:	f014 030f 	ands.w	r3, r4, #15
 8008002:	d00a      	beq.n	800801a <_strtod_l+0x42a>
 8008004:	495e      	ldr	r1, [pc, #376]	@ (8008180 <_strtod_l+0x590>)
 8008006:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800800a:	4652      	mov	r2, sl
 800800c:	465b      	mov	r3, fp
 800800e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008012:	f7f8 faf1 	bl	80005f8 <__aeabi_dmul>
 8008016:	4682      	mov	sl, r0
 8008018:	468b      	mov	fp, r1
 800801a:	f034 040f 	bics.w	r4, r4, #15
 800801e:	d073      	beq.n	8008108 <_strtod_l+0x518>
 8008020:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008024:	dd48      	ble.n	80080b8 <_strtod_l+0x4c8>
 8008026:	2400      	movs	r4, #0
 8008028:	46a0      	mov	r8, r4
 800802a:	940a      	str	r4, [sp, #40]	@ 0x28
 800802c:	46a1      	mov	r9, r4
 800802e:	9a05      	ldr	r2, [sp, #20]
 8008030:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008188 <_strtod_l+0x598>
 8008034:	2322      	movs	r3, #34	@ 0x22
 8008036:	6013      	str	r3, [r2, #0]
 8008038:	f04f 0a00 	mov.w	sl, #0
 800803c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800803e:	2b00      	cmp	r3, #0
 8008040:	f43f ae0f 	beq.w	8007c62 <_strtod_l+0x72>
 8008044:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008046:	9805      	ldr	r0, [sp, #20]
 8008048:	f7ff f942 	bl	80072d0 <_Bfree>
 800804c:	9805      	ldr	r0, [sp, #20]
 800804e:	4649      	mov	r1, r9
 8008050:	f7ff f93e 	bl	80072d0 <_Bfree>
 8008054:	9805      	ldr	r0, [sp, #20]
 8008056:	4641      	mov	r1, r8
 8008058:	f7ff f93a 	bl	80072d0 <_Bfree>
 800805c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800805e:	9805      	ldr	r0, [sp, #20]
 8008060:	f7ff f936 	bl	80072d0 <_Bfree>
 8008064:	9805      	ldr	r0, [sp, #20]
 8008066:	4621      	mov	r1, r4
 8008068:	f7ff f932 	bl	80072d0 <_Bfree>
 800806c:	e5f9      	b.n	8007c62 <_strtod_l+0x72>
 800806e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008070:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008074:	4293      	cmp	r3, r2
 8008076:	dbbc      	blt.n	8007ff2 <_strtod_l+0x402>
 8008078:	4c41      	ldr	r4, [pc, #260]	@ (8008180 <_strtod_l+0x590>)
 800807a:	f1c5 050f 	rsb	r5, r5, #15
 800807e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008082:	4652      	mov	r2, sl
 8008084:	465b      	mov	r3, fp
 8008086:	e9d1 0100 	ldrd	r0, r1, [r1]
 800808a:	f7f8 fab5 	bl	80005f8 <__aeabi_dmul>
 800808e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008090:	1b5d      	subs	r5, r3, r5
 8008092:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008096:	e9d4 2300 	ldrd	r2, r3, [r4]
 800809a:	e78f      	b.n	8007fbc <_strtod_l+0x3cc>
 800809c:	3316      	adds	r3, #22
 800809e:	dba8      	blt.n	8007ff2 <_strtod_l+0x402>
 80080a0:	4b37      	ldr	r3, [pc, #220]	@ (8008180 <_strtod_l+0x590>)
 80080a2:	eba9 0808 	sub.w	r8, r9, r8
 80080a6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80080aa:	e9d8 2300 	ldrd	r2, r3, [r8]
 80080ae:	4650      	mov	r0, sl
 80080b0:	4659      	mov	r1, fp
 80080b2:	f7f8 fbcb 	bl	800084c <__aeabi_ddiv>
 80080b6:	e783      	b.n	8007fc0 <_strtod_l+0x3d0>
 80080b8:	4b32      	ldr	r3, [pc, #200]	@ (8008184 <_strtod_l+0x594>)
 80080ba:	9308      	str	r3, [sp, #32]
 80080bc:	2300      	movs	r3, #0
 80080be:	1124      	asrs	r4, r4, #4
 80080c0:	4650      	mov	r0, sl
 80080c2:	4659      	mov	r1, fp
 80080c4:	461e      	mov	r6, r3
 80080c6:	2c01      	cmp	r4, #1
 80080c8:	dc21      	bgt.n	800810e <_strtod_l+0x51e>
 80080ca:	b10b      	cbz	r3, 80080d0 <_strtod_l+0x4e0>
 80080cc:	4682      	mov	sl, r0
 80080ce:	468b      	mov	fp, r1
 80080d0:	492c      	ldr	r1, [pc, #176]	@ (8008184 <_strtod_l+0x594>)
 80080d2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80080d6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80080da:	4652      	mov	r2, sl
 80080dc:	465b      	mov	r3, fp
 80080de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080e2:	f7f8 fa89 	bl	80005f8 <__aeabi_dmul>
 80080e6:	4b28      	ldr	r3, [pc, #160]	@ (8008188 <_strtod_l+0x598>)
 80080e8:	460a      	mov	r2, r1
 80080ea:	400b      	ands	r3, r1
 80080ec:	4927      	ldr	r1, [pc, #156]	@ (800818c <_strtod_l+0x59c>)
 80080ee:	428b      	cmp	r3, r1
 80080f0:	4682      	mov	sl, r0
 80080f2:	d898      	bhi.n	8008026 <_strtod_l+0x436>
 80080f4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80080f8:	428b      	cmp	r3, r1
 80080fa:	bf86      	itte	hi
 80080fc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008190 <_strtod_l+0x5a0>
 8008100:	f04f 3aff 	movhi.w	sl, #4294967295
 8008104:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008108:	2300      	movs	r3, #0
 800810a:	9308      	str	r3, [sp, #32]
 800810c:	e07a      	b.n	8008204 <_strtod_l+0x614>
 800810e:	07e2      	lsls	r2, r4, #31
 8008110:	d505      	bpl.n	800811e <_strtod_l+0x52e>
 8008112:	9b08      	ldr	r3, [sp, #32]
 8008114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008118:	f7f8 fa6e 	bl	80005f8 <__aeabi_dmul>
 800811c:	2301      	movs	r3, #1
 800811e:	9a08      	ldr	r2, [sp, #32]
 8008120:	3208      	adds	r2, #8
 8008122:	3601      	adds	r6, #1
 8008124:	1064      	asrs	r4, r4, #1
 8008126:	9208      	str	r2, [sp, #32]
 8008128:	e7cd      	b.n	80080c6 <_strtod_l+0x4d6>
 800812a:	d0ed      	beq.n	8008108 <_strtod_l+0x518>
 800812c:	4264      	negs	r4, r4
 800812e:	f014 020f 	ands.w	r2, r4, #15
 8008132:	d00a      	beq.n	800814a <_strtod_l+0x55a>
 8008134:	4b12      	ldr	r3, [pc, #72]	@ (8008180 <_strtod_l+0x590>)
 8008136:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800813a:	4650      	mov	r0, sl
 800813c:	4659      	mov	r1, fp
 800813e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008142:	f7f8 fb83 	bl	800084c <__aeabi_ddiv>
 8008146:	4682      	mov	sl, r0
 8008148:	468b      	mov	fp, r1
 800814a:	1124      	asrs	r4, r4, #4
 800814c:	d0dc      	beq.n	8008108 <_strtod_l+0x518>
 800814e:	2c1f      	cmp	r4, #31
 8008150:	dd20      	ble.n	8008194 <_strtod_l+0x5a4>
 8008152:	2400      	movs	r4, #0
 8008154:	46a0      	mov	r8, r4
 8008156:	940a      	str	r4, [sp, #40]	@ 0x28
 8008158:	46a1      	mov	r9, r4
 800815a:	9a05      	ldr	r2, [sp, #20]
 800815c:	2322      	movs	r3, #34	@ 0x22
 800815e:	f04f 0a00 	mov.w	sl, #0
 8008162:	f04f 0b00 	mov.w	fp, #0
 8008166:	6013      	str	r3, [r2, #0]
 8008168:	e768      	b.n	800803c <_strtod_l+0x44c>
 800816a:	bf00      	nop
 800816c:	08009b08 	.word	0x08009b08
 8008170:	08009d44 	.word	0x08009d44
 8008174:	08009b00 	.word	0x08009b00
 8008178:	08009b73 	.word	0x08009b73
 800817c:	08009b6f 	.word	0x08009b6f
 8008180:	08009c78 	.word	0x08009c78
 8008184:	08009c50 	.word	0x08009c50
 8008188:	7ff00000 	.word	0x7ff00000
 800818c:	7ca00000 	.word	0x7ca00000
 8008190:	7fefffff 	.word	0x7fefffff
 8008194:	f014 0310 	ands.w	r3, r4, #16
 8008198:	bf18      	it	ne
 800819a:	236a      	movne	r3, #106	@ 0x6a
 800819c:	4ea9      	ldr	r6, [pc, #676]	@ (8008444 <_strtod_l+0x854>)
 800819e:	9308      	str	r3, [sp, #32]
 80081a0:	4650      	mov	r0, sl
 80081a2:	4659      	mov	r1, fp
 80081a4:	2300      	movs	r3, #0
 80081a6:	07e2      	lsls	r2, r4, #31
 80081a8:	d504      	bpl.n	80081b4 <_strtod_l+0x5c4>
 80081aa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80081ae:	f7f8 fa23 	bl	80005f8 <__aeabi_dmul>
 80081b2:	2301      	movs	r3, #1
 80081b4:	1064      	asrs	r4, r4, #1
 80081b6:	f106 0608 	add.w	r6, r6, #8
 80081ba:	d1f4      	bne.n	80081a6 <_strtod_l+0x5b6>
 80081bc:	b10b      	cbz	r3, 80081c2 <_strtod_l+0x5d2>
 80081be:	4682      	mov	sl, r0
 80081c0:	468b      	mov	fp, r1
 80081c2:	9b08      	ldr	r3, [sp, #32]
 80081c4:	b1b3      	cbz	r3, 80081f4 <_strtod_l+0x604>
 80081c6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80081ca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	4659      	mov	r1, fp
 80081d2:	dd0f      	ble.n	80081f4 <_strtod_l+0x604>
 80081d4:	2b1f      	cmp	r3, #31
 80081d6:	dd55      	ble.n	8008284 <_strtod_l+0x694>
 80081d8:	2b34      	cmp	r3, #52	@ 0x34
 80081da:	bfde      	ittt	le
 80081dc:	f04f 33ff 	movle.w	r3, #4294967295
 80081e0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80081e4:	4093      	lslle	r3, r2
 80081e6:	f04f 0a00 	mov.w	sl, #0
 80081ea:	bfcc      	ite	gt
 80081ec:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80081f0:	ea03 0b01 	andle.w	fp, r3, r1
 80081f4:	2200      	movs	r2, #0
 80081f6:	2300      	movs	r3, #0
 80081f8:	4650      	mov	r0, sl
 80081fa:	4659      	mov	r1, fp
 80081fc:	f7f8 fc64 	bl	8000ac8 <__aeabi_dcmpeq>
 8008200:	2800      	cmp	r0, #0
 8008202:	d1a6      	bne.n	8008152 <_strtod_l+0x562>
 8008204:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008206:	9300      	str	r3, [sp, #0]
 8008208:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800820a:	9805      	ldr	r0, [sp, #20]
 800820c:	462b      	mov	r3, r5
 800820e:	463a      	mov	r2, r7
 8008210:	f7ff f8c6 	bl	80073a0 <__s2b>
 8008214:	900a      	str	r0, [sp, #40]	@ 0x28
 8008216:	2800      	cmp	r0, #0
 8008218:	f43f af05 	beq.w	8008026 <_strtod_l+0x436>
 800821c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800821e:	2a00      	cmp	r2, #0
 8008220:	eba9 0308 	sub.w	r3, r9, r8
 8008224:	bfa8      	it	ge
 8008226:	2300      	movge	r3, #0
 8008228:	9312      	str	r3, [sp, #72]	@ 0x48
 800822a:	2400      	movs	r4, #0
 800822c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008230:	9316      	str	r3, [sp, #88]	@ 0x58
 8008232:	46a0      	mov	r8, r4
 8008234:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008236:	9805      	ldr	r0, [sp, #20]
 8008238:	6859      	ldr	r1, [r3, #4]
 800823a:	f7ff f809 	bl	8007250 <_Balloc>
 800823e:	4681      	mov	r9, r0
 8008240:	2800      	cmp	r0, #0
 8008242:	f43f aef4 	beq.w	800802e <_strtod_l+0x43e>
 8008246:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008248:	691a      	ldr	r2, [r3, #16]
 800824a:	3202      	adds	r2, #2
 800824c:	f103 010c 	add.w	r1, r3, #12
 8008250:	0092      	lsls	r2, r2, #2
 8008252:	300c      	adds	r0, #12
 8008254:	f000 fd84 	bl	8008d60 <memcpy>
 8008258:	ec4b ab10 	vmov	d0, sl, fp
 800825c:	9805      	ldr	r0, [sp, #20]
 800825e:	aa1c      	add	r2, sp, #112	@ 0x70
 8008260:	a91b      	add	r1, sp, #108	@ 0x6c
 8008262:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008266:	f7ff fbd7 	bl	8007a18 <__d2b>
 800826a:	901a      	str	r0, [sp, #104]	@ 0x68
 800826c:	2800      	cmp	r0, #0
 800826e:	f43f aede 	beq.w	800802e <_strtod_l+0x43e>
 8008272:	9805      	ldr	r0, [sp, #20]
 8008274:	2101      	movs	r1, #1
 8008276:	f7ff f929 	bl	80074cc <__i2b>
 800827a:	4680      	mov	r8, r0
 800827c:	b948      	cbnz	r0, 8008292 <_strtod_l+0x6a2>
 800827e:	f04f 0800 	mov.w	r8, #0
 8008282:	e6d4      	b.n	800802e <_strtod_l+0x43e>
 8008284:	f04f 32ff 	mov.w	r2, #4294967295
 8008288:	fa02 f303 	lsl.w	r3, r2, r3
 800828c:	ea03 0a0a 	and.w	sl, r3, sl
 8008290:	e7b0      	b.n	80081f4 <_strtod_l+0x604>
 8008292:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008294:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008296:	2d00      	cmp	r5, #0
 8008298:	bfab      	itete	ge
 800829a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800829c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800829e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80082a0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80082a2:	bfac      	ite	ge
 80082a4:	18ef      	addge	r7, r5, r3
 80082a6:	1b5e      	sublt	r6, r3, r5
 80082a8:	9b08      	ldr	r3, [sp, #32]
 80082aa:	1aed      	subs	r5, r5, r3
 80082ac:	4415      	add	r5, r2
 80082ae:	4b66      	ldr	r3, [pc, #408]	@ (8008448 <_strtod_l+0x858>)
 80082b0:	3d01      	subs	r5, #1
 80082b2:	429d      	cmp	r5, r3
 80082b4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80082b8:	da50      	bge.n	800835c <_strtod_l+0x76c>
 80082ba:	1b5b      	subs	r3, r3, r5
 80082bc:	2b1f      	cmp	r3, #31
 80082be:	eba2 0203 	sub.w	r2, r2, r3
 80082c2:	f04f 0101 	mov.w	r1, #1
 80082c6:	dc3d      	bgt.n	8008344 <_strtod_l+0x754>
 80082c8:	fa01 f303 	lsl.w	r3, r1, r3
 80082cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80082ce:	2300      	movs	r3, #0
 80082d0:	9310      	str	r3, [sp, #64]	@ 0x40
 80082d2:	18bd      	adds	r5, r7, r2
 80082d4:	9b08      	ldr	r3, [sp, #32]
 80082d6:	42af      	cmp	r7, r5
 80082d8:	4416      	add	r6, r2
 80082da:	441e      	add	r6, r3
 80082dc:	463b      	mov	r3, r7
 80082de:	bfa8      	it	ge
 80082e0:	462b      	movge	r3, r5
 80082e2:	42b3      	cmp	r3, r6
 80082e4:	bfa8      	it	ge
 80082e6:	4633      	movge	r3, r6
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	bfc2      	ittt	gt
 80082ec:	1aed      	subgt	r5, r5, r3
 80082ee:	1af6      	subgt	r6, r6, r3
 80082f0:	1aff      	subgt	r7, r7, r3
 80082f2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	dd16      	ble.n	8008326 <_strtod_l+0x736>
 80082f8:	4641      	mov	r1, r8
 80082fa:	9805      	ldr	r0, [sp, #20]
 80082fc:	461a      	mov	r2, r3
 80082fe:	f7ff f9a5 	bl	800764c <__pow5mult>
 8008302:	4680      	mov	r8, r0
 8008304:	2800      	cmp	r0, #0
 8008306:	d0ba      	beq.n	800827e <_strtod_l+0x68e>
 8008308:	4601      	mov	r1, r0
 800830a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800830c:	9805      	ldr	r0, [sp, #20]
 800830e:	f7ff f8f3 	bl	80074f8 <__multiply>
 8008312:	900e      	str	r0, [sp, #56]	@ 0x38
 8008314:	2800      	cmp	r0, #0
 8008316:	f43f ae8a 	beq.w	800802e <_strtod_l+0x43e>
 800831a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800831c:	9805      	ldr	r0, [sp, #20]
 800831e:	f7fe ffd7 	bl	80072d0 <_Bfree>
 8008322:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008324:	931a      	str	r3, [sp, #104]	@ 0x68
 8008326:	2d00      	cmp	r5, #0
 8008328:	dc1d      	bgt.n	8008366 <_strtod_l+0x776>
 800832a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800832c:	2b00      	cmp	r3, #0
 800832e:	dd23      	ble.n	8008378 <_strtod_l+0x788>
 8008330:	4649      	mov	r1, r9
 8008332:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008334:	9805      	ldr	r0, [sp, #20]
 8008336:	f7ff f989 	bl	800764c <__pow5mult>
 800833a:	4681      	mov	r9, r0
 800833c:	b9e0      	cbnz	r0, 8008378 <_strtod_l+0x788>
 800833e:	f04f 0900 	mov.w	r9, #0
 8008342:	e674      	b.n	800802e <_strtod_l+0x43e>
 8008344:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008348:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800834c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008350:	35e2      	adds	r5, #226	@ 0xe2
 8008352:	fa01 f305 	lsl.w	r3, r1, r5
 8008356:	9310      	str	r3, [sp, #64]	@ 0x40
 8008358:	9113      	str	r1, [sp, #76]	@ 0x4c
 800835a:	e7ba      	b.n	80082d2 <_strtod_l+0x6e2>
 800835c:	2300      	movs	r3, #0
 800835e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008360:	2301      	movs	r3, #1
 8008362:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008364:	e7b5      	b.n	80082d2 <_strtod_l+0x6e2>
 8008366:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008368:	9805      	ldr	r0, [sp, #20]
 800836a:	462a      	mov	r2, r5
 800836c:	f7ff f9c8 	bl	8007700 <__lshift>
 8008370:	901a      	str	r0, [sp, #104]	@ 0x68
 8008372:	2800      	cmp	r0, #0
 8008374:	d1d9      	bne.n	800832a <_strtod_l+0x73a>
 8008376:	e65a      	b.n	800802e <_strtod_l+0x43e>
 8008378:	2e00      	cmp	r6, #0
 800837a:	dd07      	ble.n	800838c <_strtod_l+0x79c>
 800837c:	4649      	mov	r1, r9
 800837e:	9805      	ldr	r0, [sp, #20]
 8008380:	4632      	mov	r2, r6
 8008382:	f7ff f9bd 	bl	8007700 <__lshift>
 8008386:	4681      	mov	r9, r0
 8008388:	2800      	cmp	r0, #0
 800838a:	d0d8      	beq.n	800833e <_strtod_l+0x74e>
 800838c:	2f00      	cmp	r7, #0
 800838e:	dd08      	ble.n	80083a2 <_strtod_l+0x7b2>
 8008390:	4641      	mov	r1, r8
 8008392:	9805      	ldr	r0, [sp, #20]
 8008394:	463a      	mov	r2, r7
 8008396:	f7ff f9b3 	bl	8007700 <__lshift>
 800839a:	4680      	mov	r8, r0
 800839c:	2800      	cmp	r0, #0
 800839e:	f43f ae46 	beq.w	800802e <_strtod_l+0x43e>
 80083a2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80083a4:	9805      	ldr	r0, [sp, #20]
 80083a6:	464a      	mov	r2, r9
 80083a8:	f7ff fa32 	bl	8007810 <__mdiff>
 80083ac:	4604      	mov	r4, r0
 80083ae:	2800      	cmp	r0, #0
 80083b0:	f43f ae3d 	beq.w	800802e <_strtod_l+0x43e>
 80083b4:	68c3      	ldr	r3, [r0, #12]
 80083b6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80083b8:	2300      	movs	r3, #0
 80083ba:	60c3      	str	r3, [r0, #12]
 80083bc:	4641      	mov	r1, r8
 80083be:	f7ff fa0b 	bl	80077d8 <__mcmp>
 80083c2:	2800      	cmp	r0, #0
 80083c4:	da46      	bge.n	8008454 <_strtod_l+0x864>
 80083c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083c8:	ea53 030a 	orrs.w	r3, r3, sl
 80083cc:	d16c      	bne.n	80084a8 <_strtod_l+0x8b8>
 80083ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d168      	bne.n	80084a8 <_strtod_l+0x8b8>
 80083d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80083da:	0d1b      	lsrs	r3, r3, #20
 80083dc:	051b      	lsls	r3, r3, #20
 80083de:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80083e2:	d961      	bls.n	80084a8 <_strtod_l+0x8b8>
 80083e4:	6963      	ldr	r3, [r4, #20]
 80083e6:	b913      	cbnz	r3, 80083ee <_strtod_l+0x7fe>
 80083e8:	6923      	ldr	r3, [r4, #16]
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	dd5c      	ble.n	80084a8 <_strtod_l+0x8b8>
 80083ee:	4621      	mov	r1, r4
 80083f0:	2201      	movs	r2, #1
 80083f2:	9805      	ldr	r0, [sp, #20]
 80083f4:	f7ff f984 	bl	8007700 <__lshift>
 80083f8:	4641      	mov	r1, r8
 80083fa:	4604      	mov	r4, r0
 80083fc:	f7ff f9ec 	bl	80077d8 <__mcmp>
 8008400:	2800      	cmp	r0, #0
 8008402:	dd51      	ble.n	80084a8 <_strtod_l+0x8b8>
 8008404:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008408:	9a08      	ldr	r2, [sp, #32]
 800840a:	0d1b      	lsrs	r3, r3, #20
 800840c:	051b      	lsls	r3, r3, #20
 800840e:	2a00      	cmp	r2, #0
 8008410:	d06b      	beq.n	80084ea <_strtod_l+0x8fa>
 8008412:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008416:	d868      	bhi.n	80084ea <_strtod_l+0x8fa>
 8008418:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800841c:	f67f ae9d 	bls.w	800815a <_strtod_l+0x56a>
 8008420:	4b0a      	ldr	r3, [pc, #40]	@ (800844c <_strtod_l+0x85c>)
 8008422:	4650      	mov	r0, sl
 8008424:	4659      	mov	r1, fp
 8008426:	2200      	movs	r2, #0
 8008428:	f7f8 f8e6 	bl	80005f8 <__aeabi_dmul>
 800842c:	4b08      	ldr	r3, [pc, #32]	@ (8008450 <_strtod_l+0x860>)
 800842e:	400b      	ands	r3, r1
 8008430:	4682      	mov	sl, r0
 8008432:	468b      	mov	fp, r1
 8008434:	2b00      	cmp	r3, #0
 8008436:	f47f ae05 	bne.w	8008044 <_strtod_l+0x454>
 800843a:	9a05      	ldr	r2, [sp, #20]
 800843c:	2322      	movs	r3, #34	@ 0x22
 800843e:	6013      	str	r3, [r2, #0]
 8008440:	e600      	b.n	8008044 <_strtod_l+0x454>
 8008442:	bf00      	nop
 8008444:	08009d70 	.word	0x08009d70
 8008448:	fffffc02 	.word	0xfffffc02
 800844c:	39500000 	.word	0x39500000
 8008450:	7ff00000 	.word	0x7ff00000
 8008454:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008458:	d165      	bne.n	8008526 <_strtod_l+0x936>
 800845a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800845c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008460:	b35a      	cbz	r2, 80084ba <_strtod_l+0x8ca>
 8008462:	4a9f      	ldr	r2, [pc, #636]	@ (80086e0 <_strtod_l+0xaf0>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d12b      	bne.n	80084c0 <_strtod_l+0x8d0>
 8008468:	9b08      	ldr	r3, [sp, #32]
 800846a:	4651      	mov	r1, sl
 800846c:	b303      	cbz	r3, 80084b0 <_strtod_l+0x8c0>
 800846e:	4b9d      	ldr	r3, [pc, #628]	@ (80086e4 <_strtod_l+0xaf4>)
 8008470:	465a      	mov	r2, fp
 8008472:	4013      	ands	r3, r2
 8008474:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008478:	f04f 32ff 	mov.w	r2, #4294967295
 800847c:	d81b      	bhi.n	80084b6 <_strtod_l+0x8c6>
 800847e:	0d1b      	lsrs	r3, r3, #20
 8008480:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008484:	fa02 f303 	lsl.w	r3, r2, r3
 8008488:	4299      	cmp	r1, r3
 800848a:	d119      	bne.n	80084c0 <_strtod_l+0x8d0>
 800848c:	4b96      	ldr	r3, [pc, #600]	@ (80086e8 <_strtod_l+0xaf8>)
 800848e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008490:	429a      	cmp	r2, r3
 8008492:	d102      	bne.n	800849a <_strtod_l+0x8aa>
 8008494:	3101      	adds	r1, #1
 8008496:	f43f adca 	beq.w	800802e <_strtod_l+0x43e>
 800849a:	4b92      	ldr	r3, [pc, #584]	@ (80086e4 <_strtod_l+0xaf4>)
 800849c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800849e:	401a      	ands	r2, r3
 80084a0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80084a4:	f04f 0a00 	mov.w	sl, #0
 80084a8:	9b08      	ldr	r3, [sp, #32]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d1b8      	bne.n	8008420 <_strtod_l+0x830>
 80084ae:	e5c9      	b.n	8008044 <_strtod_l+0x454>
 80084b0:	f04f 33ff 	mov.w	r3, #4294967295
 80084b4:	e7e8      	b.n	8008488 <_strtod_l+0x898>
 80084b6:	4613      	mov	r3, r2
 80084b8:	e7e6      	b.n	8008488 <_strtod_l+0x898>
 80084ba:	ea53 030a 	orrs.w	r3, r3, sl
 80084be:	d0a1      	beq.n	8008404 <_strtod_l+0x814>
 80084c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80084c2:	b1db      	cbz	r3, 80084fc <_strtod_l+0x90c>
 80084c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80084c6:	4213      	tst	r3, r2
 80084c8:	d0ee      	beq.n	80084a8 <_strtod_l+0x8b8>
 80084ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084cc:	9a08      	ldr	r2, [sp, #32]
 80084ce:	4650      	mov	r0, sl
 80084d0:	4659      	mov	r1, fp
 80084d2:	b1bb      	cbz	r3, 8008504 <_strtod_l+0x914>
 80084d4:	f7ff fb6e 	bl	8007bb4 <sulp>
 80084d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80084dc:	ec53 2b10 	vmov	r2, r3, d0
 80084e0:	f7f7 fed4 	bl	800028c <__adddf3>
 80084e4:	4682      	mov	sl, r0
 80084e6:	468b      	mov	fp, r1
 80084e8:	e7de      	b.n	80084a8 <_strtod_l+0x8b8>
 80084ea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80084ee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80084f2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80084f6:	f04f 3aff 	mov.w	sl, #4294967295
 80084fa:	e7d5      	b.n	80084a8 <_strtod_l+0x8b8>
 80084fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80084fe:	ea13 0f0a 	tst.w	r3, sl
 8008502:	e7e1      	b.n	80084c8 <_strtod_l+0x8d8>
 8008504:	f7ff fb56 	bl	8007bb4 <sulp>
 8008508:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800850c:	ec53 2b10 	vmov	r2, r3, d0
 8008510:	f7f7 feba 	bl	8000288 <__aeabi_dsub>
 8008514:	2200      	movs	r2, #0
 8008516:	2300      	movs	r3, #0
 8008518:	4682      	mov	sl, r0
 800851a:	468b      	mov	fp, r1
 800851c:	f7f8 fad4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008520:	2800      	cmp	r0, #0
 8008522:	d0c1      	beq.n	80084a8 <_strtod_l+0x8b8>
 8008524:	e619      	b.n	800815a <_strtod_l+0x56a>
 8008526:	4641      	mov	r1, r8
 8008528:	4620      	mov	r0, r4
 800852a:	f7ff facd 	bl	8007ac8 <__ratio>
 800852e:	ec57 6b10 	vmov	r6, r7, d0
 8008532:	2200      	movs	r2, #0
 8008534:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008538:	4630      	mov	r0, r6
 800853a:	4639      	mov	r1, r7
 800853c:	f7f8 fad8 	bl	8000af0 <__aeabi_dcmple>
 8008540:	2800      	cmp	r0, #0
 8008542:	d06f      	beq.n	8008624 <_strtod_l+0xa34>
 8008544:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008546:	2b00      	cmp	r3, #0
 8008548:	d17a      	bne.n	8008640 <_strtod_l+0xa50>
 800854a:	f1ba 0f00 	cmp.w	sl, #0
 800854e:	d158      	bne.n	8008602 <_strtod_l+0xa12>
 8008550:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008552:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008556:	2b00      	cmp	r3, #0
 8008558:	d15a      	bne.n	8008610 <_strtod_l+0xa20>
 800855a:	4b64      	ldr	r3, [pc, #400]	@ (80086ec <_strtod_l+0xafc>)
 800855c:	2200      	movs	r2, #0
 800855e:	4630      	mov	r0, r6
 8008560:	4639      	mov	r1, r7
 8008562:	f7f8 fabb 	bl	8000adc <__aeabi_dcmplt>
 8008566:	2800      	cmp	r0, #0
 8008568:	d159      	bne.n	800861e <_strtod_l+0xa2e>
 800856a:	4630      	mov	r0, r6
 800856c:	4639      	mov	r1, r7
 800856e:	4b60      	ldr	r3, [pc, #384]	@ (80086f0 <_strtod_l+0xb00>)
 8008570:	2200      	movs	r2, #0
 8008572:	f7f8 f841 	bl	80005f8 <__aeabi_dmul>
 8008576:	4606      	mov	r6, r0
 8008578:	460f      	mov	r7, r1
 800857a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800857e:	9606      	str	r6, [sp, #24]
 8008580:	9307      	str	r3, [sp, #28]
 8008582:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008586:	4d57      	ldr	r5, [pc, #348]	@ (80086e4 <_strtod_l+0xaf4>)
 8008588:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800858c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800858e:	401d      	ands	r5, r3
 8008590:	4b58      	ldr	r3, [pc, #352]	@ (80086f4 <_strtod_l+0xb04>)
 8008592:	429d      	cmp	r5, r3
 8008594:	f040 80b2 	bne.w	80086fc <_strtod_l+0xb0c>
 8008598:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800859a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800859e:	ec4b ab10 	vmov	d0, sl, fp
 80085a2:	f7ff f9c9 	bl	8007938 <__ulp>
 80085a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80085aa:	ec51 0b10 	vmov	r0, r1, d0
 80085ae:	f7f8 f823 	bl	80005f8 <__aeabi_dmul>
 80085b2:	4652      	mov	r2, sl
 80085b4:	465b      	mov	r3, fp
 80085b6:	f7f7 fe69 	bl	800028c <__adddf3>
 80085ba:	460b      	mov	r3, r1
 80085bc:	4949      	ldr	r1, [pc, #292]	@ (80086e4 <_strtod_l+0xaf4>)
 80085be:	4a4e      	ldr	r2, [pc, #312]	@ (80086f8 <_strtod_l+0xb08>)
 80085c0:	4019      	ands	r1, r3
 80085c2:	4291      	cmp	r1, r2
 80085c4:	4682      	mov	sl, r0
 80085c6:	d942      	bls.n	800864e <_strtod_l+0xa5e>
 80085c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80085ca:	4b47      	ldr	r3, [pc, #284]	@ (80086e8 <_strtod_l+0xaf8>)
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d103      	bne.n	80085d8 <_strtod_l+0x9e8>
 80085d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80085d2:	3301      	adds	r3, #1
 80085d4:	f43f ad2b 	beq.w	800802e <_strtod_l+0x43e>
 80085d8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80086e8 <_strtod_l+0xaf8>
 80085dc:	f04f 3aff 	mov.w	sl, #4294967295
 80085e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80085e2:	9805      	ldr	r0, [sp, #20]
 80085e4:	f7fe fe74 	bl	80072d0 <_Bfree>
 80085e8:	9805      	ldr	r0, [sp, #20]
 80085ea:	4649      	mov	r1, r9
 80085ec:	f7fe fe70 	bl	80072d0 <_Bfree>
 80085f0:	9805      	ldr	r0, [sp, #20]
 80085f2:	4641      	mov	r1, r8
 80085f4:	f7fe fe6c 	bl	80072d0 <_Bfree>
 80085f8:	9805      	ldr	r0, [sp, #20]
 80085fa:	4621      	mov	r1, r4
 80085fc:	f7fe fe68 	bl	80072d0 <_Bfree>
 8008600:	e618      	b.n	8008234 <_strtod_l+0x644>
 8008602:	f1ba 0f01 	cmp.w	sl, #1
 8008606:	d103      	bne.n	8008610 <_strtod_l+0xa20>
 8008608:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800860a:	2b00      	cmp	r3, #0
 800860c:	f43f ada5 	beq.w	800815a <_strtod_l+0x56a>
 8008610:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80086c0 <_strtod_l+0xad0>
 8008614:	4f35      	ldr	r7, [pc, #212]	@ (80086ec <_strtod_l+0xafc>)
 8008616:	ed8d 7b06 	vstr	d7, [sp, #24]
 800861a:	2600      	movs	r6, #0
 800861c:	e7b1      	b.n	8008582 <_strtod_l+0x992>
 800861e:	4f34      	ldr	r7, [pc, #208]	@ (80086f0 <_strtod_l+0xb00>)
 8008620:	2600      	movs	r6, #0
 8008622:	e7aa      	b.n	800857a <_strtod_l+0x98a>
 8008624:	4b32      	ldr	r3, [pc, #200]	@ (80086f0 <_strtod_l+0xb00>)
 8008626:	4630      	mov	r0, r6
 8008628:	4639      	mov	r1, r7
 800862a:	2200      	movs	r2, #0
 800862c:	f7f7 ffe4 	bl	80005f8 <__aeabi_dmul>
 8008630:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008632:	4606      	mov	r6, r0
 8008634:	460f      	mov	r7, r1
 8008636:	2b00      	cmp	r3, #0
 8008638:	d09f      	beq.n	800857a <_strtod_l+0x98a>
 800863a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800863e:	e7a0      	b.n	8008582 <_strtod_l+0x992>
 8008640:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80086c8 <_strtod_l+0xad8>
 8008644:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008648:	ec57 6b17 	vmov	r6, r7, d7
 800864c:	e799      	b.n	8008582 <_strtod_l+0x992>
 800864e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008652:	9b08      	ldr	r3, [sp, #32]
 8008654:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008658:	2b00      	cmp	r3, #0
 800865a:	d1c1      	bne.n	80085e0 <_strtod_l+0x9f0>
 800865c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008660:	0d1b      	lsrs	r3, r3, #20
 8008662:	051b      	lsls	r3, r3, #20
 8008664:	429d      	cmp	r5, r3
 8008666:	d1bb      	bne.n	80085e0 <_strtod_l+0x9f0>
 8008668:	4630      	mov	r0, r6
 800866a:	4639      	mov	r1, r7
 800866c:	f7f8 fb0c 	bl	8000c88 <__aeabi_d2lz>
 8008670:	f7f7 ff94 	bl	800059c <__aeabi_l2d>
 8008674:	4602      	mov	r2, r0
 8008676:	460b      	mov	r3, r1
 8008678:	4630      	mov	r0, r6
 800867a:	4639      	mov	r1, r7
 800867c:	f7f7 fe04 	bl	8000288 <__aeabi_dsub>
 8008680:	460b      	mov	r3, r1
 8008682:	4602      	mov	r2, r0
 8008684:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008688:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800868c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800868e:	ea46 060a 	orr.w	r6, r6, sl
 8008692:	431e      	orrs	r6, r3
 8008694:	d06f      	beq.n	8008776 <_strtod_l+0xb86>
 8008696:	a30e      	add	r3, pc, #56	@ (adr r3, 80086d0 <_strtod_l+0xae0>)
 8008698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869c:	f7f8 fa1e 	bl	8000adc <__aeabi_dcmplt>
 80086a0:	2800      	cmp	r0, #0
 80086a2:	f47f accf 	bne.w	8008044 <_strtod_l+0x454>
 80086a6:	a30c      	add	r3, pc, #48	@ (adr r3, 80086d8 <_strtod_l+0xae8>)
 80086a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80086b0:	f7f8 fa32 	bl	8000b18 <__aeabi_dcmpgt>
 80086b4:	2800      	cmp	r0, #0
 80086b6:	d093      	beq.n	80085e0 <_strtod_l+0x9f0>
 80086b8:	e4c4      	b.n	8008044 <_strtod_l+0x454>
 80086ba:	bf00      	nop
 80086bc:	f3af 8000 	nop.w
 80086c0:	00000000 	.word	0x00000000
 80086c4:	bff00000 	.word	0xbff00000
 80086c8:	00000000 	.word	0x00000000
 80086cc:	3ff00000 	.word	0x3ff00000
 80086d0:	94a03595 	.word	0x94a03595
 80086d4:	3fdfffff 	.word	0x3fdfffff
 80086d8:	35afe535 	.word	0x35afe535
 80086dc:	3fe00000 	.word	0x3fe00000
 80086e0:	000fffff 	.word	0x000fffff
 80086e4:	7ff00000 	.word	0x7ff00000
 80086e8:	7fefffff 	.word	0x7fefffff
 80086ec:	3ff00000 	.word	0x3ff00000
 80086f0:	3fe00000 	.word	0x3fe00000
 80086f4:	7fe00000 	.word	0x7fe00000
 80086f8:	7c9fffff 	.word	0x7c9fffff
 80086fc:	9b08      	ldr	r3, [sp, #32]
 80086fe:	b323      	cbz	r3, 800874a <_strtod_l+0xb5a>
 8008700:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008704:	d821      	bhi.n	800874a <_strtod_l+0xb5a>
 8008706:	a328      	add	r3, pc, #160	@ (adr r3, 80087a8 <_strtod_l+0xbb8>)
 8008708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870c:	4630      	mov	r0, r6
 800870e:	4639      	mov	r1, r7
 8008710:	f7f8 f9ee 	bl	8000af0 <__aeabi_dcmple>
 8008714:	b1a0      	cbz	r0, 8008740 <_strtod_l+0xb50>
 8008716:	4639      	mov	r1, r7
 8008718:	4630      	mov	r0, r6
 800871a:	f7f8 fa45 	bl	8000ba8 <__aeabi_d2uiz>
 800871e:	2801      	cmp	r0, #1
 8008720:	bf38      	it	cc
 8008722:	2001      	movcc	r0, #1
 8008724:	f7f7 feee 	bl	8000504 <__aeabi_ui2d>
 8008728:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800872a:	4606      	mov	r6, r0
 800872c:	460f      	mov	r7, r1
 800872e:	b9fb      	cbnz	r3, 8008770 <_strtod_l+0xb80>
 8008730:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008734:	9014      	str	r0, [sp, #80]	@ 0x50
 8008736:	9315      	str	r3, [sp, #84]	@ 0x54
 8008738:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800873c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008740:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008742:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008746:	1b5b      	subs	r3, r3, r5
 8008748:	9311      	str	r3, [sp, #68]	@ 0x44
 800874a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800874e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008752:	f7ff f8f1 	bl	8007938 <__ulp>
 8008756:	4650      	mov	r0, sl
 8008758:	ec53 2b10 	vmov	r2, r3, d0
 800875c:	4659      	mov	r1, fp
 800875e:	f7f7 ff4b 	bl	80005f8 <__aeabi_dmul>
 8008762:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008766:	f7f7 fd91 	bl	800028c <__adddf3>
 800876a:	4682      	mov	sl, r0
 800876c:	468b      	mov	fp, r1
 800876e:	e770      	b.n	8008652 <_strtod_l+0xa62>
 8008770:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008774:	e7e0      	b.n	8008738 <_strtod_l+0xb48>
 8008776:	a30e      	add	r3, pc, #56	@ (adr r3, 80087b0 <_strtod_l+0xbc0>)
 8008778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800877c:	f7f8 f9ae 	bl	8000adc <__aeabi_dcmplt>
 8008780:	e798      	b.n	80086b4 <_strtod_l+0xac4>
 8008782:	2300      	movs	r3, #0
 8008784:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008786:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008788:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800878a:	6013      	str	r3, [r2, #0]
 800878c:	f7ff ba6d 	b.w	8007c6a <_strtod_l+0x7a>
 8008790:	2a65      	cmp	r2, #101	@ 0x65
 8008792:	f43f ab66 	beq.w	8007e62 <_strtod_l+0x272>
 8008796:	2a45      	cmp	r2, #69	@ 0x45
 8008798:	f43f ab63 	beq.w	8007e62 <_strtod_l+0x272>
 800879c:	2301      	movs	r3, #1
 800879e:	f7ff bb9e 	b.w	8007ede <_strtod_l+0x2ee>
 80087a2:	bf00      	nop
 80087a4:	f3af 8000 	nop.w
 80087a8:	ffc00000 	.word	0xffc00000
 80087ac:	41dfffff 	.word	0x41dfffff
 80087b0:	94a03595 	.word	0x94a03595
 80087b4:	3fcfffff 	.word	0x3fcfffff

080087b8 <_strtod_r>:
 80087b8:	4b01      	ldr	r3, [pc, #4]	@ (80087c0 <_strtod_r+0x8>)
 80087ba:	f7ff ba19 	b.w	8007bf0 <_strtod_l>
 80087be:	bf00      	nop
 80087c0:	20000078 	.word	0x20000078

080087c4 <_strtol_l.constprop.0>:
 80087c4:	2b24      	cmp	r3, #36	@ 0x24
 80087c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087ca:	4686      	mov	lr, r0
 80087cc:	4690      	mov	r8, r2
 80087ce:	d801      	bhi.n	80087d4 <_strtol_l.constprop.0+0x10>
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d106      	bne.n	80087e2 <_strtol_l.constprop.0+0x1e>
 80087d4:	f7fd fd9c 	bl	8006310 <__errno>
 80087d8:	2316      	movs	r3, #22
 80087da:	6003      	str	r3, [r0, #0]
 80087dc:	2000      	movs	r0, #0
 80087de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087e2:	4834      	ldr	r0, [pc, #208]	@ (80088b4 <_strtol_l.constprop.0+0xf0>)
 80087e4:	460d      	mov	r5, r1
 80087e6:	462a      	mov	r2, r5
 80087e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80087ec:	5d06      	ldrb	r6, [r0, r4]
 80087ee:	f016 0608 	ands.w	r6, r6, #8
 80087f2:	d1f8      	bne.n	80087e6 <_strtol_l.constprop.0+0x22>
 80087f4:	2c2d      	cmp	r4, #45	@ 0x2d
 80087f6:	d12d      	bne.n	8008854 <_strtol_l.constprop.0+0x90>
 80087f8:	782c      	ldrb	r4, [r5, #0]
 80087fa:	2601      	movs	r6, #1
 80087fc:	1c95      	adds	r5, r2, #2
 80087fe:	f033 0210 	bics.w	r2, r3, #16
 8008802:	d109      	bne.n	8008818 <_strtol_l.constprop.0+0x54>
 8008804:	2c30      	cmp	r4, #48	@ 0x30
 8008806:	d12a      	bne.n	800885e <_strtol_l.constprop.0+0x9a>
 8008808:	782a      	ldrb	r2, [r5, #0]
 800880a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800880e:	2a58      	cmp	r2, #88	@ 0x58
 8008810:	d125      	bne.n	800885e <_strtol_l.constprop.0+0x9a>
 8008812:	786c      	ldrb	r4, [r5, #1]
 8008814:	2310      	movs	r3, #16
 8008816:	3502      	adds	r5, #2
 8008818:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800881c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008820:	2200      	movs	r2, #0
 8008822:	fbbc f9f3 	udiv	r9, ip, r3
 8008826:	4610      	mov	r0, r2
 8008828:	fb03 ca19 	mls	sl, r3, r9, ip
 800882c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008830:	2f09      	cmp	r7, #9
 8008832:	d81b      	bhi.n	800886c <_strtol_l.constprop.0+0xa8>
 8008834:	463c      	mov	r4, r7
 8008836:	42a3      	cmp	r3, r4
 8008838:	dd27      	ble.n	800888a <_strtol_l.constprop.0+0xc6>
 800883a:	1c57      	adds	r7, r2, #1
 800883c:	d007      	beq.n	800884e <_strtol_l.constprop.0+0x8a>
 800883e:	4581      	cmp	r9, r0
 8008840:	d320      	bcc.n	8008884 <_strtol_l.constprop.0+0xc0>
 8008842:	d101      	bne.n	8008848 <_strtol_l.constprop.0+0x84>
 8008844:	45a2      	cmp	sl, r4
 8008846:	db1d      	blt.n	8008884 <_strtol_l.constprop.0+0xc0>
 8008848:	fb00 4003 	mla	r0, r0, r3, r4
 800884c:	2201      	movs	r2, #1
 800884e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008852:	e7eb      	b.n	800882c <_strtol_l.constprop.0+0x68>
 8008854:	2c2b      	cmp	r4, #43	@ 0x2b
 8008856:	bf04      	itt	eq
 8008858:	782c      	ldrbeq	r4, [r5, #0]
 800885a:	1c95      	addeq	r5, r2, #2
 800885c:	e7cf      	b.n	80087fe <_strtol_l.constprop.0+0x3a>
 800885e:	2b00      	cmp	r3, #0
 8008860:	d1da      	bne.n	8008818 <_strtol_l.constprop.0+0x54>
 8008862:	2c30      	cmp	r4, #48	@ 0x30
 8008864:	bf0c      	ite	eq
 8008866:	2308      	moveq	r3, #8
 8008868:	230a      	movne	r3, #10
 800886a:	e7d5      	b.n	8008818 <_strtol_l.constprop.0+0x54>
 800886c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008870:	2f19      	cmp	r7, #25
 8008872:	d801      	bhi.n	8008878 <_strtol_l.constprop.0+0xb4>
 8008874:	3c37      	subs	r4, #55	@ 0x37
 8008876:	e7de      	b.n	8008836 <_strtol_l.constprop.0+0x72>
 8008878:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800887c:	2f19      	cmp	r7, #25
 800887e:	d804      	bhi.n	800888a <_strtol_l.constprop.0+0xc6>
 8008880:	3c57      	subs	r4, #87	@ 0x57
 8008882:	e7d8      	b.n	8008836 <_strtol_l.constprop.0+0x72>
 8008884:	f04f 32ff 	mov.w	r2, #4294967295
 8008888:	e7e1      	b.n	800884e <_strtol_l.constprop.0+0x8a>
 800888a:	1c53      	adds	r3, r2, #1
 800888c:	d108      	bne.n	80088a0 <_strtol_l.constprop.0+0xdc>
 800888e:	2322      	movs	r3, #34	@ 0x22
 8008890:	f8ce 3000 	str.w	r3, [lr]
 8008894:	4660      	mov	r0, ip
 8008896:	f1b8 0f00 	cmp.w	r8, #0
 800889a:	d0a0      	beq.n	80087de <_strtol_l.constprop.0+0x1a>
 800889c:	1e69      	subs	r1, r5, #1
 800889e:	e006      	b.n	80088ae <_strtol_l.constprop.0+0xea>
 80088a0:	b106      	cbz	r6, 80088a4 <_strtol_l.constprop.0+0xe0>
 80088a2:	4240      	negs	r0, r0
 80088a4:	f1b8 0f00 	cmp.w	r8, #0
 80088a8:	d099      	beq.n	80087de <_strtol_l.constprop.0+0x1a>
 80088aa:	2a00      	cmp	r2, #0
 80088ac:	d1f6      	bne.n	800889c <_strtol_l.constprop.0+0xd8>
 80088ae:	f8c8 1000 	str.w	r1, [r8]
 80088b2:	e794      	b.n	80087de <_strtol_l.constprop.0+0x1a>
 80088b4:	08009d99 	.word	0x08009d99

080088b8 <_strtol_r>:
 80088b8:	f7ff bf84 	b.w	80087c4 <_strtol_l.constprop.0>

080088bc <__ssputs_r>:
 80088bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088c0:	688e      	ldr	r6, [r1, #8]
 80088c2:	461f      	mov	r7, r3
 80088c4:	42be      	cmp	r6, r7
 80088c6:	680b      	ldr	r3, [r1, #0]
 80088c8:	4682      	mov	sl, r0
 80088ca:	460c      	mov	r4, r1
 80088cc:	4690      	mov	r8, r2
 80088ce:	d82d      	bhi.n	800892c <__ssputs_r+0x70>
 80088d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80088d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80088d8:	d026      	beq.n	8008928 <__ssputs_r+0x6c>
 80088da:	6965      	ldr	r5, [r4, #20]
 80088dc:	6909      	ldr	r1, [r1, #16]
 80088de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80088e2:	eba3 0901 	sub.w	r9, r3, r1
 80088e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80088ea:	1c7b      	adds	r3, r7, #1
 80088ec:	444b      	add	r3, r9
 80088ee:	106d      	asrs	r5, r5, #1
 80088f0:	429d      	cmp	r5, r3
 80088f2:	bf38      	it	cc
 80088f4:	461d      	movcc	r5, r3
 80088f6:	0553      	lsls	r3, r2, #21
 80088f8:	d527      	bpl.n	800894a <__ssputs_r+0x8e>
 80088fa:	4629      	mov	r1, r5
 80088fc:	f7fe fc1c 	bl	8007138 <_malloc_r>
 8008900:	4606      	mov	r6, r0
 8008902:	b360      	cbz	r0, 800895e <__ssputs_r+0xa2>
 8008904:	6921      	ldr	r1, [r4, #16]
 8008906:	464a      	mov	r2, r9
 8008908:	f000 fa2a 	bl	8008d60 <memcpy>
 800890c:	89a3      	ldrh	r3, [r4, #12]
 800890e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008912:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008916:	81a3      	strh	r3, [r4, #12]
 8008918:	6126      	str	r6, [r4, #16]
 800891a:	6165      	str	r5, [r4, #20]
 800891c:	444e      	add	r6, r9
 800891e:	eba5 0509 	sub.w	r5, r5, r9
 8008922:	6026      	str	r6, [r4, #0]
 8008924:	60a5      	str	r5, [r4, #8]
 8008926:	463e      	mov	r6, r7
 8008928:	42be      	cmp	r6, r7
 800892a:	d900      	bls.n	800892e <__ssputs_r+0x72>
 800892c:	463e      	mov	r6, r7
 800892e:	6820      	ldr	r0, [r4, #0]
 8008930:	4632      	mov	r2, r6
 8008932:	4641      	mov	r1, r8
 8008934:	f000 f9d8 	bl	8008ce8 <memmove>
 8008938:	68a3      	ldr	r3, [r4, #8]
 800893a:	1b9b      	subs	r3, r3, r6
 800893c:	60a3      	str	r3, [r4, #8]
 800893e:	6823      	ldr	r3, [r4, #0]
 8008940:	4433      	add	r3, r6
 8008942:	6023      	str	r3, [r4, #0]
 8008944:	2000      	movs	r0, #0
 8008946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800894a:	462a      	mov	r2, r5
 800894c:	f000 fd85 	bl	800945a <_realloc_r>
 8008950:	4606      	mov	r6, r0
 8008952:	2800      	cmp	r0, #0
 8008954:	d1e0      	bne.n	8008918 <__ssputs_r+0x5c>
 8008956:	6921      	ldr	r1, [r4, #16]
 8008958:	4650      	mov	r0, sl
 800895a:	f7fe fb79 	bl	8007050 <_free_r>
 800895e:	230c      	movs	r3, #12
 8008960:	f8ca 3000 	str.w	r3, [sl]
 8008964:	89a3      	ldrh	r3, [r4, #12]
 8008966:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800896a:	81a3      	strh	r3, [r4, #12]
 800896c:	f04f 30ff 	mov.w	r0, #4294967295
 8008970:	e7e9      	b.n	8008946 <__ssputs_r+0x8a>
	...

08008974 <_svfiprintf_r>:
 8008974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008978:	4698      	mov	r8, r3
 800897a:	898b      	ldrh	r3, [r1, #12]
 800897c:	061b      	lsls	r3, r3, #24
 800897e:	b09d      	sub	sp, #116	@ 0x74
 8008980:	4607      	mov	r7, r0
 8008982:	460d      	mov	r5, r1
 8008984:	4614      	mov	r4, r2
 8008986:	d510      	bpl.n	80089aa <_svfiprintf_r+0x36>
 8008988:	690b      	ldr	r3, [r1, #16]
 800898a:	b973      	cbnz	r3, 80089aa <_svfiprintf_r+0x36>
 800898c:	2140      	movs	r1, #64	@ 0x40
 800898e:	f7fe fbd3 	bl	8007138 <_malloc_r>
 8008992:	6028      	str	r0, [r5, #0]
 8008994:	6128      	str	r0, [r5, #16]
 8008996:	b930      	cbnz	r0, 80089a6 <_svfiprintf_r+0x32>
 8008998:	230c      	movs	r3, #12
 800899a:	603b      	str	r3, [r7, #0]
 800899c:	f04f 30ff 	mov.w	r0, #4294967295
 80089a0:	b01d      	add	sp, #116	@ 0x74
 80089a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089a6:	2340      	movs	r3, #64	@ 0x40
 80089a8:	616b      	str	r3, [r5, #20]
 80089aa:	2300      	movs	r3, #0
 80089ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80089ae:	2320      	movs	r3, #32
 80089b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80089b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80089b8:	2330      	movs	r3, #48	@ 0x30
 80089ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008b58 <_svfiprintf_r+0x1e4>
 80089be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80089c2:	f04f 0901 	mov.w	r9, #1
 80089c6:	4623      	mov	r3, r4
 80089c8:	469a      	mov	sl, r3
 80089ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089ce:	b10a      	cbz	r2, 80089d4 <_svfiprintf_r+0x60>
 80089d0:	2a25      	cmp	r2, #37	@ 0x25
 80089d2:	d1f9      	bne.n	80089c8 <_svfiprintf_r+0x54>
 80089d4:	ebba 0b04 	subs.w	fp, sl, r4
 80089d8:	d00b      	beq.n	80089f2 <_svfiprintf_r+0x7e>
 80089da:	465b      	mov	r3, fp
 80089dc:	4622      	mov	r2, r4
 80089de:	4629      	mov	r1, r5
 80089e0:	4638      	mov	r0, r7
 80089e2:	f7ff ff6b 	bl	80088bc <__ssputs_r>
 80089e6:	3001      	adds	r0, #1
 80089e8:	f000 80a7 	beq.w	8008b3a <_svfiprintf_r+0x1c6>
 80089ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80089ee:	445a      	add	r2, fp
 80089f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80089f2:	f89a 3000 	ldrb.w	r3, [sl]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	f000 809f 	beq.w	8008b3a <_svfiprintf_r+0x1c6>
 80089fc:	2300      	movs	r3, #0
 80089fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008a02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a06:	f10a 0a01 	add.w	sl, sl, #1
 8008a0a:	9304      	str	r3, [sp, #16]
 8008a0c:	9307      	str	r3, [sp, #28]
 8008a0e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008a12:	931a      	str	r3, [sp, #104]	@ 0x68
 8008a14:	4654      	mov	r4, sl
 8008a16:	2205      	movs	r2, #5
 8008a18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a1c:	484e      	ldr	r0, [pc, #312]	@ (8008b58 <_svfiprintf_r+0x1e4>)
 8008a1e:	f7f7 fbd7 	bl	80001d0 <memchr>
 8008a22:	9a04      	ldr	r2, [sp, #16]
 8008a24:	b9d8      	cbnz	r0, 8008a5e <_svfiprintf_r+0xea>
 8008a26:	06d0      	lsls	r0, r2, #27
 8008a28:	bf44      	itt	mi
 8008a2a:	2320      	movmi	r3, #32
 8008a2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a30:	0711      	lsls	r1, r2, #28
 8008a32:	bf44      	itt	mi
 8008a34:	232b      	movmi	r3, #43	@ 0x2b
 8008a36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a3a:	f89a 3000 	ldrb.w	r3, [sl]
 8008a3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a40:	d015      	beq.n	8008a6e <_svfiprintf_r+0xfa>
 8008a42:	9a07      	ldr	r2, [sp, #28]
 8008a44:	4654      	mov	r4, sl
 8008a46:	2000      	movs	r0, #0
 8008a48:	f04f 0c0a 	mov.w	ip, #10
 8008a4c:	4621      	mov	r1, r4
 8008a4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a52:	3b30      	subs	r3, #48	@ 0x30
 8008a54:	2b09      	cmp	r3, #9
 8008a56:	d94b      	bls.n	8008af0 <_svfiprintf_r+0x17c>
 8008a58:	b1b0      	cbz	r0, 8008a88 <_svfiprintf_r+0x114>
 8008a5a:	9207      	str	r2, [sp, #28]
 8008a5c:	e014      	b.n	8008a88 <_svfiprintf_r+0x114>
 8008a5e:	eba0 0308 	sub.w	r3, r0, r8
 8008a62:	fa09 f303 	lsl.w	r3, r9, r3
 8008a66:	4313      	orrs	r3, r2
 8008a68:	9304      	str	r3, [sp, #16]
 8008a6a:	46a2      	mov	sl, r4
 8008a6c:	e7d2      	b.n	8008a14 <_svfiprintf_r+0xa0>
 8008a6e:	9b03      	ldr	r3, [sp, #12]
 8008a70:	1d19      	adds	r1, r3, #4
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	9103      	str	r1, [sp, #12]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	bfbb      	ittet	lt
 8008a7a:	425b      	neglt	r3, r3
 8008a7c:	f042 0202 	orrlt.w	r2, r2, #2
 8008a80:	9307      	strge	r3, [sp, #28]
 8008a82:	9307      	strlt	r3, [sp, #28]
 8008a84:	bfb8      	it	lt
 8008a86:	9204      	strlt	r2, [sp, #16]
 8008a88:	7823      	ldrb	r3, [r4, #0]
 8008a8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a8c:	d10a      	bne.n	8008aa4 <_svfiprintf_r+0x130>
 8008a8e:	7863      	ldrb	r3, [r4, #1]
 8008a90:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a92:	d132      	bne.n	8008afa <_svfiprintf_r+0x186>
 8008a94:	9b03      	ldr	r3, [sp, #12]
 8008a96:	1d1a      	adds	r2, r3, #4
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	9203      	str	r2, [sp, #12]
 8008a9c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008aa0:	3402      	adds	r4, #2
 8008aa2:	9305      	str	r3, [sp, #20]
 8008aa4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008b68 <_svfiprintf_r+0x1f4>
 8008aa8:	7821      	ldrb	r1, [r4, #0]
 8008aaa:	2203      	movs	r2, #3
 8008aac:	4650      	mov	r0, sl
 8008aae:	f7f7 fb8f 	bl	80001d0 <memchr>
 8008ab2:	b138      	cbz	r0, 8008ac4 <_svfiprintf_r+0x150>
 8008ab4:	9b04      	ldr	r3, [sp, #16]
 8008ab6:	eba0 000a 	sub.w	r0, r0, sl
 8008aba:	2240      	movs	r2, #64	@ 0x40
 8008abc:	4082      	lsls	r2, r0
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	3401      	adds	r4, #1
 8008ac2:	9304      	str	r3, [sp, #16]
 8008ac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ac8:	4824      	ldr	r0, [pc, #144]	@ (8008b5c <_svfiprintf_r+0x1e8>)
 8008aca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008ace:	2206      	movs	r2, #6
 8008ad0:	f7f7 fb7e 	bl	80001d0 <memchr>
 8008ad4:	2800      	cmp	r0, #0
 8008ad6:	d036      	beq.n	8008b46 <_svfiprintf_r+0x1d2>
 8008ad8:	4b21      	ldr	r3, [pc, #132]	@ (8008b60 <_svfiprintf_r+0x1ec>)
 8008ada:	bb1b      	cbnz	r3, 8008b24 <_svfiprintf_r+0x1b0>
 8008adc:	9b03      	ldr	r3, [sp, #12]
 8008ade:	3307      	adds	r3, #7
 8008ae0:	f023 0307 	bic.w	r3, r3, #7
 8008ae4:	3308      	adds	r3, #8
 8008ae6:	9303      	str	r3, [sp, #12]
 8008ae8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008aea:	4433      	add	r3, r6
 8008aec:	9309      	str	r3, [sp, #36]	@ 0x24
 8008aee:	e76a      	b.n	80089c6 <_svfiprintf_r+0x52>
 8008af0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008af4:	460c      	mov	r4, r1
 8008af6:	2001      	movs	r0, #1
 8008af8:	e7a8      	b.n	8008a4c <_svfiprintf_r+0xd8>
 8008afa:	2300      	movs	r3, #0
 8008afc:	3401      	adds	r4, #1
 8008afe:	9305      	str	r3, [sp, #20]
 8008b00:	4619      	mov	r1, r3
 8008b02:	f04f 0c0a 	mov.w	ip, #10
 8008b06:	4620      	mov	r0, r4
 8008b08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b0c:	3a30      	subs	r2, #48	@ 0x30
 8008b0e:	2a09      	cmp	r2, #9
 8008b10:	d903      	bls.n	8008b1a <_svfiprintf_r+0x1a6>
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d0c6      	beq.n	8008aa4 <_svfiprintf_r+0x130>
 8008b16:	9105      	str	r1, [sp, #20]
 8008b18:	e7c4      	b.n	8008aa4 <_svfiprintf_r+0x130>
 8008b1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b1e:	4604      	mov	r4, r0
 8008b20:	2301      	movs	r3, #1
 8008b22:	e7f0      	b.n	8008b06 <_svfiprintf_r+0x192>
 8008b24:	ab03      	add	r3, sp, #12
 8008b26:	9300      	str	r3, [sp, #0]
 8008b28:	462a      	mov	r2, r5
 8008b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8008b64 <_svfiprintf_r+0x1f0>)
 8008b2c:	a904      	add	r1, sp, #16
 8008b2e:	4638      	mov	r0, r7
 8008b30:	f7fc fcaa 	bl	8005488 <_printf_float>
 8008b34:	1c42      	adds	r2, r0, #1
 8008b36:	4606      	mov	r6, r0
 8008b38:	d1d6      	bne.n	8008ae8 <_svfiprintf_r+0x174>
 8008b3a:	89ab      	ldrh	r3, [r5, #12]
 8008b3c:	065b      	lsls	r3, r3, #25
 8008b3e:	f53f af2d 	bmi.w	800899c <_svfiprintf_r+0x28>
 8008b42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b44:	e72c      	b.n	80089a0 <_svfiprintf_r+0x2c>
 8008b46:	ab03      	add	r3, sp, #12
 8008b48:	9300      	str	r3, [sp, #0]
 8008b4a:	462a      	mov	r2, r5
 8008b4c:	4b05      	ldr	r3, [pc, #20]	@ (8008b64 <_svfiprintf_r+0x1f0>)
 8008b4e:	a904      	add	r1, sp, #16
 8008b50:	4638      	mov	r0, r7
 8008b52:	f7fc ff31 	bl	80059b8 <_printf_i>
 8008b56:	e7ed      	b.n	8008b34 <_svfiprintf_r+0x1c0>
 8008b58:	08009e99 	.word	0x08009e99
 8008b5c:	08009ea3 	.word	0x08009ea3
 8008b60:	08005489 	.word	0x08005489
 8008b64:	080088bd 	.word	0x080088bd
 8008b68:	08009e9f 	.word	0x08009e9f

08008b6c <__sflush_r>:
 8008b6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b74:	0716      	lsls	r6, r2, #28
 8008b76:	4605      	mov	r5, r0
 8008b78:	460c      	mov	r4, r1
 8008b7a:	d454      	bmi.n	8008c26 <__sflush_r+0xba>
 8008b7c:	684b      	ldr	r3, [r1, #4]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	dc02      	bgt.n	8008b88 <__sflush_r+0x1c>
 8008b82:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	dd48      	ble.n	8008c1a <__sflush_r+0xae>
 8008b88:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008b8a:	2e00      	cmp	r6, #0
 8008b8c:	d045      	beq.n	8008c1a <__sflush_r+0xae>
 8008b8e:	2300      	movs	r3, #0
 8008b90:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008b94:	682f      	ldr	r7, [r5, #0]
 8008b96:	6a21      	ldr	r1, [r4, #32]
 8008b98:	602b      	str	r3, [r5, #0]
 8008b9a:	d030      	beq.n	8008bfe <__sflush_r+0x92>
 8008b9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008b9e:	89a3      	ldrh	r3, [r4, #12]
 8008ba0:	0759      	lsls	r1, r3, #29
 8008ba2:	d505      	bpl.n	8008bb0 <__sflush_r+0x44>
 8008ba4:	6863      	ldr	r3, [r4, #4]
 8008ba6:	1ad2      	subs	r2, r2, r3
 8008ba8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008baa:	b10b      	cbz	r3, 8008bb0 <__sflush_r+0x44>
 8008bac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008bae:	1ad2      	subs	r2, r2, r3
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008bb4:	6a21      	ldr	r1, [r4, #32]
 8008bb6:	4628      	mov	r0, r5
 8008bb8:	47b0      	blx	r6
 8008bba:	1c43      	adds	r3, r0, #1
 8008bbc:	89a3      	ldrh	r3, [r4, #12]
 8008bbe:	d106      	bne.n	8008bce <__sflush_r+0x62>
 8008bc0:	6829      	ldr	r1, [r5, #0]
 8008bc2:	291d      	cmp	r1, #29
 8008bc4:	d82b      	bhi.n	8008c1e <__sflush_r+0xb2>
 8008bc6:	4a2a      	ldr	r2, [pc, #168]	@ (8008c70 <__sflush_r+0x104>)
 8008bc8:	410a      	asrs	r2, r1
 8008bca:	07d6      	lsls	r6, r2, #31
 8008bcc:	d427      	bmi.n	8008c1e <__sflush_r+0xb2>
 8008bce:	2200      	movs	r2, #0
 8008bd0:	6062      	str	r2, [r4, #4]
 8008bd2:	04d9      	lsls	r1, r3, #19
 8008bd4:	6922      	ldr	r2, [r4, #16]
 8008bd6:	6022      	str	r2, [r4, #0]
 8008bd8:	d504      	bpl.n	8008be4 <__sflush_r+0x78>
 8008bda:	1c42      	adds	r2, r0, #1
 8008bdc:	d101      	bne.n	8008be2 <__sflush_r+0x76>
 8008bde:	682b      	ldr	r3, [r5, #0]
 8008be0:	b903      	cbnz	r3, 8008be4 <__sflush_r+0x78>
 8008be2:	6560      	str	r0, [r4, #84]	@ 0x54
 8008be4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008be6:	602f      	str	r7, [r5, #0]
 8008be8:	b1b9      	cbz	r1, 8008c1a <__sflush_r+0xae>
 8008bea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008bee:	4299      	cmp	r1, r3
 8008bf0:	d002      	beq.n	8008bf8 <__sflush_r+0x8c>
 8008bf2:	4628      	mov	r0, r5
 8008bf4:	f7fe fa2c 	bl	8007050 <_free_r>
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	6363      	str	r3, [r4, #52]	@ 0x34
 8008bfc:	e00d      	b.n	8008c1a <__sflush_r+0xae>
 8008bfe:	2301      	movs	r3, #1
 8008c00:	4628      	mov	r0, r5
 8008c02:	47b0      	blx	r6
 8008c04:	4602      	mov	r2, r0
 8008c06:	1c50      	adds	r0, r2, #1
 8008c08:	d1c9      	bne.n	8008b9e <__sflush_r+0x32>
 8008c0a:	682b      	ldr	r3, [r5, #0]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d0c6      	beq.n	8008b9e <__sflush_r+0x32>
 8008c10:	2b1d      	cmp	r3, #29
 8008c12:	d001      	beq.n	8008c18 <__sflush_r+0xac>
 8008c14:	2b16      	cmp	r3, #22
 8008c16:	d11e      	bne.n	8008c56 <__sflush_r+0xea>
 8008c18:	602f      	str	r7, [r5, #0]
 8008c1a:	2000      	movs	r0, #0
 8008c1c:	e022      	b.n	8008c64 <__sflush_r+0xf8>
 8008c1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c22:	b21b      	sxth	r3, r3
 8008c24:	e01b      	b.n	8008c5e <__sflush_r+0xf2>
 8008c26:	690f      	ldr	r7, [r1, #16]
 8008c28:	2f00      	cmp	r7, #0
 8008c2a:	d0f6      	beq.n	8008c1a <__sflush_r+0xae>
 8008c2c:	0793      	lsls	r3, r2, #30
 8008c2e:	680e      	ldr	r6, [r1, #0]
 8008c30:	bf08      	it	eq
 8008c32:	694b      	ldreq	r3, [r1, #20]
 8008c34:	600f      	str	r7, [r1, #0]
 8008c36:	bf18      	it	ne
 8008c38:	2300      	movne	r3, #0
 8008c3a:	eba6 0807 	sub.w	r8, r6, r7
 8008c3e:	608b      	str	r3, [r1, #8]
 8008c40:	f1b8 0f00 	cmp.w	r8, #0
 8008c44:	dde9      	ble.n	8008c1a <__sflush_r+0xae>
 8008c46:	6a21      	ldr	r1, [r4, #32]
 8008c48:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008c4a:	4643      	mov	r3, r8
 8008c4c:	463a      	mov	r2, r7
 8008c4e:	4628      	mov	r0, r5
 8008c50:	47b0      	blx	r6
 8008c52:	2800      	cmp	r0, #0
 8008c54:	dc08      	bgt.n	8008c68 <__sflush_r+0xfc>
 8008c56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c5e:	81a3      	strh	r3, [r4, #12]
 8008c60:	f04f 30ff 	mov.w	r0, #4294967295
 8008c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c68:	4407      	add	r7, r0
 8008c6a:	eba8 0800 	sub.w	r8, r8, r0
 8008c6e:	e7e7      	b.n	8008c40 <__sflush_r+0xd4>
 8008c70:	dfbffffe 	.word	0xdfbffffe

08008c74 <_fflush_r>:
 8008c74:	b538      	push	{r3, r4, r5, lr}
 8008c76:	690b      	ldr	r3, [r1, #16]
 8008c78:	4605      	mov	r5, r0
 8008c7a:	460c      	mov	r4, r1
 8008c7c:	b913      	cbnz	r3, 8008c84 <_fflush_r+0x10>
 8008c7e:	2500      	movs	r5, #0
 8008c80:	4628      	mov	r0, r5
 8008c82:	bd38      	pop	{r3, r4, r5, pc}
 8008c84:	b118      	cbz	r0, 8008c8e <_fflush_r+0x1a>
 8008c86:	6a03      	ldr	r3, [r0, #32]
 8008c88:	b90b      	cbnz	r3, 8008c8e <_fflush_r+0x1a>
 8008c8a:	f7fd fa55 	bl	8006138 <__sinit>
 8008c8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d0f3      	beq.n	8008c7e <_fflush_r+0xa>
 8008c96:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008c98:	07d0      	lsls	r0, r2, #31
 8008c9a:	d404      	bmi.n	8008ca6 <_fflush_r+0x32>
 8008c9c:	0599      	lsls	r1, r3, #22
 8008c9e:	d402      	bmi.n	8008ca6 <_fflush_r+0x32>
 8008ca0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ca2:	f7fd fb60 	bl	8006366 <__retarget_lock_acquire_recursive>
 8008ca6:	4628      	mov	r0, r5
 8008ca8:	4621      	mov	r1, r4
 8008caa:	f7ff ff5f 	bl	8008b6c <__sflush_r>
 8008cae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008cb0:	07da      	lsls	r2, r3, #31
 8008cb2:	4605      	mov	r5, r0
 8008cb4:	d4e4      	bmi.n	8008c80 <_fflush_r+0xc>
 8008cb6:	89a3      	ldrh	r3, [r4, #12]
 8008cb8:	059b      	lsls	r3, r3, #22
 8008cba:	d4e1      	bmi.n	8008c80 <_fflush_r+0xc>
 8008cbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008cbe:	f7fd fb53 	bl	8006368 <__retarget_lock_release_recursive>
 8008cc2:	e7dd      	b.n	8008c80 <_fflush_r+0xc>

08008cc4 <fiprintf>:
 8008cc4:	b40e      	push	{r1, r2, r3}
 8008cc6:	b503      	push	{r0, r1, lr}
 8008cc8:	4601      	mov	r1, r0
 8008cca:	ab03      	add	r3, sp, #12
 8008ccc:	4805      	ldr	r0, [pc, #20]	@ (8008ce4 <fiprintf+0x20>)
 8008cce:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cd2:	6800      	ldr	r0, [r0, #0]
 8008cd4:	9301      	str	r3, [sp, #4]
 8008cd6:	f000 fc25 	bl	8009524 <_vfiprintf_r>
 8008cda:	b002      	add	sp, #8
 8008cdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ce0:	b003      	add	sp, #12
 8008ce2:	4770      	bx	lr
 8008ce4:	20000028 	.word	0x20000028

08008ce8 <memmove>:
 8008ce8:	4288      	cmp	r0, r1
 8008cea:	b510      	push	{r4, lr}
 8008cec:	eb01 0402 	add.w	r4, r1, r2
 8008cf0:	d902      	bls.n	8008cf8 <memmove+0x10>
 8008cf2:	4284      	cmp	r4, r0
 8008cf4:	4623      	mov	r3, r4
 8008cf6:	d807      	bhi.n	8008d08 <memmove+0x20>
 8008cf8:	1e43      	subs	r3, r0, #1
 8008cfa:	42a1      	cmp	r1, r4
 8008cfc:	d008      	beq.n	8008d10 <memmove+0x28>
 8008cfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d06:	e7f8      	b.n	8008cfa <memmove+0x12>
 8008d08:	4402      	add	r2, r0
 8008d0a:	4601      	mov	r1, r0
 8008d0c:	428a      	cmp	r2, r1
 8008d0e:	d100      	bne.n	8008d12 <memmove+0x2a>
 8008d10:	bd10      	pop	{r4, pc}
 8008d12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d1a:	e7f7      	b.n	8008d0c <memmove+0x24>

08008d1c <strncmp>:
 8008d1c:	b510      	push	{r4, lr}
 8008d1e:	b16a      	cbz	r2, 8008d3c <strncmp+0x20>
 8008d20:	3901      	subs	r1, #1
 8008d22:	1884      	adds	r4, r0, r2
 8008d24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d28:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d103      	bne.n	8008d38 <strncmp+0x1c>
 8008d30:	42a0      	cmp	r0, r4
 8008d32:	d001      	beq.n	8008d38 <strncmp+0x1c>
 8008d34:	2a00      	cmp	r2, #0
 8008d36:	d1f5      	bne.n	8008d24 <strncmp+0x8>
 8008d38:	1ad0      	subs	r0, r2, r3
 8008d3a:	bd10      	pop	{r4, pc}
 8008d3c:	4610      	mov	r0, r2
 8008d3e:	e7fc      	b.n	8008d3a <strncmp+0x1e>

08008d40 <_sbrk_r>:
 8008d40:	b538      	push	{r3, r4, r5, lr}
 8008d42:	4d06      	ldr	r5, [pc, #24]	@ (8008d5c <_sbrk_r+0x1c>)
 8008d44:	2300      	movs	r3, #0
 8008d46:	4604      	mov	r4, r0
 8008d48:	4608      	mov	r0, r1
 8008d4a:	602b      	str	r3, [r5, #0]
 8008d4c:	f7f8 fdc8 	bl	80018e0 <_sbrk>
 8008d50:	1c43      	adds	r3, r0, #1
 8008d52:	d102      	bne.n	8008d5a <_sbrk_r+0x1a>
 8008d54:	682b      	ldr	r3, [r5, #0]
 8008d56:	b103      	cbz	r3, 8008d5a <_sbrk_r+0x1a>
 8008d58:	6023      	str	r3, [r4, #0]
 8008d5a:	bd38      	pop	{r3, r4, r5, pc}
 8008d5c:	200004d4 	.word	0x200004d4

08008d60 <memcpy>:
 8008d60:	440a      	add	r2, r1
 8008d62:	4291      	cmp	r1, r2
 8008d64:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d68:	d100      	bne.n	8008d6c <memcpy+0xc>
 8008d6a:	4770      	bx	lr
 8008d6c:	b510      	push	{r4, lr}
 8008d6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d76:	4291      	cmp	r1, r2
 8008d78:	d1f9      	bne.n	8008d6e <memcpy+0xe>
 8008d7a:	bd10      	pop	{r4, pc}
 8008d7c:	0000      	movs	r0, r0
	...

08008d80 <nan>:
 8008d80:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008d88 <nan+0x8>
 8008d84:	4770      	bx	lr
 8008d86:	bf00      	nop
 8008d88:	00000000 	.word	0x00000000
 8008d8c:	7ff80000 	.word	0x7ff80000

08008d90 <abort>:
 8008d90:	b508      	push	{r3, lr}
 8008d92:	2006      	movs	r0, #6
 8008d94:	f000 fd9a 	bl	80098cc <raise>
 8008d98:	2001      	movs	r0, #1
 8008d9a:	f7f8 fd29 	bl	80017f0 <_exit>

08008d9e <_calloc_r>:
 8008d9e:	b570      	push	{r4, r5, r6, lr}
 8008da0:	fba1 5402 	umull	r5, r4, r1, r2
 8008da4:	b93c      	cbnz	r4, 8008db6 <_calloc_r+0x18>
 8008da6:	4629      	mov	r1, r5
 8008da8:	f7fe f9c6 	bl	8007138 <_malloc_r>
 8008dac:	4606      	mov	r6, r0
 8008dae:	b928      	cbnz	r0, 8008dbc <_calloc_r+0x1e>
 8008db0:	2600      	movs	r6, #0
 8008db2:	4630      	mov	r0, r6
 8008db4:	bd70      	pop	{r4, r5, r6, pc}
 8008db6:	220c      	movs	r2, #12
 8008db8:	6002      	str	r2, [r0, #0]
 8008dba:	e7f9      	b.n	8008db0 <_calloc_r+0x12>
 8008dbc:	462a      	mov	r2, r5
 8008dbe:	4621      	mov	r1, r4
 8008dc0:	f7fd fa53 	bl	800626a <memset>
 8008dc4:	e7f5      	b.n	8008db2 <_calloc_r+0x14>

08008dc6 <rshift>:
 8008dc6:	6903      	ldr	r3, [r0, #16]
 8008dc8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008dcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008dd0:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008dd4:	f100 0414 	add.w	r4, r0, #20
 8008dd8:	dd45      	ble.n	8008e66 <rshift+0xa0>
 8008dda:	f011 011f 	ands.w	r1, r1, #31
 8008dde:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008de2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008de6:	d10c      	bne.n	8008e02 <rshift+0x3c>
 8008de8:	f100 0710 	add.w	r7, r0, #16
 8008dec:	4629      	mov	r1, r5
 8008dee:	42b1      	cmp	r1, r6
 8008df0:	d334      	bcc.n	8008e5c <rshift+0x96>
 8008df2:	1a9b      	subs	r3, r3, r2
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	1eea      	subs	r2, r5, #3
 8008df8:	4296      	cmp	r6, r2
 8008dfa:	bf38      	it	cc
 8008dfc:	2300      	movcc	r3, #0
 8008dfe:	4423      	add	r3, r4
 8008e00:	e015      	b.n	8008e2e <rshift+0x68>
 8008e02:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008e06:	f1c1 0820 	rsb	r8, r1, #32
 8008e0a:	40cf      	lsrs	r7, r1
 8008e0c:	f105 0e04 	add.w	lr, r5, #4
 8008e10:	46a1      	mov	r9, r4
 8008e12:	4576      	cmp	r6, lr
 8008e14:	46f4      	mov	ip, lr
 8008e16:	d815      	bhi.n	8008e44 <rshift+0x7e>
 8008e18:	1a9a      	subs	r2, r3, r2
 8008e1a:	0092      	lsls	r2, r2, #2
 8008e1c:	3a04      	subs	r2, #4
 8008e1e:	3501      	adds	r5, #1
 8008e20:	42ae      	cmp	r6, r5
 8008e22:	bf38      	it	cc
 8008e24:	2200      	movcc	r2, #0
 8008e26:	18a3      	adds	r3, r4, r2
 8008e28:	50a7      	str	r7, [r4, r2]
 8008e2a:	b107      	cbz	r7, 8008e2e <rshift+0x68>
 8008e2c:	3304      	adds	r3, #4
 8008e2e:	1b1a      	subs	r2, r3, r4
 8008e30:	42a3      	cmp	r3, r4
 8008e32:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008e36:	bf08      	it	eq
 8008e38:	2300      	moveq	r3, #0
 8008e3a:	6102      	str	r2, [r0, #16]
 8008e3c:	bf08      	it	eq
 8008e3e:	6143      	streq	r3, [r0, #20]
 8008e40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e44:	f8dc c000 	ldr.w	ip, [ip]
 8008e48:	fa0c fc08 	lsl.w	ip, ip, r8
 8008e4c:	ea4c 0707 	orr.w	r7, ip, r7
 8008e50:	f849 7b04 	str.w	r7, [r9], #4
 8008e54:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008e58:	40cf      	lsrs	r7, r1
 8008e5a:	e7da      	b.n	8008e12 <rshift+0x4c>
 8008e5c:	f851 cb04 	ldr.w	ip, [r1], #4
 8008e60:	f847 cf04 	str.w	ip, [r7, #4]!
 8008e64:	e7c3      	b.n	8008dee <rshift+0x28>
 8008e66:	4623      	mov	r3, r4
 8008e68:	e7e1      	b.n	8008e2e <rshift+0x68>

08008e6a <__hexdig_fun>:
 8008e6a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008e6e:	2b09      	cmp	r3, #9
 8008e70:	d802      	bhi.n	8008e78 <__hexdig_fun+0xe>
 8008e72:	3820      	subs	r0, #32
 8008e74:	b2c0      	uxtb	r0, r0
 8008e76:	4770      	bx	lr
 8008e78:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008e7c:	2b05      	cmp	r3, #5
 8008e7e:	d801      	bhi.n	8008e84 <__hexdig_fun+0x1a>
 8008e80:	3847      	subs	r0, #71	@ 0x47
 8008e82:	e7f7      	b.n	8008e74 <__hexdig_fun+0xa>
 8008e84:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008e88:	2b05      	cmp	r3, #5
 8008e8a:	d801      	bhi.n	8008e90 <__hexdig_fun+0x26>
 8008e8c:	3827      	subs	r0, #39	@ 0x27
 8008e8e:	e7f1      	b.n	8008e74 <__hexdig_fun+0xa>
 8008e90:	2000      	movs	r0, #0
 8008e92:	4770      	bx	lr

08008e94 <__gethex>:
 8008e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e98:	b085      	sub	sp, #20
 8008e9a:	468a      	mov	sl, r1
 8008e9c:	9302      	str	r3, [sp, #8]
 8008e9e:	680b      	ldr	r3, [r1, #0]
 8008ea0:	9001      	str	r0, [sp, #4]
 8008ea2:	4690      	mov	r8, r2
 8008ea4:	1c9c      	adds	r4, r3, #2
 8008ea6:	46a1      	mov	r9, r4
 8008ea8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008eac:	2830      	cmp	r0, #48	@ 0x30
 8008eae:	d0fa      	beq.n	8008ea6 <__gethex+0x12>
 8008eb0:	eba9 0303 	sub.w	r3, r9, r3
 8008eb4:	f1a3 0b02 	sub.w	fp, r3, #2
 8008eb8:	f7ff ffd7 	bl	8008e6a <__hexdig_fun>
 8008ebc:	4605      	mov	r5, r0
 8008ebe:	2800      	cmp	r0, #0
 8008ec0:	d168      	bne.n	8008f94 <__gethex+0x100>
 8008ec2:	49a0      	ldr	r1, [pc, #640]	@ (8009144 <__gethex+0x2b0>)
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	4648      	mov	r0, r9
 8008ec8:	f7ff ff28 	bl	8008d1c <strncmp>
 8008ecc:	4607      	mov	r7, r0
 8008ece:	2800      	cmp	r0, #0
 8008ed0:	d167      	bne.n	8008fa2 <__gethex+0x10e>
 8008ed2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008ed6:	4626      	mov	r6, r4
 8008ed8:	f7ff ffc7 	bl	8008e6a <__hexdig_fun>
 8008edc:	2800      	cmp	r0, #0
 8008ede:	d062      	beq.n	8008fa6 <__gethex+0x112>
 8008ee0:	4623      	mov	r3, r4
 8008ee2:	7818      	ldrb	r0, [r3, #0]
 8008ee4:	2830      	cmp	r0, #48	@ 0x30
 8008ee6:	4699      	mov	r9, r3
 8008ee8:	f103 0301 	add.w	r3, r3, #1
 8008eec:	d0f9      	beq.n	8008ee2 <__gethex+0x4e>
 8008eee:	f7ff ffbc 	bl	8008e6a <__hexdig_fun>
 8008ef2:	fab0 f580 	clz	r5, r0
 8008ef6:	096d      	lsrs	r5, r5, #5
 8008ef8:	f04f 0b01 	mov.w	fp, #1
 8008efc:	464a      	mov	r2, r9
 8008efe:	4616      	mov	r6, r2
 8008f00:	3201      	adds	r2, #1
 8008f02:	7830      	ldrb	r0, [r6, #0]
 8008f04:	f7ff ffb1 	bl	8008e6a <__hexdig_fun>
 8008f08:	2800      	cmp	r0, #0
 8008f0a:	d1f8      	bne.n	8008efe <__gethex+0x6a>
 8008f0c:	498d      	ldr	r1, [pc, #564]	@ (8009144 <__gethex+0x2b0>)
 8008f0e:	2201      	movs	r2, #1
 8008f10:	4630      	mov	r0, r6
 8008f12:	f7ff ff03 	bl	8008d1c <strncmp>
 8008f16:	2800      	cmp	r0, #0
 8008f18:	d13f      	bne.n	8008f9a <__gethex+0x106>
 8008f1a:	b944      	cbnz	r4, 8008f2e <__gethex+0x9a>
 8008f1c:	1c74      	adds	r4, r6, #1
 8008f1e:	4622      	mov	r2, r4
 8008f20:	4616      	mov	r6, r2
 8008f22:	3201      	adds	r2, #1
 8008f24:	7830      	ldrb	r0, [r6, #0]
 8008f26:	f7ff ffa0 	bl	8008e6a <__hexdig_fun>
 8008f2a:	2800      	cmp	r0, #0
 8008f2c:	d1f8      	bne.n	8008f20 <__gethex+0x8c>
 8008f2e:	1ba4      	subs	r4, r4, r6
 8008f30:	00a7      	lsls	r7, r4, #2
 8008f32:	7833      	ldrb	r3, [r6, #0]
 8008f34:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008f38:	2b50      	cmp	r3, #80	@ 0x50
 8008f3a:	d13e      	bne.n	8008fba <__gethex+0x126>
 8008f3c:	7873      	ldrb	r3, [r6, #1]
 8008f3e:	2b2b      	cmp	r3, #43	@ 0x2b
 8008f40:	d033      	beq.n	8008faa <__gethex+0x116>
 8008f42:	2b2d      	cmp	r3, #45	@ 0x2d
 8008f44:	d034      	beq.n	8008fb0 <__gethex+0x11c>
 8008f46:	1c71      	adds	r1, r6, #1
 8008f48:	2400      	movs	r4, #0
 8008f4a:	7808      	ldrb	r0, [r1, #0]
 8008f4c:	f7ff ff8d 	bl	8008e6a <__hexdig_fun>
 8008f50:	1e43      	subs	r3, r0, #1
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	2b18      	cmp	r3, #24
 8008f56:	d830      	bhi.n	8008fba <__gethex+0x126>
 8008f58:	f1a0 0210 	sub.w	r2, r0, #16
 8008f5c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008f60:	f7ff ff83 	bl	8008e6a <__hexdig_fun>
 8008f64:	f100 3cff 	add.w	ip, r0, #4294967295
 8008f68:	fa5f fc8c 	uxtb.w	ip, ip
 8008f6c:	f1bc 0f18 	cmp.w	ip, #24
 8008f70:	f04f 030a 	mov.w	r3, #10
 8008f74:	d91e      	bls.n	8008fb4 <__gethex+0x120>
 8008f76:	b104      	cbz	r4, 8008f7a <__gethex+0xe6>
 8008f78:	4252      	negs	r2, r2
 8008f7a:	4417      	add	r7, r2
 8008f7c:	f8ca 1000 	str.w	r1, [sl]
 8008f80:	b1ed      	cbz	r5, 8008fbe <__gethex+0x12a>
 8008f82:	f1bb 0f00 	cmp.w	fp, #0
 8008f86:	bf0c      	ite	eq
 8008f88:	2506      	moveq	r5, #6
 8008f8a:	2500      	movne	r5, #0
 8008f8c:	4628      	mov	r0, r5
 8008f8e:	b005      	add	sp, #20
 8008f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f94:	2500      	movs	r5, #0
 8008f96:	462c      	mov	r4, r5
 8008f98:	e7b0      	b.n	8008efc <__gethex+0x68>
 8008f9a:	2c00      	cmp	r4, #0
 8008f9c:	d1c7      	bne.n	8008f2e <__gethex+0x9a>
 8008f9e:	4627      	mov	r7, r4
 8008fa0:	e7c7      	b.n	8008f32 <__gethex+0x9e>
 8008fa2:	464e      	mov	r6, r9
 8008fa4:	462f      	mov	r7, r5
 8008fa6:	2501      	movs	r5, #1
 8008fa8:	e7c3      	b.n	8008f32 <__gethex+0x9e>
 8008faa:	2400      	movs	r4, #0
 8008fac:	1cb1      	adds	r1, r6, #2
 8008fae:	e7cc      	b.n	8008f4a <__gethex+0xb6>
 8008fb0:	2401      	movs	r4, #1
 8008fb2:	e7fb      	b.n	8008fac <__gethex+0x118>
 8008fb4:	fb03 0002 	mla	r0, r3, r2, r0
 8008fb8:	e7ce      	b.n	8008f58 <__gethex+0xc4>
 8008fba:	4631      	mov	r1, r6
 8008fbc:	e7de      	b.n	8008f7c <__gethex+0xe8>
 8008fbe:	eba6 0309 	sub.w	r3, r6, r9
 8008fc2:	3b01      	subs	r3, #1
 8008fc4:	4629      	mov	r1, r5
 8008fc6:	2b07      	cmp	r3, #7
 8008fc8:	dc0a      	bgt.n	8008fe0 <__gethex+0x14c>
 8008fca:	9801      	ldr	r0, [sp, #4]
 8008fcc:	f7fe f940 	bl	8007250 <_Balloc>
 8008fd0:	4604      	mov	r4, r0
 8008fd2:	b940      	cbnz	r0, 8008fe6 <__gethex+0x152>
 8008fd4:	4b5c      	ldr	r3, [pc, #368]	@ (8009148 <__gethex+0x2b4>)
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	21e4      	movs	r1, #228	@ 0xe4
 8008fda:	485c      	ldr	r0, [pc, #368]	@ (800914c <__gethex+0x2b8>)
 8008fdc:	f7fd f9cc 	bl	8006378 <__assert_func>
 8008fe0:	3101      	adds	r1, #1
 8008fe2:	105b      	asrs	r3, r3, #1
 8008fe4:	e7ef      	b.n	8008fc6 <__gethex+0x132>
 8008fe6:	f100 0a14 	add.w	sl, r0, #20
 8008fea:	2300      	movs	r3, #0
 8008fec:	4655      	mov	r5, sl
 8008fee:	469b      	mov	fp, r3
 8008ff0:	45b1      	cmp	r9, r6
 8008ff2:	d337      	bcc.n	8009064 <__gethex+0x1d0>
 8008ff4:	f845 bb04 	str.w	fp, [r5], #4
 8008ff8:	eba5 050a 	sub.w	r5, r5, sl
 8008ffc:	10ad      	asrs	r5, r5, #2
 8008ffe:	6125      	str	r5, [r4, #16]
 8009000:	4658      	mov	r0, fp
 8009002:	f7fe fa17 	bl	8007434 <__hi0bits>
 8009006:	016d      	lsls	r5, r5, #5
 8009008:	f8d8 6000 	ldr.w	r6, [r8]
 800900c:	1a2d      	subs	r5, r5, r0
 800900e:	42b5      	cmp	r5, r6
 8009010:	dd54      	ble.n	80090bc <__gethex+0x228>
 8009012:	1bad      	subs	r5, r5, r6
 8009014:	4629      	mov	r1, r5
 8009016:	4620      	mov	r0, r4
 8009018:	f7fe fdab 	bl	8007b72 <__any_on>
 800901c:	4681      	mov	r9, r0
 800901e:	b178      	cbz	r0, 8009040 <__gethex+0x1ac>
 8009020:	1e6b      	subs	r3, r5, #1
 8009022:	1159      	asrs	r1, r3, #5
 8009024:	f003 021f 	and.w	r2, r3, #31
 8009028:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800902c:	f04f 0901 	mov.w	r9, #1
 8009030:	fa09 f202 	lsl.w	r2, r9, r2
 8009034:	420a      	tst	r2, r1
 8009036:	d003      	beq.n	8009040 <__gethex+0x1ac>
 8009038:	454b      	cmp	r3, r9
 800903a:	dc36      	bgt.n	80090aa <__gethex+0x216>
 800903c:	f04f 0902 	mov.w	r9, #2
 8009040:	4629      	mov	r1, r5
 8009042:	4620      	mov	r0, r4
 8009044:	f7ff febf 	bl	8008dc6 <rshift>
 8009048:	442f      	add	r7, r5
 800904a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800904e:	42bb      	cmp	r3, r7
 8009050:	da42      	bge.n	80090d8 <__gethex+0x244>
 8009052:	9801      	ldr	r0, [sp, #4]
 8009054:	4621      	mov	r1, r4
 8009056:	f7fe f93b 	bl	80072d0 <_Bfree>
 800905a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800905c:	2300      	movs	r3, #0
 800905e:	6013      	str	r3, [r2, #0]
 8009060:	25a3      	movs	r5, #163	@ 0xa3
 8009062:	e793      	b.n	8008f8c <__gethex+0xf8>
 8009064:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009068:	2a2e      	cmp	r2, #46	@ 0x2e
 800906a:	d012      	beq.n	8009092 <__gethex+0x1fe>
 800906c:	2b20      	cmp	r3, #32
 800906e:	d104      	bne.n	800907a <__gethex+0x1e6>
 8009070:	f845 bb04 	str.w	fp, [r5], #4
 8009074:	f04f 0b00 	mov.w	fp, #0
 8009078:	465b      	mov	r3, fp
 800907a:	7830      	ldrb	r0, [r6, #0]
 800907c:	9303      	str	r3, [sp, #12]
 800907e:	f7ff fef4 	bl	8008e6a <__hexdig_fun>
 8009082:	9b03      	ldr	r3, [sp, #12]
 8009084:	f000 000f 	and.w	r0, r0, #15
 8009088:	4098      	lsls	r0, r3
 800908a:	ea4b 0b00 	orr.w	fp, fp, r0
 800908e:	3304      	adds	r3, #4
 8009090:	e7ae      	b.n	8008ff0 <__gethex+0x15c>
 8009092:	45b1      	cmp	r9, r6
 8009094:	d8ea      	bhi.n	800906c <__gethex+0x1d8>
 8009096:	492b      	ldr	r1, [pc, #172]	@ (8009144 <__gethex+0x2b0>)
 8009098:	9303      	str	r3, [sp, #12]
 800909a:	2201      	movs	r2, #1
 800909c:	4630      	mov	r0, r6
 800909e:	f7ff fe3d 	bl	8008d1c <strncmp>
 80090a2:	9b03      	ldr	r3, [sp, #12]
 80090a4:	2800      	cmp	r0, #0
 80090a6:	d1e1      	bne.n	800906c <__gethex+0x1d8>
 80090a8:	e7a2      	b.n	8008ff0 <__gethex+0x15c>
 80090aa:	1ea9      	subs	r1, r5, #2
 80090ac:	4620      	mov	r0, r4
 80090ae:	f7fe fd60 	bl	8007b72 <__any_on>
 80090b2:	2800      	cmp	r0, #0
 80090b4:	d0c2      	beq.n	800903c <__gethex+0x1a8>
 80090b6:	f04f 0903 	mov.w	r9, #3
 80090ba:	e7c1      	b.n	8009040 <__gethex+0x1ac>
 80090bc:	da09      	bge.n	80090d2 <__gethex+0x23e>
 80090be:	1b75      	subs	r5, r6, r5
 80090c0:	4621      	mov	r1, r4
 80090c2:	9801      	ldr	r0, [sp, #4]
 80090c4:	462a      	mov	r2, r5
 80090c6:	f7fe fb1b 	bl	8007700 <__lshift>
 80090ca:	1b7f      	subs	r7, r7, r5
 80090cc:	4604      	mov	r4, r0
 80090ce:	f100 0a14 	add.w	sl, r0, #20
 80090d2:	f04f 0900 	mov.w	r9, #0
 80090d6:	e7b8      	b.n	800904a <__gethex+0x1b6>
 80090d8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80090dc:	42bd      	cmp	r5, r7
 80090de:	dd6f      	ble.n	80091c0 <__gethex+0x32c>
 80090e0:	1bed      	subs	r5, r5, r7
 80090e2:	42ae      	cmp	r6, r5
 80090e4:	dc34      	bgt.n	8009150 <__gethex+0x2bc>
 80090e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80090ea:	2b02      	cmp	r3, #2
 80090ec:	d022      	beq.n	8009134 <__gethex+0x2a0>
 80090ee:	2b03      	cmp	r3, #3
 80090f0:	d024      	beq.n	800913c <__gethex+0x2a8>
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d115      	bne.n	8009122 <__gethex+0x28e>
 80090f6:	42ae      	cmp	r6, r5
 80090f8:	d113      	bne.n	8009122 <__gethex+0x28e>
 80090fa:	2e01      	cmp	r6, #1
 80090fc:	d10b      	bne.n	8009116 <__gethex+0x282>
 80090fe:	9a02      	ldr	r2, [sp, #8]
 8009100:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009104:	6013      	str	r3, [r2, #0]
 8009106:	2301      	movs	r3, #1
 8009108:	6123      	str	r3, [r4, #16]
 800910a:	f8ca 3000 	str.w	r3, [sl]
 800910e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009110:	2562      	movs	r5, #98	@ 0x62
 8009112:	601c      	str	r4, [r3, #0]
 8009114:	e73a      	b.n	8008f8c <__gethex+0xf8>
 8009116:	1e71      	subs	r1, r6, #1
 8009118:	4620      	mov	r0, r4
 800911a:	f7fe fd2a 	bl	8007b72 <__any_on>
 800911e:	2800      	cmp	r0, #0
 8009120:	d1ed      	bne.n	80090fe <__gethex+0x26a>
 8009122:	9801      	ldr	r0, [sp, #4]
 8009124:	4621      	mov	r1, r4
 8009126:	f7fe f8d3 	bl	80072d0 <_Bfree>
 800912a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800912c:	2300      	movs	r3, #0
 800912e:	6013      	str	r3, [r2, #0]
 8009130:	2550      	movs	r5, #80	@ 0x50
 8009132:	e72b      	b.n	8008f8c <__gethex+0xf8>
 8009134:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009136:	2b00      	cmp	r3, #0
 8009138:	d1f3      	bne.n	8009122 <__gethex+0x28e>
 800913a:	e7e0      	b.n	80090fe <__gethex+0x26a>
 800913c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800913e:	2b00      	cmp	r3, #0
 8009140:	d1dd      	bne.n	80090fe <__gethex+0x26a>
 8009142:	e7ee      	b.n	8009122 <__gethex+0x28e>
 8009144:	08009d40 	.word	0x08009d40
 8009148:	08009bd5 	.word	0x08009bd5
 800914c:	08009eb2 	.word	0x08009eb2
 8009150:	1e6f      	subs	r7, r5, #1
 8009152:	f1b9 0f00 	cmp.w	r9, #0
 8009156:	d130      	bne.n	80091ba <__gethex+0x326>
 8009158:	b127      	cbz	r7, 8009164 <__gethex+0x2d0>
 800915a:	4639      	mov	r1, r7
 800915c:	4620      	mov	r0, r4
 800915e:	f7fe fd08 	bl	8007b72 <__any_on>
 8009162:	4681      	mov	r9, r0
 8009164:	117a      	asrs	r2, r7, #5
 8009166:	2301      	movs	r3, #1
 8009168:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800916c:	f007 071f 	and.w	r7, r7, #31
 8009170:	40bb      	lsls	r3, r7
 8009172:	4213      	tst	r3, r2
 8009174:	4629      	mov	r1, r5
 8009176:	4620      	mov	r0, r4
 8009178:	bf18      	it	ne
 800917a:	f049 0902 	orrne.w	r9, r9, #2
 800917e:	f7ff fe22 	bl	8008dc6 <rshift>
 8009182:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009186:	1b76      	subs	r6, r6, r5
 8009188:	2502      	movs	r5, #2
 800918a:	f1b9 0f00 	cmp.w	r9, #0
 800918e:	d047      	beq.n	8009220 <__gethex+0x38c>
 8009190:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009194:	2b02      	cmp	r3, #2
 8009196:	d015      	beq.n	80091c4 <__gethex+0x330>
 8009198:	2b03      	cmp	r3, #3
 800919a:	d017      	beq.n	80091cc <__gethex+0x338>
 800919c:	2b01      	cmp	r3, #1
 800919e:	d109      	bne.n	80091b4 <__gethex+0x320>
 80091a0:	f019 0f02 	tst.w	r9, #2
 80091a4:	d006      	beq.n	80091b4 <__gethex+0x320>
 80091a6:	f8da 3000 	ldr.w	r3, [sl]
 80091aa:	ea49 0903 	orr.w	r9, r9, r3
 80091ae:	f019 0f01 	tst.w	r9, #1
 80091b2:	d10e      	bne.n	80091d2 <__gethex+0x33e>
 80091b4:	f045 0510 	orr.w	r5, r5, #16
 80091b8:	e032      	b.n	8009220 <__gethex+0x38c>
 80091ba:	f04f 0901 	mov.w	r9, #1
 80091be:	e7d1      	b.n	8009164 <__gethex+0x2d0>
 80091c0:	2501      	movs	r5, #1
 80091c2:	e7e2      	b.n	800918a <__gethex+0x2f6>
 80091c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091c6:	f1c3 0301 	rsb	r3, r3, #1
 80091ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 80091cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d0f0      	beq.n	80091b4 <__gethex+0x320>
 80091d2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80091d6:	f104 0314 	add.w	r3, r4, #20
 80091da:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80091de:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80091e2:	f04f 0c00 	mov.w	ip, #0
 80091e6:	4618      	mov	r0, r3
 80091e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80091ec:	f1b2 3fff 	cmp.w	r2, #4294967295
 80091f0:	d01b      	beq.n	800922a <__gethex+0x396>
 80091f2:	3201      	adds	r2, #1
 80091f4:	6002      	str	r2, [r0, #0]
 80091f6:	2d02      	cmp	r5, #2
 80091f8:	f104 0314 	add.w	r3, r4, #20
 80091fc:	d13c      	bne.n	8009278 <__gethex+0x3e4>
 80091fe:	f8d8 2000 	ldr.w	r2, [r8]
 8009202:	3a01      	subs	r2, #1
 8009204:	42b2      	cmp	r2, r6
 8009206:	d109      	bne.n	800921c <__gethex+0x388>
 8009208:	1171      	asrs	r1, r6, #5
 800920a:	2201      	movs	r2, #1
 800920c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009210:	f006 061f 	and.w	r6, r6, #31
 8009214:	fa02 f606 	lsl.w	r6, r2, r6
 8009218:	421e      	tst	r6, r3
 800921a:	d13a      	bne.n	8009292 <__gethex+0x3fe>
 800921c:	f045 0520 	orr.w	r5, r5, #32
 8009220:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009222:	601c      	str	r4, [r3, #0]
 8009224:	9b02      	ldr	r3, [sp, #8]
 8009226:	601f      	str	r7, [r3, #0]
 8009228:	e6b0      	b.n	8008f8c <__gethex+0xf8>
 800922a:	4299      	cmp	r1, r3
 800922c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009230:	d8d9      	bhi.n	80091e6 <__gethex+0x352>
 8009232:	68a3      	ldr	r3, [r4, #8]
 8009234:	459b      	cmp	fp, r3
 8009236:	db17      	blt.n	8009268 <__gethex+0x3d4>
 8009238:	6861      	ldr	r1, [r4, #4]
 800923a:	9801      	ldr	r0, [sp, #4]
 800923c:	3101      	adds	r1, #1
 800923e:	f7fe f807 	bl	8007250 <_Balloc>
 8009242:	4681      	mov	r9, r0
 8009244:	b918      	cbnz	r0, 800924e <__gethex+0x3ba>
 8009246:	4b1a      	ldr	r3, [pc, #104]	@ (80092b0 <__gethex+0x41c>)
 8009248:	4602      	mov	r2, r0
 800924a:	2184      	movs	r1, #132	@ 0x84
 800924c:	e6c5      	b.n	8008fda <__gethex+0x146>
 800924e:	6922      	ldr	r2, [r4, #16]
 8009250:	3202      	adds	r2, #2
 8009252:	f104 010c 	add.w	r1, r4, #12
 8009256:	0092      	lsls	r2, r2, #2
 8009258:	300c      	adds	r0, #12
 800925a:	f7ff fd81 	bl	8008d60 <memcpy>
 800925e:	4621      	mov	r1, r4
 8009260:	9801      	ldr	r0, [sp, #4]
 8009262:	f7fe f835 	bl	80072d0 <_Bfree>
 8009266:	464c      	mov	r4, r9
 8009268:	6923      	ldr	r3, [r4, #16]
 800926a:	1c5a      	adds	r2, r3, #1
 800926c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009270:	6122      	str	r2, [r4, #16]
 8009272:	2201      	movs	r2, #1
 8009274:	615a      	str	r2, [r3, #20]
 8009276:	e7be      	b.n	80091f6 <__gethex+0x362>
 8009278:	6922      	ldr	r2, [r4, #16]
 800927a:	455a      	cmp	r2, fp
 800927c:	dd0b      	ble.n	8009296 <__gethex+0x402>
 800927e:	2101      	movs	r1, #1
 8009280:	4620      	mov	r0, r4
 8009282:	f7ff fda0 	bl	8008dc6 <rshift>
 8009286:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800928a:	3701      	adds	r7, #1
 800928c:	42bb      	cmp	r3, r7
 800928e:	f6ff aee0 	blt.w	8009052 <__gethex+0x1be>
 8009292:	2501      	movs	r5, #1
 8009294:	e7c2      	b.n	800921c <__gethex+0x388>
 8009296:	f016 061f 	ands.w	r6, r6, #31
 800929a:	d0fa      	beq.n	8009292 <__gethex+0x3fe>
 800929c:	4453      	add	r3, sl
 800929e:	f1c6 0620 	rsb	r6, r6, #32
 80092a2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80092a6:	f7fe f8c5 	bl	8007434 <__hi0bits>
 80092aa:	42b0      	cmp	r0, r6
 80092ac:	dbe7      	blt.n	800927e <__gethex+0x3ea>
 80092ae:	e7f0      	b.n	8009292 <__gethex+0x3fe>
 80092b0:	08009bd5 	.word	0x08009bd5

080092b4 <L_shift>:
 80092b4:	f1c2 0208 	rsb	r2, r2, #8
 80092b8:	0092      	lsls	r2, r2, #2
 80092ba:	b570      	push	{r4, r5, r6, lr}
 80092bc:	f1c2 0620 	rsb	r6, r2, #32
 80092c0:	6843      	ldr	r3, [r0, #4]
 80092c2:	6804      	ldr	r4, [r0, #0]
 80092c4:	fa03 f506 	lsl.w	r5, r3, r6
 80092c8:	432c      	orrs	r4, r5
 80092ca:	40d3      	lsrs	r3, r2
 80092cc:	6004      	str	r4, [r0, #0]
 80092ce:	f840 3f04 	str.w	r3, [r0, #4]!
 80092d2:	4288      	cmp	r0, r1
 80092d4:	d3f4      	bcc.n	80092c0 <L_shift+0xc>
 80092d6:	bd70      	pop	{r4, r5, r6, pc}

080092d8 <__match>:
 80092d8:	b530      	push	{r4, r5, lr}
 80092da:	6803      	ldr	r3, [r0, #0]
 80092dc:	3301      	adds	r3, #1
 80092de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092e2:	b914      	cbnz	r4, 80092ea <__match+0x12>
 80092e4:	6003      	str	r3, [r0, #0]
 80092e6:	2001      	movs	r0, #1
 80092e8:	bd30      	pop	{r4, r5, pc}
 80092ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092ee:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80092f2:	2d19      	cmp	r5, #25
 80092f4:	bf98      	it	ls
 80092f6:	3220      	addls	r2, #32
 80092f8:	42a2      	cmp	r2, r4
 80092fa:	d0f0      	beq.n	80092de <__match+0x6>
 80092fc:	2000      	movs	r0, #0
 80092fe:	e7f3      	b.n	80092e8 <__match+0x10>

08009300 <__hexnan>:
 8009300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009304:	680b      	ldr	r3, [r1, #0]
 8009306:	6801      	ldr	r1, [r0, #0]
 8009308:	115e      	asrs	r6, r3, #5
 800930a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800930e:	f013 031f 	ands.w	r3, r3, #31
 8009312:	b087      	sub	sp, #28
 8009314:	bf18      	it	ne
 8009316:	3604      	addne	r6, #4
 8009318:	2500      	movs	r5, #0
 800931a:	1f37      	subs	r7, r6, #4
 800931c:	4682      	mov	sl, r0
 800931e:	4690      	mov	r8, r2
 8009320:	9301      	str	r3, [sp, #4]
 8009322:	f846 5c04 	str.w	r5, [r6, #-4]
 8009326:	46b9      	mov	r9, r7
 8009328:	463c      	mov	r4, r7
 800932a:	9502      	str	r5, [sp, #8]
 800932c:	46ab      	mov	fp, r5
 800932e:	784a      	ldrb	r2, [r1, #1]
 8009330:	1c4b      	adds	r3, r1, #1
 8009332:	9303      	str	r3, [sp, #12]
 8009334:	b342      	cbz	r2, 8009388 <__hexnan+0x88>
 8009336:	4610      	mov	r0, r2
 8009338:	9105      	str	r1, [sp, #20]
 800933a:	9204      	str	r2, [sp, #16]
 800933c:	f7ff fd95 	bl	8008e6a <__hexdig_fun>
 8009340:	2800      	cmp	r0, #0
 8009342:	d151      	bne.n	80093e8 <__hexnan+0xe8>
 8009344:	9a04      	ldr	r2, [sp, #16]
 8009346:	9905      	ldr	r1, [sp, #20]
 8009348:	2a20      	cmp	r2, #32
 800934a:	d818      	bhi.n	800937e <__hexnan+0x7e>
 800934c:	9b02      	ldr	r3, [sp, #8]
 800934e:	459b      	cmp	fp, r3
 8009350:	dd13      	ble.n	800937a <__hexnan+0x7a>
 8009352:	454c      	cmp	r4, r9
 8009354:	d206      	bcs.n	8009364 <__hexnan+0x64>
 8009356:	2d07      	cmp	r5, #7
 8009358:	dc04      	bgt.n	8009364 <__hexnan+0x64>
 800935a:	462a      	mov	r2, r5
 800935c:	4649      	mov	r1, r9
 800935e:	4620      	mov	r0, r4
 8009360:	f7ff ffa8 	bl	80092b4 <L_shift>
 8009364:	4544      	cmp	r4, r8
 8009366:	d952      	bls.n	800940e <__hexnan+0x10e>
 8009368:	2300      	movs	r3, #0
 800936a:	f1a4 0904 	sub.w	r9, r4, #4
 800936e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009372:	f8cd b008 	str.w	fp, [sp, #8]
 8009376:	464c      	mov	r4, r9
 8009378:	461d      	mov	r5, r3
 800937a:	9903      	ldr	r1, [sp, #12]
 800937c:	e7d7      	b.n	800932e <__hexnan+0x2e>
 800937e:	2a29      	cmp	r2, #41	@ 0x29
 8009380:	d157      	bne.n	8009432 <__hexnan+0x132>
 8009382:	3102      	adds	r1, #2
 8009384:	f8ca 1000 	str.w	r1, [sl]
 8009388:	f1bb 0f00 	cmp.w	fp, #0
 800938c:	d051      	beq.n	8009432 <__hexnan+0x132>
 800938e:	454c      	cmp	r4, r9
 8009390:	d206      	bcs.n	80093a0 <__hexnan+0xa0>
 8009392:	2d07      	cmp	r5, #7
 8009394:	dc04      	bgt.n	80093a0 <__hexnan+0xa0>
 8009396:	462a      	mov	r2, r5
 8009398:	4649      	mov	r1, r9
 800939a:	4620      	mov	r0, r4
 800939c:	f7ff ff8a 	bl	80092b4 <L_shift>
 80093a0:	4544      	cmp	r4, r8
 80093a2:	d936      	bls.n	8009412 <__hexnan+0x112>
 80093a4:	f1a8 0204 	sub.w	r2, r8, #4
 80093a8:	4623      	mov	r3, r4
 80093aa:	f853 1b04 	ldr.w	r1, [r3], #4
 80093ae:	f842 1f04 	str.w	r1, [r2, #4]!
 80093b2:	429f      	cmp	r7, r3
 80093b4:	d2f9      	bcs.n	80093aa <__hexnan+0xaa>
 80093b6:	1b3b      	subs	r3, r7, r4
 80093b8:	f023 0303 	bic.w	r3, r3, #3
 80093bc:	3304      	adds	r3, #4
 80093be:	3401      	adds	r4, #1
 80093c0:	3e03      	subs	r6, #3
 80093c2:	42b4      	cmp	r4, r6
 80093c4:	bf88      	it	hi
 80093c6:	2304      	movhi	r3, #4
 80093c8:	4443      	add	r3, r8
 80093ca:	2200      	movs	r2, #0
 80093cc:	f843 2b04 	str.w	r2, [r3], #4
 80093d0:	429f      	cmp	r7, r3
 80093d2:	d2fb      	bcs.n	80093cc <__hexnan+0xcc>
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	b91b      	cbnz	r3, 80093e0 <__hexnan+0xe0>
 80093d8:	4547      	cmp	r7, r8
 80093da:	d128      	bne.n	800942e <__hexnan+0x12e>
 80093dc:	2301      	movs	r3, #1
 80093de:	603b      	str	r3, [r7, #0]
 80093e0:	2005      	movs	r0, #5
 80093e2:	b007      	add	sp, #28
 80093e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093e8:	3501      	adds	r5, #1
 80093ea:	2d08      	cmp	r5, #8
 80093ec:	f10b 0b01 	add.w	fp, fp, #1
 80093f0:	dd06      	ble.n	8009400 <__hexnan+0x100>
 80093f2:	4544      	cmp	r4, r8
 80093f4:	d9c1      	bls.n	800937a <__hexnan+0x7a>
 80093f6:	2300      	movs	r3, #0
 80093f8:	f844 3c04 	str.w	r3, [r4, #-4]
 80093fc:	2501      	movs	r5, #1
 80093fe:	3c04      	subs	r4, #4
 8009400:	6822      	ldr	r2, [r4, #0]
 8009402:	f000 000f 	and.w	r0, r0, #15
 8009406:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800940a:	6020      	str	r0, [r4, #0]
 800940c:	e7b5      	b.n	800937a <__hexnan+0x7a>
 800940e:	2508      	movs	r5, #8
 8009410:	e7b3      	b.n	800937a <__hexnan+0x7a>
 8009412:	9b01      	ldr	r3, [sp, #4]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d0dd      	beq.n	80093d4 <__hexnan+0xd4>
 8009418:	f1c3 0320 	rsb	r3, r3, #32
 800941c:	f04f 32ff 	mov.w	r2, #4294967295
 8009420:	40da      	lsrs	r2, r3
 8009422:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009426:	4013      	ands	r3, r2
 8009428:	f846 3c04 	str.w	r3, [r6, #-4]
 800942c:	e7d2      	b.n	80093d4 <__hexnan+0xd4>
 800942e:	3f04      	subs	r7, #4
 8009430:	e7d0      	b.n	80093d4 <__hexnan+0xd4>
 8009432:	2004      	movs	r0, #4
 8009434:	e7d5      	b.n	80093e2 <__hexnan+0xe2>

08009436 <__ascii_mbtowc>:
 8009436:	b082      	sub	sp, #8
 8009438:	b901      	cbnz	r1, 800943c <__ascii_mbtowc+0x6>
 800943a:	a901      	add	r1, sp, #4
 800943c:	b142      	cbz	r2, 8009450 <__ascii_mbtowc+0x1a>
 800943e:	b14b      	cbz	r3, 8009454 <__ascii_mbtowc+0x1e>
 8009440:	7813      	ldrb	r3, [r2, #0]
 8009442:	600b      	str	r3, [r1, #0]
 8009444:	7812      	ldrb	r2, [r2, #0]
 8009446:	1e10      	subs	r0, r2, #0
 8009448:	bf18      	it	ne
 800944a:	2001      	movne	r0, #1
 800944c:	b002      	add	sp, #8
 800944e:	4770      	bx	lr
 8009450:	4610      	mov	r0, r2
 8009452:	e7fb      	b.n	800944c <__ascii_mbtowc+0x16>
 8009454:	f06f 0001 	mvn.w	r0, #1
 8009458:	e7f8      	b.n	800944c <__ascii_mbtowc+0x16>

0800945a <_realloc_r>:
 800945a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800945e:	4680      	mov	r8, r0
 8009460:	4615      	mov	r5, r2
 8009462:	460c      	mov	r4, r1
 8009464:	b921      	cbnz	r1, 8009470 <_realloc_r+0x16>
 8009466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800946a:	4611      	mov	r1, r2
 800946c:	f7fd be64 	b.w	8007138 <_malloc_r>
 8009470:	b92a      	cbnz	r2, 800947e <_realloc_r+0x24>
 8009472:	f7fd fded 	bl	8007050 <_free_r>
 8009476:	2400      	movs	r4, #0
 8009478:	4620      	mov	r0, r4
 800947a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800947e:	f000 fa41 	bl	8009904 <_malloc_usable_size_r>
 8009482:	4285      	cmp	r5, r0
 8009484:	4606      	mov	r6, r0
 8009486:	d802      	bhi.n	800948e <_realloc_r+0x34>
 8009488:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800948c:	d8f4      	bhi.n	8009478 <_realloc_r+0x1e>
 800948e:	4629      	mov	r1, r5
 8009490:	4640      	mov	r0, r8
 8009492:	f7fd fe51 	bl	8007138 <_malloc_r>
 8009496:	4607      	mov	r7, r0
 8009498:	2800      	cmp	r0, #0
 800949a:	d0ec      	beq.n	8009476 <_realloc_r+0x1c>
 800949c:	42b5      	cmp	r5, r6
 800949e:	462a      	mov	r2, r5
 80094a0:	4621      	mov	r1, r4
 80094a2:	bf28      	it	cs
 80094a4:	4632      	movcs	r2, r6
 80094a6:	f7ff fc5b 	bl	8008d60 <memcpy>
 80094aa:	4621      	mov	r1, r4
 80094ac:	4640      	mov	r0, r8
 80094ae:	f7fd fdcf 	bl	8007050 <_free_r>
 80094b2:	463c      	mov	r4, r7
 80094b4:	e7e0      	b.n	8009478 <_realloc_r+0x1e>

080094b6 <__ascii_wctomb>:
 80094b6:	4603      	mov	r3, r0
 80094b8:	4608      	mov	r0, r1
 80094ba:	b141      	cbz	r1, 80094ce <__ascii_wctomb+0x18>
 80094bc:	2aff      	cmp	r2, #255	@ 0xff
 80094be:	d904      	bls.n	80094ca <__ascii_wctomb+0x14>
 80094c0:	228a      	movs	r2, #138	@ 0x8a
 80094c2:	601a      	str	r2, [r3, #0]
 80094c4:	f04f 30ff 	mov.w	r0, #4294967295
 80094c8:	4770      	bx	lr
 80094ca:	700a      	strb	r2, [r1, #0]
 80094cc:	2001      	movs	r0, #1
 80094ce:	4770      	bx	lr

080094d0 <__sfputc_r>:
 80094d0:	6893      	ldr	r3, [r2, #8]
 80094d2:	3b01      	subs	r3, #1
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	b410      	push	{r4}
 80094d8:	6093      	str	r3, [r2, #8]
 80094da:	da08      	bge.n	80094ee <__sfputc_r+0x1e>
 80094dc:	6994      	ldr	r4, [r2, #24]
 80094de:	42a3      	cmp	r3, r4
 80094e0:	db01      	blt.n	80094e6 <__sfputc_r+0x16>
 80094e2:	290a      	cmp	r1, #10
 80094e4:	d103      	bne.n	80094ee <__sfputc_r+0x1e>
 80094e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094ea:	f000 b933 	b.w	8009754 <__swbuf_r>
 80094ee:	6813      	ldr	r3, [r2, #0]
 80094f0:	1c58      	adds	r0, r3, #1
 80094f2:	6010      	str	r0, [r2, #0]
 80094f4:	7019      	strb	r1, [r3, #0]
 80094f6:	4608      	mov	r0, r1
 80094f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094fc:	4770      	bx	lr

080094fe <__sfputs_r>:
 80094fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009500:	4606      	mov	r6, r0
 8009502:	460f      	mov	r7, r1
 8009504:	4614      	mov	r4, r2
 8009506:	18d5      	adds	r5, r2, r3
 8009508:	42ac      	cmp	r4, r5
 800950a:	d101      	bne.n	8009510 <__sfputs_r+0x12>
 800950c:	2000      	movs	r0, #0
 800950e:	e007      	b.n	8009520 <__sfputs_r+0x22>
 8009510:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009514:	463a      	mov	r2, r7
 8009516:	4630      	mov	r0, r6
 8009518:	f7ff ffda 	bl	80094d0 <__sfputc_r>
 800951c:	1c43      	adds	r3, r0, #1
 800951e:	d1f3      	bne.n	8009508 <__sfputs_r+0xa>
 8009520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009524 <_vfiprintf_r>:
 8009524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009528:	460d      	mov	r5, r1
 800952a:	b09d      	sub	sp, #116	@ 0x74
 800952c:	4614      	mov	r4, r2
 800952e:	4698      	mov	r8, r3
 8009530:	4606      	mov	r6, r0
 8009532:	b118      	cbz	r0, 800953c <_vfiprintf_r+0x18>
 8009534:	6a03      	ldr	r3, [r0, #32]
 8009536:	b90b      	cbnz	r3, 800953c <_vfiprintf_r+0x18>
 8009538:	f7fc fdfe 	bl	8006138 <__sinit>
 800953c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800953e:	07d9      	lsls	r1, r3, #31
 8009540:	d405      	bmi.n	800954e <_vfiprintf_r+0x2a>
 8009542:	89ab      	ldrh	r3, [r5, #12]
 8009544:	059a      	lsls	r2, r3, #22
 8009546:	d402      	bmi.n	800954e <_vfiprintf_r+0x2a>
 8009548:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800954a:	f7fc ff0c 	bl	8006366 <__retarget_lock_acquire_recursive>
 800954e:	89ab      	ldrh	r3, [r5, #12]
 8009550:	071b      	lsls	r3, r3, #28
 8009552:	d501      	bpl.n	8009558 <_vfiprintf_r+0x34>
 8009554:	692b      	ldr	r3, [r5, #16]
 8009556:	b99b      	cbnz	r3, 8009580 <_vfiprintf_r+0x5c>
 8009558:	4629      	mov	r1, r5
 800955a:	4630      	mov	r0, r6
 800955c:	f000 f938 	bl	80097d0 <__swsetup_r>
 8009560:	b170      	cbz	r0, 8009580 <_vfiprintf_r+0x5c>
 8009562:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009564:	07dc      	lsls	r4, r3, #31
 8009566:	d504      	bpl.n	8009572 <_vfiprintf_r+0x4e>
 8009568:	f04f 30ff 	mov.w	r0, #4294967295
 800956c:	b01d      	add	sp, #116	@ 0x74
 800956e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009572:	89ab      	ldrh	r3, [r5, #12]
 8009574:	0598      	lsls	r0, r3, #22
 8009576:	d4f7      	bmi.n	8009568 <_vfiprintf_r+0x44>
 8009578:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800957a:	f7fc fef5 	bl	8006368 <__retarget_lock_release_recursive>
 800957e:	e7f3      	b.n	8009568 <_vfiprintf_r+0x44>
 8009580:	2300      	movs	r3, #0
 8009582:	9309      	str	r3, [sp, #36]	@ 0x24
 8009584:	2320      	movs	r3, #32
 8009586:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800958a:	f8cd 800c 	str.w	r8, [sp, #12]
 800958e:	2330      	movs	r3, #48	@ 0x30
 8009590:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009740 <_vfiprintf_r+0x21c>
 8009594:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009598:	f04f 0901 	mov.w	r9, #1
 800959c:	4623      	mov	r3, r4
 800959e:	469a      	mov	sl, r3
 80095a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095a4:	b10a      	cbz	r2, 80095aa <_vfiprintf_r+0x86>
 80095a6:	2a25      	cmp	r2, #37	@ 0x25
 80095a8:	d1f9      	bne.n	800959e <_vfiprintf_r+0x7a>
 80095aa:	ebba 0b04 	subs.w	fp, sl, r4
 80095ae:	d00b      	beq.n	80095c8 <_vfiprintf_r+0xa4>
 80095b0:	465b      	mov	r3, fp
 80095b2:	4622      	mov	r2, r4
 80095b4:	4629      	mov	r1, r5
 80095b6:	4630      	mov	r0, r6
 80095b8:	f7ff ffa1 	bl	80094fe <__sfputs_r>
 80095bc:	3001      	adds	r0, #1
 80095be:	f000 80a7 	beq.w	8009710 <_vfiprintf_r+0x1ec>
 80095c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095c4:	445a      	add	r2, fp
 80095c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80095c8:	f89a 3000 	ldrb.w	r3, [sl]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	f000 809f 	beq.w	8009710 <_vfiprintf_r+0x1ec>
 80095d2:	2300      	movs	r3, #0
 80095d4:	f04f 32ff 	mov.w	r2, #4294967295
 80095d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095dc:	f10a 0a01 	add.w	sl, sl, #1
 80095e0:	9304      	str	r3, [sp, #16]
 80095e2:	9307      	str	r3, [sp, #28]
 80095e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80095e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80095ea:	4654      	mov	r4, sl
 80095ec:	2205      	movs	r2, #5
 80095ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095f2:	4853      	ldr	r0, [pc, #332]	@ (8009740 <_vfiprintf_r+0x21c>)
 80095f4:	f7f6 fdec 	bl	80001d0 <memchr>
 80095f8:	9a04      	ldr	r2, [sp, #16]
 80095fa:	b9d8      	cbnz	r0, 8009634 <_vfiprintf_r+0x110>
 80095fc:	06d1      	lsls	r1, r2, #27
 80095fe:	bf44      	itt	mi
 8009600:	2320      	movmi	r3, #32
 8009602:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009606:	0713      	lsls	r3, r2, #28
 8009608:	bf44      	itt	mi
 800960a:	232b      	movmi	r3, #43	@ 0x2b
 800960c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009610:	f89a 3000 	ldrb.w	r3, [sl]
 8009614:	2b2a      	cmp	r3, #42	@ 0x2a
 8009616:	d015      	beq.n	8009644 <_vfiprintf_r+0x120>
 8009618:	9a07      	ldr	r2, [sp, #28]
 800961a:	4654      	mov	r4, sl
 800961c:	2000      	movs	r0, #0
 800961e:	f04f 0c0a 	mov.w	ip, #10
 8009622:	4621      	mov	r1, r4
 8009624:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009628:	3b30      	subs	r3, #48	@ 0x30
 800962a:	2b09      	cmp	r3, #9
 800962c:	d94b      	bls.n	80096c6 <_vfiprintf_r+0x1a2>
 800962e:	b1b0      	cbz	r0, 800965e <_vfiprintf_r+0x13a>
 8009630:	9207      	str	r2, [sp, #28]
 8009632:	e014      	b.n	800965e <_vfiprintf_r+0x13a>
 8009634:	eba0 0308 	sub.w	r3, r0, r8
 8009638:	fa09 f303 	lsl.w	r3, r9, r3
 800963c:	4313      	orrs	r3, r2
 800963e:	9304      	str	r3, [sp, #16]
 8009640:	46a2      	mov	sl, r4
 8009642:	e7d2      	b.n	80095ea <_vfiprintf_r+0xc6>
 8009644:	9b03      	ldr	r3, [sp, #12]
 8009646:	1d19      	adds	r1, r3, #4
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	9103      	str	r1, [sp, #12]
 800964c:	2b00      	cmp	r3, #0
 800964e:	bfbb      	ittet	lt
 8009650:	425b      	neglt	r3, r3
 8009652:	f042 0202 	orrlt.w	r2, r2, #2
 8009656:	9307      	strge	r3, [sp, #28]
 8009658:	9307      	strlt	r3, [sp, #28]
 800965a:	bfb8      	it	lt
 800965c:	9204      	strlt	r2, [sp, #16]
 800965e:	7823      	ldrb	r3, [r4, #0]
 8009660:	2b2e      	cmp	r3, #46	@ 0x2e
 8009662:	d10a      	bne.n	800967a <_vfiprintf_r+0x156>
 8009664:	7863      	ldrb	r3, [r4, #1]
 8009666:	2b2a      	cmp	r3, #42	@ 0x2a
 8009668:	d132      	bne.n	80096d0 <_vfiprintf_r+0x1ac>
 800966a:	9b03      	ldr	r3, [sp, #12]
 800966c:	1d1a      	adds	r2, r3, #4
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	9203      	str	r2, [sp, #12]
 8009672:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009676:	3402      	adds	r4, #2
 8009678:	9305      	str	r3, [sp, #20]
 800967a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009750 <_vfiprintf_r+0x22c>
 800967e:	7821      	ldrb	r1, [r4, #0]
 8009680:	2203      	movs	r2, #3
 8009682:	4650      	mov	r0, sl
 8009684:	f7f6 fda4 	bl	80001d0 <memchr>
 8009688:	b138      	cbz	r0, 800969a <_vfiprintf_r+0x176>
 800968a:	9b04      	ldr	r3, [sp, #16]
 800968c:	eba0 000a 	sub.w	r0, r0, sl
 8009690:	2240      	movs	r2, #64	@ 0x40
 8009692:	4082      	lsls	r2, r0
 8009694:	4313      	orrs	r3, r2
 8009696:	3401      	adds	r4, #1
 8009698:	9304      	str	r3, [sp, #16]
 800969a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800969e:	4829      	ldr	r0, [pc, #164]	@ (8009744 <_vfiprintf_r+0x220>)
 80096a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80096a4:	2206      	movs	r2, #6
 80096a6:	f7f6 fd93 	bl	80001d0 <memchr>
 80096aa:	2800      	cmp	r0, #0
 80096ac:	d03f      	beq.n	800972e <_vfiprintf_r+0x20a>
 80096ae:	4b26      	ldr	r3, [pc, #152]	@ (8009748 <_vfiprintf_r+0x224>)
 80096b0:	bb1b      	cbnz	r3, 80096fa <_vfiprintf_r+0x1d6>
 80096b2:	9b03      	ldr	r3, [sp, #12]
 80096b4:	3307      	adds	r3, #7
 80096b6:	f023 0307 	bic.w	r3, r3, #7
 80096ba:	3308      	adds	r3, #8
 80096bc:	9303      	str	r3, [sp, #12]
 80096be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096c0:	443b      	add	r3, r7
 80096c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80096c4:	e76a      	b.n	800959c <_vfiprintf_r+0x78>
 80096c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80096ca:	460c      	mov	r4, r1
 80096cc:	2001      	movs	r0, #1
 80096ce:	e7a8      	b.n	8009622 <_vfiprintf_r+0xfe>
 80096d0:	2300      	movs	r3, #0
 80096d2:	3401      	adds	r4, #1
 80096d4:	9305      	str	r3, [sp, #20]
 80096d6:	4619      	mov	r1, r3
 80096d8:	f04f 0c0a 	mov.w	ip, #10
 80096dc:	4620      	mov	r0, r4
 80096de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096e2:	3a30      	subs	r2, #48	@ 0x30
 80096e4:	2a09      	cmp	r2, #9
 80096e6:	d903      	bls.n	80096f0 <_vfiprintf_r+0x1cc>
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d0c6      	beq.n	800967a <_vfiprintf_r+0x156>
 80096ec:	9105      	str	r1, [sp, #20]
 80096ee:	e7c4      	b.n	800967a <_vfiprintf_r+0x156>
 80096f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80096f4:	4604      	mov	r4, r0
 80096f6:	2301      	movs	r3, #1
 80096f8:	e7f0      	b.n	80096dc <_vfiprintf_r+0x1b8>
 80096fa:	ab03      	add	r3, sp, #12
 80096fc:	9300      	str	r3, [sp, #0]
 80096fe:	462a      	mov	r2, r5
 8009700:	4b12      	ldr	r3, [pc, #72]	@ (800974c <_vfiprintf_r+0x228>)
 8009702:	a904      	add	r1, sp, #16
 8009704:	4630      	mov	r0, r6
 8009706:	f7fb febf 	bl	8005488 <_printf_float>
 800970a:	4607      	mov	r7, r0
 800970c:	1c78      	adds	r0, r7, #1
 800970e:	d1d6      	bne.n	80096be <_vfiprintf_r+0x19a>
 8009710:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009712:	07d9      	lsls	r1, r3, #31
 8009714:	d405      	bmi.n	8009722 <_vfiprintf_r+0x1fe>
 8009716:	89ab      	ldrh	r3, [r5, #12]
 8009718:	059a      	lsls	r2, r3, #22
 800971a:	d402      	bmi.n	8009722 <_vfiprintf_r+0x1fe>
 800971c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800971e:	f7fc fe23 	bl	8006368 <__retarget_lock_release_recursive>
 8009722:	89ab      	ldrh	r3, [r5, #12]
 8009724:	065b      	lsls	r3, r3, #25
 8009726:	f53f af1f 	bmi.w	8009568 <_vfiprintf_r+0x44>
 800972a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800972c:	e71e      	b.n	800956c <_vfiprintf_r+0x48>
 800972e:	ab03      	add	r3, sp, #12
 8009730:	9300      	str	r3, [sp, #0]
 8009732:	462a      	mov	r2, r5
 8009734:	4b05      	ldr	r3, [pc, #20]	@ (800974c <_vfiprintf_r+0x228>)
 8009736:	a904      	add	r1, sp, #16
 8009738:	4630      	mov	r0, r6
 800973a:	f7fc f93d 	bl	80059b8 <_printf_i>
 800973e:	e7e4      	b.n	800970a <_vfiprintf_r+0x1e6>
 8009740:	08009e99 	.word	0x08009e99
 8009744:	08009ea3 	.word	0x08009ea3
 8009748:	08005489 	.word	0x08005489
 800974c:	080094ff 	.word	0x080094ff
 8009750:	08009e9f 	.word	0x08009e9f

08009754 <__swbuf_r>:
 8009754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009756:	460e      	mov	r6, r1
 8009758:	4614      	mov	r4, r2
 800975a:	4605      	mov	r5, r0
 800975c:	b118      	cbz	r0, 8009766 <__swbuf_r+0x12>
 800975e:	6a03      	ldr	r3, [r0, #32]
 8009760:	b90b      	cbnz	r3, 8009766 <__swbuf_r+0x12>
 8009762:	f7fc fce9 	bl	8006138 <__sinit>
 8009766:	69a3      	ldr	r3, [r4, #24]
 8009768:	60a3      	str	r3, [r4, #8]
 800976a:	89a3      	ldrh	r3, [r4, #12]
 800976c:	071a      	lsls	r2, r3, #28
 800976e:	d501      	bpl.n	8009774 <__swbuf_r+0x20>
 8009770:	6923      	ldr	r3, [r4, #16]
 8009772:	b943      	cbnz	r3, 8009786 <__swbuf_r+0x32>
 8009774:	4621      	mov	r1, r4
 8009776:	4628      	mov	r0, r5
 8009778:	f000 f82a 	bl	80097d0 <__swsetup_r>
 800977c:	b118      	cbz	r0, 8009786 <__swbuf_r+0x32>
 800977e:	f04f 37ff 	mov.w	r7, #4294967295
 8009782:	4638      	mov	r0, r7
 8009784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009786:	6823      	ldr	r3, [r4, #0]
 8009788:	6922      	ldr	r2, [r4, #16]
 800978a:	1a98      	subs	r0, r3, r2
 800978c:	6963      	ldr	r3, [r4, #20]
 800978e:	b2f6      	uxtb	r6, r6
 8009790:	4283      	cmp	r3, r0
 8009792:	4637      	mov	r7, r6
 8009794:	dc05      	bgt.n	80097a2 <__swbuf_r+0x4e>
 8009796:	4621      	mov	r1, r4
 8009798:	4628      	mov	r0, r5
 800979a:	f7ff fa6b 	bl	8008c74 <_fflush_r>
 800979e:	2800      	cmp	r0, #0
 80097a0:	d1ed      	bne.n	800977e <__swbuf_r+0x2a>
 80097a2:	68a3      	ldr	r3, [r4, #8]
 80097a4:	3b01      	subs	r3, #1
 80097a6:	60a3      	str	r3, [r4, #8]
 80097a8:	6823      	ldr	r3, [r4, #0]
 80097aa:	1c5a      	adds	r2, r3, #1
 80097ac:	6022      	str	r2, [r4, #0]
 80097ae:	701e      	strb	r6, [r3, #0]
 80097b0:	6962      	ldr	r2, [r4, #20]
 80097b2:	1c43      	adds	r3, r0, #1
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d004      	beq.n	80097c2 <__swbuf_r+0x6e>
 80097b8:	89a3      	ldrh	r3, [r4, #12]
 80097ba:	07db      	lsls	r3, r3, #31
 80097bc:	d5e1      	bpl.n	8009782 <__swbuf_r+0x2e>
 80097be:	2e0a      	cmp	r6, #10
 80097c0:	d1df      	bne.n	8009782 <__swbuf_r+0x2e>
 80097c2:	4621      	mov	r1, r4
 80097c4:	4628      	mov	r0, r5
 80097c6:	f7ff fa55 	bl	8008c74 <_fflush_r>
 80097ca:	2800      	cmp	r0, #0
 80097cc:	d0d9      	beq.n	8009782 <__swbuf_r+0x2e>
 80097ce:	e7d6      	b.n	800977e <__swbuf_r+0x2a>

080097d0 <__swsetup_r>:
 80097d0:	b538      	push	{r3, r4, r5, lr}
 80097d2:	4b29      	ldr	r3, [pc, #164]	@ (8009878 <__swsetup_r+0xa8>)
 80097d4:	4605      	mov	r5, r0
 80097d6:	6818      	ldr	r0, [r3, #0]
 80097d8:	460c      	mov	r4, r1
 80097da:	b118      	cbz	r0, 80097e4 <__swsetup_r+0x14>
 80097dc:	6a03      	ldr	r3, [r0, #32]
 80097de:	b90b      	cbnz	r3, 80097e4 <__swsetup_r+0x14>
 80097e0:	f7fc fcaa 	bl	8006138 <__sinit>
 80097e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097e8:	0719      	lsls	r1, r3, #28
 80097ea:	d422      	bmi.n	8009832 <__swsetup_r+0x62>
 80097ec:	06da      	lsls	r2, r3, #27
 80097ee:	d407      	bmi.n	8009800 <__swsetup_r+0x30>
 80097f0:	2209      	movs	r2, #9
 80097f2:	602a      	str	r2, [r5, #0]
 80097f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097f8:	81a3      	strh	r3, [r4, #12]
 80097fa:	f04f 30ff 	mov.w	r0, #4294967295
 80097fe:	e033      	b.n	8009868 <__swsetup_r+0x98>
 8009800:	0758      	lsls	r0, r3, #29
 8009802:	d512      	bpl.n	800982a <__swsetup_r+0x5a>
 8009804:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009806:	b141      	cbz	r1, 800981a <__swsetup_r+0x4a>
 8009808:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800980c:	4299      	cmp	r1, r3
 800980e:	d002      	beq.n	8009816 <__swsetup_r+0x46>
 8009810:	4628      	mov	r0, r5
 8009812:	f7fd fc1d 	bl	8007050 <_free_r>
 8009816:	2300      	movs	r3, #0
 8009818:	6363      	str	r3, [r4, #52]	@ 0x34
 800981a:	89a3      	ldrh	r3, [r4, #12]
 800981c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009820:	81a3      	strh	r3, [r4, #12]
 8009822:	2300      	movs	r3, #0
 8009824:	6063      	str	r3, [r4, #4]
 8009826:	6923      	ldr	r3, [r4, #16]
 8009828:	6023      	str	r3, [r4, #0]
 800982a:	89a3      	ldrh	r3, [r4, #12]
 800982c:	f043 0308 	orr.w	r3, r3, #8
 8009830:	81a3      	strh	r3, [r4, #12]
 8009832:	6923      	ldr	r3, [r4, #16]
 8009834:	b94b      	cbnz	r3, 800984a <__swsetup_r+0x7a>
 8009836:	89a3      	ldrh	r3, [r4, #12]
 8009838:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800983c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009840:	d003      	beq.n	800984a <__swsetup_r+0x7a>
 8009842:	4621      	mov	r1, r4
 8009844:	4628      	mov	r0, r5
 8009846:	f000 f88b 	bl	8009960 <__smakebuf_r>
 800984a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800984e:	f013 0201 	ands.w	r2, r3, #1
 8009852:	d00a      	beq.n	800986a <__swsetup_r+0x9a>
 8009854:	2200      	movs	r2, #0
 8009856:	60a2      	str	r2, [r4, #8]
 8009858:	6962      	ldr	r2, [r4, #20]
 800985a:	4252      	negs	r2, r2
 800985c:	61a2      	str	r2, [r4, #24]
 800985e:	6922      	ldr	r2, [r4, #16]
 8009860:	b942      	cbnz	r2, 8009874 <__swsetup_r+0xa4>
 8009862:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009866:	d1c5      	bne.n	80097f4 <__swsetup_r+0x24>
 8009868:	bd38      	pop	{r3, r4, r5, pc}
 800986a:	0799      	lsls	r1, r3, #30
 800986c:	bf58      	it	pl
 800986e:	6962      	ldrpl	r2, [r4, #20]
 8009870:	60a2      	str	r2, [r4, #8]
 8009872:	e7f4      	b.n	800985e <__swsetup_r+0x8e>
 8009874:	2000      	movs	r0, #0
 8009876:	e7f7      	b.n	8009868 <__swsetup_r+0x98>
 8009878:	20000028 	.word	0x20000028

0800987c <_raise_r>:
 800987c:	291f      	cmp	r1, #31
 800987e:	b538      	push	{r3, r4, r5, lr}
 8009880:	4605      	mov	r5, r0
 8009882:	460c      	mov	r4, r1
 8009884:	d904      	bls.n	8009890 <_raise_r+0x14>
 8009886:	2316      	movs	r3, #22
 8009888:	6003      	str	r3, [r0, #0]
 800988a:	f04f 30ff 	mov.w	r0, #4294967295
 800988e:	bd38      	pop	{r3, r4, r5, pc}
 8009890:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009892:	b112      	cbz	r2, 800989a <_raise_r+0x1e>
 8009894:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009898:	b94b      	cbnz	r3, 80098ae <_raise_r+0x32>
 800989a:	4628      	mov	r0, r5
 800989c:	f000 f830 	bl	8009900 <_getpid_r>
 80098a0:	4622      	mov	r2, r4
 80098a2:	4601      	mov	r1, r0
 80098a4:	4628      	mov	r0, r5
 80098a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098aa:	f000 b817 	b.w	80098dc <_kill_r>
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d00a      	beq.n	80098c8 <_raise_r+0x4c>
 80098b2:	1c59      	adds	r1, r3, #1
 80098b4:	d103      	bne.n	80098be <_raise_r+0x42>
 80098b6:	2316      	movs	r3, #22
 80098b8:	6003      	str	r3, [r0, #0]
 80098ba:	2001      	movs	r0, #1
 80098bc:	e7e7      	b.n	800988e <_raise_r+0x12>
 80098be:	2100      	movs	r1, #0
 80098c0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80098c4:	4620      	mov	r0, r4
 80098c6:	4798      	blx	r3
 80098c8:	2000      	movs	r0, #0
 80098ca:	e7e0      	b.n	800988e <_raise_r+0x12>

080098cc <raise>:
 80098cc:	4b02      	ldr	r3, [pc, #8]	@ (80098d8 <raise+0xc>)
 80098ce:	4601      	mov	r1, r0
 80098d0:	6818      	ldr	r0, [r3, #0]
 80098d2:	f7ff bfd3 	b.w	800987c <_raise_r>
 80098d6:	bf00      	nop
 80098d8:	20000028 	.word	0x20000028

080098dc <_kill_r>:
 80098dc:	b538      	push	{r3, r4, r5, lr}
 80098de:	4d07      	ldr	r5, [pc, #28]	@ (80098fc <_kill_r+0x20>)
 80098e0:	2300      	movs	r3, #0
 80098e2:	4604      	mov	r4, r0
 80098e4:	4608      	mov	r0, r1
 80098e6:	4611      	mov	r1, r2
 80098e8:	602b      	str	r3, [r5, #0]
 80098ea:	f7f7 ff71 	bl	80017d0 <_kill>
 80098ee:	1c43      	adds	r3, r0, #1
 80098f0:	d102      	bne.n	80098f8 <_kill_r+0x1c>
 80098f2:	682b      	ldr	r3, [r5, #0]
 80098f4:	b103      	cbz	r3, 80098f8 <_kill_r+0x1c>
 80098f6:	6023      	str	r3, [r4, #0]
 80098f8:	bd38      	pop	{r3, r4, r5, pc}
 80098fa:	bf00      	nop
 80098fc:	200004d4 	.word	0x200004d4

08009900 <_getpid_r>:
 8009900:	f7f7 bf5e 	b.w	80017c0 <_getpid>

08009904 <_malloc_usable_size_r>:
 8009904:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009908:	1f18      	subs	r0, r3, #4
 800990a:	2b00      	cmp	r3, #0
 800990c:	bfbc      	itt	lt
 800990e:	580b      	ldrlt	r3, [r1, r0]
 8009910:	18c0      	addlt	r0, r0, r3
 8009912:	4770      	bx	lr

08009914 <__swhatbuf_r>:
 8009914:	b570      	push	{r4, r5, r6, lr}
 8009916:	460c      	mov	r4, r1
 8009918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800991c:	2900      	cmp	r1, #0
 800991e:	b096      	sub	sp, #88	@ 0x58
 8009920:	4615      	mov	r5, r2
 8009922:	461e      	mov	r6, r3
 8009924:	da0d      	bge.n	8009942 <__swhatbuf_r+0x2e>
 8009926:	89a3      	ldrh	r3, [r4, #12]
 8009928:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800992c:	f04f 0100 	mov.w	r1, #0
 8009930:	bf14      	ite	ne
 8009932:	2340      	movne	r3, #64	@ 0x40
 8009934:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009938:	2000      	movs	r0, #0
 800993a:	6031      	str	r1, [r6, #0]
 800993c:	602b      	str	r3, [r5, #0]
 800993e:	b016      	add	sp, #88	@ 0x58
 8009940:	bd70      	pop	{r4, r5, r6, pc}
 8009942:	466a      	mov	r2, sp
 8009944:	f000 f848 	bl	80099d8 <_fstat_r>
 8009948:	2800      	cmp	r0, #0
 800994a:	dbec      	blt.n	8009926 <__swhatbuf_r+0x12>
 800994c:	9901      	ldr	r1, [sp, #4]
 800994e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009952:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009956:	4259      	negs	r1, r3
 8009958:	4159      	adcs	r1, r3
 800995a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800995e:	e7eb      	b.n	8009938 <__swhatbuf_r+0x24>

08009960 <__smakebuf_r>:
 8009960:	898b      	ldrh	r3, [r1, #12]
 8009962:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009964:	079d      	lsls	r5, r3, #30
 8009966:	4606      	mov	r6, r0
 8009968:	460c      	mov	r4, r1
 800996a:	d507      	bpl.n	800997c <__smakebuf_r+0x1c>
 800996c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009970:	6023      	str	r3, [r4, #0]
 8009972:	6123      	str	r3, [r4, #16]
 8009974:	2301      	movs	r3, #1
 8009976:	6163      	str	r3, [r4, #20]
 8009978:	b003      	add	sp, #12
 800997a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800997c:	ab01      	add	r3, sp, #4
 800997e:	466a      	mov	r2, sp
 8009980:	f7ff ffc8 	bl	8009914 <__swhatbuf_r>
 8009984:	9f00      	ldr	r7, [sp, #0]
 8009986:	4605      	mov	r5, r0
 8009988:	4639      	mov	r1, r7
 800998a:	4630      	mov	r0, r6
 800998c:	f7fd fbd4 	bl	8007138 <_malloc_r>
 8009990:	b948      	cbnz	r0, 80099a6 <__smakebuf_r+0x46>
 8009992:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009996:	059a      	lsls	r2, r3, #22
 8009998:	d4ee      	bmi.n	8009978 <__smakebuf_r+0x18>
 800999a:	f023 0303 	bic.w	r3, r3, #3
 800999e:	f043 0302 	orr.w	r3, r3, #2
 80099a2:	81a3      	strh	r3, [r4, #12]
 80099a4:	e7e2      	b.n	800996c <__smakebuf_r+0xc>
 80099a6:	89a3      	ldrh	r3, [r4, #12]
 80099a8:	6020      	str	r0, [r4, #0]
 80099aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099ae:	81a3      	strh	r3, [r4, #12]
 80099b0:	9b01      	ldr	r3, [sp, #4]
 80099b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80099b6:	b15b      	cbz	r3, 80099d0 <__smakebuf_r+0x70>
 80099b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099bc:	4630      	mov	r0, r6
 80099be:	f000 f81d 	bl	80099fc <_isatty_r>
 80099c2:	b128      	cbz	r0, 80099d0 <__smakebuf_r+0x70>
 80099c4:	89a3      	ldrh	r3, [r4, #12]
 80099c6:	f023 0303 	bic.w	r3, r3, #3
 80099ca:	f043 0301 	orr.w	r3, r3, #1
 80099ce:	81a3      	strh	r3, [r4, #12]
 80099d0:	89a3      	ldrh	r3, [r4, #12]
 80099d2:	431d      	orrs	r5, r3
 80099d4:	81a5      	strh	r5, [r4, #12]
 80099d6:	e7cf      	b.n	8009978 <__smakebuf_r+0x18>

080099d8 <_fstat_r>:
 80099d8:	b538      	push	{r3, r4, r5, lr}
 80099da:	4d07      	ldr	r5, [pc, #28]	@ (80099f8 <_fstat_r+0x20>)
 80099dc:	2300      	movs	r3, #0
 80099de:	4604      	mov	r4, r0
 80099e0:	4608      	mov	r0, r1
 80099e2:	4611      	mov	r1, r2
 80099e4:	602b      	str	r3, [r5, #0]
 80099e6:	f7f7 ff53 	bl	8001890 <_fstat>
 80099ea:	1c43      	adds	r3, r0, #1
 80099ec:	d102      	bne.n	80099f4 <_fstat_r+0x1c>
 80099ee:	682b      	ldr	r3, [r5, #0]
 80099f0:	b103      	cbz	r3, 80099f4 <_fstat_r+0x1c>
 80099f2:	6023      	str	r3, [r4, #0]
 80099f4:	bd38      	pop	{r3, r4, r5, pc}
 80099f6:	bf00      	nop
 80099f8:	200004d4 	.word	0x200004d4

080099fc <_isatty_r>:
 80099fc:	b538      	push	{r3, r4, r5, lr}
 80099fe:	4d06      	ldr	r5, [pc, #24]	@ (8009a18 <_isatty_r+0x1c>)
 8009a00:	2300      	movs	r3, #0
 8009a02:	4604      	mov	r4, r0
 8009a04:	4608      	mov	r0, r1
 8009a06:	602b      	str	r3, [r5, #0]
 8009a08:	f7f7 ff52 	bl	80018b0 <_isatty>
 8009a0c:	1c43      	adds	r3, r0, #1
 8009a0e:	d102      	bne.n	8009a16 <_isatty_r+0x1a>
 8009a10:	682b      	ldr	r3, [r5, #0]
 8009a12:	b103      	cbz	r3, 8009a16 <_isatty_r+0x1a>
 8009a14:	6023      	str	r3, [r4, #0]
 8009a16:	bd38      	pop	{r3, r4, r5, pc}
 8009a18:	200004d4 	.word	0x200004d4

08009a1c <_init>:
 8009a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a1e:	bf00      	nop
 8009a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a22:	bc08      	pop	{r3}
 8009a24:	469e      	mov	lr, r3
 8009a26:	4770      	bx	lr

08009a28 <_fini>:
 8009a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a2a:	bf00      	nop
 8009a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a2e:	bc08      	pop	{r3}
 8009a30:	469e      	mov	lr, r3
 8009a32:	4770      	bx	lr
